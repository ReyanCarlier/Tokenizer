{
	"id": "dbb324ef03b2163a483451dd7c1caef3",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.22",
	"solcLongVersion": "0.8.22+commit.4fc1097e",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/MyToken.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\ncontract MyToken is Initializable, ERC20Upgradeable, ERC20BurnableUpgradeable, ERC20PausableUpgradeable, OwnableUpgradeable, ERC20PermitUpgradeable {\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(address initialOwner) initializer public {\n        __ERC20_init(\"42TOKENIZER\", \"42TOK\");\n        __ERC20Burnable_init();\n        __ERC20Pausable_init();\n        __Ownable_init(initialOwner);\n        __ERC20Permit_init(\"42TOKENIZER\");\n    }\n\n    function pause() public onlyOwner {\n        _pause();\n    }\n\n    function unpause() public onlyOwner {\n        _unpause();\n    }\n\n    function mint(address to, uint256 amount) public onlyOwner {\n        _mint(to, amount);\n    }\n\n    // The following functions are overrides required by Solidity.\n\n    function _update(address from, address to, uint256 value)\n        internal\n        override(ERC20Upgradeable, ERC20PausableUpgradeable)\n    {\n        super._update(from, to, value);\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20Permit} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\";\nimport {ERC20Upgradeable} from \"../ERC20Upgradeable.sol\";\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport {EIP712Upgradeable} from \"../../../utils/cryptography/EIP712Upgradeable.sol\";\nimport {NoncesUpgradeable} from \"../../../utils/NoncesUpgradeable.sol\";\nimport {Initializable} from \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20Permit, EIP712Upgradeable, NoncesUpgradeable {\n    bytes32 private constant PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Permit deadline has expired.\n     */\n    error ERC2612ExpiredSignature(uint256 deadline);\n\n    /**\n     * @dev Mismatched signature.\n     */\n    error ERC2612InvalidSigner(address signer, address owner);\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\n        __EIP712_init_unchained(name, \"1\");\n    }\n\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        if (block.timestamp > deadline) {\n            revert ERC2612ExpiredSignature(deadline);\n        }\n\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        if (signer != owner) {\n            revert ERC2612InvalidSigner(signer, owner);\n        }\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function nonces(address owner) public view virtual override(IERC20Permit, NoncesUpgradeable) returns (uint256) {\n        return super.nonces(owner);\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\n    struct OwnableStorage {\n        address _owner;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Ownable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\n\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\n        assembly {\n            $.slot := OwnableStorageLocation\n        }\n    }\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\n        __Ownable_init_unchained(initialOwner);\n    }\n\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        OwnableStorage storage $ = _getOwnableStorage();\n        return $._owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        OwnableStorage storage $ = _getOwnableStorage();\n        address oldOwner = $._owner;\n        $._owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC20Upgradeable} from \"../ERC20Upgradeable.sol\";\nimport {PausableUpgradeable} from \"../../../utils/PausableUpgradeable.sol\";\nimport {Initializable} from \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev ERC20 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n *\n * IMPORTANT: This contract does not include public pause and unpause functions. In\n * addition to inheriting this contract, you must define both functions, invoking the\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\n * make the contract pause mechanism of the contract unreachable, and thus unusable.\n */\nabstract contract ERC20PausableUpgradeable is Initializable, ERC20Upgradeable, PausableUpgradeable {\n    function __ERC20Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __ERC20Pausable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {ERC20-_update}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _update(address from, address to, uint256 value) internal virtual override whenNotPaused {\n        super._update(from, to, value);\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC20Upgradeable} from \"../ERC20Upgradeable.sol\";\nimport {ContextUpgradeable} from \"../../../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\n    function __ERC20Burnable_init() internal onlyInitializing {\n    }\n\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Destroys a `value` amount of tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 value) public virtual {\n        _burn(_msgSender(), value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\n     * the caller's allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `value`.\n     */\n    function burnFrom(address account, uint256 value) public virtual {\n        _spendAllowance(account, _msgSender(), value);\n        _burn(account, value);\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {ContextUpgradeable} from \"../../utils/ContextUpgradeable.sol\";\nimport {IERC20Errors} from \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20, IERC20Metadata, IERC20Errors {\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\n    struct ERC20Storage {\n        mapping(address account => uint256) _balances;\n\n        mapping(address account => mapping(address spender => uint256)) _allowances;\n\n        uint256 _totalSupply;\n\n        string _name;\n        string _symbol;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ERC20\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\n\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\n        assembly {\n            $.slot := ERC20StorageLocation\n        }\n    }\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        ERC20Storage storage $ = _getERC20Storage();\n        $._name = name_;\n        $._symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            $._totalSupply += value;\n        } else {\n            uint256 fromBalance = $._balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                $._balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                $._totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                $._balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        $._allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\n */\nabstract contract NoncesUpgradeable is Initializable {\n    /**\n     * @dev The nonce used for an `account` is not the expected current nonce.\n     */\n    error InvalidAccountNonce(address account, uint256 currentNonce);\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.Nonces\n    struct NoncesStorage {\n        mapping(address account => uint256) _nonces;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Nonces\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant NoncesStorageLocation = 0x5ab42ced628888259c08ac98db1eb0cf702fc1501344311d8b100cd1bfe4bb00;\n\n    function _getNoncesStorage() private pure returns (NoncesStorage storage $) {\n        assembly {\n            $.slot := NoncesStorageLocation\n        }\n    }\n\n    function __Nonces_init() internal onlyInitializing {\n    }\n\n    function __Nonces_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Returns the next unused nonce for an address.\n     */\n    function nonces(address owner) public view virtual returns (uint256) {\n        NoncesStorage storage $ = _getNoncesStorage();\n        return $._nonces[owner];\n    }\n\n    /**\n     * @dev Consumes a nonce.\n     *\n     * Returns the current value and increments nonce.\n     */\n    function _useNonce(address owner) internal virtual returns (uint256) {\n        NoncesStorage storage $ = _getNoncesStorage();\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\n        // decremented or reset. This guarantees that the nonce never overflows.\n        unchecked {\n            // It is important to do x++ and not ++x here.\n            return $._nonces[owner]++;\n        }\n    }\n\n    /**\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\n     */\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\n        uint256 current = _useNonce(owner);\n        if (nonce != current) {\n            revert InvalidAccountNonce(owner, current);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.20;\n\nimport {MessageHashUtils} from \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\";\nimport {IERC5267} from \"@openzeppelin/contracts/interfaces/IERC5267.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n */\nabstract contract EIP712Upgradeable is Initializable, IERC5267 {\n    bytes32 private constant TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.EIP712\n    struct EIP712Storage {\n        /// @custom:oz-renamed-from _HASHED_NAME\n        bytes32 _hashedName;\n        /// @custom:oz-renamed-from _HASHED_VERSION\n        bytes32 _hashedVersion;\n\n        string _name;\n        string _version;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.EIP712\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant EIP712StorageLocation = 0xa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d100;\n\n    function _getEIP712Storage() private pure returns (EIP712Storage storage $) {\n        assembly {\n            $.slot := EIP712StorageLocation\n        }\n    }\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\n        EIP712Storage storage $ = _getEIP712Storage();\n        $._name = name;\n        $._version = version;\n\n        // Reset prior values in storage if upgrading\n        $._hashedName = 0;\n        $._hashedVersion = 0;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator();\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {IERC-5267}.\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        EIP712Storage storage $ = _getEIP712Storage();\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\n        require($._hashedName == 0 && $._hashedVersion == 0, \"EIP712: Uninitialized\");\n\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n\n    /**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712Name() internal view virtual returns (string memory) {\n        EIP712Storage storage $ = _getEIP712Storage();\n        return $._name;\n    }\n\n    /**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712Version() internal view virtual returns (string memory) {\n        EIP712Storage storage $ = _getEIP712Storage();\n        return $._version;\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\n     */\n    function _EIP712NameHash() internal view returns (bytes32) {\n        EIP712Storage storage $ = _getEIP712Storage();\n        string memory name = _EIP712Name();\n        if (bytes(name).length > 0) {\n            return keccak256(bytes(name));\n        } else {\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\n            bytes32 hashedName = $._hashedName;\n            if (hashedName != 0) {\n                return hashedName;\n            } else {\n                return keccak256(\"\");\n            }\n        }\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\n     */\n    function _EIP712VersionHash() internal view returns (bytes32) {\n        EIP712Storage storage $ = _getEIP712Storage();\n        string memory version = _EIP712Version();\n        if (bytes(version).length > 0) {\n            return keccak256(bytes(version));\n        } else {\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\n            bytes32 hashedVersion = $._hashedVersion;\n            if (hashedVersion != 0) {\n                return hashedVersion;\n            } else {\n                return keccak256(\"\");\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\n    struct PausableStorage {\n        bool _paused;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Pausable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\n\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\n        assembly {\n            $.slot := PausableStorageLocation\n        }\n    }\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        PausableStorage storage $ = _getPausableStorage();\n        return $._paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/interfaces/IERC5267.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.20;\n\ninterface IERC5267 {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"
			},
			"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\n\npragma solidity ^0.8.20;\n\nimport {Strings} from \"../Strings.sol\";\n\n/**\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n *\n * The library provides methods for generating a hash of a message that conforms to the\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n * specifications.\n */\nlibrary MessageHashUtils {\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\n     * `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n     * keccak256, although any bytes32 value can be safely used because the final digest will\n     * be re-hashed.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") // 32 is the bytes-length of messageHash\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing an arbitrary `message` with\n     * `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\n        return\n            keccak256(bytes.concat(\"\\x19Ethereum Signed Message:\\n\", bytes(Strings.toString(message.length)), message));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x00` (data with intended validator).\n     *\n     * The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n     * `validator` address. Then hashing the result.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(hex\"19_00\", validator, data));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n     *\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, hex\"19_01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            digest := keccak256(ptr, 0x42)\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/math/SignedMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"OwnableUpgradeable": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"errors": {
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							],
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"events": {
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9706d43a0124053d9880f6e31a59f31bc0a6a3dc1acd66ce0a16e1111658c5f6\",\"dweb:/ipfs/QmUFmfowzkRwGtDu36cXV9SPTBHJ3n7dG9xQiK5B28jTf2\"]},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609\",\"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"Initializable": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"custom:oz-upgrades-unsafe-allow": "constructor constructor() {     _disableInitializers(); } ``` ====",
						"details": "This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```",
						"errors": {
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							]
						},
						"events": {
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609\",\"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
				"ERC20Upgradeable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":\"ERC20Upgradeable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609\",\"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0x9a1766b1921bf91b3e61eb53c7a6e70725254befd4bdcbbcd3af40bd9f66856f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://29bf2fa41a172086a665c9738377b93655aa4b1ffda9fe839c8bdf646f185040\",\"dweb:/ipfs/QmeB21qDuo8WPQSrqXJbQmWHKsdeocGNSUWLhCwniVejrt\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol": {
				"ERC20BurnableUpgradeable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "burnFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"burn(uint256)": {
								"details": "Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}."
							},
							"burnFrom(address,uint256)": {
								"details": "Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"burnFrom(address,uint256)": "79cc6790",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":\"ERC20BurnableUpgradeable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609\",\"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0x9a1766b1921bf91b3e61eb53c7a6e70725254befd4bdcbbcd3af40bd9f66856f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://29bf2fa41a172086a665c9738377b93655aa4b1ffda9fe839c8bdf646f185040\",\"dweb:/ipfs/QmeB21qDuo8WPQSrqXJbQmWHKsdeocGNSUWLhCwniVejrt\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"keccak256\":\"0xe74dd150d031e8ecf9755893a2aae02dec954158140424f11c28ff689a48492f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://554e0934aecff6725e10d4aeb2e70ff214384b68782b1ba9f9322a0d16105a2f\",\"dweb:/ipfs/QmVvmHc7xPftEkWvJRNAqv7mXihKLEAVXpiebG7RT5rhMW\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol": {
				"ERC20PausableUpgradeable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "EnforcedPause",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ExpectedPause",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "ERC20 token with pausable token transfers, minting and burning. Useful for scenarios such as preventing trades until the end of an evaluation period, or having an emergency switch for freezing all token transfers in the event of a large bug. IMPORTANT: This contract does not include public pause and unpause functions. In addition to inheriting this contract, you must define both functions, invoking the {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate access control, e.g. using {AccessControl} or {Ownable}. Not doing so will make the contract pause mechanism of the contract unreachable, and thus unusable.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"EnforcedPause()": [
								{
									"details": "The operation failed because the contract is paused."
								}
							],
							"ExpectedPause()": [
								{
									"details": "The operation failed because the contract is not paused."
								}
							],
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							},
							"Paused(address)": {
								"details": "Emitted when the pause is triggered by `account`."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							},
							"Unpaused(address)": {
								"details": "Emitted when the pause is lifted by `account`."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"paused()": "5c975abb",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC20 token with pausable token transfers, minting and burning. Useful for scenarios such as preventing trades until the end of an evaluation period, or having an emergency switch for freezing all token transfers in the event of a large bug. IMPORTANT: This contract does not include public pause and unpause functions. In addition to inheriting this contract, you must define both functions, invoking the {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate access control, e.g. using {AccessControl} or {Ownable}. Not doing so will make the contract pause mechanism of the contract unreachable, and thus unusable.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol\":\"ERC20PausableUpgradeable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609\",\"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0x9a1766b1921bf91b3e61eb53c7a6e70725254befd4bdcbbcd3af40bd9f66856f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://29bf2fa41a172086a665c9738377b93655aa4b1ffda9fe839c8bdf646f185040\",\"dweb:/ipfs/QmeB21qDuo8WPQSrqXJbQmWHKsdeocGNSUWLhCwniVejrt\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol\":{\"keccak256\":\"0xf31761e4cd0b20c33a04e8cfa21d3b40f0a18dd26f66f97686f87668ab5ba8f3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8be0ae676c129bb8ee94e32f075f5d017b257c09e02f3ed6c830ec5b9ca6e666\",\"dweb:/ipfs/QmeaPYo4t3XaAK8bbxkjTT3bTKQZHUXVadjysSfz5cuUbX\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://85ad36d5cc7e190e1ee6c94b24659bc3a31396c4c36b6ffa6a509e10661f8007\",\"dweb:/ipfs/QmPFyc4zMh2zo6YWZt25gjm3YdR2hg6wGETaWw256fMmJJ\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol": {
				"ERC20PermitUpgradeable": {
					"abi": [
						{
							"inputs": [],
							"name": "ECDSAInvalidSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "ECDSAInvalidSignatureLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "ECDSAInvalidSignatureS",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "ERC2612ExpiredSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "signer",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC2612InvalidSigner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentNonce",
									"type": "uint256"
								}
							],
							"name": "InvalidAccountNonce",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.",
						"errors": {
							"ECDSAInvalidSignature()": [
								{
									"details": "The signature derives the `address(0)`."
								}
							],
							"ECDSAInvalidSignatureLength(uint256)": [
								{
									"details": "The signature has an invalid length."
								}
							],
							"ECDSAInvalidSignatureS(bytes32)": [
								{
									"details": "The signature has an S value that is in the upper half order."
								}
							],
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC2612ExpiredSignature(uint256)": [
								{
									"details": "Permit deadline has expired."
								}
							],
							"ERC2612InvalidSigner(address,address)": [
								{
									"details": "Mismatched signature."
								}
							],
							"InvalidAccountNonce(address,uint256)": [
								{
									"details": "The nonce used for an `account` is not the expected current nonce."
								}
							],
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							},
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"eip712Domain()": {
								"details": "See {IERC-5267}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"eip712Domain()": "84b0196e",
							"name()": "06fdde03",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC2612ExpiredSignature(uint256)\":[{\"details\":\"Permit deadline has expired.\"}],\"ERC2612InvalidSigner(address,address)\":[{\"details\":\"Mismatched signature.\"}],\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":\"ERC20PermitUpgradeable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609\",\"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0x9a1766b1921bf91b3e61eb53c7a6e70725254befd4bdcbbcd3af40bd9f66856f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://29bf2fa41a172086a665c9738377b93655aa4b1ffda9fe839c8bdf646f185040\",\"dweb:/ipfs/QmeB21qDuo8WPQSrqXJbQmWHKsdeocGNSUWLhCwniVejrt\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":{\"keccak256\":\"0x8a97653aeba40e9f0c2e8df1a1379b29b927b6dc3534040c668e71ad9ae89d88\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e529c294c9d634eb68a1e4aeb66eb8381de5a08ccd2c0bfeebd48a6b28fcff7\",\"dweb:/ipfs/QmWCezuxfZb68nM3Hs6XzQNNiW7VJsymU4sajy2DW1CKbp\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]},\"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":{\"keccak256\":\"0x778f4a1546a1c6c726ecc8e2348a2789690fb8f26e12bd9d89537669167b79a4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://851d3dfe724e918ff0a064b206e1ef46b27ab0df2aa2c8af976973a22ef59827\",\"dweb:/ipfs/Qmd4wb7zX8ueYhMVBy5PJjfsANK3Ra3pKPN7qQkNsdwGHn\"]},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"keccak256\":\"0x85462422a22578744581e012e9aa0a391958cb360288b0b63f29bf0431d70327\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2bc529e2b9b28da5d26da451058250d85afcaa3c5083ee273ac68fa6bf956b78\",\"dweb:/ipfs/Qmd3Aq59ztmoVmHigsaR4YjkXWKERVpjfQ4a2PHk7Ke6Rx\"]},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c\",\"dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF\"]},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ceacff44c0fdc81e48e0e0b1db87a2076d3c1fb497341de077bf1da9f6b406c\",\"dweb:/ipfs/QmRUo1muMRAewxrKQ7TkXUtknyRoR57AyEkoPpiuZQ8FzX\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"ContextUpgradeable": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"errors": {
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							]
						},
						"events": {
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609\",\"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol": {
				"NoncesUpgradeable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentNonce",
									"type": "uint256"
								}
							],
							"name": "InvalidAccountNonce",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Provides tracking nonces for addresses. Nonces will only increment.",
						"errors": {
							"InvalidAccountNonce(address,uint256)": [
								{
									"details": "The nonce used for an `account` is not the expected current nonce."
								}
							],
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							]
						},
						"events": {
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {
							"nonces(address)": {
								"details": "Returns the next unused nonce for an address."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"nonces(address)": "7ecebe00"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Provides tracking nonces for addresses. Nonces will only increment.\",\"errors\":{\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"nonces(address)\":{\"details\":\"Returns the next unused nonce for an address.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":\"NoncesUpgradeable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609\",\"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM\"]},\"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":{\"keccak256\":\"0x778f4a1546a1c6c726ecc8e2348a2789690fb8f26e12bd9d89537669167b79a4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://851d3dfe724e918ff0a064b206e1ef46b27ab0df2aa2c8af976973a22ef59827\",\"dweb:/ipfs/Qmd4wb7zX8ueYhMVBy5PJjfsANK3Ra3pKPN7qQkNsdwGHn\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol": {
				"PausableUpgradeable": {
					"abi": [
						{
							"inputs": [],
							"name": "EnforcedPause",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ExpectedPause",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.",
						"errors": {
							"EnforcedPause()": [
								{
									"details": "The operation failed because the contract is paused."
								}
							],
							"ExpectedPause()": [
								{
									"details": "The operation failed because the contract is not paused."
								}
							],
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							]
						},
						"events": {
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							},
							"Paused(address)": {
								"details": "Emitted when the pause is triggered by `account`."
							},
							"Unpaused(address)": {
								"details": "Emitted when the pause is lifted by `account`."
							}
						},
						"kind": "dev",
						"methods": {
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"paused()": "5c975abb"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":\"PausableUpgradeable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609\",\"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://85ad36d5cc7e190e1ee6c94b24659bc3a31396c4c36b6ffa6a509e10661f8007\",\"dweb:/ipfs/QmPFyc4zMh2zo6YWZt25gjm3YdR2hg6wGETaWw256fMmJJ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol": {
				"EIP712Upgradeable": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to produce the hash of their typed data using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the separator from the immutable values, which is cheaper than accessing a cached version in cold storage.",
						"errors": {
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							]
						},
						"events": {
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							},
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {
							"eip712Domain()": {
								"details": "See {IERC-5267}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"eip712Domain()": "84b0196e"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to produce the hash of their typed data using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":\"EIP712Upgradeable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609\",\"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM\"]},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"keccak256\":\"0x85462422a22578744581e012e9aa0a391958cb360288b0b63f29bf0431d70327\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2bc529e2b9b28da5d26da451058250d85afcaa3c5083ee273ac68fa6bf956b78\",\"dweb:/ipfs/Qmd3Aq59ztmoVmHigsaR4YjkXWKERVpjfQ4a2PHk7Ke6Rx\"]},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ceacff44c0fdc81e48e0e0b1db87a2076d3c1fb497341de077bf1da9f6b406c\",\"dweb:/ipfs/QmRUo1muMRAewxrKQ7TkXUtknyRoR57AyEkoPpiuZQ8FzX\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/interfaces/IERC5267.sol": {
				"IERC5267": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							}
						},
						"kind": "dev",
						"methods": {
							"eip712Domain()": {
								"details": "returns the fields and values that describe the domain separator used by this contract for EIP-712 signature."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"eip712Domain()": "84b0196e"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"eip712Domain()\":{\"details\":\"returns the fields and values that describe the domain separator used by this contract for EIP-712 signature.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":\"IERC5267\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"IERC1155Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC1155InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "idsLength",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "valuesLength",
									"type": "uint256"
								}
							],
							"name": "ERC1155InvalidArrayLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC1155MissingApprovalForAll",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.",
						"errors": {
							"ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC1155InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC1155InvalidArrayLength(uint256,uint256)": [
								{
									"details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
									"params": {
										"idsLength": "Length of the array of token identifiers",
										"valuesLength": "Length of the array of token amounts"
									}
								}
							],
							"ERC1155InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC1155InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC1155InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC1155MissingApprovalForAll(address,address)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"owner": "Address of the current owner of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC20Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC721Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721IncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721InsufficientApproval",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC721InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721NonexistentToken",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.",
						"errors": {
							"ERC721IncorrectOwner(address,uint256,address)": [
								{
									"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
									"params": {
										"owner": "Address of the current owner of a token.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InsufficientApproval(address,uint256)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC721InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC721InvalidOwner(address)": [
								{
									"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
									"params": {
										"owner": "Address of the current owner of a token."
									}
								}
							],
							"ERC721InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC721InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC721NonexistentToken(uint256)": [
								{
									"details": "Indicates a `tokenId` whose `owner` is the zero address.",
									"params": {
										"tokenId": "Identifier number of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"Strings": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "StringsInsufficientHexLength",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "String operations.",
						"errors": {
							"StringsInsufficientHexLength(uint256,uint256)": [
								{
									"details": "The `value` string doesn't fit in the specified `length`."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Strings.sol\":251:3098  library Strings {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":251:3098  library Strings {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212204c7584b6a38e353dc92fe4869a4baaa25214f6dbe08eb5bdda91374e4277352a64736f6c63430008160033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212204c7584b6a38e353dc92fe4869a4baaa25214f6dbe08eb5bdda91374e4277352a64736f6c63430008160033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4C PUSH22 0x84B6A38E353DC92FE4869A4BAAA25214F6DBE08EB5BD 0xDA SWAP2 CALLDATACOPY 0x4E TIMESTAMP PUSH24 0x352A64736F6C634300081600330000000000000000000000 ",
							"sourceMap": "251:2847:15:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212204c7584b6a38e353dc92fe4869a4baaa25214f6dbe08eb5bdda91374e4277352a64736f6c63430008160033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4C PUSH22 0x84B6A38E353DC92FE4869A4BAAA25214F6DBE08EB5BD 0xDA SWAP2 CALLDATACOPY 0x4E TIMESTAMP PUSH24 0x352A64736F6C634300081600330000000000000000000000 ",
							"sourceMap": "251:2847:15:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"equal(string memory,string memory)": "infinite",
								"toHexString(address)": "infinite",
								"toHexString(uint256)": "infinite",
								"toHexString(uint256,uint256)": "infinite",
								"toString(uint256)": "infinite",
								"toStringSigned(int256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH #[$]",
									"source": 15,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH [$]",
									"source": 15,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 15,
									"value": "B"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "CODECOPY",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP1",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "MLOAD",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "BYTE",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 15,
									"value": "73"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "EQ",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH [tag]",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "JUMPI",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 15,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 15,
									"value": "4"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 15,
									"value": "24"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "REVERT",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "tag",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "JUMPDEST",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "ADDRESS",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 15,
									"value": "73"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "MSTORE8",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "RETURN",
									"source": 15
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212204c7584b6a38e353dc92fe4869a4baaa25214f6dbe08eb5bdda91374e4277352a64736f6c63430008160033",
									".code": [
										{
											"begin": 251,
											"end": 3098,
											"name": "PUSHDEPLOYADDRESS",
											"source": 15
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "ADDRESS",
											"source": 15
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "EQ",
											"source": 15
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "PUSH",
											"source": 15,
											"value": "80"
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "REVERT",
											"source": 15
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/MyToken.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"String operations.\",\"errors\":{\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
				"ECDSA": {
					"abi": [
						{
							"inputs": [],
							"name": "ECDSAInvalidSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "ECDSAInvalidSignatureLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "ECDSAInvalidSignatureS",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.",
						"errors": {
							"ECDSAInvalidSignature()": [
								{
									"details": "The signature derives the `address(0)`."
								}
							],
							"ECDSAInvalidSignatureLength(uint256)": [
								{
									"details": "The signature has an invalid length."
								}
							],
							"ECDSAInvalidSignatureS(bytes32)": [
								{
									"details": "The signature has an S value that is in the upper half order."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":344:7730  library ECDSA {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":344:7730  library ECDSA {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220999867a3e717d665115950a00fd366e57cfb817888fbd774d18052318887fcbb64736f6c63430008160033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220999867a3e717d665115950a00fd366e57cfb817888fbd774d18052318887fcbb64736f6c63430008160033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP10 SWAP9 PUSH8 0xA3E717D665115950 LOG0 0xF 0xD3 PUSH7 0xE57CFB817888FB 0xD7 PUSH21 0xD18052318887FCBB64736F6C634300081600330000 ",
							"sourceMap": "344:7386:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220999867a3e717d665115950a00fd366e57cfb817888fbd774d18052318887fcbb64736f6c63430008160033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP10 SWAP9 PUSH8 0xA3E717D665115950 LOG0 0xF 0xD3 PUSH7 0xE57CFB817888FB 0xD7 PUSH21 0xD18052318887FCBB64736F6C634300081600330000 ",
							"sourceMap": "344:7386:16:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"_throwError(enum ECDSA.RecoverError,bytes32)": "infinite",
								"recover(bytes32,bytes memory)": "infinite",
								"recover(bytes32,bytes32,bytes32)": "infinite",
								"recover(bytes32,uint8,bytes32,bytes32)": "infinite",
								"tryRecover(bytes32,bytes memory)": "infinite",
								"tryRecover(bytes32,bytes32,bytes32)": "infinite",
								"tryRecover(bytes32,uint8,bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH #[$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH [$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 16,
									"value": "B"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "CODECOPY",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "BYTE",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 16,
									"value": "73"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "EQ",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 16,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 16,
									"value": "4"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 16,
									"value": "24"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "REVERT",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "tag",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "ADDRESS",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 16,
									"value": "73"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "MSTORE8",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "RETURN",
									"source": 16
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220999867a3e717d665115950a00fd366e57cfb817888fbd774d18052318887fcbb64736f6c63430008160033",
									".code": [
										{
											"begin": 344,
											"end": 7730,
											"name": "PUSHDEPLOYADDRESS",
											"source": 16
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "ADDRESS",
											"source": 16
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "REVERT",
											"source": 16
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/MyToken.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c\",\"dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
				"MessageHashUtils": {
					"abi": [],
					"devdoc": {
						"details": "Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing. The library provides methods for generating a hash of a message that conforms to the https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712] specifications.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":521:3756  library MessageHashUtils {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":521:3756  library MessageHashUtils {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122047bfc7672f5a75689578304a270281d0b4d26df34951a18aa34efeb72802872764736f6c63430008160033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122047bfc7672f5a75689578304a270281d0b4d26df34951a18aa34efeb72802872764736f6c63430008160033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFBALANCE 0xBF 0xC7 PUSH8 0x2F5A75689578304A 0x27 MUL DUP2 0xD0 0xB4 0xD2 PUSH14 0xF34951A18AA34EFEB72802872764 PUSH20 0x6F6C634300081600330000000000000000000000 ",
							"sourceMap": "521:3235:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122047bfc7672f5a75689578304a270281d0b4d26df34951a18aa34efeb72802872764736f6c63430008160033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFBALANCE 0xBF 0xC7 PUSH8 0x2F5A75689578304A 0x27 MUL DUP2 0xD0 0xB4 0xD2 PUSH14 0xF34951A18AA34EFEB72802872764 PUSH20 0x6F6C634300081600330000000000000000000000 ",
							"sourceMap": "521:3235:17:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"toDataWithIntendedValidatorHash(address,bytes memory)": "infinite",
								"toEthSignedMessageHash(bytes memory)": "infinite",
								"toEthSignedMessageHash(bytes32)": "infinite",
								"toTypedDataHash(bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH #[$]",
									"source": 17,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH [$]",
									"source": 17,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 17,
									"value": "B"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "CODECOPY",
									"source": 17
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "BYTE",
									"source": 17
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 17,
									"value": "73"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "EQ",
									"source": 17
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 17,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 17,
									"value": "4"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 17,
									"value": "24"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "REVERT",
									"source": 17
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "tag",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "ADDRESS",
									"source": 17
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 17,
									"value": "73"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "MSTORE8",
									"source": 17
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "RETURN",
									"source": 17
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122047bfc7672f5a75689578304a270281d0b4d26df34951a18aa34efeb72802872764736f6c63430008160033",
									".code": [
										{
											"begin": 521,
											"end": 3756,
											"name": "PUSHDEPLOYADDRESS",
											"source": 17
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "ADDRESS",
											"source": 17
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "PUSH",
											"source": 17,
											"value": "80"
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "REVERT",
											"source": 17
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/MyToken.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing. The library provides methods for generating a hash of a message that conforms to the https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712] specifications.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":\"MessageHashUtils\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ceacff44c0fdc81e48e0e0b1db87a2076d3c1fb497341de077bf1da9f6b406c\",\"dweb:/ipfs/QmRUo1muMRAewxrKQ7TkXUtknyRoR57AyEkoPpiuZQ8FzX\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"Math": {
					"abi": [
						{
							"inputs": [],
							"name": "MathOverflowedMulDiv",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard math utilities missing in the Solidity language.",
						"errors": {
							"MathOverflowedMulDiv()": [
								{
									"details": "Muldiv operation overflow."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/Math.sol\":203:15117  library Math {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":203:15117  library Math {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220214b0310790118ee086b8e724e4100bd9daaa7591b2d4b433cd795f53cd545df64736f6c63430008160033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220214b0310790118ee086b8e724e4100bd9daaa7591b2d4b433cd795f53cd545df64736f6c63430008160033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x21 0x4B SUB LT PUSH26 0x118EE086B8E724E4100BD9DAAA7591B2D4B433CD795F53CD545 0xDF PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ",
							"sourceMap": "203:14914:18:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220214b0310790118ee086b8e724e4100bd9daaa7591b2d4b433cd795f53cd545df64736f6c63430008160033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x21 0x4B SUB LT PUSH26 0x118EE086B8E724E4100BD9DAAA7591B2D4B433CD795F53CD545 0xDF PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ",
							"sourceMap": "203:14914:18:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"average(uint256,uint256)": "infinite",
								"ceilDiv(uint256,uint256)": "infinite",
								"log10(uint256)": "infinite",
								"log10(uint256,enum Math.Rounding)": "infinite",
								"log2(uint256)": "infinite",
								"log2(uint256,enum Math.Rounding)": "infinite",
								"log256(uint256)": "infinite",
								"log256(uint256,enum Math.Rounding)": "infinite",
								"max(uint256,uint256)": "infinite",
								"min(uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256,enum Math.Rounding)": "infinite",
								"sqrt(uint256)": "infinite",
								"sqrt(uint256,enum Math.Rounding)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite",
								"unsignedRoundsUp(enum Math.Rounding)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH #[$]",
									"source": 18,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH [$]",
									"source": 18,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 18,
									"value": "B"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "CODECOPY",
									"source": 18
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "BYTE",
									"source": 18
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 18,
									"value": "73"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "EQ",
									"source": 18
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 18,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 18,
									"value": "4"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 18,
									"value": "24"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "tag",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "ADDRESS",
									"source": 18
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 18,
									"value": "73"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE8",
									"source": 18
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "RETURN",
									"source": 18
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220214b0310790118ee086b8e724e4100bd9daaa7591b2d4b433cd795f53cd545df64736f6c63430008160033",
									".code": [
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSHDEPLOYADDRESS",
											"source": 18
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "ADDRESS",
											"source": 18
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "REVERT",
											"source": 18
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/MyToken.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"errors\":{\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/math/SignedMath.sol": {
				"SignedMath": {
					"abi": [],
					"devdoc": {
						"details": "Standard signed math utilities missing in the Solidity language.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/SignedMath.sol\":216:1263  library SignedMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/SignedMath.sol\":216:1263  library SignedMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220379b28ab96972cab7e8078502bacdcac7f4cdcd0908f5518af7bc602cd74350864736f6c63430008160033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220379b28ab96972cab7e8078502bacdcac7f4cdcd0908f5518af7bc602cd74350864736f6c63430008160033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATACOPY SWAP12 0x28 0xAB SWAP7 SWAP8 0x2C 0xAB PUSH31 0x8078502BACDCAC7F4CDCD0908F5518AF7BC602CD74350864736F6C63430008 AND STOP CALLER ",
							"sourceMap": "216:1047:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220379b28ab96972cab7e8078502bacdcac7f4cdcd0908f5518af7bc602cd74350864736f6c63430008160033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATACOPY SWAP12 0x28 0xAB SWAP7 SWAP8 0x2C 0xAB PUSH31 0x8078502BACDCAC7F4CDCD0908F5518AF7BC602CD74350864736F6C63430008 AND STOP CALLER ",
							"sourceMap": "216:1047:19:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"abs(int256)": "infinite",
								"average(int256,int256)": "infinite",
								"max(int256,int256)": "infinite",
								"min(int256,int256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH #[$]",
									"source": 19,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH [$]",
									"source": 19,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 19,
									"value": "B"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "CODECOPY",
									"source": 19
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "BYTE",
									"source": 19
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 19,
									"value": "73"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "EQ",
									"source": 19
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "1"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 19,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 19,
									"value": "4"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 19,
									"value": "24"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "REVERT",
									"source": 19
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "tag",
									"source": 19,
									"value": "1"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "ADDRESS",
									"source": 19
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 19,
									"value": "73"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "MSTORE8",
									"source": 19
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "RETURN",
									"source": 19
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220379b28ab96972cab7e8078502bacdcac7f4cdcd0908f5518af7bc602cd74350864736f6c63430008160033",
									".code": [
										{
											"begin": 216,
											"end": 1263,
											"name": "PUSHDEPLOYADDRESS",
											"source": 19
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "ADDRESS",
											"source": 19
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "PUSH",
											"source": 19,
											"value": "80"
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "REVERT",
											"source": 19
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/MyToken.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/MyToken.sol": {
				"MyToken": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "ECDSAInvalidSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "ECDSAInvalidSignatureLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "ECDSAInvalidSignatureS",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "ERC2612ExpiredSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "signer",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC2612InvalidSigner",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "EnforcedPause",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ExpectedPause",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentNonce",
									"type": "uint256"
								}
							],
							"name": "InvalidAccountNonce",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "burnFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "initialOwner",
									"type": "address"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "mint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "pause",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "unpause",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"errors": {
							"ECDSAInvalidSignature()": [
								{
									"details": "The signature derives the `address(0)`."
								}
							],
							"ECDSAInvalidSignatureLength(uint256)": [
								{
									"details": "The signature has an invalid length."
								}
							],
							"ECDSAInvalidSignatureS(bytes32)": [
								{
									"details": "The signature has an S value that is in the upper half order."
								}
							],
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC2612ExpiredSignature(uint256)": [
								{
									"details": "Permit deadline has expired."
								}
							],
							"ERC2612InvalidSigner(address,address)": [
								{
									"details": "Mismatched signature."
								}
							],
							"EnforcedPause()": [
								{
									"details": "The operation failed because the contract is paused."
								}
							],
							"ExpectedPause()": [
								{
									"details": "The operation failed because the contract is not paused."
								}
							],
							"InvalidAccountNonce(address,uint256)": [
								{
									"details": "The nonce used for an `account` is not the expected current nonce."
								}
							],
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							],
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							},
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							},
							"Paused(address)": {
								"details": "Emitted when the pause is triggered by `account`."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							},
							"Unpaused(address)": {
								"details": "Emitted when the pause is lifted by `account`."
							}
						},
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"burn(uint256)": {
								"details": "Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}."
							},
							"burnFrom(address,uint256)": {
								"details": "Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`."
							},
							"constructor": {
								"custom:oz-upgrades-unsafe-allow": "constructor"
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"eip712Domain()": {
								"details": "See {IERC-5267}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/MyToken.sol\":582:1603  contract MyToken is Initializable, ERC20Upgradeable, ERC20BurnableUpgradeable, ERC20PausableUpgradeable, OwnableUpgradeable, ERC20PermitUpgradeable {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/MyToken.sol\":789:842  constructor() {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"contracts/MyToken.sol\":813:835  _disableInitializers() */\n  tag_4\n    /* \"contracts/MyToken.sol\":813:833  _disableInitializers */\n  shl(0x20, tag_5)\n    /* \"contracts/MyToken.sol\":813:835  _disableInitializers() */\n  0x20\n  shr\n  jump\t// in\ntag_4:\n    /* \"contracts/MyToken.sol\":582:1603  contract MyToken is Initializable, ERC20Upgradeable, ERC20BurnableUpgradeable, ERC20PausableUpgradeable, OwnableUpgradeable, ERC20PermitUpgradeable {... */\n  jump(tag_6)\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7711:8133  function _disableInitializers() internal virtual {... */\ntag_5:\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7826:7856  InitializableStorage storage $ */\n  0x00\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7859:7885  _getInitializableStorage() */\n  tag_8\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7859:7883  _getInitializableStorage */\n  shl(0x20, tag_9)\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7859:7885  _getInitializableStorage() */\n  0x20\n  shr\n  jump\t// in\ntag_8:\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7826:7885  InitializableStorage storage $ = _getInitializableStorage() */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7900:7901  $ */\n  dup1\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7900:7915  $._initializing */\n  0x00\n  add\n  0x08\n  swap1\n  sload\n  swap1\n  0x0100\n  exp\n  swap1\n  div\n  0xff\n  and\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7896:7972  if ($._initializing) {... */\n  iszero\n  tag_10\n  jumpi\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7938:7961  InvalidInitialization() */\n  mload(0x40)\n  0xf92ee8a900000000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  0x04\n  add\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7896:7972  if ($._initializing) {... */\ntag_10:\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8003:8019  type(uint64).max */\n  0xffffffffffffffff\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7985:8019  $._initialized != type(uint64).max */\n  dup1\n  and\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7985:7986  $ */\n  dup2\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7985:7999  $._initialized */\n  0x00\n  add\n  0x00\n  swap1\n  sload\n  swap1\n  0x0100\n  exp\n  swap1\n  div\n  0xffffffffffffffff\n  and\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7985:8019  $._initialized != type(uint64).max */\n  0xffffffffffffffff\n  and\n  eq\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7981:8127  if ($._initialized != type(uint64).max) {... */\n  tag_11\n  jumpi\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8052:8068  type(uint64).max */\n  0xffffffffffffffff\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8035:8036  $ */\n  dup2\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8035:8049  $._initialized */\n  0x00\n  add\n  0x00\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8035:8068  $._initialized = type(uint64).max */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8087:8116  Initialized(type(uint64).max) */\n  0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8099:8115  type(uint64).max */\n  0xffffffffffffffff\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8087:8116  Initialized(type(uint64).max) */\n  mload(0x40)\n  tag_12\n  swap2\n  swap1\n  tag_13\n  jump\t// in\ntag_12:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log1\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7981:8127  if ($._initialized != type(uint64).max) {... */\ntag_11:\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7760:8133  {... */\n  pop\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7711:8133  function _disableInitializers() internal virtual {... */\n  jump\t// out\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8737:8907  function _getInitializableStorage() private pure returns (InitializableStorage storage $) {... */\ntag_9:\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8795:8825  InitializableStorage storage $ */\n  0x00\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8870:8891  INITIALIZABLE_STORAGE */\n  0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8860:8891  $.slot := INITIALIZABLE_STORAGE */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8737:8907  function _getInitializableStorage() private pure returns (InitializableStorage storage $) {... */\n  swap1\n  jump\t// out\n    /* \"#utility.yul\":7:108   */\ntag_15:\n    /* \"#utility.yul\":43:50   */\n  0x00\n    /* \"#utility.yul\":83:101   */\n  0xffffffffffffffff\n    /* \"#utility.yul\":76:81   */\n  dup3\n    /* \"#utility.yul\":72:102   */\n  and\n    /* \"#utility.yul\":61:102   */\n  swap1\n  pop\n    /* \"#utility.yul\":7:108   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":114:229   */\ntag_16:\n    /* \"#utility.yul\":199:222   */\n  tag_20\n    /* \"#utility.yul\":216:221   */\n  dup2\n    /* \"#utility.yul\":199:222   */\n  tag_15\n  jump\t// in\ntag_20:\n    /* \"#utility.yul\":194:197   */\n  dup3\n    /* \"#utility.yul\":187:223   */\n  mstore\n    /* \"#utility.yul\":114:229   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":235:453   */\ntag_13:\n    /* \"#utility.yul\":326:330   */\n  0x00\n    /* \"#utility.yul\":364:366   */\n  0x20\n    /* \"#utility.yul\":353:362   */\n  dup3\n    /* \"#utility.yul\":349:367   */\n  add\n    /* \"#utility.yul\":341:367   */\n  swap1\n  pop\n    /* \"#utility.yul\":377:446   */\n  tag_22\n    /* \"#utility.yul\":443:444   */\n  0x00\n    /* \"#utility.yul\":432:441   */\n  dup4\n    /* \"#utility.yul\":428:445   */\n  add\n    /* \"#utility.yul\":419:425   */\n  dup5\n    /* \"#utility.yul\":377:446   */\n  tag_16\n  jump\t// in\ntag_22:\n    /* \"#utility.yul\":235:453   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"contracts/MyToken.sol\":582:1603  contract MyToken is Initializable, ERC20Upgradeable, ERC20BurnableUpgradeable, ERC20PausableUpgradeable, OwnableUpgradeable, ERC20PermitUpgradeable {... */\ntag_6:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/MyToken.sol\":582:1603  contract MyToken is Initializable, ERC20Upgradeable, ERC20BurnableUpgradeable, ERC20PausableUpgradeable, OwnableUpgradeable, ERC20PermitUpgradeable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x715018a6\n      gt\n      tag_26\n      jumpi\n      dup1\n      0x95d89b41\n      gt\n      tag_27\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_20\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_21\n      jumpi\n      dup1\n      0xc4d66de8\n      eq\n      tag_22\n      jumpi\n      dup1\n      0xd505accf\n      eq\n      tag_23\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_24\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_25\n      jumpi\n      jump(tag_2)\n    tag_27:\n      dup1\n      0x715018a6\n      eq\n      tag_14\n      jumpi\n      dup1\n      0x79cc6790\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x7ecebe00\n      eq\n      tag_16\n      jumpi\n      dup1\n      0x8456cb59\n      eq\n      tag_17\n      jumpi\n      dup1\n      0x84b0196e\n      eq\n      tag_18\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_19\n      jumpi\n      jump(tag_2)\n    tag_26:\n      dup1\n      0x3644e515\n      gt\n      tag_28\n      jumpi\n      dup1\n      0x3644e515\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x3f4ba83a\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x40c10f19\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x42966c68\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x5c975abb\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_13\n      jumpi\n      jump(tag_2)\n    tag_28:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3011:3155  function name() public view virtual returns (string memory) {... */\n    tag_3:\n      tag_29\n      tag_30\n      jump\t// in\n    tag_29:\n      mload(0x40)\n      tag_31\n      swap2\n      swap1\n      tag_32\n      jump\t// in\n    tag_31:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5505:5691  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_4:\n      tag_33\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_34\n      swap2\n      swap1\n      tag_35\n      jump\t// in\n    tag_34:\n      tag_36\n      jump\t// in\n    tag_33:\n      mload(0x40)\n      tag_37\n      swap2\n      swap1\n      tag_38\n      jump\t// in\n    tag_37:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4191:4343  function totalSupply() public view virtual returns (uint256) {... */\n    tag_5:\n      tag_39\n      tag_40\n      jump\t// in\n    tag_39:\n      mload(0x40)\n      tag_41\n      swap2\n      swap1\n      tag_42\n      jump\t// in\n    tag_41:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6251:6495  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n    tag_6:\n      tag_43\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_44\n      swap2\n      swap1\n      tag_45\n      jump\t// in\n    tag_44:\n      tag_46\n      jump\t// in\n    tag_43:\n      mload(0x40)\n      tag_47\n      swap2\n      swap1\n      tag_38\n      jump\t// in\n    tag_47:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4049:4131  function decimals() public view virtual returns (uint8) {... */\n    tag_7:\n      tag_48\n      tag_49\n      jump\t// in\n    tag_48:\n      mload(0x40)\n      tag_50\n      swap2\n      swap1\n      tag_51\n      jump\t// in\n    tag_50:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":3082:3194  function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {... */\n    tag_8:\n      tag_52\n      tag_53\n      jump\t// in\n    tag_52:\n      mload(0x40)\n      tag_54\n      swap2\n      swap1\n      tag_55\n      jump\t// in\n    tag_54:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/MyToken.sol\":1178:1241  function unpause() public onlyOwner {... */\n    tag_9:\n      tag_56\n      tag_57\n      jump\t// in\n    tag_56:\n      stop\n        /* \"contracts/MyToken.sol\":1247:1340  function mint(address to, uint256 amount) public onlyOwner {... */\n    tag_10:\n      tag_58\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_59\n      swap2\n      swap1\n      tag_35\n      jump\t// in\n    tag_59:\n      tag_60\n      jump\t// in\n    tag_58:\n      stop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":931:1018  function burn(uint256 value) public virtual {... */\n    tag_11:\n      tag_61\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_62\n      swap2\n      swap1\n      tag_63\n      jump\t// in\n    tag_62:\n      tag_64\n      jump\t// in\n    tag_61:\n      stop\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2692:2837  function paused() public view virtual returns (bool) {... */\n    tag_12:\n      tag_65\n      tag_66\n      jump\t// in\n    tag_65:\n      mload(0x40)\n      tag_67\n      swap2\n      swap1\n      tag_38\n      jump\t// in\n    tag_67:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4401:4572  function balanceOf(address account) public view virtual returns (uint256) {... */\n    tag_13:\n      tag_68\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_69\n      swap2\n      swap1\n      tag_70\n      jump\t// in\n    tag_69:\n      tag_71\n      jump\t// in\n    tag_68:\n      mload(0x40)\n      tag_72\n      swap2\n      swap1\n      tag_42\n      jump\t// in\n    tag_72:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3155:3256  function renounceOwnership() public virtual onlyOwner {... */\n    tag_14:\n      tag_73\n      tag_74\n      jump\t// in\n    tag_73:\n      stop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1334:1492  function burnFrom(address account, uint256 value) public virtual {... */\n    tag_15:\n      tag_75\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_76\n      swap2\n      swap1\n      tag_35\n      jump\t// in\n    tag_76:\n      tag_77\n      jump\t// in\n    tag_75:\n      stop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2821:2975  function nonces(address owner) public view virtual override(IERC20Permit, NoncesUpgradeable) returns (uint256) {... */\n    tag_16:\n      tag_78\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_79\n      swap2\n      swap1\n      tag_70\n      jump\t// in\n    tag_79:\n      tag_80\n      jump\t// in\n    tag_78:\n      mload(0x40)\n      tag_81\n      swap2\n      swap1\n      tag_42\n      jump\t// in\n    tag_81:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/MyToken.sol\":1113:1172  function pause() public onlyOwner {... */\n    tag_17:\n      tag_82\n      tag_83\n      jump\t// in\n    tag_82:\n      stop\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5173:6076  function eip712Domain()... */\n    tag_18:\n      tag_84\n      tag_85\n      jump\t// in\n    tag_84:\n      mload(0x40)\n      tag_86\n      swap8\n      swap7\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_87\n      jump\t// in\n    tag_86:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2441:2585  function owner() public view virtual returns (address) {... */\n    tag_19:\n      tag_88\n      tag_89\n      jump\t// in\n    tag_88:\n      mload(0x40)\n      tag_90\n      swap2\n      swap1\n      tag_91\n      jump\t// in\n    tag_90:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3268:3416  function symbol() public view virtual returns (string memory) {... */\n    tag_20:\n      tag_92\n      tag_93\n      jump\t// in\n    tag_92:\n      mload(0x40)\n      tag_94\n      swap2\n      swap1\n      tag_32\n      jump\t// in\n    tag_94:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4767:4945  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n    tag_21:\n      tag_95\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_96\n      swap2\n      swap1\n      tag_35\n      jump\t// in\n    tag_96:\n      tag_97\n      jump\t// in\n    tag_95:\n      mload(0x40)\n      tag_98\n      swap2\n      swap1\n      tag_38\n      jump\t// in\n    tag_98:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/MyToken.sol\":848:1107  function initialize(address initialOwner) initializer public {... */\n    tag_22:\n      tag_99\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_100\n      swap2\n      swap1\n      tag_70\n      jump\t// in\n    tag_100:\n      tag_101\n      jump\t// in\n    tag_99:\n      stop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2095:2767  function permit(... */\n    tag_23:\n      tag_102\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_103\n      swap2\n      swap1\n      tag_104\n      jump\t// in\n    tag_103:\n      tag_105\n      jump\t// in\n    tag_102:\n      stop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5003:5198  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n    tag_24:\n      tag_106\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_107\n      swap2\n      swap1\n      tag_108\n      jump\t// in\n    tag_107:\n      tag_109\n      jump\t// in\n    tag_106:\n      mload(0x40)\n      tag_110\n      swap2\n      swap1\n      tag_42\n      jump\t// in\n    tag_110:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3405:3620  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_25:\n      tag_111\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_112\n      swap2\n      swap1\n      tag_70\n      jump\t// in\n    tag_112:\n      tag_113\n      jump\t// in\n    tag_111:\n      stop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3011:3155  function name() public view virtual returns (string memory) {... */\n    tag_30:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3056:3069  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3081:3103  ERC20Storage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3106:3124  _getERC20Storage() */\n      tag_115\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3106:3122  _getERC20Storage */\n      tag_116\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3106:3124  _getERC20Storage() */\n      jump\t// in\n    tag_115:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3081:3124  ERC20Storage storage $ = _getERC20Storage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3141:3142  $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3141:3148  $._name */\n      0x03\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3134:3148  return $._name */\n      dup1\n      sload\n      tag_117\n      swap1\n      tag_118\n      jump\t// in\n    tag_117:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_119\n      swap1\n      tag_118\n      jump\t// in\n    tag_119:\n      dup1\n      iszero\n      tag_120\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_121\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_120)\n    tag_121:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_122:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_122\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_120:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3011:3155  function name() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5505:5691  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_36:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5578:5582  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5594:5607  address owner */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5610:5622  _msgSender() */\n      tag_124\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5610:5620  _msgSender */\n      tag_125\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5610:5622  _msgSender() */\n      jump\t// in\n    tag_124:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5594:5622  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5632:5663  _approve(owner, spender, value) */\n      tag_126\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5641:5646  owner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5648:5655  spender */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5657:5662  value */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5632:5640  _approve */\n      tag_127\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5632:5663  _approve(owner, spender, value) */\n      jump\t// in\n    tag_126:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5680:5684  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5673:5684  return true */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5505:5691  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4191:4343  function totalSupply() public view virtual returns (uint256) {... */\n    tag_40:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4243:4250  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4262:4284  ERC20Storage storage $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4287:4305  _getERC20Storage() */\n      tag_129\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4287:4303  _getERC20Storage */\n      tag_116\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4287:4305  _getERC20Storage() */\n      jump\t// in\n    tag_129:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4262:4305  ERC20Storage storage $ = _getERC20Storage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4322:4323  $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4322:4336  $._totalSupply */\n      0x02\n      add\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4315:4336  return $._totalSupply */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4191:4343  function totalSupply() public view virtual returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6251:6495  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n    tag_46:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6338:6342  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6354:6369  address spender */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6372:6384  _msgSender() */\n      tag_131\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6372:6382  _msgSender */\n      tag_125\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6372:6384  _msgSender() */\n      jump\t// in\n    tag_131:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6354:6384  address spender = _msgSender() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6394:6431  _spendAllowance(from, spender, value) */\n      tag_132\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6410:6414  from */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6416:6423  spender */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6425:6430  value */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6394:6409  _spendAllowance */\n      tag_133\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6394:6431  _spendAllowance(from, spender, value) */\n      jump\t// in\n    tag_132:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6441:6467  _transfer(from, to, value) */\n      tag_134\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6451:6455  from */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6457:6459  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6461:6466  value */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6441:6450  _transfer */\n      tag_135\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6441:6467  _transfer(from, to, value) */\n      jump\t// in\n    tag_134:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6484:6488  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6477:6488  return true */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6251:6495  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4049:4131  function decimals() public view virtual returns (uint8) {... */\n    tag_49:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4098:4103  uint8 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4122:4124  18 */\n      0x12\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4115:4124  return 18 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4049:4131  function decimals() public view virtual returns (uint8) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":3082:3194  function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {... */\n    tag_53:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":3141:3148  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":3167:3187  _domainSeparatorV4() */\n      tag_138\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":3167:3185  _domainSeparatorV4 */\n      tag_139\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":3167:3187  _domainSeparatorV4() */\n      jump\t// in\n    tag_138:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":3160:3187  return _domainSeparatorV4() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":3082:3194  function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/MyToken.sol\":1178:1241  function unpause() public onlyOwner {... */\n    tag_57:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      tag_141\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2345  _checkOwner */\n      tag_142\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      jump\t// in\n    tag_141:\n        /* \"contracts/MyToken.sol\":1224:1234  _unpause() */\n      tag_144\n        /* \"contracts/MyToken.sol\":1224:1232  _unpause */\n      tag_145\n        /* \"contracts/MyToken.sol\":1224:1234  _unpause() */\n      jump\t// in\n    tag_144:\n        /* \"contracts/MyToken.sol\":1178:1241  function unpause() public onlyOwner {... */\n      jump\t// out\n        /* \"contracts/MyToken.sol\":1247:1340  function mint(address to, uint256 amount) public onlyOwner {... */\n    tag_60:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      tag_147\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2345  _checkOwner */\n      tag_142\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      jump\t// in\n    tag_147:\n        /* \"contracts/MyToken.sol\":1316:1333  _mint(to, amount) */\n      tag_149\n        /* \"contracts/MyToken.sol\":1322:1324  to */\n      dup3\n        /* \"contracts/MyToken.sol\":1326:1332  amount */\n      dup3\n        /* \"contracts/MyToken.sol\":1316:1321  _mint */\n      tag_150\n        /* \"contracts/MyToken.sol\":1316:1333  _mint(to, amount) */\n      jump\t// in\n    tag_149:\n        /* \"contracts/MyToken.sol\":1247:1340  function mint(address to, uint256 amount) public onlyOwner {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":931:1018  function burn(uint256 value) public virtual {... */\n    tag_64:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":985:1011  _burn(_msgSender(), value) */\n      tag_152\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":991:1003  _msgSender() */\n      tag_153\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":991:1001  _msgSender */\n      tag_125\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":991:1003  _msgSender() */\n      jump\t// in\n    tag_153:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1005:1010  value */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":985:990  _burn */\n      tag_154\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":985:1011  _burn(_msgSender(), value) */\n      jump\t// in\n    tag_152:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":931:1018  function burn(uint256 value) public virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2692:2837  function paused() public view virtual returns (bool) {... */\n    tag_66:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2739:2743  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2755:2780  PausableStorage storage $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2783:2804  _getPausableStorage() */\n      tag_156\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2783:2802  _getPausableStorage */\n      tag_157\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2783:2804  _getPausableStorage() */\n      jump\t// in\n    tag_156:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2755:2804  PausableStorage storage $ = _getPausableStorage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2821:2822  $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2821:2830  $._paused */\n      0x00\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2814:2830  return $._paused */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2692:2837  function paused() public view virtual returns (bool) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4401:4572  function balanceOf(address account) public view virtual returns (uint256) {... */\n    tag_71:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4466:4473  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4485:4507  ERC20Storage storage $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4510:4528  _getERC20Storage() */\n      tag_159\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4510:4526  _getERC20Storage */\n      tag_116\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4510:4528  _getERC20Storage() */\n      jump\t// in\n    tag_159:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4485:4528  ERC20Storage storage $ = _getERC20Storage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4545:4546  $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4545:4556  $._balances */\n      0x00\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4545:4565  $._balances[account] */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4557:4564  account */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4545:4565  $._balances[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4538:4565  return $._balances[account] */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4401:4572  function balanceOf(address account) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3155:3256  function renounceOwnership() public virtual onlyOwner {... */\n    tag_74:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      tag_161\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2345  _checkOwner */\n      tag_142\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      jump\t// in\n    tag_161:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3219:3249  _transferOwnership(address(0)) */\n      tag_163\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3246:3247  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3219:3237  _transferOwnership */\n      tag_164\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3219:3249  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_163:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3155:3256  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1334:1492  function burnFrom(address account, uint256 value) public virtual {... */\n    tag_77:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1409:1454  _spendAllowance(account, _msgSender(), value) */\n      tag_166\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1425:1432  account */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1434:1446  _msgSender() */\n      tag_167\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1434:1444  _msgSender */\n      tag_125\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1434:1446  _msgSender() */\n      jump\t// in\n    tag_167:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1448:1453  value */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1409:1424  _spendAllowance */\n      tag_133\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1409:1454  _spendAllowance(account, _msgSender(), value) */\n      jump\t// in\n    tag_166:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1464:1485  _burn(account, value) */\n      tag_168\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1470:1477  account */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1479:1484  value */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1464:1469  _burn */\n      tag_154\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1464:1485  _burn(account, value) */\n      jump\t// in\n    tag_168:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1334:1492  function burnFrom(address account, uint256 value) public virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2821:2975  function nonces(address owner) public view virtual override(IERC20Permit, NoncesUpgradeable) returns (uint256) {... */\n    tag_80:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2923:2930  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2949:2968  super.nonces(owner) */\n      tag_170\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2962:2967  owner */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2949:2961  super.nonces */\n      tag_171\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2949:2968  super.nonces(owner) */\n      jump\t// in\n    tag_170:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2942:2968  return super.nonces(owner) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2821:2975  function nonces(address owner) public view virtual override(IERC20Permit, NoncesUpgradeable) returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/MyToken.sol\":1113:1172  function pause() public onlyOwner {... */\n    tag_83:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      tag_173\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2345  _checkOwner */\n      tag_142\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      jump\t// in\n    tag_173:\n        /* \"contracts/MyToken.sol\":1157:1165  _pause() */\n      tag_175\n        /* \"contracts/MyToken.sol\":1157:1163  _pause */\n      tag_176\n        /* \"contracts/MyToken.sol\":1157:1165  _pause() */\n      jump\t// in\n    tag_175:\n        /* \"contracts/MyToken.sol\":1113:1172  function pause() public onlyOwner {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5173:6076  function eip712Domain()... */\n    tag_85:\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5271:5284  bytes1 fields */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5298:5316  string memory name */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5330:5351  string memory version */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5365:5380  uint256 chainId */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5394:5419  address verifyingContract */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5433:5445  bytes32 salt */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5459:5486  uint256[] memory extensions */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5511:5534  EIP712Storage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5537:5556  _getEIP712Storage() */\n      tag_178\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5537:5554  _getEIP712Storage */\n      tag_179\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5537:5556  _getEIP712Storage() */\n      jump\t// in\n    tag_178:\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5511:5556  EIP712Storage storage $ = _getEIP712Storage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5794:5795  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5777:5795  $._hashedName == 0 */\n      dup1\n      shl\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5777:5778  $ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5777:5790  $._hashedName */\n      0x00\n      add\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5777:5795  $._hashedName == 0 */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5777:5820  $._hashedName == 0 && $._hashedVersion == 0 */\n      dup1\n      iszero\n      tag_180\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5819:5820  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5799:5820  $._hashedVersion == 0 */\n      dup1\n      shl\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5799:5800  $ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5799:5815  $._hashedVersion */\n      0x01\n      add\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5799:5820  $._hashedVersion == 0 */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5777:5820  $._hashedName == 0 && $._hashedVersion == 0 */\n    tag_180:\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5769:5846  require($._hashedName == 0 && $._hashedVersion == 0, \"EIP712: Uninitialized\") */\n      tag_181\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_182\n      swap1\n      tag_183\n      jump\t// in\n    tag_182:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_181:\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5908:5921  _EIP712Name() */\n      tag_184\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5908:5919  _EIP712Name */\n      tag_185\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5908:5921  _EIP712Name() */\n      jump\t// in\n    tag_184:\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5935:5951  _EIP712Version() */\n      tag_186\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5935:5949  _EIP712Version */\n      tag_187\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5935:5951  _EIP712Version() */\n      jump\t// in\n    tag_186:\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5965:5978  block.chainid */\n      chainid\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":6000:6004  this */\n      address\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":6027:6028  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":6019:6029  bytes32(0) */\n      dup1\n      shl\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":6057:6058  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":6043:6059  new uint256[](0) */\n      0xffffffffffffffff\n      dup2\n      gt\n      iszero\n      tag_188\n      jumpi\n      tag_189\n      tag_190\n      jump\t// in\n    tag_189:\n    tag_188:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_191\n      jumpi\n      dup2\n      0x20\n      add\n      0x20\n      dup3\n      mul\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      dup1\n      dup3\n      add\n      swap2\n      pop\n      pop\n      swap1\n      pop\n    tag_191:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5857:6069  return (... */\n      0x0f00000000000000000000000000000000000000000000000000000000000000\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      swap8\n      pop\n      swap8\n      pop\n      swap8\n      pop\n      swap8\n      pop\n      swap8\n      pop\n      swap8\n      pop\n      swap8\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5173:6076  function eip712Domain()... */\n      swap1\n      swap2\n      swap3\n      swap4\n      swap5\n      swap6\n      swap7\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2441:2585  function owner() public view virtual returns (address) {... */\n    tag_89:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2487:2494  address */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2506:2530  OwnableStorage storage $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2533:2553  _getOwnableStorage() */\n      tag_193\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2533:2551  _getOwnableStorage */\n      tag_194\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2533:2553  _getOwnableStorage() */\n      jump\t// in\n    tag_193:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2506:2553  OwnableStorage storage $ = _getOwnableStorage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2570:2571  $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2570:2578  $._owner */\n      0x00\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2563:2578  return $._owner */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2441:2585  function owner() public view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3268:3416  function symbol() public view virtual returns (string memory) {... */\n    tag_93:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3315:3328  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3340:3362  ERC20Storage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3365:3383  _getERC20Storage() */\n      tag_196\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3365:3381  _getERC20Storage */\n      tag_116\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3365:3383  _getERC20Storage() */\n      jump\t// in\n    tag_196:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3340:3383  ERC20Storage storage $ = _getERC20Storage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3400:3401  $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3400:3409  $._symbol */\n      0x04\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3393:3409  return $._symbol */\n      dup1\n      sload\n      tag_197\n      swap1\n      tag_118\n      jump\t// in\n    tag_197:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_198\n      swap1\n      tag_118\n      jump\t// in\n    tag_198:\n      dup1\n      iszero\n      tag_199\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_200\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_199)\n    tag_200:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_201:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_201\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_199:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3268:3416  function symbol() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4767:4945  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n    tag_97:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4836:4840  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4852:4865  address owner */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4868:4880  _msgSender() */\n      tag_203\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4868:4878  _msgSender */\n      tag_125\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4868:4880  _msgSender() */\n      jump\t// in\n    tag_203:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4852:4880  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4890:4917  _transfer(owner, to, value) */\n      tag_204\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4900:4905  owner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4907:4909  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4911:4916  value */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4890:4899  _transfer */\n      tag_135\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4890:4917  _transfer(owner, to, value) */\n      jump\t// in\n    tag_204:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4934:4938  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4927:4938  return true */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4767:4945  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/MyToken.sol\":848:1107  function initialize(address initialOwner) initializer public {... */\n    tag_101:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4158:4188  InitializableStorage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4191:4217  _getInitializableStorage() */\n      tag_206\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4191:4215  _getInitializableStorage */\n      tag_207\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4191:4217  _getInitializableStorage() */\n      jump\t// in\n    tag_206:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4158:4217  InitializableStorage storage $ = _getInitializableStorage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4279:4298  bool isTopLevelCall */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4302:4303  $ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4302:4317  $._initializing */\n      0x00\n      add\n      0x08\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4301:4317  !$._initializing */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4279:4317  bool isTopLevelCall = !$._initializing */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4327:4345  uint64 initialized */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4348:4349  $ */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4348:4362  $._initialized */\n      0x00\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4327:4362  uint64 initialized = $._initialized */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4706:4723  bool initialSetup */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4741:4742  0 */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4726:4737  initialized */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4726:4742  initialized == 0 */\n      0xffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4726:4760  initialized == 0 && isTopLevelCall */\n      dup1\n      iszero\n      tag_208\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4746:4760  isTopLevelCall */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4726:4760  initialized == 0 && isTopLevelCall */\n    tag_208:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4706:4760  bool initialSetup = initialized == 0 && isTopLevelCall */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4770:4787  bool construction */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4805:4806  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4790:4801  initialized */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4790:4806  initialized == 1 */\n      0xffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4790:4840  initialized == 1 && address(this).code.length == 0 */\n      dup1\n      iszero\n      tag_209\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4839:4840  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4818:4822  this */\n      address\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4810:4835  address(this).code.length */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      extcodesize\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4810:4840  address(this).code.length == 0 */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4790:4840  initialized == 1 && address(this).code.length == 0 */\n    tag_209:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4770:4840  bool construction = initialized == 1 && address(this).code.length == 0 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4856:4868  initialSetup */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4855:4868  !initialSetup */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4855:4885  !initialSetup && !construction */\n      dup1\n      iszero\n      tag_210\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4873:4885  construction */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4872:4885  !construction */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4855:4885  !initialSetup && !construction */\n    tag_210:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4851:4942  if (!initialSetup && !construction) {... */\n      iszero\n      tag_211\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4908:4931  InvalidInitialization() */\n      mload(0x40)\n      0xf92ee8a900000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4851:4942  if (!initialSetup && !construction) {... */\n    tag_211:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4968:4969  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4951:4952  $ */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4951:4965  $._initialized */\n      0x00\n      add\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4951:4969  $._initialized = 1 */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4983:4997  isTopLevelCall */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4979:5046  if (isTopLevelCall) {... */\n      iszero\n      tag_212\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5031:5035  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5013:5014  $ */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5013:5028  $._initializing */\n      0x00\n      add\n      0x08\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5013:5035  $._initializing = true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4979:5046  if (isTopLevelCall) {... */\n    tag_212:\n        /* \"contracts/MyToken.sol\":919:955  __ERC20_init(\"42TOKENIZER\", \"42TOK\") */\n      tag_214\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x0b\n      dup2\n      mstore\n      0x20\n      add\n      0x3432544f4b454e495a4552000000000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x05\n      dup2\n      mstore\n      0x20\n      add\n      0x3432544f4b000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n        /* \"contracts/MyToken.sol\":919:931  __ERC20_init */\n      tag_215\n        /* \"contracts/MyToken.sol\":919:955  __ERC20_init(\"42TOKENIZER\", \"42TOK\") */\n      jump\t// in\n    tag_214:\n        /* \"contracts/MyToken.sol\":965:987  __ERC20Burnable_init() */\n      tag_216\n        /* \"contracts/MyToken.sol\":965:985  __ERC20Burnable_init */\n      tag_217\n        /* \"contracts/MyToken.sol\":965:987  __ERC20Burnable_init() */\n      jump\t// in\n    tag_216:\n        /* \"contracts/MyToken.sol\":997:1019  __ERC20Pausable_init() */\n      tag_218\n        /* \"contracts/MyToken.sol\":997:1017  __ERC20Pausable_init */\n      tag_219\n        /* \"contracts/MyToken.sol\":997:1019  __ERC20Pausable_init() */\n      jump\t// in\n    tag_218:\n        /* \"contracts/MyToken.sol\":1029:1057  __Ownable_init(initialOwner) */\n      tag_220\n        /* \"contracts/MyToken.sol\":1044:1056  initialOwner */\n      dup7\n        /* \"contracts/MyToken.sol\":1029:1043  __Ownable_init */\n      tag_221\n        /* \"contracts/MyToken.sol\":1029:1057  __Ownable_init(initialOwner) */\n      jump\t// in\n    tag_220:\n        /* \"contracts/MyToken.sol\":1067:1100  __ERC20Permit_init(\"42TOKENIZER\") */\n      tag_222\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x0b\n      dup2\n      mstore\n      0x20\n      add\n      0x3432544f4b454e495a4552000000000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n        /* \"contracts/MyToken.sol\":1067:1085  __ERC20Permit_init */\n      tag_223\n        /* \"contracts/MyToken.sol\":1067:1100  __ERC20Permit_init(\"42TOKENIZER\") */\n      jump\t// in\n    tag_222:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5070:5084  isTopLevelCall */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5066:5167  if (isTopLevelCall) {... */\n      iszero\n      tag_224\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5118:5123  false */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5100:5101  $ */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5100:5115  $._initializing */\n      0x00\n      add\n      0x08\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5100:5123  $._initializing = false */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5142:5156  Initialized(1) */\n      0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5154:5155  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5142:5156  Initialized(1) */\n      mload(0x40)\n      tag_225\n      swap2\n      swap1\n      tag_226\n      jump\t// in\n    tag_225:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5066:5167  if (isTopLevelCall) {... */\n    tag_224:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4092:5173  {... */\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/MyToken.sol\":848:1107  function initialize(address initialOwner) initializer public {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2095:2767  function permit(... */\n    tag_105:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2316:2324  deadline */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2298:2313  block.timestamp */\n      timestamp\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2298:2324  block.timestamp > deadline */\n      gt\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2294:2391  if (block.timestamp > deadline) {... */\n      iszero\n      tag_228\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2371:2379  deadline */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2347:2380  ERC2612ExpiredSignature(deadline) */\n      mload(0x40)\n      0x6279130200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_229\n      swap2\n      swap1\n      tag_42\n      jump\t// in\n    tag_229:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2294:2391  if (block.timestamp > deadline) {... */\n    tag_228:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2401:2419  bytes32 structHash */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":1277:1372  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n      0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2460:2465  owner */\n      dup9\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2467:2474  spender */\n      dup9\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2476:2481  value */\n      dup9\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2483:2499  _useNonce(owner) */\n      tag_230\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2493:2498  owner */\n      dup13\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2483:2492  _useNonce */\n      tag_231\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2483:2499  _useNonce(owner) */\n      jump\t// in\n    tag_230:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2501:2509  deadline */\n      dup10\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2432:2510  abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline) */\n      add(0x20, mload(0x40))\n      tag_232\n      swap7\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_233\n      jump\t// in\n    tag_232:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2422:2511  keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline)) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2401:2511  bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline)) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2522:2534  bytes32 hash */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2537:2565  _hashTypedDataV4(structHash) */\n      tag_234\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2554:2564  structHash */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2537:2553  _hashTypedDataV4 */\n      tag_235\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2537:2565  _hashTypedDataV4(structHash) */\n      jump\t// in\n    tag_234:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2522:2565  bytes32 hash = _hashTypedDataV4(structHash) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2576:2590  address signer */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2593:2621  ECDSA.recover(hash, v, r, s) */\n      tag_236\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2607:2611  hash */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2613:2614  v */\n      dup8\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2616:2617  r */\n      dup8\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2619:2620  s */\n      dup8\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2593:2606  ECDSA.recover */\n      tag_237\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2593:2621  ECDSA.recover(hash, v, r, s) */\n      jump\t// in\n    tag_236:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2576:2621  address signer = ECDSA.recover(hash, v, r, s) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2645:2650  owner */\n      dup10\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2635:2650  signer != owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2635:2641  signer */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2635:2650  signer != owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2631:2719  if (signer != owner) {... */\n      tag_238\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2694:2700  signer */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2702:2707  owner */\n      dup11\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2673:2708  ERC2612InvalidSigner(signer, owner) */\n      mload(0x40)\n      0x4b800e4600000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_239\n      swap3\n      swap2\n      swap1\n      tag_240\n      jump\t// in\n    tag_239:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2631:2719  if (signer != owner) {... */\n    tag_238:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2729:2760  _approve(owner, spender, value) */\n      tag_241\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2738:2743  owner */\n      dup11\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2745:2752  spender */\n      dup11\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2754:2759  value */\n      dup11\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2729:2737  _approve */\n      tag_127\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2729:2760  _approve(owner, spender, value) */\n      jump\t// in\n    tag_241:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2284:2767  {... */\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":2095:2767  function permit(... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5003:5198  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n    tag_109:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5083:5090  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5102:5124  ERC20Storage storage $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5127:5145  _getERC20Storage() */\n      tag_243\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5127:5143  _getERC20Storage */\n      tag_116\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5127:5145  _getERC20Storage() */\n      jump\t// in\n    tag_243:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5102:5145  ERC20Storage storage $ = _getERC20Storage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5162:5163  $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5162:5175  $._allowances */\n      0x01\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5162:5182  $._allowances[owner] */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5176:5181  owner */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5162:5182  $._allowances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5162:5191  $._allowances[owner][spender] */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5183:5190  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5162:5191  $._allowances[owner][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5155:5191  return $._allowances[owner][spender] */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5003:5198  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3405:3620  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_113:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      tag_245\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2345  _checkOwner */\n      tag_142\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      jump\t// in\n    tag_245:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3509:3510  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3489:3511  newOwner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3489:3497  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3489:3511  newOwner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3485:3576  if (newOwner == address(0)) {... */\n      tag_247\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3562:3563  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3534:3565  OwnableInvalidOwner(address(0)) */\n      mload(0x40)\n      0x1e4fbdf700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_248\n      swap2\n      swap1\n      tag_91\n      jump\t// in\n    tag_248:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3485:3576  if (newOwner == address(0)) {... */\n    tag_247:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3585:3613  _transferOwnership(newOwner) */\n      tag_249\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3604:3612  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3585:3603  _transferOwnership */\n      tag_164\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3585:3613  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_249:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3405:3620  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2242:2395  function _getERC20Storage() private pure returns (ERC20Storage storage $) {... */\n    tag_116:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2292:2314  ERC20Storage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2359:2379  ERC20StorageLocation */\n      0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2349:2379  $.slot := ERC20StorageLocation */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2242:2395  function _getERC20Storage() private pure returns (ERC20Storage storage $) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":887:983  function _msgSender() internal view virtual returns (address) {... */\n    tag_125:\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":940:947  address */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":966:976  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":959:976  return msg.sender */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":887:983  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10264:10392  function _approve(address owner, address spender, uint256 value) internal {... */\n    tag_127:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10348:10385  _approve(owner, spender, value, true) */\n      tag_253\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10357:10362  owner */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10364:10371  spender */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10373:10378  value */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10380:10384  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10348:10356  _approve */\n      tag_254\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10348:10385  _approve(owner, spender, value, true) */\n      jump\t// in\n    tag_253:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10264:10392  function _approve(address owner, address spender, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11993:12470  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n    tag_133:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12092:12116  uint256 currentAllowance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12119:12144  allowance(owner, spender) */\n      tag_256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12129:12134  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12136:12143  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12119:12128  allowance */\n      tag_109\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12119:12144  allowance(owner, spender) */\n      jump\t// in\n    tag_256:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12092:12144  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12178:12195  type(uint256).max */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12158:12174  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12158:12195  currentAllowance != type(uint256).max */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12154:12464  if (currentAllowance != type(uint256).max) {... */\n      tag_257\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12234:12239  value */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12215:12231  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12215:12239  currentAllowance < value */\n      lt\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12211:12341  if (currentAllowance < value) {... */\n      iszero\n      tag_258\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12293:12300  spender */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12302:12318  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12320:12325  value */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12266:12326  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      mload(0x40)\n      0xfb8f41b200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_259\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_260\n      jump\t// in\n    tag_259:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12211:12341  if (currentAllowance < value) {... */\n    tag_258:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12382:12439  _approve(owner, spender, currentAllowance - value, false) */\n      tag_261\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12391:12396  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12398:12405  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12426:12431  value */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12407:12423  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12407:12431  currentAllowance - value */\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12433:12438  false */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12382:12390  _approve */\n      tag_254\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12382:12439  _approve(owner, spender, currentAllowance - value, false) */\n      jump\t// in\n    tag_261:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12154:12464  if (currentAllowance != type(uint256).max) {... */\n    tag_257:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12082:12470  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11993:12470  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6868:7168  function _transfer(address from, address to, uint256 value) internal {... */\n    tag_135:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6967:6968  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6951:6969  from == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6951:6955  from */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6951:6969  from == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6947:7033  if (from == address(0)) {... */\n      tag_263\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7019:7020  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6992:7022  ERC20InvalidSender(address(0)) */\n      mload(0x40)\n      0x96c6fd1e00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_264\n      swap2\n      swap1\n      tag_91\n      jump\t// in\n    tag_264:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6947:7033  if (from == address(0)) {... */\n    tag_263:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7060:7061  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7046:7062  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7046:7048  to */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7046:7062  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7042:7128  if (to == address(0)) {... */\n      tag_265\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7114:7115  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7085:7117  ERC20InvalidReceiver(address(0)) */\n      mload(0x40)\n      0xec442f0500000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_266\n      swap2\n      swap1\n      tag_91\n      jump\t// in\n    tag_266:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7042:7128  if (to == address(0)) {... */\n    tag_265:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7137:7161  _update(from, to, value) */\n      tag_267\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7145:7149  from */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7151:7153  to */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7155:7160  value */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7137:7144  _update */\n      tag_268\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7137:7161  _update(from, to, value) */\n      jump\t// in\n    tag_267:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6868:7168  function _transfer(address from, address to, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":4015:4124  function _domainSeparatorV4() internal view returns (bytes32) {... */\n    tag_139:\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":4068:4075  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":4094:4117  _buildDomainSeparator() */\n      tag_270\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":4094:4115  _buildDomainSeparator */\n      tag_271\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":4094:4117  _buildDomainSeparator() */\n      jump\t// in\n    tag_270:\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":4087:4117  return _buildDomainSeparator() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":4015:4124  function _domainSeparatorV4() internal view returns (bytes32) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2658:2820  function _checkOwner() internal view virtual {... */\n    tag_142:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2728:2740  _msgSender() */\n      tag_273\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2728:2738  _msgSender */\n      tag_125\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2728:2740  _msgSender() */\n      jump\t// in\n    tag_273:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2717:2740  owner() != _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2717:2724  owner() */\n      tag_274\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2717:2722  owner */\n      tag_89\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2717:2724  owner() */\n      jump\t// in\n    tag_274:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2717:2740  owner() != _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2713:2814  if (owner() != _msgSender()) {... */\n      tag_275\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2790:2802  _msgSender() */\n      tag_276\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2790:2800  _msgSender */\n      tag_125\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2790:2802  _msgSender() */\n      jump\t// in\n    tag_276:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2763:2803  OwnableUnauthorizedAccount(_msgSender()) */\n      mload(0x40)\n      0x118cdaa700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_277\n      swap2\n      swap1\n      tag_91\n      jump\t// in\n    tag_277:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2713:2814  if (owner() != _msgSender()) {... */\n    tag_275:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2658:2820  function _checkOwner() internal view virtual {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3674:3852  function _unpause() internal virtual whenPaused {... */\n    tag_145:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2563:2579  _requirePaused() */\n      tag_279\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2563:2577  _requirePaused */\n      tag_280\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2563:2579  _requirePaused() */\n      jump\t// in\n    tag_279:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3732:3757  PausableStorage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3760:3781  _getPausableStorage() */\n      tag_282\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3760:3779  _getPausableStorage */\n      tag_157\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3760:3781  _getPausableStorage() */\n      jump\t// in\n    tag_282:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3732:3781  PausableStorage storage $ = _getPausableStorage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3803:3808  false */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3791:3792  $ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3791:3800  $._paused */\n      0x00\n      add\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3791:3808  $._paused = false */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3823:3845  Unpaused(_msgSender()) */\n      0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3832:3844  _msgSender() */\n      tag_283\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3832:3842  _msgSender */\n      tag_125\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3832:3844  _msgSender() */\n      jump\t// in\n    tag_283:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3823:3845  Unpaused(_msgSender()) */\n      mload(0x40)\n      tag_284\n      swap2\n      swap1\n      tag_91\n      jump\t// in\n    tag_284:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3722:3852  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3674:3852  function _unpause() internal virtual whenPaused {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8996:9204  function _mint(address account, uint256 value) internal {... */\n    tag_150:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9085:9086  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9066:9087  account == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9066:9073  account */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9066:9087  account == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9062:9153  if (account == address(0)) {... */\n      tag_286\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9139:9140  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9110:9142  ERC20InvalidReceiver(address(0)) */\n      mload(0x40)\n      0xec442f0500000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_287\n      swap2\n      swap1\n      tag_91\n      jump\t// in\n    tag_287:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9062:9153  if (account == address(0)) {... */\n    tag_286:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9162:9197  _update(address(0), account, value) */\n      tag_288\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9178:9179  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9182:9189  account */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9191:9196  value */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9162:9169  _update */\n      tag_268\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9162:9197  _update(address(0), account, value) */\n      jump\t// in\n    tag_288:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8996:9204  function _mint(address account, uint256 value) internal {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9522:9728  function _burn(address account, uint256 value) internal {... */\n    tag_154:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9611:9612  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9592:9613  account == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9592:9599  account */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9592:9613  account == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9588:9677  if (account == address(0)) {... */\n      tag_290\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9663:9664  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9636:9666  ERC20InvalidSender(address(0)) */\n      mload(0x40)\n      0x96c6fd1e00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_291\n      swap2\n      swap1\n      tag_91\n      jump\t// in\n    tag_291:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9588:9677  if (account == address(0)) {... */\n    tag_290:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9686:9721  _update(account, address(0), value) */\n      tag_292\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9694:9701  account */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9711:9712  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9715:9720  value */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9686:9693  _update */\n      tag_268\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9686:9721  _update(account, address(0), value) */\n      jump\t// in\n    tag_292:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9522:9728  function _burn(address account, uint256 value) internal {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":1147:1309  function _getPausableStorage() private pure returns (PausableStorage storage $) {... */\n    tag_157:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":1200:1225  PausableStorage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":1270:1293  PausableStorageLocation */\n      0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":1260:1293  $.slot := PausableStorageLocation */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":1147:1309  function _getPausableStorage() private pure returns (PausableStorage storage $) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3774:4022  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_164:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3847:3871  OwnableStorage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3874:3894  _getOwnableStorage() */\n      tag_295\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3874:3892  _getOwnableStorage */\n      tag_194\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3874:3894  _getOwnableStorage() */\n      jump\t// in\n    tag_295:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3847:3894  OwnableStorage storage $ = _getOwnableStorage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3904:3920  address oldOwner */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3923:3924  $ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3923:3931  $._owner */\n      0x00\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3904:3931  address oldOwner = $._owner */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3952:3960  newOwner */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3941:3942  $ */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3941:3949  $._owner */\n      0x00\n      add\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3941:3960  $._owner = newOwner */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":4006:4014  newOwner */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3975:4015  OwnershipTransferred(oldOwner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3996:4004  oldOwner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3975:4015  OwnershipTransferred(oldOwner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3837:4022  {... */\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3774:4022  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":1259:1423  function nonces(address owner) public view virtual returns (uint256) {... */\n    tag_171:\n        /* \"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":1319:1326  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":1338:1361  NoncesStorage storage $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":1364:1383  _getNoncesStorage() */\n      tag_297\n        /* \"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":1364:1381  _getNoncesStorage */\n      tag_298\n        /* \"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":1364:1383  _getNoncesStorage() */\n      jump\t// in\n    tag_297:\n        /* \"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":1338:1383  NoncesStorage storage $ = _getNoncesStorage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":1400:1401  $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":1400:1409  $._nonces */\n      0x00\n      add\n        /* \"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":1400:1416  $._nonces[owner] */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":1410:1415  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":1400:1416  $._nonces[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":1393:1416  return $._nonces[owner] */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":1259:1423  function nonces(address owner) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3366:3542  function _pause() internal virtual whenNotPaused {... */\n    tag_176:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2316:2335  _requireNotPaused() */\n      tag_300\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2316:2333  _requireNotPaused */\n      tag_301\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2316:2335  _requireNotPaused() */\n      jump\t// in\n    tag_300:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3425:3450  PausableStorage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3453:3474  _getPausableStorage() */\n      tag_303\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3453:3472  _getPausableStorage */\n      tag_157\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3453:3474  _getPausableStorage() */\n      jump\t// in\n    tag_303:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3425:3474  PausableStorage storage $ = _getPausableStorage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3496:3500  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3484:3485  $ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3484:3493  $._paused */\n      0x00\n      add\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3484:3500  $._paused = true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3515:3535  Paused(_msgSender()) */\n      0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3522:3534  _msgSender() */\n      tag_304\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3522:3532  _msgSender */\n      tag_125\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3522:3534  _msgSender() */\n      jump\t// in\n    tag_304:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3515:3535  Paused(_msgSender()) */\n      mload(0x40)\n      tag_305\n      swap2\n      swap1\n      tag_91\n      jump\t// in\n    tag_305:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3415:3542  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3366:3542  function _pause() internal virtual whenNotPaused {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":2720:2876  function _getEIP712Storage() private pure returns (EIP712Storage storage $) {... */\n    tag_179:\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":2771:2794  EIP712Storage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":2839:2860  EIP712StorageLocation */\n      0xa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d100\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":2829:2860  $.slot := EIP712StorageLocation */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":2720:2876  function _getEIP712Storage() private pure returns (EIP712Storage storage $) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":6300:6455  function _EIP712Name() internal view virtual returns (string memory) {... */\n    tag_185:\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":6354:6367  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":6379:6402  EIP712Storage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":6405:6424  _getEIP712Storage() */\n      tag_308\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":6405:6422  _getEIP712Storage */\n      tag_179\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":6405:6424  _getEIP712Storage() */\n      jump\t// in\n    tag_308:\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":6379:6424  EIP712Storage storage $ = _getEIP712Storage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":6441:6442  $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":6441:6448  $._name */\n      0x02\n      add\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":6434:6448  return $._name */\n      dup1\n      sload\n      tag_309\n      swap1\n      tag_118\n      jump\t// in\n    tag_309:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_310\n      swap1\n      tag_118\n      jump\t// in\n    tag_310:\n      dup1\n      iszero\n      tag_311\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_312\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_311)\n    tag_312:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_313:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_313\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_311:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":6300:6455  function _EIP712Name() internal view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":6682:6843  function _EIP712Version() internal view virtual returns (string memory) {... */\n    tag_187:\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":6739:6752  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":6764:6787  EIP712Storage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":6790:6809  _getEIP712Storage() */\n      tag_315\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":6790:6807  _getEIP712Storage */\n      tag_179\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":6790:6809  _getEIP712Storage() */\n      jump\t// in\n    tag_315:\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":6764:6809  EIP712Storage storage $ = _getEIP712Storage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":6826:6827  $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":6826:6836  $._version */\n      0x03\n      add\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":6819:6836  return $._version */\n      dup1\n      sload\n      tag_316\n      swap1\n      tag_118\n      jump\t// in\n    tag_316:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_317\n      swap1\n      tag_118\n      jump\t// in\n    tag_317:\n      dup1\n      iszero\n      tag_318\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_319\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_318)\n    tag_319:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_320:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_320\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_318:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":6682:6843  function _EIP712Version() internal view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1192:1351  function _getOwnableStorage() private pure returns (OwnableStorage storage $) {... */\n    tag_194:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1244:1268  OwnableStorage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1313:1335  OwnableStorageLocation */\n      0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1303:1335  $.slot := OwnableStorageLocation */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1192:1351  function _getOwnableStorage() private pure returns (OwnableStorage storage $) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8737:8907  function _getInitializableStorage() private pure returns (InitializableStorage storage $) {... */\n    tag_207:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8795:8825  InitializableStorage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8870:8891  INITIALIZABLE_STORAGE */\n      0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8860:8891  $.slot := INITIALIZABLE_STORAGE */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8737:8907  function _getInitializableStorage() private pure returns (InitializableStorage storage $) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2577:2724  function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {... */\n    tag_215:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      tag_324\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6949  _checkInitializing */\n      tag_325\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      jump\t// in\n    tag_324:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2679:2717  __ERC20_init_unchained(name_, symbol_) */\n      tag_327\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2702:2707  name_ */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2709:2716  symbol_ */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2679:2701  __ERC20_init_unchained */\n      tag_328\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2679:2717  __ERC20_init_unchained(name_, symbol_) */\n      jump\t// in\n    tag_327:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2577:2724  function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":666:731  function __ERC20Burnable_init() internal onlyInitializing {... */\n    tag_217:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      tag_330\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6949  _checkInitializing */\n      tag_325\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      jump\t// in\n    tag_330:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":666:731  function __ERC20Burnable_init() internal onlyInitializing {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol\":1148:1250  function __ERC20Pausable_init() internal onlyInitializing {... */\n    tag_219:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      tag_333\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6949  _checkInitializing */\n      tag_325\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      jump\t// in\n    tag_333:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol\":1216:1243  __Pausable_init_unchained() */\n      tag_335\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol\":1216:1241  __Pausable_init_unchained */\n      tag_336\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol\":1216:1243  __Pausable_init_unchained() */\n      jump\t// in\n    tag_335:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol\":1148:1250  function __ERC20Pausable_init() internal onlyInitializing {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1847:1974  function __Ownable_init(address initialOwner) internal onlyInitializing {... */\n    tag_221:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      tag_338\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6949  _checkInitializing */\n      tag_325\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      jump\t// in\n    tag_338:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1929:1967  __Ownable_init_unchained(initialOwner) */\n      tag_340\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1954:1966  initialOwner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1929:1953  __Ownable_init_unchained */\n      tag_341\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1929:1967  __Ownable_init_unchained(initialOwner) */\n      jump\t// in\n    tag_340:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1847:1974  function __Ownable_init(address initialOwner) internal onlyInitializing {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":1829:1954  function __ERC20Permit_init(string memory name) internal onlyInitializing {... */\n    tag_223:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      tag_343\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6949  _checkInitializing */\n      tag_325\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      jump\t// in\n    tag_343:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":1913:1947  __EIP712_init_unchained(name, \"1\") */\n      tag_345\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":1937:1941  name */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":1913:1947  __EIP712_init_unchained(name, \"1\") */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x01\n      dup2\n      mstore\n      0x20\n      add\n      0x3100000000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":1913:1936  __EIP712_init_unchained */\n      tag_346\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":1913:1947  __EIP712_init_unchained(name, \"1\") */\n      jump\t// in\n    tag_345:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":1829:1954  function __ERC20Permit_init(string memory name) internal onlyInitializing {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":1537:1989  function _useNonce(address owner) internal virtual returns (uint256) {... */\n    tag_231:\n        /* \"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":1597:1604  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":1616:1639  NoncesStorage storage $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":1642:1661  _getNoncesStorage() */\n      tag_348\n        /* \"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":1642:1659  _getNoncesStorage */\n      tag_298\n        /* \"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":1642:1661  _getNoncesStorage() */\n      jump\t// in\n    tag_348:\n        /* \"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":1616:1661  NoncesStorage storage $ = _getNoncesStorage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":1954:1955  $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":1954:1963  $._nonces */\n      0x00\n      add\n        /* \"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":1954:1970  $._nonces[owner] */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":1964:1969  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":1954:1970  $._nonces[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":1954:1972  $._nonces[owner]++ */\n      dup2\n      sload\n      dup1\n      swap3\n      swap2\n      swap1\n      0x01\n      add\n      swap2\n      swap1\n      pop\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":1947:1972  return $._nonces[owner]++ */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":1537:1989  function _useNonce(address owner) internal virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":4946:5122  function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {... */\n    tag_235:\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5023:5030  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5049:5115  MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash) */\n      tag_350\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5082:5102  _domainSeparatorV4() */\n      tag_351\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5082:5100  _domainSeparatorV4 */\n      tag_139\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5082:5102  _domainSeparatorV4() */\n      jump\t// in\n    tag_351:\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5104:5114  structHash */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5049:5081  MessageHashUtils.toTypedDataHash */\n      tag_352\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5049:5115  MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash) */\n      jump\t// in\n    tag_350:\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":5042:5115  return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":4946:5122  function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6803:7063  function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {... */\n    tag_237:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6888:6895  address */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6908:6925  address recovered */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6927:6945  RecoverError error */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6947:6963  bytes32 errorArg */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6967:6992  tryRecover(hash, v, r, s) */\n      tag_354\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6978:6982  hash */\n      dup9\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6984:6985  v */\n      dup9\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6987:6988  r */\n      dup9\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6990:6991  s */\n      dup9\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6967:6977  tryRecover */\n      tag_355\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6967:6992  tryRecover(hash, v, r, s) */\n      jump\t// in\n    tag_354:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6907:6992  (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s) */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7002:7030  _throwError(error, errorArg) */\n      tag_356\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7014:7019  error */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7021:7029  errorArg */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7002:7013  _throwError */\n      tag_357\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7002:7030  _throwError(error, errorArg) */\n      jump\t// in\n    tag_356:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7047:7056  recovered */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7040:7056  return recovered */\n      swap4\n      pop\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6803:7063  function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {... */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11224:11711  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n    tag_254:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11332:11354  ERC20Storage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11357:11375  _getERC20Storage() */\n      tag_359\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11357:11373  _getERC20Storage */\n      tag_116\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11357:11375  _getERC20Storage() */\n      jump\t// in\n    tag_359:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11332:11375  ERC20Storage storage $ = _getERC20Storage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11406:11407  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11389:11408  owner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11389:11394  owner */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11389:11408  owner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11385:11474  if (owner == address(0)) {... */\n      tag_360\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11460:11461  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11431:11463  ERC20InvalidApprover(address(0)) */\n      mload(0x40)\n      0xe602df0500000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_361\n      swap2\n      swap1\n      tag_91\n      jump\t// in\n    tag_361:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11385:11474  if (owner == address(0)) {... */\n    tag_360:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11506:11507  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11487:11508  spender == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11487:11494  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11487:11508  spender == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11483:11573  if (spender == address(0)) {... */\n      tag_362\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11559:11560  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11531:11562  ERC20InvalidSpender(address(0)) */\n      mload(0x40)\n      0x94280d6200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_363\n      swap2\n      swap1\n      tag_91\n      jump\t// in\n    tag_363:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11483:11573  if (spender == address(0)) {... */\n    tag_362:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11614:11619  value */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11582:11583  $ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11582:11595  $._allowances */\n      0x01\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11582:11602  $._allowances[owner] */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11596:11601  owner */\n      dup8\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11582:11602  $._allowances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11582:11611  $._allowances[owner][spender] */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11603:11610  spender */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11582:11611  $._allowances[owner][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11582:11619  $._allowances[owner][spender] = value */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11633:11642  emitEvent */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11629:11705  if (emitEvent) {... */\n      iszero\n      tag_364\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11679:11686  spender */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11663:11694  Approval(owner, spender, value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11672:11677  owner */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11663:11694  Approval(owner, spender, value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11688:11693  value */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11663:11694  Approval(owner, spender, value) */\n      mload(0x40)\n      tag_365\n      swap2\n      swap1\n      tag_42\n      jump\t// in\n    tag_365:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11629:11705  if (emitEvent) {... */\n    tag_364:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11322:11711  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11224:11711  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/MyToken.sol\":1414:1601  function _update(address from, address to, uint256 value)... */\n    tag_268:\n        /* \"contracts/MyToken.sol\":1564:1594  super._update(from, to, value) */\n      tag_367\n        /* \"contracts/MyToken.sol\":1578:1582  from */\n      dup4\n        /* \"contracts/MyToken.sol\":1584:1586  to */\n      dup4\n        /* \"contracts/MyToken.sol\":1588:1593  value */\n      dup4\n        /* \"contracts/MyToken.sol\":1564:1577  super._update */\n      tag_368\n        /* \"contracts/MyToken.sol\":1564:1594  super._update(from, to, value) */\n      jump\t// in\n    tag_367:\n        /* \"contracts/MyToken.sol\":1414:1601  function _update(address from, address to, uint256 value)... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":4130:4321  function _buildDomainSeparator() private view returns (bytes32) {... */\n    tag_271:\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":4185:4192  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":2073:2168  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n      0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":4243:4260  _EIP712NameHash() */\n      tag_370\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":4243:4258  _EIP712NameHash */\n      tag_371\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":4243:4260  _EIP712NameHash() */\n      jump\t// in\n    tag_370:\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":4262:4282  _EIP712VersionHash() */\n      tag_372\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":4262:4280  _EIP712VersionHash */\n      tag_373\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":4262:4282  _EIP712VersionHash() */\n      jump\t// in\n    tag_372:\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":4284:4297  block.chainid */\n      chainid\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":4307:4311  this */\n      address\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":4221:4313  abi.encode(TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)) */\n      add(0x20, mload(0x40))\n      tag_374\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_375\n      jump\t// in\n    tag_374:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":4211:4314  keccak256(abi.encode(TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this))) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":4204:4314  return keccak256(abi.encode(TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this))) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":4130:4321  function _buildDomainSeparator() private view returns (bytes32) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3105:3231  function _requirePaused() internal view virtual {... */\n    tag_280:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3168:3176  paused() */\n      tag_377\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3168:3174  paused */\n      tag_66\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3168:3176  paused() */\n      jump\t// in\n    tag_377:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3163:3225  if (!paused()) {... */\n      tag_378\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3199:3214  ExpectedPause() */\n      mload(0x40)\n      0x8dfc202b00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3163:3225  if (!paused()) {... */\n    tag_378:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3105:3231  function _requirePaused() internal view virtual {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":886:1042  function _getNoncesStorage() private pure returns (NoncesStorage storage $) {... */\n    tag_298:\n        /* \"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":937:960  NoncesStorage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":1005:1026  NoncesStorageLocation */\n      0x5ab42ced628888259c08ac98db1eb0cf702fc1501344311d8b100cd1bfe4bb00\n        /* \"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":995:1026  $.slot := NoncesStorageLocation */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":886:1042  function _getNoncesStorage() private pure returns (NoncesStorage storage $) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2905:3033  function _requireNotPaused() internal view virtual {... */\n    tag_301:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2970:2978  paused() */\n      tag_381\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2970:2976  paused */\n      tag_66\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2970:2978  paused() */\n      jump\t// in\n    tag_381:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2966:3027  if (paused()) {... */\n      iszero\n      tag_382\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3001:3016  EnforcedPause() */\n      mload(0x40)\n      0xd93c066500000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2966:3027  if (paused()) {... */\n    tag_382:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2905:3033  function _requireNotPaused() internal view virtual {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7084:7225  function _checkInitializing() internal view virtual {... */\n    tag_325:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7151:7168  _isInitializing() */\n      tag_384\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7151:7166  _isInitializing */\n      tag_385\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7151:7168  _isInitializing() */\n      jump\t// in\n    tag_384:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7146:7219  if (!_isInitializing()) {... */\n      tag_386\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7191:7208  NotInitializing() */\n      mload(0x40)\n      0xd7e6bcf800000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7146:7219  if (!_isInitializing()) {... */\n    tag_386:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7084:7225  function _checkInitializing() internal view virtual {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2730:2946  function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {... */\n    tag_328:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      tag_388\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6949  _checkInitializing */\n      tag_325\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      jump\t// in\n    tag_388:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2842:2864  ERC20Storage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2867:2885  _getERC20Storage() */\n      tag_390\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2867:2883  _getERC20Storage */\n      tag_116\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2867:2885  _getERC20Storage() */\n      jump\t// in\n    tag_390:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2842:2885  ERC20Storage storage $ = _getERC20Storage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2905:2910  name_ */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2895:2896  $ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2895:2902  $._name */\n      0x03\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2895:2910  $._name = name_ */\n      swap1\n      dup2\n      tag_391\n      swap2\n      swap1\n      tag_392\n      jump\t// in\n    tag_391:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2932:2939  symbol_ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2920:2921  $ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2920:2929  $._symbol */\n      0x04\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2920:2939  $._symbol = symbol_ */\n      swap1\n      dup2\n      tag_393\n      swap2\n      swap1\n      tag_392\n      jump\t// in\n    tag_393:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2832:2946  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2730:2946  function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":1939:2095  function __Pausable_init_unchained() internal onlyInitializing {... */\n    tag_336:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      tag_395\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6949  _checkInitializing */\n      tag_325\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      jump\t// in\n    tag_395:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2012:2037  PausableStorage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2040:2061  _getPausableStorage() */\n      tag_397\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2040:2059  _getPausableStorage */\n      tag_157\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2040:2061  _getPausableStorage() */\n      jump\t// in\n    tag_397:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2012:2061  PausableStorage storage $ = _getPausableStorage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2083:2088  false */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2071:2072  $ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2071:2080  $._paused */\n      0x00\n      add\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2071:2088  $._paused = false */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2002:2095  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":1939:2095  function __Pausable_init_unchained() internal onlyInitializing {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1980:2215  function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {... */\n    tag_341:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      tag_399\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6949  _checkInitializing */\n      tag_325\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      jump\t// in\n    tag_399:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2100:2101  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2076:2102  initialOwner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2076:2088  initialOwner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2076:2102  initialOwner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2072:2167  if (initialOwner == address(0)) {... */\n      tag_401\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2153:2154  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2125:2156  OwnableInvalidOwner(address(0)) */\n      mload(0x40)\n      0x1e4fbdf700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_402\n      swap2\n      swap1\n      tag_91\n      jump\t// in\n    tag_402:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2072:2167  if (initialOwner == address(0)) {... */\n    tag_401:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2176:2208  _transferOwnership(initialOwner) */\n      tag_403\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2195:2207  initialOwner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2176:2194  _transferOwnership */\n      tag_164\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2176:2208  _transferOwnership(initialOwner) */\n      jump\t// in\n    tag_403:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1980:2215  function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":3599:3929  function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {... */\n    tag_346:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      tag_405\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6949  _checkInitializing */\n      tag_325\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      jump\t// in\n    tag_405:\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":3711:3734  EIP712Storage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":3737:3756  _getEIP712Storage() */\n      tag_407\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":3737:3754  _getEIP712Storage */\n      tag_179\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":3737:3756  _getEIP712Storage() */\n      jump\t// in\n    tag_407:\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":3711:3756  EIP712Storage storage $ = _getEIP712Storage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":3776:3780  name */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":3766:3767  $ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":3766:3773  $._name */\n      0x02\n      add\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":3766:3780  $._name = name */\n      swap1\n      dup2\n      tag_408\n      swap2\n      swap1\n      tag_392\n      jump\t// in\n    tag_408:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":3803:3810  version */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":3790:3791  $ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":3790:3800  $._version */\n      0x03\n      add\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":3790:3810  $._version = version */\n      swap1\n      dup2\n      tag_409\n      swap2\n      swap1\n      tag_392\n      jump\t// in\n    tag_409:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":3891:3892  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":3875:3892  $._hashedName = 0 */\n      dup1\n      shl\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":3875:3876  $ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":3875:3888  $._hashedName */\n      0x00\n      add\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":3875:3892  $._hashedName = 0 */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":3921:3922  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":3902:3922  $._hashedVersion = 0 */\n      dup1\n      shl\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":3902:3903  $ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":3902:3918  $._hashedVersion */\n      0x01\n      add\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":3902:3922  $._hashedVersion = 0 */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":3701:3929  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":3599:3929  function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3353:3754  function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {... */\n    tag_352:\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3446:3460  bytes32 digest */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3555:3559  0x40 */\n      0x40\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3549:3560  mload(0x40) */\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3585:3595  hex\"19_01\" */\n      0x1901000000000000000000000000000000000000000000000000000000000000\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3580:3583  ptr */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3573:3596  mstore(ptr, hex\"19_01\") */\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3632:3647  domainSeparator */\n      dup4\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3625:3629  0x02 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3620:3623  ptr */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3616:3630  add(ptr, 0x02) */\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3609:3648  mstore(add(ptr, 0x02), domainSeparator) */\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3684:3694  structHash */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3677:3681  0x22 */\n      0x22\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3672:3675  ptr */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3668:3682  add(ptr, 0x22) */\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3661:3695  mstore(add(ptr, 0x22), structHash) */\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3733:3737  0x42 */\n      0x42\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3728:3731  ptr */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3718:3738  keccak256(ptr, 0x42) */\n      keccak256\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3708:3738  digest := keccak256(ptr, 0x42) */\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3524:3748  {... */\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3353:3754  function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5140:6670  function tryRecover(... */\n    tag_355:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5266:5273  address */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5275:5287  RecoverError */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5289:5296  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6199:6265  0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 */\n      0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6194:6195  s */\n      dup5\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6186:6196  uint256(s) */\n      0x00\n      shr\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6186:6265  uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 */\n      gt\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6182:6346  if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {... */\n      iszero\n      tag_412\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6297:6298  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6301:6331  RecoverError.InvalidSignatureS */\n      0x03\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6333:6334  s */\n      dup6\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6281:6335  return (address(0), RecoverError.InvalidSignatureS, s) */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      pop\n      jump(tag_411)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6182:6346  if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {... */\n    tag_412:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6440:6454  address signer */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6457:6481  ecrecover(hash, v, r, s) */\n      0x01\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6467:6471  hash */\n      dup9\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6473:6474  v */\n      dup9\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6476:6477  r */\n      dup9\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6479:6480  s */\n      dup9\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6457:6481  ecrecover(hash, v, r, s) */\n      mload(0x40)\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x40\n      mstore\n      mload(0x40)\n      tag_413\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_414\n      jump\t// in\n    tag_413:\n      0x20\n      mload(0x40)\n      0x20\n      dup2\n      sub\n      swap1\n      dup1\n      dup5\n      sub\n      swap1\n      dup6\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_416\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_416:\n      pop\n      pop\n      pop\n      mload(sub(mload(0x40), 0x20))\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6440:6481  address signer = ecrecover(hash, v, r, s) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6513:6514  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6495:6515  signer == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6495:6501  signer */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6495:6515  signer == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6491:6604  if (signer == address(0)) {... */\n      tag_417\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6547:6548  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6551:6580  RecoverError.InvalidSignature */\n      0x01\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6590:6591  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6582:6592  bytes32(0) */\n      dup1\n      shl\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6531:6593  return (address(0), RecoverError.InvalidSignature, bytes32(0)) */\n      swap4\n      pop\n      swap4\n      pop\n      swap4\n      pop\n      pop\n      jump(tag_411)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6491:6604  if (signer == address(0)) {... */\n    tag_417:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6622:6628  signer */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6630:6650  RecoverError.NoError */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6660:6661  0 */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6652:6662  bytes32(0) */\n      0x00\n      shl\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6614:6663  return (signer, RecoverError.NoError, bytes32(0)) */\n      swap4\n      pop\n      swap4\n      pop\n      swap4\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5140:6670  function tryRecover(... */\n    tag_411:\n      swap5\n      pop\n      swap5\n      pop\n      swap5\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7196:7728  function _throwError(RecoverError error, bytes32 errorArg) private pure {... */\n    tag_357:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7291:7311  RecoverError.NoError */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7282:7311  error == RecoverError.NoError */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_419\n      jumpi\n      tag_420\n      tag_421\n      jump\t// in\n    tag_420:\n    tag_419:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7282:7287  error */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7282:7311  error == RecoverError.NoError */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_422\n      jumpi\n      tag_423\n      tag_421\n      jump\t// in\n    tag_423:\n    tag_422:\n      sub\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7278:7722  if (error == RecoverError.NoError) {... */\n      iszero\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7327:7334  return; */\n      tag_418\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7278:7722  if (error == RecoverError.NoError) {... */\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7387:7416  RecoverError.InvalidSignature */\n      0x01\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7378:7416  error == RecoverError.InvalidSignature */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_426\n      jumpi\n      tag_427\n      tag_421\n      jump\t// in\n    tag_427:\n    tag_426:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7378:7383  error */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7378:7416  error == RecoverError.InvalidSignature */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_428\n      jumpi\n      tag_429\n      tag_421\n      jump\t// in\n    tag_429:\n    tag_428:\n      sub\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7374:7722  if (error == RecoverError.InvalidSignature) {... */\n      tag_430\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7439:7462  ECDSAInvalidSignature() */\n      mload(0x40)\n      0xf645eedf00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7374:7722  if (error == RecoverError.InvalidSignature) {... */\n    tag_430:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7492:7527  RecoverError.InvalidSignatureLength */\n      0x02\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7483:7527  error == RecoverError.InvalidSignatureLength */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_432\n      jumpi\n      tag_433\n      tag_421\n      jump\t// in\n    tag_433:\n    tag_432:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7483:7488  error */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7483:7527  error == RecoverError.InvalidSignatureLength */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_434\n      jumpi\n      tag_435\n      tag_421\n      jump\t// in\n    tag_435:\n    tag_434:\n      sub\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7479:7722  if (error == RecoverError.InvalidSignatureLength) {... */\n      tag_436\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7586:7594  errorArg */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7578:7595  uint256(errorArg) */\n      0x00\n      shr\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7550:7596  ECDSAInvalidSignatureLength(uint256(errorArg)) */\n      mload(0x40)\n      0xfce698f700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_437\n      swap2\n      swap1\n      tag_42\n      jump\t// in\n    tag_437:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7479:7722  if (error == RecoverError.InvalidSignatureLength) {... */\n    tag_436:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7626:7656  RecoverError.InvalidSignatureS */\n      0x03\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7617:7656  error == RecoverError.InvalidSignatureS */\n      dup1\n      dup2\n      gt\n      iszero\n      tag_439\n      jumpi\n      tag_440\n      tag_421\n      jump\t// in\n    tag_440:\n    tag_439:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7617:7622  error */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7617:7656  error == RecoverError.InvalidSignatureS */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_441\n      jumpi\n      tag_442\n      tag_421\n      jump\t// in\n    tag_442:\n    tag_441:\n      sub\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7613:7722  if (error == RecoverError.InvalidSignatureS) {... */\n      tag_443\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7702:7710  errorArg */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7679:7711  ECDSAInvalidSignatureS(errorArg) */\n      mload(0x40)\n      0xd78bce0c00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_444\n      swap2\n      swap1\n      tag_55\n      jump\t// in\n    tag_444:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7613:7722  if (error == RecoverError.InvalidSignatureS) {... */\n    tag_443:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7196:7728  function _throwError(RecoverError error, bytes32 errorArg) private pure {... */\n    tag_418:\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol\":1462:1607  function _update(address from, address to, uint256 value) internal virtual override whenNotPaused {... */\n    tag_368:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2316:2335  _requireNotPaused() */\n      tag_446\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2316:2333  _requireNotPaused */\n      tag_301\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2316:2335  _requireNotPaused() */\n      jump\t// in\n    tag_446:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol\":1570:1600  super._update(from, to, value) */\n      tag_448\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol\":1584:1588  from */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol\":1590:1592  to */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol\":1594:1599  value */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol\":1570:1583  super._update */\n      tag_449\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol\":1570:1600  super._update(from, to, value) */\n      jump\t// in\n    tag_448:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol\":1462:1607  function _update(address from, address to, uint256 value) internal virtual override whenNotPaused {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7058:7745  function _EIP712NameHash() internal view returns (bytes32) {... */\n    tag_371:\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7108:7115  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7127:7150  EIP712Storage storage $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7153:7172  _getEIP712Storage() */\n      tag_451\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7153:7170  _getEIP712Storage */\n      tag_179\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7153:7172  _getEIP712Storage() */\n      jump\t// in\n    tag_451:\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7127:7172  EIP712Storage storage $ = _getEIP712Storage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7182:7200  string memory name */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7203:7216  _EIP712Name() */\n      tag_452\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7203:7214  _EIP712Name */\n      tag_185\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7203:7216  _EIP712Name() */\n      jump\t// in\n    tag_452:\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7182:7216  string memory name = _EIP712Name() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7251:7252  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7236:7240  name */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7230:7248  bytes(name).length */\n      mload\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7230:7252  bytes(name).length > 0 */\n      gt\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7226:7739  if (bytes(name).length > 0) {... */\n      iszero\n      tag_453\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7291:7295  name */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7275:7297  keccak256(bytes(name)) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7268:7297  return keccak256(bytes(name)) */\n      swap3\n      pop\n      pop\n      pop\n      jump(tag_450)\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7226:7739  if (bytes(name).length > 0) {... */\n    tag_453:\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7551:7569  bytes32 hashedName */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7572:7573  $ */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7572:7585  $._hashedName */\n      0x00\n      add\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7551:7585  bytes32 hashedName = $._hashedName */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7617:7618  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7603:7618  hashedName != 0 */\n      dup1\n      shl\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7603:7613  hashedName */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7603:7618  hashedName != 0 */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7599:7729  if (hashedName != 0) {... */\n      tag_455\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7645:7655  hashedName */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7638:7655  return hashedName */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump(tag_450)\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7599:7729  if (hashedName != 0) {... */\n    tag_455:\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7701:7714  keccak256(\"\") */\n      0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7694:7714  return keccak256(\"\") */\n      swap4\n      pop\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7058:7745  function _EIP712NameHash() internal view returns (bytes32) {... */\n    tag_450:\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7966:8689  function _EIP712VersionHash() internal view returns (bytes32) {... */\n    tag_373:\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":8019:8026  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":8038:8061  EIP712Storage storage $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":8064:8083  _getEIP712Storage() */\n      tag_458\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":8064:8081  _getEIP712Storage */\n      tag_179\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":8064:8083  _getEIP712Storage() */\n      jump\t// in\n    tag_458:\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":8038:8083  EIP712Storage storage $ = _getEIP712Storage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":8093:8114  string memory version */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":8117:8133  _EIP712Version() */\n      tag_459\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":8117:8131  _EIP712Version */\n      tag_187\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":8117:8133  _EIP712Version() */\n      jump\t// in\n    tag_459:\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":8093:8133  string memory version = _EIP712Version() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":8171:8172  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":8153:8160  version */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":8147:8168  bytes(version).length */\n      mload\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":8147:8172  bytes(version).length > 0 */\n      gt\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":8143:8683  if (bytes(version).length > 0) {... */\n      iszero\n      tag_460\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":8211:8218  version */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":8195:8220  keccak256(bytes(version)) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":8188:8220  return keccak256(bytes(version)) */\n      swap3\n      pop\n      pop\n      pop\n      jump(tag_457)\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":8143:8683  if (bytes(version).length > 0) {... */\n    tag_460:\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":8483:8504  bytes32 hashedVersion */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":8507:8508  $ */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":8507:8523  $._hashedVersion */\n      0x01\n      add\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":8483:8523  bytes32 hashedVersion = $._hashedVersion */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":8558:8559  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":8541:8559  hashedVersion != 0 */\n      dup1\n      shl\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":8541:8554  hashedVersion */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":8541:8559  hashedVersion != 0 */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":8537:8673  if (hashedVersion != 0) {... */\n      tag_462\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":8586:8599  hashedVersion */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":8579:8599  return hashedVersion */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump(tag_457)\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":8537:8673  if (hashedVersion != 0) {... */\n    tag_462:\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":8645:8658  keccak256(\"\") */\n      0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":8638:8658  return keccak256(\"\") */\n      swap4\n      pop\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":7966:8689  function _EIP712VersionHash() internal view returns (bytes32) {... */\n    tag_457:\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8487:8607  function _isInitializing() internal view returns (bool) {... */\n    tag_385:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8537:8541  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8560:8586  _getInitializableStorage() */\n      tag_465\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8560:8584  _getInitializableStorage */\n      tag_207\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8560:8586  _getInitializableStorage() */\n      jump\t// in\n    tag_465:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8560:8600  _getInitializableStorage()._initializing */\n      0x00\n      add\n      0x08\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8553:8600  return _getInitializableStorage()._initializing */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8487:8607  function _isInitializing() internal view returns (bool) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7483:8653  function _update(address from, address to, uint256 value) internal virtual {... */\n    tag_449:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7568:7590  ERC20Storage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7593:7611  _getERC20Storage() */\n      tag_467\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7593:7609  _getERC20Storage */\n      tag_116\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7593:7611  _getERC20Storage() */\n      jump\t// in\n    tag_467:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7568:7611  ERC20Storage storage $ = _getERC20Storage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7641:7642  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7625:7643  from == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7625:7629  from */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7625:7643  from == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7621:8167  if (from == address(0)) {... */\n      tag_468\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7779:7784  value */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7761:7762  $ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7761:7775  $._totalSupply */\n      0x02\n      add\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7761:7784  $._totalSupply += value */\n      dup3\n      dup3\n      sload\n      tag_469\n      swap2\n      swap1\n      tag_470\n      jump\t// in\n    tag_469:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7621:8167  if (from == address(0)) {... */\n      jump(tag_471)\n    tag_468:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7815:7834  uint256 fromBalance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7837:7838  $ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7837:7848  $._balances */\n      0x00\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7837:7854  $._balances[from] */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7849:7853  from */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7837:7854  $._balances[from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7815:7854  uint256 fromBalance = $._balances[from] */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7886:7891  value */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7872:7883  fromBalance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7872:7891  fromBalance < value */\n      lt\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7868:7983  if (fromBalance < value) {... */\n      iszero\n      tag_472\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7943:7947  from */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7949:7960  fromBalance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7962:7967  value */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7918:7968  ERC20InsufficientBalance(from, fromBalance, value) */\n      mload(0x40)\n      0xe450d38c00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_473\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_260\n      jump\t// in\n    tag_473:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7868:7983  if (fromBalance < value) {... */\n    tag_472:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8137:8142  value */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8123:8134  fromBalance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8123:8142  fromBalance - value */\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8103:8104  $ */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8103:8114  $._balances */\n      0x00\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8103:8120  $._balances[from] */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8115:8119  from */\n      dup8\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8103:8120  $._balances[from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8103:8142  $._balances[from] = fromBalance - value */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7801:8167  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7621:8167  if (from == address(0)) {... */\n    tag_471:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8195:8196  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8181:8197  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8181:8183  to */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8181:8197  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8177:8606  if (to == address(0)) {... */\n      tag_474\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8362:8367  value */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8344:8345  $ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8344:8358  $._totalSupply */\n      0x02\n      add\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8344:8367  $._totalSupply -= value */\n      dup3\n      dup3\n      sload\n      sub\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8177:8606  if (to == address(0)) {... */\n      jump(tag_475)\n    tag_474:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8576:8581  value */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8557:8558  $ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8557:8568  $._balances */\n      0x00\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8557:8572  $._balances[to] */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8569:8571  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8557:8572  $._balances[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8557:8581  $._balances[to] += value */\n      dup3\n      dup3\n      sload\n      add\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8177:8606  if (to == address(0)) {... */\n    tag_475:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8636:8638  to */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8621:8646  Transfer(from, to, value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8630:8634  from */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8621:8646  Transfer(from, to, value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8640:8645  value */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8621:8646  Transfer(from, to, value) */\n      mload(0x40)\n      tag_476\n      swap2\n      swap1\n      tag_42\n      jump\t// in\n    tag_476:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7558:8653  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7483:8653  function _update(address from, address to, uint256 value) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7:106   */\n    tag_477:\n        /* \"#utility.yul\":59:65   */\n      0x00\n        /* \"#utility.yul\":93:98   */\n      dup2\n        /* \"#utility.yul\":87:99   */\n      mload\n        /* \"#utility.yul\":77:99   */\n      swap1\n      pop\n        /* \"#utility.yul\":7:106   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":112:281   */\n    tag_478:\n        /* \"#utility.yul\":196:207   */\n      0x00\n        /* \"#utility.yul\":230:236   */\n      dup3\n        /* \"#utility.yul\":225:228   */\n      dup3\n        /* \"#utility.yul\":218:237   */\n      mstore\n        /* \"#utility.yul\":270:274   */\n      0x20\n        /* \"#utility.yul\":265:268   */\n      dup3\n        /* \"#utility.yul\":261:275   */\n      add\n        /* \"#utility.yul\":246:275   */\n      swap1\n      pop\n        /* \"#utility.yul\":112:281   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":287:533   */\n    tag_479:\n        /* \"#utility.yul\":368:369   */\n      0x00\n        /* \"#utility.yul\":378:491   */\n    tag_540:\n        /* \"#utility.yul\":392:398   */\n      dup4\n        /* \"#utility.yul\":389:390   */\n      dup2\n        /* \"#utility.yul\":386:399   */\n      lt\n        /* \"#utility.yul\":378:491   */\n      iszero\n      tag_542\n      jumpi\n        /* \"#utility.yul\":477:478   */\n      dup1\n        /* \"#utility.yul\":472:475   */\n      dup3\n        /* \"#utility.yul\":468:479   */\n      add\n        /* \"#utility.yul\":462:480   */\n      mload\n        /* \"#utility.yul\":458:459   */\n      dup2\n        /* \"#utility.yul\":453:456   */\n      dup5\n        /* \"#utility.yul\":449:460   */\n      add\n        /* \"#utility.yul\":442:481   */\n      mstore\n        /* \"#utility.yul\":414:416   */\n      0x20\n        /* \"#utility.yul\":411:412   */\n      dup2\n        /* \"#utility.yul\":407:417   */\n      add\n        /* \"#utility.yul\":402:417   */\n      swap1\n      pop\n        /* \"#utility.yul\":378:491   */\n      jump(tag_540)\n    tag_542:\n        /* \"#utility.yul\":525:526   */\n      0x00\n        /* \"#utility.yul\":516:522   */\n      dup5\n        /* \"#utility.yul\":511:514   */\n      dup5\n        /* \"#utility.yul\":507:523   */\n      add\n        /* \"#utility.yul\":500:527   */\n      mstore\n        /* \"#utility.yul\":349:533   */\n      pop\n        /* \"#utility.yul\":287:533   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":539:641   */\n    tag_480:\n        /* \"#utility.yul\":580:586   */\n      0x00\n        /* \"#utility.yul\":631:633   */\n      0x1f\n        /* \"#utility.yul\":627:634   */\n      not\n        /* \"#utility.yul\":622:624   */\n      0x1f\n        /* \"#utility.yul\":615:620   */\n      dup4\n        /* \"#utility.yul\":611:625   */\n      add\n        /* \"#utility.yul\":607:635   */\n      and\n        /* \"#utility.yul\":597:635   */\n      swap1\n      pop\n        /* \"#utility.yul\":539:641   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":647:1024   */\n    tag_481:\n        /* \"#utility.yul\":735:738   */\n      0x00\n        /* \"#utility.yul\":763:802   */\n      tag_545\n        /* \"#utility.yul\":796:801   */\n      dup3\n        /* \"#utility.yul\":763:802   */\n      tag_477\n      jump\t// in\n    tag_545:\n        /* \"#utility.yul\":818:889   */\n      tag_546\n        /* \"#utility.yul\":882:888   */\n      dup2\n        /* \"#utility.yul\":877:880   */\n      dup6\n        /* \"#utility.yul\":818:889   */\n      tag_478\n      jump\t// in\n    tag_546:\n        /* \"#utility.yul\":811:889   */\n      swap4\n      pop\n        /* \"#utility.yul\":898:963   */\n      tag_547\n        /* \"#utility.yul\":956:962   */\n      dup2\n        /* \"#utility.yul\":951:954   */\n      dup6\n        /* \"#utility.yul\":944:948   */\n      0x20\n        /* \"#utility.yul\":937:942   */\n      dup7\n        /* \"#utility.yul\":933:949   */\n      add\n        /* \"#utility.yul\":898:963   */\n      tag_479\n      jump\t// in\n    tag_547:\n        /* \"#utility.yul\":988:1017   */\n      tag_548\n        /* \"#utility.yul\":1010:1016   */\n      dup2\n        /* \"#utility.yul\":988:1017   */\n      tag_480\n      jump\t// in\n    tag_548:\n        /* \"#utility.yul\":983:986   */\n      dup5\n        /* \"#utility.yul\":979:1018   */\n      add\n        /* \"#utility.yul\":972:1018   */\n      swap2\n      pop\n        /* \"#utility.yul\":739:1024   */\n      pop\n        /* \"#utility.yul\":647:1024   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1030:1343   */\n    tag_32:\n        /* \"#utility.yul\":1143:1147   */\n      0x00\n        /* \"#utility.yul\":1181:1183   */\n      0x20\n        /* \"#utility.yul\":1170:1179   */\n      dup3\n        /* \"#utility.yul\":1166:1184   */\n      add\n        /* \"#utility.yul\":1158:1184   */\n      swap1\n      pop\n        /* \"#utility.yul\":1230:1239   */\n      dup2\n        /* \"#utility.yul\":1224:1228   */\n      dup2\n        /* \"#utility.yul\":1220:1240   */\n      sub\n        /* \"#utility.yul\":1216:1217   */\n      0x00\n        /* \"#utility.yul\":1205:1214   */\n      dup4\n        /* \"#utility.yul\":1201:1218   */\n      add\n        /* \"#utility.yul\":1194:1241   */\n      mstore\n        /* \"#utility.yul\":1258:1336   */\n      tag_550\n        /* \"#utility.yul\":1331:1335   */\n      dup2\n        /* \"#utility.yul\":1322:1328   */\n      dup5\n        /* \"#utility.yul\":1258:1336   */\n      tag_481\n      jump\t// in\n    tag_550:\n        /* \"#utility.yul\":1250:1336   */\n      swap1\n      pop\n        /* \"#utility.yul\":1030:1343   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1430:1547   */\n    tag_483:\n        /* \"#utility.yul\":1539:1540   */\n      0x00\n        /* \"#utility.yul\":1536:1537   */\n      dup1\n        /* \"#utility.yul\":1529:1541   */\n      revert\n        /* \"#utility.yul\":1676:1802   */\n    tag_485:\n        /* \"#utility.yul\":1713:1720   */\n      0x00\n        /* \"#utility.yul\":1753:1795   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":1746:1751   */\n      dup3\n        /* \"#utility.yul\":1742:1796   */\n      and\n        /* \"#utility.yul\":1731:1796   */\n      swap1\n      pop\n        /* \"#utility.yul\":1676:1802   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1808:1904   */\n    tag_486:\n        /* \"#utility.yul\":1845:1852   */\n      0x00\n        /* \"#utility.yul\":1874:1898   */\n      tag_556\n        /* \"#utility.yul\":1892:1897   */\n      dup3\n        /* \"#utility.yul\":1874:1898   */\n      tag_485\n      jump\t// in\n    tag_556:\n        /* \"#utility.yul\":1863:1898   */\n      swap1\n      pop\n        /* \"#utility.yul\":1808:1904   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1910:2032   */\n    tag_487:\n        /* \"#utility.yul\":1983:2007   */\n      tag_558\n        /* \"#utility.yul\":2001:2006   */\n      dup2\n        /* \"#utility.yul\":1983:2007   */\n      tag_486\n      jump\t// in\n    tag_558:\n        /* \"#utility.yul\":1976:1981   */\n      dup2\n        /* \"#utility.yul\":1973:2008   */\n      eq\n        /* \"#utility.yul\":1963:2026   */\n      tag_559\n      jumpi\n        /* \"#utility.yul\":2022:2023   */\n      0x00\n        /* \"#utility.yul\":2019:2020   */\n      dup1\n        /* \"#utility.yul\":2012:2024   */\n      revert\n        /* \"#utility.yul\":1963:2026   */\n    tag_559:\n        /* \"#utility.yul\":1910:2032   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2038:2177   */\n    tag_488:\n        /* \"#utility.yul\":2084:2089   */\n      0x00\n        /* \"#utility.yul\":2122:2128   */\n      dup2\n        /* \"#utility.yul\":2109:2129   */\n      calldataload\n        /* \"#utility.yul\":2100:2129   */\n      swap1\n      pop\n        /* \"#utility.yul\":2138:2171   */\n      tag_561\n        /* \"#utility.yul\":2165:2170   */\n      dup2\n        /* \"#utility.yul\":2138:2171   */\n      tag_487\n      jump\t// in\n    tag_561:\n        /* \"#utility.yul\":2038:2177   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2183:2260   */\n    tag_489:\n        /* \"#utility.yul\":2220:2227   */\n      0x00\n        /* \"#utility.yul\":2249:2254   */\n      dup2\n        /* \"#utility.yul\":2238:2254   */\n      swap1\n      pop\n        /* \"#utility.yul\":2183:2260   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2266:2388   */\n    tag_490:\n        /* \"#utility.yul\":2339:2363   */\n      tag_564\n        /* \"#utility.yul\":2357:2362   */\n      dup2\n        /* \"#utility.yul\":2339:2363   */\n      tag_489\n      jump\t// in\n    tag_564:\n        /* \"#utility.yul\":2332:2337   */\n      dup2\n        /* \"#utility.yul\":2329:2364   */\n      eq\n        /* \"#utility.yul\":2319:2382   */\n      tag_565\n      jumpi\n        /* \"#utility.yul\":2378:2379   */\n      0x00\n        /* \"#utility.yul\":2375:2376   */\n      dup1\n        /* \"#utility.yul\":2368:2380   */\n      revert\n        /* \"#utility.yul\":2319:2382   */\n    tag_565:\n        /* \"#utility.yul\":2266:2388   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2394:2533   */\n    tag_491:\n        /* \"#utility.yul\":2440:2445   */\n      0x00\n        /* \"#utility.yul\":2478:2484   */\n      dup2\n        /* \"#utility.yul\":2465:2485   */\n      calldataload\n        /* \"#utility.yul\":2456:2485   */\n      swap1\n      pop\n        /* \"#utility.yul\":2494:2527   */\n      tag_567\n        /* \"#utility.yul\":2521:2526   */\n      dup2\n        /* \"#utility.yul\":2494:2527   */\n      tag_490\n      jump\t// in\n    tag_567:\n        /* \"#utility.yul\":2394:2533   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2539:3013   */\n    tag_35:\n        /* \"#utility.yul\":2607:2613   */\n      0x00\n        /* \"#utility.yul\":2615:2621   */\n      dup1\n        /* \"#utility.yul\":2664:2666   */\n      0x40\n        /* \"#utility.yul\":2652:2661   */\n      dup4\n        /* \"#utility.yul\":2643:2650   */\n      dup6\n        /* \"#utility.yul\":2639:2662   */\n      sub\n        /* \"#utility.yul\":2635:2667   */\n      slt\n        /* \"#utility.yul\":2632:2751   */\n      iszero\n      tag_569\n      jumpi\n        /* \"#utility.yul\":2670:2749   */\n      tag_570\n      tag_483\n      jump\t// in\n    tag_570:\n        /* \"#utility.yul\":2632:2751   */\n    tag_569:\n        /* \"#utility.yul\":2790:2791   */\n      0x00\n        /* \"#utility.yul\":2815:2868   */\n      tag_571\n        /* \"#utility.yul\":2860:2867   */\n      dup6\n        /* \"#utility.yul\":2851:2857   */\n      dup3\n        /* \"#utility.yul\":2840:2849   */\n      dup7\n        /* \"#utility.yul\":2836:2858   */\n      add\n        /* \"#utility.yul\":2815:2868   */\n      tag_488\n      jump\t// in\n    tag_571:\n        /* \"#utility.yul\":2805:2868   */\n      swap3\n      pop\n        /* \"#utility.yul\":2761:2878   */\n      pop\n        /* \"#utility.yul\":2917:2919   */\n      0x20\n        /* \"#utility.yul\":2943:2996   */\n      tag_572\n        /* \"#utility.yul\":2988:2995   */\n      dup6\n        /* \"#utility.yul\":2979:2985   */\n      dup3\n        /* \"#utility.yul\":2968:2977   */\n      dup7\n        /* \"#utility.yul\":2964:2986   */\n      add\n        /* \"#utility.yul\":2943:2996   */\n      tag_491\n      jump\t// in\n    tag_572:\n        /* \"#utility.yul\":2933:2996   */\n      swap2\n      pop\n        /* \"#utility.yul\":2888:3006   */\n      pop\n        /* \"#utility.yul\":2539:3013   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3019:3109   */\n    tag_492:\n        /* \"#utility.yul\":3053:3060   */\n      0x00\n        /* \"#utility.yul\":3096:3101   */\n      dup2\n        /* \"#utility.yul\":3089:3102   */\n      iszero\n        /* \"#utility.yul\":3082:3103   */\n      iszero\n        /* \"#utility.yul\":3071:3103   */\n      swap1\n      pop\n        /* \"#utility.yul\":3019:3109   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3115:3224   */\n    tag_493:\n        /* \"#utility.yul\":3196:3217   */\n      tag_575\n        /* \"#utility.yul\":3211:3216   */\n      dup2\n        /* \"#utility.yul\":3196:3217   */\n      tag_492\n      jump\t// in\n    tag_575:\n        /* \"#utility.yul\":3191:3194   */\n      dup3\n        /* \"#utility.yul\":3184:3218   */\n      mstore\n        /* \"#utility.yul\":3115:3224   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3230:3440   */\n    tag_38:\n        /* \"#utility.yul\":3317:3321   */\n      0x00\n        /* \"#utility.yul\":3355:3357   */\n      0x20\n        /* \"#utility.yul\":3344:3353   */\n      dup3\n        /* \"#utility.yul\":3340:3358   */\n      add\n        /* \"#utility.yul\":3332:3358   */\n      swap1\n      pop\n        /* \"#utility.yul\":3368:3433   */\n      tag_577\n        /* \"#utility.yul\":3430:3431   */\n      0x00\n        /* \"#utility.yul\":3419:3428   */\n      dup4\n        /* \"#utility.yul\":3415:3432   */\n      add\n        /* \"#utility.yul\":3406:3412   */\n      dup5\n        /* \"#utility.yul\":3368:3433   */\n      tag_493\n      jump\t// in\n    tag_577:\n        /* \"#utility.yul\":3230:3440   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3446:3564   */\n    tag_494:\n        /* \"#utility.yul\":3533:3557   */\n      tag_579\n        /* \"#utility.yul\":3551:3556   */\n      dup2\n        /* \"#utility.yul\":3533:3557   */\n      tag_489\n      jump\t// in\n    tag_579:\n        /* \"#utility.yul\":3528:3531   */\n      dup3\n        /* \"#utility.yul\":3521:3558   */\n      mstore\n        /* \"#utility.yul\":3446:3564   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3570:3792   */\n    tag_42:\n        /* \"#utility.yul\":3663:3667   */\n      0x00\n        /* \"#utility.yul\":3701:3703   */\n      0x20\n        /* \"#utility.yul\":3690:3699   */\n      dup3\n        /* \"#utility.yul\":3686:3704   */\n      add\n        /* \"#utility.yul\":3678:3704   */\n      swap1\n      pop\n        /* \"#utility.yul\":3714:3785   */\n      tag_581\n        /* \"#utility.yul\":3782:3783   */\n      0x00\n        /* \"#utility.yul\":3771:3780   */\n      dup4\n        /* \"#utility.yul\":3767:3784   */\n      add\n        /* \"#utility.yul\":3758:3764   */\n      dup5\n        /* \"#utility.yul\":3714:3785   */\n      tag_494\n      jump\t// in\n    tag_581:\n        /* \"#utility.yul\":3570:3792   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3798:4417   */\n    tag_45:\n        /* \"#utility.yul\":3875:3881   */\n      0x00\n        /* \"#utility.yul\":3883:3889   */\n      dup1\n        /* \"#utility.yul\":3891:3897   */\n      0x00\n        /* \"#utility.yul\":3940:3942   */\n      0x60\n        /* \"#utility.yul\":3928:3937   */\n      dup5\n        /* \"#utility.yul\":3919:3926   */\n      dup7\n        /* \"#utility.yul\":3915:3938   */\n      sub\n        /* \"#utility.yul\":3911:3943   */\n      slt\n        /* \"#utility.yul\":3908:4027   */\n      iszero\n      tag_583\n      jumpi\n        /* \"#utility.yul\":3946:4025   */\n      tag_584\n      tag_483\n      jump\t// in\n    tag_584:\n        /* \"#utility.yul\":3908:4027   */\n    tag_583:\n        /* \"#utility.yul\":4066:4067   */\n      0x00\n        /* \"#utility.yul\":4091:4144   */\n      tag_585\n        /* \"#utility.yul\":4136:4143   */\n      dup7\n        /* \"#utility.yul\":4127:4133   */\n      dup3\n        /* \"#utility.yul\":4116:4125   */\n      dup8\n        /* \"#utility.yul\":4112:4134   */\n      add\n        /* \"#utility.yul\":4091:4144   */\n      tag_488\n      jump\t// in\n    tag_585:\n        /* \"#utility.yul\":4081:4144   */\n      swap4\n      pop\n        /* \"#utility.yul\":4037:4154   */\n      pop\n        /* \"#utility.yul\":4193:4195   */\n      0x20\n        /* \"#utility.yul\":4219:4272   */\n      tag_586\n        /* \"#utility.yul\":4264:4271   */\n      dup7\n        /* \"#utility.yul\":4255:4261   */\n      dup3\n        /* \"#utility.yul\":4244:4253   */\n      dup8\n        /* \"#utility.yul\":4240:4262   */\n      add\n        /* \"#utility.yul\":4219:4272   */\n      tag_488\n      jump\t// in\n    tag_586:\n        /* \"#utility.yul\":4209:4272   */\n      swap3\n      pop\n        /* \"#utility.yul\":4164:4282   */\n      pop\n        /* \"#utility.yul\":4321:4323   */\n      0x40\n        /* \"#utility.yul\":4347:4400   */\n      tag_587\n        /* \"#utility.yul\":4392:4399   */\n      dup7\n        /* \"#utility.yul\":4383:4389   */\n      dup3\n        /* \"#utility.yul\":4372:4381   */\n      dup8\n        /* \"#utility.yul\":4368:4390   */\n      add\n        /* \"#utility.yul\":4347:4400   */\n      tag_491\n      jump\t// in\n    tag_587:\n        /* \"#utility.yul\":4337:4400   */\n      swap2\n      pop\n        /* \"#utility.yul\":4292:4410   */\n      pop\n        /* \"#utility.yul\":3798:4417   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":4423:4509   */\n    tag_495:\n        /* \"#utility.yul\":4458:4465   */\n      0x00\n        /* \"#utility.yul\":4498:4502   */\n      0xff\n        /* \"#utility.yul\":4491:4496   */\n      dup3\n        /* \"#utility.yul\":4487:4503   */\n      and\n        /* \"#utility.yul\":4476:4503   */\n      swap1\n      pop\n        /* \"#utility.yul\":4423:4509   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4515:4627   */\n    tag_496:\n        /* \"#utility.yul\":4598:4620   */\n      tag_590\n        /* \"#utility.yul\":4614:4619   */\n      dup2\n        /* \"#utility.yul\":4598:4620   */\n      tag_495\n      jump\t// in\n    tag_590:\n        /* \"#utility.yul\":4593:4596   */\n      dup3\n        /* \"#utility.yul\":4586:4621   */\n      mstore\n        /* \"#utility.yul\":4515:4627   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4633:4847   */\n    tag_51:\n        /* \"#utility.yul\":4722:4726   */\n      0x00\n        /* \"#utility.yul\":4760:4762   */\n      0x20\n        /* \"#utility.yul\":4749:4758   */\n      dup3\n        /* \"#utility.yul\":4745:4763   */\n      add\n        /* \"#utility.yul\":4737:4763   */\n      swap1\n      pop\n        /* \"#utility.yul\":4773:4840   */\n      tag_592\n        /* \"#utility.yul\":4837:4838   */\n      0x00\n        /* \"#utility.yul\":4826:4835   */\n      dup4\n        /* \"#utility.yul\":4822:4839   */\n      add\n        /* \"#utility.yul\":4813:4819   */\n      dup5\n        /* \"#utility.yul\":4773:4840   */\n      tag_496\n      jump\t// in\n    tag_592:\n        /* \"#utility.yul\":4633:4847   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4853:4930   */\n    tag_497:\n        /* \"#utility.yul\":4890:4897   */\n      0x00\n        /* \"#utility.yul\":4919:4924   */\n      dup2\n        /* \"#utility.yul\":4908:4924   */\n      swap1\n      pop\n        /* \"#utility.yul\":4853:4930   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4936:5054   */\n    tag_498:\n        /* \"#utility.yul\":5023:5047   */\n      tag_595\n        /* \"#utility.yul\":5041:5046   */\n      dup2\n        /* \"#utility.yul\":5023:5047   */\n      tag_497\n      jump\t// in\n    tag_595:\n        /* \"#utility.yul\":5018:5021   */\n      dup3\n        /* \"#utility.yul\":5011:5048   */\n      mstore\n        /* \"#utility.yul\":4936:5054   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5060:5282   */\n    tag_55:\n        /* \"#utility.yul\":5153:5157   */\n      0x00\n        /* \"#utility.yul\":5191:5193   */\n      0x20\n        /* \"#utility.yul\":5180:5189   */\n      dup3\n        /* \"#utility.yul\":5176:5194   */\n      add\n        /* \"#utility.yul\":5168:5194   */\n      swap1\n      pop\n        /* \"#utility.yul\":5204:5275   */\n      tag_597\n        /* \"#utility.yul\":5272:5273   */\n      0x00\n        /* \"#utility.yul\":5261:5270   */\n      dup4\n        /* \"#utility.yul\":5257:5274   */\n      add\n        /* \"#utility.yul\":5248:5254   */\n      dup5\n        /* \"#utility.yul\":5204:5275   */\n      tag_498\n      jump\t// in\n    tag_597:\n        /* \"#utility.yul\":5060:5282   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5288:5617   */\n    tag_63:\n        /* \"#utility.yul\":5347:5353   */\n      0x00\n        /* \"#utility.yul\":5396:5398   */\n      0x20\n        /* \"#utility.yul\":5384:5393   */\n      dup3\n        /* \"#utility.yul\":5375:5382   */\n      dup5\n        /* \"#utility.yul\":5371:5394   */\n      sub\n        /* \"#utility.yul\":5367:5399   */\n      slt\n        /* \"#utility.yul\":5364:5483   */\n      iszero\n      tag_599\n      jumpi\n        /* \"#utility.yul\":5402:5481   */\n      tag_600\n      tag_483\n      jump\t// in\n    tag_600:\n        /* \"#utility.yul\":5364:5483   */\n    tag_599:\n        /* \"#utility.yul\":5522:5523   */\n      0x00\n        /* \"#utility.yul\":5547:5600   */\n      tag_601\n        /* \"#utility.yul\":5592:5599   */\n      dup5\n        /* \"#utility.yul\":5583:5589   */\n      dup3\n        /* \"#utility.yul\":5572:5581   */\n      dup6\n        /* \"#utility.yul\":5568:5590   */\n      add\n        /* \"#utility.yul\":5547:5600   */\n      tag_491\n      jump\t// in\n    tag_601:\n        /* \"#utility.yul\":5537:5600   */\n      swap2\n      pop\n        /* \"#utility.yul\":5493:5610   */\n      pop\n        /* \"#utility.yul\":5288:5617   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5623:5952   */\n    tag_70:\n        /* \"#utility.yul\":5682:5688   */\n      0x00\n        /* \"#utility.yul\":5731:5733   */\n      0x20\n        /* \"#utility.yul\":5719:5728   */\n      dup3\n        /* \"#utility.yul\":5710:5717   */\n      dup5\n        /* \"#utility.yul\":5706:5729   */\n      sub\n        /* \"#utility.yul\":5702:5734   */\n      slt\n        /* \"#utility.yul\":5699:5818   */\n      iszero\n      tag_603\n      jumpi\n        /* \"#utility.yul\":5737:5816   */\n      tag_604\n      tag_483\n      jump\t// in\n    tag_604:\n        /* \"#utility.yul\":5699:5818   */\n    tag_603:\n        /* \"#utility.yul\":5857:5858   */\n      0x00\n        /* \"#utility.yul\":5882:5935   */\n      tag_605\n        /* \"#utility.yul\":5927:5934   */\n      dup5\n        /* \"#utility.yul\":5918:5924   */\n      dup3\n        /* \"#utility.yul\":5907:5916   */\n      dup6\n        /* \"#utility.yul\":5903:5925   */\n      add\n        /* \"#utility.yul\":5882:5935   */\n      tag_488\n      jump\t// in\n    tag_605:\n        /* \"#utility.yul\":5872:5935   */\n      swap2\n      pop\n        /* \"#utility.yul\":5828:5945   */\n      pop\n        /* \"#utility.yul\":5623:5952   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5958:6107   */\n    tag_499:\n        /* \"#utility.yul\":5994:6001   */\n      0x00\n        /* \"#utility.yul\":6034:6100   */\n      0xff00000000000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":6027:6032   */\n      dup3\n        /* \"#utility.yul\":6023:6101   */\n      and\n        /* \"#utility.yul\":6012:6101   */\n      swap1\n      pop\n        /* \"#utility.yul\":5958:6107   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6113:6228   */\n    tag_500:\n        /* \"#utility.yul\":6198:6221   */\n      tag_608\n        /* \"#utility.yul\":6215:6220   */\n      dup2\n        /* \"#utility.yul\":6198:6221   */\n      tag_499\n      jump\t// in\n    tag_608:\n        /* \"#utility.yul\":6193:6196   */\n      dup3\n        /* \"#utility.yul\":6186:6222   */\n      mstore\n        /* \"#utility.yul\":6113:6228   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6234:6352   */\n    tag_501:\n        /* \"#utility.yul\":6321:6345   */\n      tag_610\n        /* \"#utility.yul\":6339:6344   */\n      dup2\n        /* \"#utility.yul\":6321:6345   */\n      tag_486\n      jump\t// in\n    tag_610:\n        /* \"#utility.yul\":6316:6319   */\n      dup3\n        /* \"#utility.yul\":6309:6346   */\n      mstore\n        /* \"#utility.yul\":6234:6352   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6358:6472   */\n    tag_502:\n        /* \"#utility.yul\":6425:6431   */\n      0x00\n        /* \"#utility.yul\":6459:6464   */\n      dup2\n        /* \"#utility.yul\":6453:6465   */\n      mload\n        /* \"#utility.yul\":6443:6465   */\n      swap1\n      pop\n        /* \"#utility.yul\":6358:6472   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6478:6662   */\n    tag_503:\n        /* \"#utility.yul\":6577:6588   */\n      0x00\n        /* \"#utility.yul\":6611:6617   */\n      dup3\n        /* \"#utility.yul\":6606:6609   */\n      dup3\n        /* \"#utility.yul\":6599:6618   */\n      mstore\n        /* \"#utility.yul\":6651:6655   */\n      0x20\n        /* \"#utility.yul\":6646:6649   */\n      dup3\n        /* \"#utility.yul\":6642:6656   */\n      add\n        /* \"#utility.yul\":6627:6656   */\n      swap1\n      pop\n        /* \"#utility.yul\":6478:6662   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6668:6800   */\n    tag_504:\n        /* \"#utility.yul\":6735:6739   */\n      0x00\n        /* \"#utility.yul\":6758:6761   */\n      dup2\n        /* \"#utility.yul\":6750:6761   */\n      swap1\n      pop\n        /* \"#utility.yul\":6788:6792   */\n      0x20\n        /* \"#utility.yul\":6783:6786   */\n      dup3\n        /* \"#utility.yul\":6779:6793   */\n      add\n        /* \"#utility.yul\":6771:6793   */\n      swap1\n      pop\n        /* \"#utility.yul\":6668:6800   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6806:6914   */\n    tag_505:\n        /* \"#utility.yul\":6883:6907   */\n      tag_615\n        /* \"#utility.yul\":6901:6906   */\n      dup2\n        /* \"#utility.yul\":6883:6907   */\n      tag_489\n      jump\t// in\n    tag_615:\n        /* \"#utility.yul\":6878:6881   */\n      dup3\n        /* \"#utility.yul\":6871:6908   */\n      mstore\n        /* \"#utility.yul\":6806:6914   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6920:7099   */\n    tag_506:\n        /* \"#utility.yul\":6989:6999   */\n      0x00\n        /* \"#utility.yul\":7010:7056   */\n      tag_617\n        /* \"#utility.yul\":7052:7055   */\n      dup4\n        /* \"#utility.yul\":7044:7050   */\n      dup4\n        /* \"#utility.yul\":7010:7056   */\n      tag_505\n      jump\t// in\n    tag_617:\n        /* \"#utility.yul\":7088:7092   */\n      0x20\n        /* \"#utility.yul\":7083:7086   */\n      dup4\n        /* \"#utility.yul\":7079:7093   */\n      add\n        /* \"#utility.yul\":7065:7093   */\n      swap1\n      pop\n        /* \"#utility.yul\":6920:7099   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7105:7218   */\n    tag_507:\n        /* \"#utility.yul\":7175:7179   */\n      0x00\n        /* \"#utility.yul\":7207:7211   */\n      0x20\n        /* \"#utility.yul\":7202:7205   */\n      dup3\n        /* \"#utility.yul\":7198:7212   */\n      add\n        /* \"#utility.yul\":7190:7212   */\n      swap1\n      pop\n        /* \"#utility.yul\":7105:7218   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7254:7986   */\n    tag_508:\n        /* \"#utility.yul\":7373:7376   */\n      0x00\n        /* \"#utility.yul\":7402:7456   */\n      tag_620\n        /* \"#utility.yul\":7450:7455   */\n      dup3\n        /* \"#utility.yul\":7402:7456   */\n      tag_502\n      jump\t// in\n    tag_620:\n        /* \"#utility.yul\":7472:7558   */\n      tag_621\n        /* \"#utility.yul\":7551:7557   */\n      dup2\n        /* \"#utility.yul\":7546:7549   */\n      dup6\n        /* \"#utility.yul\":7472:7558   */\n      tag_503\n      jump\t// in\n    tag_621:\n        /* \"#utility.yul\":7465:7558   */\n      swap4\n      pop\n        /* \"#utility.yul\":7582:7638   */\n      tag_622\n        /* \"#utility.yul\":7632:7637   */\n      dup4\n        /* \"#utility.yul\":7582:7638   */\n      tag_504\n      jump\t// in\n    tag_622:\n        /* \"#utility.yul\":7661:7668   */\n      dup1\n        /* \"#utility.yul\":7692:7693   */\n      0x00\n        /* \"#utility.yul\":7677:7961   */\n    tag_623:\n        /* \"#utility.yul\":7702:7708   */\n      dup4\n        /* \"#utility.yul\":7699:7700   */\n      dup2\n        /* \"#utility.yul\":7696:7709   */\n      lt\n        /* \"#utility.yul\":7677:7961   */\n      iszero\n      tag_625\n      jumpi\n        /* \"#utility.yul\":7778:7784   */\n      dup2\n        /* \"#utility.yul\":7772:7785   */\n      mload\n        /* \"#utility.yul\":7805:7868   */\n      tag_626\n        /* \"#utility.yul\":7864:7867   */\n      dup9\n        /* \"#utility.yul\":7849:7862   */\n      dup3\n        /* \"#utility.yul\":7805:7868   */\n      tag_506\n      jump\t// in\n    tag_626:\n        /* \"#utility.yul\":7798:7868   */\n      swap8\n      pop\n        /* \"#utility.yul\":7891:7951   */\n      tag_627\n        /* \"#utility.yul\":7944:7950   */\n      dup4\n        /* \"#utility.yul\":7891:7951   */\n      tag_507\n      jump\t// in\n    tag_627:\n        /* \"#utility.yul\":7881:7951   */\n      swap3\n      pop\n        /* \"#utility.yul\":7737:7961   */\n      pop\n        /* \"#utility.yul\":7724:7725   */\n      0x01\n        /* \"#utility.yul\":7721:7722   */\n      dup2\n        /* \"#utility.yul\":7717:7726   */\n      add\n        /* \"#utility.yul\":7712:7726   */\n      swap1\n      pop\n        /* \"#utility.yul\":7677:7961   */\n      jump(tag_623)\n    tag_625:\n        /* \"#utility.yul\":7681:7695   */\n      pop\n        /* \"#utility.yul\":7977:7980   */\n      dup6\n        /* \"#utility.yul\":7970:7980   */\n      swap4\n      pop\n        /* \"#utility.yul\":7378:7986   */\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":7254:7986   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7992:9207   */\n    tag_87:\n        /* \"#utility.yul\":8341:8345   */\n      0x00\n        /* \"#utility.yul\":8379:8382   */\n      0xe0\n        /* \"#utility.yul\":8368:8377   */\n      dup3\n        /* \"#utility.yul\":8364:8383   */\n      add\n        /* \"#utility.yul\":8356:8383   */\n      swap1\n      pop\n        /* \"#utility.yul\":8393:8462   */\n      tag_629\n        /* \"#utility.yul\":8459:8460   */\n      0x00\n        /* \"#utility.yul\":8448:8457   */\n      dup4\n        /* \"#utility.yul\":8444:8461   */\n      add\n        /* \"#utility.yul\":8435:8441   */\n      dup11\n        /* \"#utility.yul\":8393:8462   */\n      tag_500\n      jump\t// in\n    tag_629:\n        /* \"#utility.yul\":8509:8518   */\n      dup2\n        /* \"#utility.yul\":8503:8507   */\n      dup2\n        /* \"#utility.yul\":8499:8519   */\n      sub\n        /* \"#utility.yul\":8494:8496   */\n      0x20\n        /* \"#utility.yul\":8483:8492   */\n      dup4\n        /* \"#utility.yul\":8479:8497   */\n      add\n        /* \"#utility.yul\":8472:8520   */\n      mstore\n        /* \"#utility.yul\":8537:8615   */\n      tag_630\n        /* \"#utility.yul\":8610:8614   */\n      dup2\n        /* \"#utility.yul\":8601:8607   */\n      dup10\n        /* \"#utility.yul\":8537:8615   */\n      tag_481\n      jump\t// in\n    tag_630:\n        /* \"#utility.yul\":8529:8615   */\n      swap1\n      pop\n        /* \"#utility.yul\":8662:8671   */\n      dup2\n        /* \"#utility.yul\":8656:8660   */\n      dup2\n        /* \"#utility.yul\":8652:8672   */\n      sub\n        /* \"#utility.yul\":8647:8649   */\n      0x40\n        /* \"#utility.yul\":8636:8645   */\n      dup4\n        /* \"#utility.yul\":8632:8650   */\n      add\n        /* \"#utility.yul\":8625:8673   */\n      mstore\n        /* \"#utility.yul\":8690:8768   */\n      tag_631\n        /* \"#utility.yul\":8763:8767   */\n      dup2\n        /* \"#utility.yul\":8754:8760   */\n      dup9\n        /* \"#utility.yul\":8690:8768   */\n      tag_481\n      jump\t// in\n    tag_631:\n        /* \"#utility.yul\":8682:8768   */\n      swap1\n      pop\n        /* \"#utility.yul\":8778:8850   */\n      tag_632\n        /* \"#utility.yul\":8846:8848   */\n      0x60\n        /* \"#utility.yul\":8835:8844   */\n      dup4\n        /* \"#utility.yul\":8831:8849   */\n      add\n        /* \"#utility.yul\":8822:8828   */\n      dup8\n        /* \"#utility.yul\":8778:8850   */\n      tag_494\n      jump\t// in\n    tag_632:\n        /* \"#utility.yul\":8860:8933   */\n      tag_633\n        /* \"#utility.yul\":8928:8931   */\n      0x80\n        /* \"#utility.yul\":8917:8926   */\n      dup4\n        /* \"#utility.yul\":8913:8932   */\n      add\n        /* \"#utility.yul\":8904:8910   */\n      dup7\n        /* \"#utility.yul\":8860:8933   */\n      tag_501\n      jump\t// in\n    tag_633:\n        /* \"#utility.yul\":8943:9016   */\n      tag_634\n        /* \"#utility.yul\":9011:9014   */\n      0xa0\n        /* \"#utility.yul\":9000:9009   */\n      dup4\n        /* \"#utility.yul\":8996:9015   */\n      add\n        /* \"#utility.yul\":8987:8993   */\n      dup6\n        /* \"#utility.yul\":8943:9016   */\n      tag_498\n      jump\t// in\n    tag_634:\n        /* \"#utility.yul\":9064:9073   */\n      dup2\n        /* \"#utility.yul\":9058:9062   */\n      dup2\n        /* \"#utility.yul\":9054:9074   */\n      sub\n        /* \"#utility.yul\":9048:9051   */\n      0xc0\n        /* \"#utility.yul\":9037:9046   */\n      dup4\n        /* \"#utility.yul\":9033:9052   */\n      add\n        /* \"#utility.yul\":9026:9075   */\n      mstore\n        /* \"#utility.yul\":9092:9200   */\n      tag_635\n        /* \"#utility.yul\":9195:9199   */\n      dup2\n        /* \"#utility.yul\":9186:9192   */\n      dup5\n        /* \"#utility.yul\":9092:9200   */\n      tag_508\n      jump\t// in\n    tag_635:\n        /* \"#utility.yul\":9084:9200   */\n      swap1\n      pop\n        /* \"#utility.yul\":7992:9207   */\n      swap9\n      swap8\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9213:9435   */\n    tag_91:\n        /* \"#utility.yul\":9306:9310   */\n      0x00\n        /* \"#utility.yul\":9344:9346   */\n      0x20\n        /* \"#utility.yul\":9333:9342   */\n      dup3\n        /* \"#utility.yul\":9329:9347   */\n      add\n        /* \"#utility.yul\":9321:9347   */\n      swap1\n      pop\n        /* \"#utility.yul\":9357:9428   */\n      tag_637\n        /* \"#utility.yul\":9425:9426   */\n      0x00\n        /* \"#utility.yul\":9414:9423   */\n      dup4\n        /* \"#utility.yul\":9410:9427   */\n      add\n        /* \"#utility.yul\":9401:9407   */\n      dup5\n        /* \"#utility.yul\":9357:9428   */\n      tag_501\n      jump\t// in\n    tag_637:\n        /* \"#utility.yul\":9213:9435   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9441:9559   */\n    tag_509:\n        /* \"#utility.yul\":9512:9534   */\n      tag_639\n        /* \"#utility.yul\":9528:9533   */\n      dup2\n        /* \"#utility.yul\":9512:9534   */\n      tag_495\n      jump\t// in\n    tag_639:\n        /* \"#utility.yul\":9505:9510   */\n      dup2\n        /* \"#utility.yul\":9502:9535   */\n      eq\n        /* \"#utility.yul\":9492:9553   */\n      tag_640\n      jumpi\n        /* \"#utility.yul\":9549:9550   */\n      0x00\n        /* \"#utility.yul\":9546:9547   */\n      dup1\n        /* \"#utility.yul\":9539:9551   */\n      revert\n        /* \"#utility.yul\":9492:9553   */\n    tag_640:\n        /* \"#utility.yul\":9441:9559   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9565:9700   */\n    tag_510:\n        /* \"#utility.yul\":9609:9614   */\n      0x00\n        /* \"#utility.yul\":9647:9653   */\n      dup2\n        /* \"#utility.yul\":9634:9654   */\n      calldataload\n        /* \"#utility.yul\":9625:9654   */\n      swap1\n      pop\n        /* \"#utility.yul\":9663:9694   */\n      tag_642\n        /* \"#utility.yul\":9688:9693   */\n      dup2\n        /* \"#utility.yul\":9663:9694   */\n      tag_509\n      jump\t// in\n    tag_642:\n        /* \"#utility.yul\":9565:9700   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9706:9828   */\n    tag_511:\n        /* \"#utility.yul\":9779:9803   */\n      tag_644\n        /* \"#utility.yul\":9797:9802   */\n      dup2\n        /* \"#utility.yul\":9779:9803   */\n      tag_497\n      jump\t// in\n    tag_644:\n        /* \"#utility.yul\":9772:9777   */\n      dup2\n        /* \"#utility.yul\":9769:9804   */\n      eq\n        /* \"#utility.yul\":9759:9822   */\n      tag_645\n      jumpi\n        /* \"#utility.yul\":9818:9819   */\n      0x00\n        /* \"#utility.yul\":9815:9816   */\n      dup1\n        /* \"#utility.yul\":9808:9820   */\n      revert\n        /* \"#utility.yul\":9759:9822   */\n    tag_645:\n        /* \"#utility.yul\":9706:9828   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9834:9973   */\n    tag_512:\n        /* \"#utility.yul\":9880:9885   */\n      0x00\n        /* \"#utility.yul\":9918:9924   */\n      dup2\n        /* \"#utility.yul\":9905:9925   */\n      calldataload\n        /* \"#utility.yul\":9896:9925   */\n      swap1\n      pop\n        /* \"#utility.yul\":9934:9967   */\n      tag_647\n        /* \"#utility.yul\":9961:9966   */\n      dup2\n        /* \"#utility.yul\":9934:9967   */\n      tag_511\n      jump\t// in\n    tag_647:\n        /* \"#utility.yul\":9834:9973   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9979:11178   */\n    tag_104:\n        /* \"#utility.yul\":10090:10096   */\n      0x00\n        /* \"#utility.yul\":10098:10104   */\n      dup1\n        /* \"#utility.yul\":10106:10112   */\n      0x00\n        /* \"#utility.yul\":10114:10120   */\n      dup1\n        /* \"#utility.yul\":10122:10128   */\n      0x00\n        /* \"#utility.yul\":10130:10136   */\n      dup1\n        /* \"#utility.yul\":10138:10144   */\n      0x00\n        /* \"#utility.yul\":10187:10190   */\n      0xe0\n        /* \"#utility.yul\":10175:10184   */\n      dup9\n        /* \"#utility.yul\":10166:10173   */\n      dup11\n        /* \"#utility.yul\":10162:10185   */\n      sub\n        /* \"#utility.yul\":10158:10191   */\n      slt\n        /* \"#utility.yul\":10155:10275   */\n      iszero\n      tag_649\n      jumpi\n        /* \"#utility.yul\":10194:10273   */\n      tag_650\n      tag_483\n      jump\t// in\n    tag_650:\n        /* \"#utility.yul\":10155:10275   */\n    tag_649:\n        /* \"#utility.yul\":10314:10315   */\n      0x00\n        /* \"#utility.yul\":10339:10392   */\n      tag_651\n        /* \"#utility.yul\":10384:10391   */\n      dup11\n        /* \"#utility.yul\":10375:10381   */\n      dup3\n        /* \"#utility.yul\":10364:10373   */\n      dup12\n        /* \"#utility.yul\":10360:10382   */\n      add\n        /* \"#utility.yul\":10339:10392   */\n      tag_488\n      jump\t// in\n    tag_651:\n        /* \"#utility.yul\":10329:10392   */\n      swap8\n      pop\n        /* \"#utility.yul\":10285:10402   */\n      pop\n        /* \"#utility.yul\":10441:10443   */\n      0x20\n        /* \"#utility.yul\":10467:10520   */\n      tag_652\n        /* \"#utility.yul\":10512:10519   */\n      dup11\n        /* \"#utility.yul\":10503:10509   */\n      dup3\n        /* \"#utility.yul\":10492:10501   */\n      dup12\n        /* \"#utility.yul\":10488:10510   */\n      add\n        /* \"#utility.yul\":10467:10520   */\n      tag_488\n      jump\t// in\n    tag_652:\n        /* \"#utility.yul\":10457:10520   */\n      swap7\n      pop\n        /* \"#utility.yul\":10412:10530   */\n      pop\n        /* \"#utility.yul\":10569:10571   */\n      0x40\n        /* \"#utility.yul\":10595:10648   */\n      tag_653\n        /* \"#utility.yul\":10640:10647   */\n      dup11\n        /* \"#utility.yul\":10631:10637   */\n      dup3\n        /* \"#utility.yul\":10620:10629   */\n      dup12\n        /* \"#utility.yul\":10616:10638   */\n      add\n        /* \"#utility.yul\":10595:10648   */\n      tag_491\n      jump\t// in\n    tag_653:\n        /* \"#utility.yul\":10585:10648   */\n      swap6\n      pop\n        /* \"#utility.yul\":10540:10658   */\n      pop\n        /* \"#utility.yul\":10697:10699   */\n      0x60\n        /* \"#utility.yul\":10723:10776   */\n      tag_654\n        /* \"#utility.yul\":10768:10775   */\n      dup11\n        /* \"#utility.yul\":10759:10765   */\n      dup3\n        /* \"#utility.yul\":10748:10757   */\n      dup12\n        /* \"#utility.yul\":10744:10766   */\n      add\n        /* \"#utility.yul\":10723:10776   */\n      tag_491\n      jump\t// in\n    tag_654:\n        /* \"#utility.yul\":10713:10776   */\n      swap5\n      pop\n        /* \"#utility.yul\":10668:10786   */\n      pop\n        /* \"#utility.yul\":10825:10828   */\n      0x80\n        /* \"#utility.yul\":10852:10903   */\n      tag_655\n        /* \"#utility.yul\":10895:10902   */\n      dup11\n        /* \"#utility.yul\":10886:10892   */\n      dup3\n        /* \"#utility.yul\":10875:10884   */\n      dup12\n        /* \"#utility.yul\":10871:10893   */\n      add\n        /* \"#utility.yul\":10852:10903   */\n      tag_510\n      jump\t// in\n    tag_655:\n        /* \"#utility.yul\":10842:10903   */\n      swap4\n      pop\n        /* \"#utility.yul\":10796:10913   */\n      pop\n        /* \"#utility.yul\":10952:10955   */\n      0xa0\n        /* \"#utility.yul\":10979:11032   */\n      tag_656\n        /* \"#utility.yul\":11024:11031   */\n      dup11\n        /* \"#utility.yul\":11015:11021   */\n      dup3\n        /* \"#utility.yul\":11004:11013   */\n      dup12\n        /* \"#utility.yul\":11000:11022   */\n      add\n        /* \"#utility.yul\":10979:11032   */\n      tag_512\n      jump\t// in\n    tag_656:\n        /* \"#utility.yul\":10969:11032   */\n      swap3\n      pop\n        /* \"#utility.yul\":10923:11042   */\n      pop\n        /* \"#utility.yul\":11081:11084   */\n      0xc0\n        /* \"#utility.yul\":11108:11161   */\n      tag_657\n        /* \"#utility.yul\":11153:11160   */\n      dup11\n        /* \"#utility.yul\":11144:11150   */\n      dup3\n        /* \"#utility.yul\":11133:11142   */\n      dup12\n        /* \"#utility.yul\":11129:11151   */\n      add\n        /* \"#utility.yul\":11108:11161   */\n      tag_512\n      jump\t// in\n    tag_657:\n        /* \"#utility.yul\":11098:11161   */\n      swap2\n      pop\n        /* \"#utility.yul\":11052:11171   */\n      pop\n        /* \"#utility.yul\":9979:11178   */\n      swap3\n      swap6\n      swap9\n      swap2\n      swap5\n      swap8\n      pop\n      swap3\n      swap6\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11184:11658   */\n    tag_108:\n        /* \"#utility.yul\":11252:11258   */\n      0x00\n        /* \"#utility.yul\":11260:11266   */\n      dup1\n        /* \"#utility.yul\":11309:11311   */\n      0x40\n        /* \"#utility.yul\":11297:11306   */\n      dup4\n        /* \"#utility.yul\":11288:11295   */\n      dup6\n        /* \"#utility.yul\":11284:11307   */\n      sub\n        /* \"#utility.yul\":11280:11312   */\n      slt\n        /* \"#utility.yul\":11277:11396   */\n      iszero\n      tag_659\n      jumpi\n        /* \"#utility.yul\":11315:11394   */\n      tag_660\n      tag_483\n      jump\t// in\n    tag_660:\n        /* \"#utility.yul\":11277:11396   */\n    tag_659:\n        /* \"#utility.yul\":11435:11436   */\n      0x00\n        /* \"#utility.yul\":11460:11513   */\n      tag_661\n        /* \"#utility.yul\":11505:11512   */\n      dup6\n        /* \"#utility.yul\":11496:11502   */\n      dup3\n        /* \"#utility.yul\":11485:11494   */\n      dup7\n        /* \"#utility.yul\":11481:11503   */\n      add\n        /* \"#utility.yul\":11460:11513   */\n      tag_488\n      jump\t// in\n    tag_661:\n        /* \"#utility.yul\":11450:11513   */\n      swap3\n      pop\n        /* \"#utility.yul\":11406:11523   */\n      pop\n        /* \"#utility.yul\":11562:11564   */\n      0x20\n        /* \"#utility.yul\":11588:11641   */\n      tag_662\n        /* \"#utility.yul\":11633:11640   */\n      dup6\n        /* \"#utility.yul\":11624:11630   */\n      dup3\n        /* \"#utility.yul\":11613:11622   */\n      dup7\n        /* \"#utility.yul\":11609:11631   */\n      add\n        /* \"#utility.yul\":11588:11641   */\n      tag_488\n      jump\t// in\n    tag_662:\n        /* \"#utility.yul\":11578:11641   */\n      swap2\n      pop\n        /* \"#utility.yul\":11533:11651   */\n      pop\n        /* \"#utility.yul\":11184:11658   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11664:11844   */\n    tag_513:\n        /* \"#utility.yul\":11712:11789   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":11709:11710   */\n      0x00\n        /* \"#utility.yul\":11702:11790   */\n      mstore\n        /* \"#utility.yul\":11809:11813   */\n      0x22\n        /* \"#utility.yul\":11806:11807   */\n      0x04\n        /* \"#utility.yul\":11799:11814   */\n      mstore\n        /* \"#utility.yul\":11833:11837   */\n      0x24\n        /* \"#utility.yul\":11830:11831   */\n      0x00\n        /* \"#utility.yul\":11823:11838   */\n      revert\n        /* \"#utility.yul\":11850:12170   */\n    tag_118:\n        /* \"#utility.yul\":11894:11900   */\n      0x00\n        /* \"#utility.yul\":11931:11932   */\n      0x02\n        /* \"#utility.yul\":11925:11929   */\n      dup3\n        /* \"#utility.yul\":11921:11933   */\n      div\n        /* \"#utility.yul\":11911:11933   */\n      swap1\n      pop\n        /* \"#utility.yul\":11978:11979   */\n      0x01\n        /* \"#utility.yul\":11972:11976   */\n      dup3\n        /* \"#utility.yul\":11968:11980   */\n      and\n        /* \"#utility.yul\":11999:12017   */\n      dup1\n        /* \"#utility.yul\":11989:12070   */\n      tag_665\n      jumpi\n        /* \"#utility.yul\":12055:12059   */\n      0x7f\n        /* \"#utility.yul\":12047:12053   */\n      dup3\n        /* \"#utility.yul\":12043:12060   */\n      and\n        /* \"#utility.yul\":12033:12060   */\n      swap2\n      pop\n        /* \"#utility.yul\":11989:12070   */\n    tag_665:\n        /* \"#utility.yul\":12117:12119   */\n      0x20\n        /* \"#utility.yul\":12109:12115   */\n      dup3\n        /* \"#utility.yul\":12106:12120   */\n      lt\n        /* \"#utility.yul\":12086:12104   */\n      dup2\n        /* \"#utility.yul\":12083:12121   */\n      sub\n        /* \"#utility.yul\":12080:12164   */\n      tag_666\n      jumpi\n        /* \"#utility.yul\":12136:12154   */\n      tag_667\n      tag_513\n      jump\t// in\n    tag_667:\n        /* \"#utility.yul\":12080:12164   */\n    tag_666:\n        /* \"#utility.yul\":11901:12170   */\n      pop\n        /* \"#utility.yul\":11850:12170   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12176:12347   */\n    tag_514:\n        /* \"#utility.yul\":12316:12339   */\n      0x4549503731323a20556e696e697469616c697a65640000000000000000000000\n        /* \"#utility.yul\":12312:12313   */\n      0x00\n        /* \"#utility.yul\":12304:12310   */\n      dup3\n        /* \"#utility.yul\":12300:12314   */\n      add\n        /* \"#utility.yul\":12293:12340   */\n      mstore\n        /* \"#utility.yul\":12176:12347   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12353:12719   */\n    tag_515:\n        /* \"#utility.yul\":12495:12498   */\n      0x00\n        /* \"#utility.yul\":12516:12583   */\n      tag_670\n        /* \"#utility.yul\":12580:12582   */\n      0x15\n        /* \"#utility.yul\":12575:12578   */\n      dup4\n        /* \"#utility.yul\":12516:12583   */\n      tag_478\n      jump\t// in\n    tag_670:\n        /* \"#utility.yul\":12509:12583   */\n      swap2\n      pop\n        /* \"#utility.yul\":12592:12685   */\n      tag_671\n        /* \"#utility.yul\":12681:12684   */\n      dup3\n        /* \"#utility.yul\":12592:12685   */\n      tag_514\n      jump\t// in\n    tag_671:\n        /* \"#utility.yul\":12710:12712   */\n      0x20\n        /* \"#utility.yul\":12705:12708   */\n      dup3\n        /* \"#utility.yul\":12701:12713   */\n      add\n        /* \"#utility.yul\":12694:12713   */\n      swap1\n      pop\n        /* \"#utility.yul\":12353:12719   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12725:13144   */\n    tag_183:\n        /* \"#utility.yul\":12891:12895   */\n      0x00\n        /* \"#utility.yul\":12929:12931   */\n      0x20\n        /* \"#utility.yul\":12918:12927   */\n      dup3\n        /* \"#utility.yul\":12914:12932   */\n      add\n        /* \"#utility.yul\":12906:12932   */\n      swap1\n      pop\n        /* \"#utility.yul\":12978:12987   */\n      dup2\n        /* \"#utility.yul\":12972:12976   */\n      dup2\n        /* \"#utility.yul\":12968:12988   */\n      sub\n        /* \"#utility.yul\":12964:12965   */\n      0x00\n        /* \"#utility.yul\":12953:12962   */\n      dup4\n        /* \"#utility.yul\":12949:12966   */\n      add\n        /* \"#utility.yul\":12942:12989   */\n      mstore\n        /* \"#utility.yul\":13006:13137   */\n      tag_673\n        /* \"#utility.yul\":13132:13136   */\n      dup2\n        /* \"#utility.yul\":13006:13137   */\n      tag_515\n      jump\t// in\n    tag_673:\n        /* \"#utility.yul\":12998:13137   */\n      swap1\n      pop\n        /* \"#utility.yul\":12725:13144   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13150:13330   */\n    tag_190:\n        /* \"#utility.yul\":13198:13275   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":13195:13196   */\n      0x00\n        /* \"#utility.yul\":13188:13276   */\n      mstore\n        /* \"#utility.yul\":13295:13299   */\n      0x41\n        /* \"#utility.yul\":13292:13293   */\n      0x04\n        /* \"#utility.yul\":13285:13300   */\n      mstore\n        /* \"#utility.yul\":13319:13323   */\n      0x24\n        /* \"#utility.yul\":13316:13317   */\n      0x00\n        /* \"#utility.yul\":13309:13324   */\n      revert\n        /* \"#utility.yul\":13336:13421   */\n    tag_516:\n        /* \"#utility.yul\":13381:13388   */\n      0x00\n        /* \"#utility.yul\":13410:13415   */\n      dup2\n        /* \"#utility.yul\":13399:13415   */\n      swap1\n      pop\n        /* \"#utility.yul\":13336:13421   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13427:13528   */\n    tag_517:\n        /* \"#utility.yul\":13463:13470   */\n      0x00\n        /* \"#utility.yul\":13503:13521   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":13496:13501   */\n      dup3\n        /* \"#utility.yul\":13492:13522   */\n      and\n        /* \"#utility.yul\":13481:13522   */\n      swap1\n      pop\n        /* \"#utility.yul\":13427:13528   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13534:13594   */\n    tag_518:\n        /* \"#utility.yul\":13562:13565   */\n      0x00\n        /* \"#utility.yul\":13583:13588   */\n      dup2\n        /* \"#utility.yul\":13576:13588   */\n      swap1\n      pop\n        /* \"#utility.yul\":13534:13594   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13600:13756   */\n    tag_519:\n        /* \"#utility.yul\":13657:13666   */\n      0x00\n        /* \"#utility.yul\":13690:13750   */\n      tag_679\n        /* \"#utility.yul\":13707:13749   */\n      tag_680\n        /* \"#utility.yul\":13716:13748   */\n      tag_681\n        /* \"#utility.yul\":13742:13747   */\n      dup5\n        /* \"#utility.yul\":13716:13748   */\n      tag_516\n      jump\t// in\n    tag_681:\n        /* \"#utility.yul\":13707:13749   */\n      tag_518\n      jump\t// in\n    tag_680:\n        /* \"#utility.yul\":13690:13750   */\n      tag_517\n      jump\t// in\n    tag_679:\n        /* \"#utility.yul\":13677:13750   */\n      swap1\n      pop\n        /* \"#utility.yul\":13600:13756   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13762:13907   */\n    tag_520:\n        /* \"#utility.yul\":13856:13900   */\n      tag_683\n        /* \"#utility.yul\":13894:13899   */\n      dup2\n        /* \"#utility.yul\":13856:13900   */\n      tag_519\n      jump\t// in\n    tag_683:\n        /* \"#utility.yul\":13851:13854   */\n      dup3\n        /* \"#utility.yul\":13844:13901   */\n      mstore\n        /* \"#utility.yul\":13762:13907   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13913:14149   */\n    tag_226:\n        /* \"#utility.yul\":14013:14017   */\n      0x00\n        /* \"#utility.yul\":14051:14053   */\n      0x20\n        /* \"#utility.yul\":14040:14049   */\n      dup3\n        /* \"#utility.yul\":14036:14054   */\n      add\n        /* \"#utility.yul\":14028:14054   */\n      swap1\n      pop\n        /* \"#utility.yul\":14064:14142   */\n      tag_685\n        /* \"#utility.yul\":14139:14140   */\n      0x00\n        /* \"#utility.yul\":14128:14137   */\n      dup4\n        /* \"#utility.yul\":14124:14141   */\n      add\n        /* \"#utility.yul\":14115:14121   */\n      dup5\n        /* \"#utility.yul\":14064:14142   */\n      tag_520\n      jump\t// in\n    tag_685:\n        /* \"#utility.yul\":13913:14149   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14155:14930   */\n    tag_233:\n        /* \"#utility.yul\":14388:14392   */\n      0x00\n        /* \"#utility.yul\":14426:14429   */\n      0xc0\n        /* \"#utility.yul\":14415:14424   */\n      dup3\n        /* \"#utility.yul\":14411:14430   */\n      add\n        /* \"#utility.yul\":14403:14430   */\n      swap1\n      pop\n        /* \"#utility.yul\":14440:14511   */\n      tag_687\n        /* \"#utility.yul\":14508:14509   */\n      0x00\n        /* \"#utility.yul\":14497:14506   */\n      dup4\n        /* \"#utility.yul\":14493:14510   */\n      add\n        /* \"#utility.yul\":14484:14490   */\n      dup10\n        /* \"#utility.yul\":14440:14511   */\n      tag_498\n      jump\t// in\n    tag_687:\n        /* \"#utility.yul\":14521:14593   */\n      tag_688\n        /* \"#utility.yul\":14589:14591   */\n      0x20\n        /* \"#utility.yul\":14578:14587   */\n      dup4\n        /* \"#utility.yul\":14574:14592   */\n      add\n        /* \"#utility.yul\":14565:14571   */\n      dup9\n        /* \"#utility.yul\":14521:14593   */\n      tag_501\n      jump\t// in\n    tag_688:\n        /* \"#utility.yul\":14603:14675   */\n      tag_689\n        /* \"#utility.yul\":14671:14673   */\n      0x40\n        /* \"#utility.yul\":14660:14669   */\n      dup4\n        /* \"#utility.yul\":14656:14674   */\n      add\n        /* \"#utility.yul\":14647:14653   */\n      dup8\n        /* \"#utility.yul\":14603:14675   */\n      tag_501\n      jump\t// in\n    tag_689:\n        /* \"#utility.yul\":14685:14757   */\n      tag_690\n        /* \"#utility.yul\":14753:14755   */\n      0x60\n        /* \"#utility.yul\":14742:14751   */\n      dup4\n        /* \"#utility.yul\":14738:14756   */\n      add\n        /* \"#utility.yul\":14729:14735   */\n      dup7\n        /* \"#utility.yul\":14685:14757   */\n      tag_494\n      jump\t// in\n    tag_690:\n        /* \"#utility.yul\":14767:14840   */\n      tag_691\n        /* \"#utility.yul\":14835:14838   */\n      0x80\n        /* \"#utility.yul\":14824:14833   */\n      dup4\n        /* \"#utility.yul\":14820:14839   */\n      add\n        /* \"#utility.yul\":14811:14817   */\n      dup6\n        /* \"#utility.yul\":14767:14840   */\n      tag_494\n      jump\t// in\n    tag_691:\n        /* \"#utility.yul\":14850:14923   */\n      tag_692\n        /* \"#utility.yul\":14918:14921   */\n      0xa0\n        /* \"#utility.yul\":14907:14916   */\n      dup4\n        /* \"#utility.yul\":14903:14922   */\n      add\n        /* \"#utility.yul\":14894:14900   */\n      dup5\n        /* \"#utility.yul\":14850:14923   */\n      tag_494\n      jump\t// in\n    tag_692:\n        /* \"#utility.yul\":14155:14930   */\n      swap8\n      swap7\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14936:15268   */\n    tag_240:\n        /* \"#utility.yul\":15057:15061   */\n      0x00\n        /* \"#utility.yul\":15095:15097   */\n      0x40\n        /* \"#utility.yul\":15084:15093   */\n      dup3\n        /* \"#utility.yul\":15080:15098   */\n      add\n        /* \"#utility.yul\":15072:15098   */\n      swap1\n      pop\n        /* \"#utility.yul\":15108:15179   */\n      tag_694\n        /* \"#utility.yul\":15176:15177   */\n      0x00\n        /* \"#utility.yul\":15165:15174   */\n      dup4\n        /* \"#utility.yul\":15161:15178   */\n      add\n        /* \"#utility.yul\":15152:15158   */\n      dup6\n        /* \"#utility.yul\":15108:15179   */\n      tag_501\n      jump\t// in\n    tag_694:\n        /* \"#utility.yul\":15189:15261   */\n      tag_695\n        /* \"#utility.yul\":15257:15259   */\n      0x20\n        /* \"#utility.yul\":15246:15255   */\n      dup4\n        /* \"#utility.yul\":15242:15260   */\n      add\n        /* \"#utility.yul\":15233:15239   */\n      dup5\n        /* \"#utility.yul\":15189:15261   */\n      tag_501\n      jump\t// in\n    tag_695:\n        /* \"#utility.yul\":14936:15268   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15274:15716   */\n    tag_260:\n        /* \"#utility.yul\":15423:15427   */\n      0x00\n        /* \"#utility.yul\":15461:15463   */\n      0x60\n        /* \"#utility.yul\":15450:15459   */\n      dup3\n        /* \"#utility.yul\":15446:15464   */\n      add\n        /* \"#utility.yul\":15438:15464   */\n      swap1\n      pop\n        /* \"#utility.yul\":15474:15545   */\n      tag_697\n        /* \"#utility.yul\":15542:15543   */\n      0x00\n        /* \"#utility.yul\":15531:15540   */\n      dup4\n        /* \"#utility.yul\":15527:15544   */\n      add\n        /* \"#utility.yul\":15518:15524   */\n      dup7\n        /* \"#utility.yul\":15474:15545   */\n      tag_501\n      jump\t// in\n    tag_697:\n        /* \"#utility.yul\":15555:15627   */\n      tag_698\n        /* \"#utility.yul\":15623:15625   */\n      0x20\n        /* \"#utility.yul\":15612:15621   */\n      dup4\n        /* \"#utility.yul\":15608:15626   */\n      add\n        /* \"#utility.yul\":15599:15605   */\n      dup6\n        /* \"#utility.yul\":15555:15627   */\n      tag_494\n      jump\t// in\n    tag_698:\n        /* \"#utility.yul\":15637:15709   */\n      tag_699\n        /* \"#utility.yul\":15705:15707   */\n      0x40\n        /* \"#utility.yul\":15694:15703   */\n      dup4\n        /* \"#utility.yul\":15690:15708   */\n      add\n        /* \"#utility.yul\":15681:15687   */\n      dup5\n        /* \"#utility.yul\":15637:15709   */\n      tag_494\n      jump\t// in\n    tag_699:\n        /* \"#utility.yul\":15274:15716   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15722:16386   */\n    tag_375:\n        /* \"#utility.yul\":15927:15931   */\n      0x00\n        /* \"#utility.yul\":15965:15968   */\n      0xa0\n        /* \"#utility.yul\":15954:15963   */\n      dup3\n        /* \"#utility.yul\":15950:15969   */\n      add\n        /* \"#utility.yul\":15942:15969   */\n      swap1\n      pop\n        /* \"#utility.yul\":15979:16050   */\n      tag_701\n        /* \"#utility.yul\":16047:16048   */\n      0x00\n        /* \"#utility.yul\":16036:16045   */\n      dup4\n        /* \"#utility.yul\":16032:16049   */\n      add\n        /* \"#utility.yul\":16023:16029   */\n      dup9\n        /* \"#utility.yul\":15979:16050   */\n      tag_498\n      jump\t// in\n    tag_701:\n        /* \"#utility.yul\":16060:16132   */\n      tag_702\n        /* \"#utility.yul\":16128:16130   */\n      0x20\n        /* \"#utility.yul\":16117:16126   */\n      dup4\n        /* \"#utility.yul\":16113:16131   */\n      add\n        /* \"#utility.yul\":16104:16110   */\n      dup8\n        /* \"#utility.yul\":16060:16132   */\n      tag_498\n      jump\t// in\n    tag_702:\n        /* \"#utility.yul\":16142:16214   */\n      tag_703\n        /* \"#utility.yul\":16210:16212   */\n      0x40\n        /* \"#utility.yul\":16199:16208   */\n      dup4\n        /* \"#utility.yul\":16195:16213   */\n      add\n        /* \"#utility.yul\":16186:16192   */\n      dup7\n        /* \"#utility.yul\":16142:16214   */\n      tag_498\n      jump\t// in\n    tag_703:\n        /* \"#utility.yul\":16224:16296   */\n      tag_704\n        /* \"#utility.yul\":16292:16294   */\n      0x60\n        /* \"#utility.yul\":16281:16290   */\n      dup4\n        /* \"#utility.yul\":16277:16295   */\n      add\n        /* \"#utility.yul\":16268:16274   */\n      dup6\n        /* \"#utility.yul\":16224:16296   */\n      tag_494\n      jump\t// in\n    tag_704:\n        /* \"#utility.yul\":16306:16379   */\n      tag_705\n        /* \"#utility.yul\":16374:16377   */\n      0x80\n        /* \"#utility.yul\":16363:16372   */\n      dup4\n        /* \"#utility.yul\":16359:16378   */\n      add\n        /* \"#utility.yul\":16350:16356   */\n      dup5\n        /* \"#utility.yul\":16306:16379   */\n      tag_501\n      jump\t// in\n    tag_705:\n        /* \"#utility.yul\":15722:16386   */\n      swap7\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16392:16533   */\n    tag_521:\n        /* \"#utility.yul\":16441:16445   */\n      0x00\n        /* \"#utility.yul\":16464:16467   */\n      dup2\n        /* \"#utility.yul\":16456:16467   */\n      swap1\n      pop\n        /* \"#utility.yul\":16487:16490   */\n      dup2\n        /* \"#utility.yul\":16484:16485   */\n      0x00\n        /* \"#utility.yul\":16477:16491   */\n      mstore\n        /* \"#utility.yul\":16521:16525   */\n      0x20\n        /* \"#utility.yul\":16518:16519   */\n      0x00\n        /* \"#utility.yul\":16508:16526   */\n      keccak256\n        /* \"#utility.yul\":16500:16526   */\n      swap1\n      pop\n        /* \"#utility.yul\":16392:16533   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16539:16632   */\n    tag_522:\n        /* \"#utility.yul\":16576:16582   */\n      0x00\n        /* \"#utility.yul\":16623:16625   */\n      0x20\n        /* \"#utility.yul\":16618:16620   */\n      0x1f\n        /* \"#utility.yul\":16611:16616   */\n      dup4\n        /* \"#utility.yul\":16607:16621   */\n      add\n        /* \"#utility.yul\":16603:16626   */\n      div\n        /* \"#utility.yul\":16593:16626   */\n      swap1\n      pop\n        /* \"#utility.yul\":16539:16632   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16638:16745   */\n    tag_523:\n        /* \"#utility.yul\":16682:16690   */\n      0x00\n        /* \"#utility.yul\":16732:16737   */\n      dup3\n        /* \"#utility.yul\":16726:16730   */\n      dup3\n        /* \"#utility.yul\":16722:16738   */\n      shl\n        /* \"#utility.yul\":16701:16738   */\n      swap1\n      pop\n        /* \"#utility.yul\":16638:16745   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16751:17144   */\n    tag_524:\n        /* \"#utility.yul\":16820:16826   */\n      0x00\n        /* \"#utility.yul\":16870:16871   */\n      0x08\n        /* \"#utility.yul\":16858:16868   */\n      dup4\n        /* \"#utility.yul\":16854:16872   */\n      mul\n        /* \"#utility.yul\":16893:16990   */\n      tag_710\n        /* \"#utility.yul\":16923:16989   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":16912:16921   */\n      dup3\n        /* \"#utility.yul\":16893:16990   */\n      tag_523\n      jump\t// in\n    tag_710:\n        /* \"#utility.yul\":17011:17050   */\n      tag_711\n        /* \"#utility.yul\":17041:17049   */\n      dup7\n        /* \"#utility.yul\":17030:17039   */\n      dup4\n        /* \"#utility.yul\":17011:17050   */\n      tag_523\n      jump\t// in\n    tag_711:\n        /* \"#utility.yul\":16999:17050   */\n      swap6\n      pop\n        /* \"#utility.yul\":17083:17087   */\n      dup1\n        /* \"#utility.yul\":17079:17088   */\n      not\n        /* \"#utility.yul\":17072:17077   */\n      dup5\n        /* \"#utility.yul\":17068:17089   */\n      and\n        /* \"#utility.yul\":17059:17089   */\n      swap4\n      pop\n        /* \"#utility.yul\":17132:17136   */\n      dup1\n        /* \"#utility.yul\":17122:17130   */\n      dup7\n        /* \"#utility.yul\":17118:17137   */\n      and\n        /* \"#utility.yul\":17111:17116   */\n      dup5\n        /* \"#utility.yul\":17108:17138   */\n      or\n        /* \"#utility.yul\":17098:17138   */\n      swap3\n      pop\n        /* \"#utility.yul\":16827:17144   */\n      pop\n      pop\n        /* \"#utility.yul\":16751:17144   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17150:17292   */\n    tag_525:\n        /* \"#utility.yul\":17200:17209   */\n      0x00\n        /* \"#utility.yul\":17233:17286   */\n      tag_713\n        /* \"#utility.yul\":17251:17285   */\n      tag_714\n        /* \"#utility.yul\":17260:17284   */\n      tag_715\n        /* \"#utility.yul\":17278:17283   */\n      dup5\n        /* \"#utility.yul\":17260:17284   */\n      tag_489\n      jump\t// in\n    tag_715:\n        /* \"#utility.yul\":17251:17285   */\n      tag_518\n      jump\t// in\n    tag_714:\n        /* \"#utility.yul\":17233:17286   */\n      tag_489\n      jump\t// in\n    tag_713:\n        /* \"#utility.yul\":17220:17286   */\n      swap1\n      pop\n        /* \"#utility.yul\":17150:17292   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17298:17373   */\n    tag_526:\n        /* \"#utility.yul\":17341:17344   */\n      0x00\n        /* \"#utility.yul\":17362:17367   */\n      dup2\n        /* \"#utility.yul\":17355:17367   */\n      swap1\n      pop\n        /* \"#utility.yul\":17298:17373   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17379:17648   */\n    tag_527:\n        /* \"#utility.yul\":17489:17528   */\n      tag_718\n        /* \"#utility.yul\":17520:17527   */\n      dup4\n        /* \"#utility.yul\":17489:17528   */\n      tag_525\n      jump\t// in\n    tag_718:\n        /* \"#utility.yul\":17550:17641   */\n      tag_719\n        /* \"#utility.yul\":17599:17640   */\n      tag_720\n        /* \"#utility.yul\":17623:17639   */\n      dup3\n        /* \"#utility.yul\":17599:17640   */\n      tag_526\n      jump\t// in\n    tag_720:\n        /* \"#utility.yul\":17591:17597   */\n      dup5\n        /* \"#utility.yul\":17584:17588   */\n      dup5\n        /* \"#utility.yul\":17578:17589   */\n      sload\n        /* \"#utility.yul\":17550:17641   */\n      tag_524\n      jump\t// in\n    tag_719:\n        /* \"#utility.yul\":17544:17548   */\n      dup3\n        /* \"#utility.yul\":17537:17642   */\n      sstore\n        /* \"#utility.yul\":17455:17648   */\n      pop\n        /* \"#utility.yul\":17379:17648   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17654:17727   */\n    tag_528:\n        /* \"#utility.yul\":17699:17702   */\n      0x00\n        /* \"#utility.yul\":17654:17727   */\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":17733:17922   */\n    tag_529:\n        /* \"#utility.yul\":17810:17842   */\n      tag_723\n      tag_528\n      jump\t// in\n    tag_723:\n        /* \"#utility.yul\":17851:17916   */\n      tag_724\n        /* \"#utility.yul\":17909:17915   */\n      dup2\n        /* \"#utility.yul\":17901:17907   */\n      dup5\n        /* \"#utility.yul\":17895:17899   */\n      dup5\n        /* \"#utility.yul\":17851:17916   */\n      tag_527\n      jump\t// in\n    tag_724:\n        /* \"#utility.yul\":17786:17922   */\n      pop\n        /* \"#utility.yul\":17733:17922   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17928:18114   */\n    tag_530:\n        /* \"#utility.yul\":17988:18108   */\n    tag_726:\n        /* \"#utility.yul\":18005:18008   */\n      dup2\n        /* \"#utility.yul\":17998:18003   */\n      dup2\n        /* \"#utility.yul\":17995:18009   */\n      lt\n        /* \"#utility.yul\":17988:18108   */\n      iszero\n      tag_728\n      jumpi\n        /* \"#utility.yul\":18059:18098   */\n      tag_729\n        /* \"#utility.yul\":18096:18097   */\n      0x00\n        /* \"#utility.yul\":18089:18094   */\n      dup3\n        /* \"#utility.yul\":18059:18098   */\n      tag_529\n      jump\t// in\n    tag_729:\n        /* \"#utility.yul\":18032:18033   */\n      0x01\n        /* \"#utility.yul\":18025:18030   */\n      dup2\n        /* \"#utility.yul\":18021:18034   */\n      add\n        /* \"#utility.yul\":18012:18034   */\n      swap1\n      pop\n        /* \"#utility.yul\":17988:18108   */\n      jump(tag_726)\n    tag_728:\n        /* \"#utility.yul\":17928:18114   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":18120:18663   */\n    tag_531:\n        /* \"#utility.yul\":18221:18223   */\n      0x1f\n        /* \"#utility.yul\":18216:18219   */\n      dup3\n        /* \"#utility.yul\":18213:18224   */\n      gt\n        /* \"#utility.yul\":18210:18656   */\n      iszero\n      tag_731\n      jumpi\n        /* \"#utility.yul\":18255:18293   */\n      tag_732\n        /* \"#utility.yul\":18287:18292   */\n      dup2\n        /* \"#utility.yul\":18255:18293   */\n      tag_521\n      jump\t// in\n    tag_732:\n        /* \"#utility.yul\":18339:18368   */\n      tag_733\n        /* \"#utility.yul\":18357:18367   */\n      dup5\n        /* \"#utility.yul\":18339:18368   */\n      tag_522\n      jump\t// in\n    tag_733:\n        /* \"#utility.yul\":18329:18337   */\n      dup2\n        /* \"#utility.yul\":18325:18369   */\n      add\n        /* \"#utility.yul\":18522:18524   */\n      0x20\n        /* \"#utility.yul\":18510:18520   */\n      dup6\n        /* \"#utility.yul\":18507:18525   */\n      lt\n        /* \"#utility.yul\":18504:18553   */\n      iszero\n      tag_734\n      jumpi\n        /* \"#utility.yul\":18543:18551   */\n      dup2\n        /* \"#utility.yul\":18528:18551   */\n      swap1\n      pop\n        /* \"#utility.yul\":18504:18553   */\n    tag_734:\n        /* \"#utility.yul\":18566:18646   */\n      tag_735\n        /* \"#utility.yul\":18622:18644   */\n      tag_736\n        /* \"#utility.yul\":18640:18643   */\n      dup6\n        /* \"#utility.yul\":18622:18644   */\n      tag_522\n      jump\t// in\n    tag_736:\n        /* \"#utility.yul\":18612:18620   */\n      dup4\n        /* \"#utility.yul\":18608:18645   */\n      add\n        /* \"#utility.yul\":18595:18606   */\n      dup3\n        /* \"#utility.yul\":18566:18646   */\n      tag_530\n      jump\t// in\n    tag_735:\n        /* \"#utility.yul\":18225:18656   */\n      pop\n      pop\n        /* \"#utility.yul\":18210:18656   */\n    tag_731:\n        /* \"#utility.yul\":18120:18663   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":18669:18786   */\n    tag_532:\n        /* \"#utility.yul\":18723:18731   */\n      0x00\n        /* \"#utility.yul\":18773:18778   */\n      dup3\n        /* \"#utility.yul\":18767:18771   */\n      dup3\n        /* \"#utility.yul\":18763:18779   */\n      shr\n        /* \"#utility.yul\":18742:18779   */\n      swap1\n      pop\n        /* \"#utility.yul\":18669:18786   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":18792:18961   */\n    tag_533:\n        /* \"#utility.yul\":18836:18842   */\n      0x00\n        /* \"#utility.yul\":18869:18920   */\n      tag_739\n        /* \"#utility.yul\":18917:18918   */\n      0x00\n        /* \"#utility.yul\":18913:18919   */\n      not\n        /* \"#utility.yul\":18905:18910   */\n      dup5\n        /* \"#utility.yul\":18902:18903   */\n      0x08\n        /* \"#utility.yul\":18898:18911   */\n      mul\n        /* \"#utility.yul\":18869:18920   */\n      tag_532\n      jump\t// in\n    tag_739:\n        /* \"#utility.yul\":18865:18921   */\n      not\n        /* \"#utility.yul\":18950:18954   */\n      dup1\n        /* \"#utility.yul\":18944:18948   */\n      dup4\n        /* \"#utility.yul\":18940:18955   */\n      and\n        /* \"#utility.yul\":18930:18955   */\n      swap2\n      pop\n        /* \"#utility.yul\":18843:18961   */\n      pop\n        /* \"#utility.yul\":18792:18961   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":18966:19261   */\n    tag_534:\n        /* \"#utility.yul\":19042:19046   */\n      0x00\n        /* \"#utility.yul\":19188:19217   */\n      tag_741\n        /* \"#utility.yul\":19213:19216   */\n      dup4\n        /* \"#utility.yul\":19207:19211   */\n      dup4\n        /* \"#utility.yul\":19188:19217   */\n      tag_533\n      jump\t// in\n    tag_741:\n        /* \"#utility.yul\":19180:19217   */\n      swap2\n      pop\n        /* \"#utility.yul\":19250:19253   */\n      dup3\n        /* \"#utility.yul\":19247:19248   */\n      0x02\n        /* \"#utility.yul\":19243:19254   */\n      mul\n        /* \"#utility.yul\":19237:19241   */\n      dup3\n        /* \"#utility.yul\":19234:19255   */\n      or\n        /* \"#utility.yul\":19226:19255   */\n      swap1\n      pop\n        /* \"#utility.yul\":18966:19261   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":19266:20661   */\n    tag_392:\n        /* \"#utility.yul\":19383:19420   */\n      tag_743\n        /* \"#utility.yul\":19416:19419   */\n      dup3\n        /* \"#utility.yul\":19383:19420   */\n      tag_477\n      jump\t// in\n    tag_743:\n        /* \"#utility.yul\":19485:19503   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":19477:19483   */\n      dup2\n        /* \"#utility.yul\":19474:19504   */\n      gt\n        /* \"#utility.yul\":19471:19527   */\n      iszero\n      tag_744\n      jumpi\n        /* \"#utility.yul\":19507:19525   */\n      tag_745\n      tag_190\n      jump\t// in\n    tag_745:\n        /* \"#utility.yul\":19471:19527   */\n    tag_744:\n        /* \"#utility.yul\":19551:19589   */\n      tag_746\n        /* \"#utility.yul\":19583:19587   */\n      dup3\n        /* \"#utility.yul\":19577:19588   */\n      sload\n        /* \"#utility.yul\":19551:19589   */\n      tag_118\n      jump\t// in\n    tag_746:\n        /* \"#utility.yul\":19636:19703   */\n      tag_747\n        /* \"#utility.yul\":19696:19702   */\n      dup3\n        /* \"#utility.yul\":19688:19694   */\n      dup3\n        /* \"#utility.yul\":19682:19686   */\n      dup6\n        /* \"#utility.yul\":19636:19703   */\n      tag_531\n      jump\t// in\n    tag_747:\n        /* \"#utility.yul\":19730:19731   */\n      0x00\n        /* \"#utility.yul\":19754:19758   */\n      0x20\n        /* \"#utility.yul\":19741:19758   */\n      swap1\n      pop\n        /* \"#utility.yul\":19786:19788   */\n      0x1f\n        /* \"#utility.yul\":19778:19784   */\n      dup4\n        /* \"#utility.yul\":19775:19789   */\n      gt\n        /* \"#utility.yul\":19803:19804   */\n      0x01\n        /* \"#utility.yul\":19798:20416   */\n      dup2\n      eq\n      tag_749\n      jumpi\n        /* \"#utility.yul\":20460:20461   */\n      0x00\n        /* \"#utility.yul\":20477:20483   */\n      dup5\n        /* \"#utility.yul\":20474:20551   */\n      iszero\n      tag_750\n      jumpi\n        /* \"#utility.yul\":20526:20535   */\n      dup3\n        /* \"#utility.yul\":20521:20524   */\n      dup8\n        /* \"#utility.yul\":20517:20536   */\n      add\n        /* \"#utility.yul\":20511:20537   */\n      mload\n        /* \"#utility.yul\":20502:20537   */\n      swap1\n      pop\n        /* \"#utility.yul\":20474:20551   */\n    tag_750:\n        /* \"#utility.yul\":20577:20644   */\n      tag_751\n        /* \"#utility.yul\":20637:20643   */\n      dup6\n        /* \"#utility.yul\":20630:20635   */\n      dup3\n        /* \"#utility.yul\":20577:20644   */\n      tag_534\n      jump\t// in\n    tag_751:\n        /* \"#utility.yul\":20571:20575   */\n      dup7\n        /* \"#utility.yul\":20564:20645   */\n      sstore\n        /* \"#utility.yul\":20433:20655   */\n      pop\n        /* \"#utility.yul\":19768:20655   */\n      jump(tag_748)\n        /* \"#utility.yul\":19798:20416   */\n    tag_749:\n        /* \"#utility.yul\":19850:19854   */\n      0x1f\n        /* \"#utility.yul\":19846:19855   */\n      not\n        /* \"#utility.yul\":19838:19844   */\n      dup5\n        /* \"#utility.yul\":19834:19856   */\n      and\n        /* \"#utility.yul\":19884:19921   */\n      tag_752\n        /* \"#utility.yul\":19916:19920   */\n      dup7\n        /* \"#utility.yul\":19884:19921   */\n      tag_521\n      jump\t// in\n    tag_752:\n        /* \"#utility.yul\":19943:19944   */\n      0x00\n        /* \"#utility.yul\":19957:20165   */\n    tag_753:\n        /* \"#utility.yul\":19971:19978   */\n      dup3\n        /* \"#utility.yul\":19968:19969   */\n      dup2\n        /* \"#utility.yul\":19965:19979   */\n      lt\n        /* \"#utility.yul\":19957:20165   */\n      iszero\n      tag_755\n      jumpi\n        /* \"#utility.yul\":20050:20059   */\n      dup5\n        /* \"#utility.yul\":20045:20048   */\n      dup10\n        /* \"#utility.yul\":20041:20060   */\n      add\n        /* \"#utility.yul\":20035:20061   */\n      mload\n        /* \"#utility.yul\":20027:20033   */\n      dup3\n        /* \"#utility.yul\":20020:20062   */\n      sstore\n        /* \"#utility.yul\":20101:20102   */\n      0x01\n        /* \"#utility.yul\":20093:20099   */\n      dup3\n        /* \"#utility.yul\":20089:20103   */\n      add\n        /* \"#utility.yul\":20079:20103   */\n      swap2\n      pop\n        /* \"#utility.yul\":20148:20150   */\n      0x20\n        /* \"#utility.yul\":20137:20146   */\n      dup6\n        /* \"#utility.yul\":20133:20151   */\n      add\n        /* \"#utility.yul\":20120:20151   */\n      swap5\n      pop\n        /* \"#utility.yul\":19994:19998   */\n      0x20\n        /* \"#utility.yul\":19991:19992   */\n      dup2\n        /* \"#utility.yul\":19987:19999   */\n      add\n        /* \"#utility.yul\":19982:19999   */\n      swap1\n      pop\n        /* \"#utility.yul\":19957:20165   */\n      jump(tag_753)\n    tag_755:\n        /* \"#utility.yul\":20193:20199   */\n      dup7\n        /* \"#utility.yul\":20184:20191   */\n      dup4\n        /* \"#utility.yul\":20181:20200   */\n      lt\n        /* \"#utility.yul\":20178:20357   */\n      iszero\n      tag_756\n      jumpi\n        /* \"#utility.yul\":20251:20260   */\n      dup5\n        /* \"#utility.yul\":20246:20249   */\n      dup10\n        /* \"#utility.yul\":20242:20261   */\n      add\n        /* \"#utility.yul\":20236:20262   */\n      mload\n        /* \"#utility.yul\":20294:20342   */\n      tag_757\n        /* \"#utility.yul\":20336:20340   */\n      0x1f\n        /* \"#utility.yul\":20328:20334   */\n      dup10\n        /* \"#utility.yul\":20324:20341   */\n      and\n        /* \"#utility.yul\":20313:20322   */\n      dup3\n        /* \"#utility.yul\":20294:20342   */\n      tag_533\n      jump\t// in\n    tag_757:\n        /* \"#utility.yul\":20286:20292   */\n      dup4\n        /* \"#utility.yul\":20279:20343   */\n      sstore\n        /* \"#utility.yul\":20201:20357   */\n      pop\n        /* \"#utility.yul\":20178:20357   */\n    tag_756:\n        /* \"#utility.yul\":20403:20404   */\n      0x01\n        /* \"#utility.yul\":20399:20400   */\n      0x02\n        /* \"#utility.yul\":20391:20397   */\n      dup9\n        /* \"#utility.yul\":20387:20401   */\n      mul\n        /* \"#utility.yul\":20383:20405   */\n      add\n        /* \"#utility.yul\":20377:20381   */\n      dup9\n        /* \"#utility.yul\":20370:20406   */\n      sstore\n        /* \"#utility.yul\":19805:20416   */\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":19768:20655   */\n    tag_748:\n      pop\n        /* \"#utility.yul\":19358:20661   */\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":19266:20661   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":20667:21212   */\n    tag_414:\n        /* \"#utility.yul\":20840:20844   */\n      0x00\n        /* \"#utility.yul\":20878:20881   */\n      0x80\n        /* \"#utility.yul\":20867:20876   */\n      dup3\n        /* \"#utility.yul\":20863:20882   */\n      add\n        /* \"#utility.yul\":20855:20882   */\n      swap1\n      pop\n        /* \"#utility.yul\":20892:20963   */\n      tag_759\n        /* \"#utility.yul\":20960:20961   */\n      0x00\n        /* \"#utility.yul\":20949:20958   */\n      dup4\n        /* \"#utility.yul\":20945:20962   */\n      add\n        /* \"#utility.yul\":20936:20942   */\n      dup8\n        /* \"#utility.yul\":20892:20963   */\n      tag_498\n      jump\t// in\n    tag_759:\n        /* \"#utility.yul\":20973:21041   */\n      tag_760\n        /* \"#utility.yul\":21037:21039   */\n      0x20\n        /* \"#utility.yul\":21026:21035   */\n      dup4\n        /* \"#utility.yul\":21022:21040   */\n      add\n        /* \"#utility.yul\":21013:21019   */\n      dup7\n        /* \"#utility.yul\":20973:21041   */\n      tag_496\n      jump\t// in\n    tag_760:\n        /* \"#utility.yul\":21051:21123   */\n      tag_761\n        /* \"#utility.yul\":21119:21121   */\n      0x40\n        /* \"#utility.yul\":21108:21117   */\n      dup4\n        /* \"#utility.yul\":21104:21122   */\n      add\n        /* \"#utility.yul\":21095:21101   */\n      dup6\n        /* \"#utility.yul\":21051:21123   */\n      tag_498\n      jump\t// in\n    tag_761:\n        /* \"#utility.yul\":21133:21205   */\n      tag_762\n        /* \"#utility.yul\":21201:21203   */\n      0x60\n        /* \"#utility.yul\":21190:21199   */\n      dup4\n        /* \"#utility.yul\":21186:21204   */\n      add\n        /* \"#utility.yul\":21177:21183   */\n      dup5\n        /* \"#utility.yul\":21133:21205   */\n      tag_498\n      jump\t// in\n    tag_762:\n        /* \"#utility.yul\":20667:21212   */\n      swap6\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":21218:21398   */\n    tag_421:\n        /* \"#utility.yul\":21266:21343   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":21263:21264   */\n      0x00\n        /* \"#utility.yul\":21256:21344   */\n      mstore\n        /* \"#utility.yul\":21363:21367   */\n      0x21\n        /* \"#utility.yul\":21360:21361   */\n      0x04\n        /* \"#utility.yul\":21353:21368   */\n      mstore\n        /* \"#utility.yul\":21387:21391   */\n      0x24\n        /* \"#utility.yul\":21384:21385   */\n      0x00\n        /* \"#utility.yul\":21377:21392   */\n      revert\n        /* \"#utility.yul\":21404:21584   */\n    tag_535:\n        /* \"#utility.yul\":21452:21529   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":21449:21450   */\n      0x00\n        /* \"#utility.yul\":21442:21530   */\n      mstore\n        /* \"#utility.yul\":21549:21553   */\n      0x11\n        /* \"#utility.yul\":21546:21547   */\n      0x04\n        /* \"#utility.yul\":21539:21554   */\n      mstore\n        /* \"#utility.yul\":21573:21577   */\n      0x24\n        /* \"#utility.yul\":21570:21571   */\n      0x00\n        /* \"#utility.yul\":21563:21578   */\n      revert\n        /* \"#utility.yul\":21590:21781   */\n    tag_470:\n        /* \"#utility.yul\":21630:21633   */\n      0x00\n        /* \"#utility.yul\":21649:21669   */\n      tag_766\n        /* \"#utility.yul\":21667:21668   */\n      dup3\n        /* \"#utility.yul\":21649:21669   */\n      tag_489\n      jump\t// in\n    tag_766:\n        /* \"#utility.yul\":21644:21669   */\n      swap2\n      pop\n        /* \"#utility.yul\":21683:21703   */\n      tag_767\n        /* \"#utility.yul\":21701:21702   */\n      dup4\n        /* \"#utility.yul\":21683:21703   */\n      tag_489\n      jump\t// in\n    tag_767:\n        /* \"#utility.yul\":21678:21703   */\n      swap3\n      pop\n        /* \"#utility.yul\":21726:21727   */\n      dup3\n        /* \"#utility.yul\":21723:21724   */\n      dup3\n        /* \"#utility.yul\":21719:21728   */\n      add\n        /* \"#utility.yul\":21712:21728   */\n      swap1\n      pop\n        /* \"#utility.yul\":21747:21750   */\n      dup1\n        /* \"#utility.yul\":21744:21745   */\n      dup3\n        /* \"#utility.yul\":21741:21751   */\n      gt\n        /* \"#utility.yul\":21738:21774   */\n      iszero\n      tag_768\n      jumpi\n        /* \"#utility.yul\":21754:21772   */\n      tag_769\n      tag_535\n      jump\t// in\n    tag_769:\n        /* \"#utility.yul\":21738:21774   */\n    tag_768:\n        /* \"#utility.yul\":21590:21781   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa264697066735822122063b4d87d662aaa4d0f496a4b54eb5c97ce814d65c6306762753a9a5d10d84dbe64736f6c63430008160033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_4192": {
									"entryPoint": null,
									"id": 4192,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_disableInitializers_416": {
									"entryPoint": 39,
									"id": 416,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_getInitializableStorage_447": {
									"entryPoint": 299,
									"id": 447,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_encode_t_uint64_to_t_uint64_fromStack": {
									"entryPoint": 357,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed": {
									"entryPoint": 374,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_uint64": {
									"entryPoint": 338,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:456:21",
										"nodeType": "YulBlock",
										"src": "0:456:21",
										"statements": [
											{
												"body": {
													"nativeSrc": "51:57:21",
													"nodeType": "YulBlock",
													"src": "51:57:21",
													"statements": [
														{
															"nativeSrc": "61:41:21",
															"nodeType": "YulAssignment",
															"src": "61:41:21",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "76:5:21",
																		"nodeType": "YulIdentifier",
																		"src": "76:5:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "83:18:21",
																		"nodeType": "YulLiteral",
																		"src": "83:18:21",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "72:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "72:3:21"
																},
																"nativeSrc": "72:30:21",
																"nodeType": "YulFunctionCall",
																"src": "72:30:21"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "61:7:21",
																	"nodeType": "YulIdentifier",
																	"src": "61:7:21"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint64",
												"nativeSrc": "7:101:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "33:5:21",
														"nodeType": "YulTypedName",
														"src": "33:5:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "43:7:21",
														"nodeType": "YulTypedName",
														"src": "43:7:21",
														"type": ""
													}
												],
												"src": "7:101:21"
											},
											{
												"body": {
													"nativeSrc": "177:52:21",
													"nodeType": "YulBlock",
													"src": "177:52:21",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "194:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "194:3:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "216:5:21",
																				"nodeType": "YulIdentifier",
																				"src": "216:5:21"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint64",
																			"nativeSrc": "199:16:21",
																			"nodeType": "YulIdentifier",
																			"src": "199:16:21"
																		},
																		"nativeSrc": "199:23:21",
																		"nodeType": "YulFunctionCall",
																		"src": "199:23:21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "187:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:21"
																},
																"nativeSrc": "187:36:21",
																"nodeType": "YulFunctionCall",
																"src": "187:36:21"
															},
															"nativeSrc": "187:36:21",
															"nodeType": "YulExpressionStatement",
															"src": "187:36:21"
														}
													]
												},
												"name": "abi_encode_t_uint64_to_t_uint64_fromStack",
												"nativeSrc": "114:115:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "165:5:21",
														"nodeType": "YulTypedName",
														"src": "165:5:21",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "172:3:21",
														"nodeType": "YulTypedName",
														"src": "172:3:21",
														"type": ""
													}
												],
												"src": "114:115:21"
											},
											{
												"body": {
													"nativeSrc": "331:122:21",
													"nodeType": "YulBlock",
													"src": "331:122:21",
													"statements": [
														{
															"nativeSrc": "341:26:21",
															"nodeType": "YulAssignment",
															"src": "341:26:21",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "353:9:21",
																		"nodeType": "YulIdentifier",
																		"src": "353:9:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "364:2:21",
																		"nodeType": "YulLiteral",
																		"src": "364:2:21",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "349:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "349:3:21"
																},
																"nativeSrc": "349:18:21",
																"nodeType": "YulFunctionCall",
																"src": "349:18:21"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "341:4:21",
																	"nodeType": "YulIdentifier",
																	"src": "341:4:21"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "419:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "419:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "432:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "432:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "443:1:21",
																				"nodeType": "YulLiteral",
																				"src": "443:1:21",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "428:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "428:3:21"
																		},
																		"nativeSrc": "428:17:21",
																		"nodeType": "YulFunctionCall",
																		"src": "428:17:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint64_to_t_uint64_fromStack",
																	"nativeSrc": "377:41:21",
																	"nodeType": "YulIdentifier",
																	"src": "377:41:21"
																},
																"nativeSrc": "377:69:21",
																"nodeType": "YulFunctionCall",
																"src": "377:69:21"
															},
															"nativeSrc": "377:69:21",
															"nodeType": "YulExpressionStatement",
															"src": "377:69:21"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed",
												"nativeSrc": "235:218:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "303:9:21",
														"nodeType": "YulTypedName",
														"src": "303:9:21",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "315:6:21",
														"nodeType": "YulTypedName",
														"src": "315:6:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "326:4:21",
														"nodeType": "YulTypedName",
														"src": "326:4:21",
														"type": ""
													}
												],
												"src": "235:218:21"
											}
										]
									},
									"contents": "{\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function abi_encode_t_uint64_to_t_uint64_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint64(value))\n    }\n\n    function abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n",
									"id": 21,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x10 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH3 0x21 PUSH3 0x27 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x191 JUMP JUMPDEST PUSH0 PUSH3 0x38 PUSH3 0x12B PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST SWAP1 POP DUP1 PUSH0 ADD PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH3 0x83 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF92EE8A900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP1 AND DUP2 PUSH0 ADD PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND EQ PUSH3 0x128 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF DUP2 PUSH0 ADD PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x40 MLOAD PUSH3 0x11F SWAP2 SWAP1 PUSH3 0x176 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH0 PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x170 DUP2 PUSH3 0x152 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x18B PUSH0 DUP4 ADD DUP5 PUSH3 0x165 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2B1E DUP1 PUSH3 0x19F PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x14B JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xC1 JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x7A JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x359 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x377 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x3A7 JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x3C3 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x3DF JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x40F JUMPI PUSH2 0x14B JUMP JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x2B7 JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x2C1 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x2DD JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x30D JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x317 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x33B JUMPI PUSH2 0x14B JUMP JUMPDEST DUP1 PUSH4 0x3644E515 GT PUSH2 0x113 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x209 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x227 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x231 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x24D JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x269 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x287 JUMPI PUSH2 0x14B JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x14F JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x16D JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x19D JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1EB JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x157 PUSH2 0x42B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x164 SWAP2 SWAP1 PUSH2 0x202A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x187 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x182 SWAP2 SWAP1 PUSH2 0x20DB JUMP JUMPDEST PUSH2 0x4C9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x194 SWAP2 SWAP1 PUSH2 0x2133 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A5 PUSH2 0x4EB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B2 SWAP2 SWAP1 PUSH2 0x215B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1D0 SWAP2 SWAP1 PUSH2 0x2174 JUMP JUMPDEST PUSH2 0x502 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E2 SWAP2 SWAP1 PUSH2 0x2133 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F3 PUSH2 0x530 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x200 SWAP2 SWAP1 PUSH2 0x21DF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x211 PUSH2 0x538 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21E SWAP2 SWAP1 PUSH2 0x2210 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x22F PUSH2 0x546 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x24B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x246 SWAP2 SWAP1 PUSH2 0x20DB JUMP JUMPDEST PUSH2 0x558 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x267 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x262 SWAP2 SWAP1 PUSH2 0x2229 JUMP JUMPDEST PUSH2 0x56E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x271 PUSH2 0x582 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x27E SWAP2 SWAP1 PUSH2 0x2133 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x29C SWAP2 SWAP1 PUSH2 0x2254 JUMP JUMPDEST PUSH2 0x5A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2AE SWAP2 SWAP1 PUSH2 0x215B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2BF PUSH2 0x5F7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2DB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2D6 SWAP2 SWAP1 PUSH2 0x20DB JUMP JUMPDEST PUSH2 0x60A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2F7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2F2 SWAP2 SWAP1 PUSH2 0x2254 JUMP JUMPDEST PUSH2 0x62A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x304 SWAP2 SWAP1 PUSH2 0x215B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x315 PUSH2 0x63B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x31F PUSH2 0x64D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x332 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x237F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x343 PUSH2 0x756 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x350 SWAP2 SWAP1 PUSH2 0x2401 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x361 PUSH2 0x78B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x36E SWAP2 SWAP1 PUSH2 0x202A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x391 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x38C SWAP2 SWAP1 PUSH2 0x20DB JUMP JUMPDEST PUSH2 0x829 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x39E SWAP2 SWAP1 PUSH2 0x2133 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3C1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3BC SWAP2 SWAP1 PUSH2 0x2254 JUMP JUMPDEST PUSH2 0x84B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3DD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3D8 SWAP2 SWAP1 PUSH2 0x246E JUMP JUMPDEST PUSH2 0xA8E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3F9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3F4 SWAP2 SWAP1 PUSH2 0x250B JUMP JUMPDEST PUSH2 0xBD3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x406 SWAP2 SWAP1 PUSH2 0x215B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x429 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x424 SWAP2 SWAP1 PUSH2 0x2254 JUMP JUMPDEST PUSH2 0xC63 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0x436 PUSH2 0xCE7 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x3 ADD DUP1 SLOAD PUSH2 0x447 SWAP1 PUSH2 0x2576 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x473 SWAP1 PUSH2 0x2576 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4BE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x495 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x4BE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x4A1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x4D3 PUSH2 0xD0E JUMP JUMPDEST SWAP1 POP PUSH2 0x4E0 DUP2 DUP6 DUP6 PUSH2 0xD15 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x4F5 PUSH2 0xCE7 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x2 ADD SLOAD SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x50C PUSH2 0xD0E JUMP JUMPDEST SWAP1 POP PUSH2 0x519 DUP6 DUP3 DUP6 PUSH2 0xD27 JUMP JUMPDEST PUSH2 0x524 DUP6 DUP6 DUP6 PUSH2 0xDB9 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x541 PUSH2 0xEA9 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x54E PUSH2 0xEB7 JUMP JUMPDEST PUSH2 0x556 PUSH2 0xF3E JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x560 PUSH2 0xEB7 JUMP JUMPDEST PUSH2 0x56A DUP3 DUP3 PUSH2 0xFAC JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x57F PUSH2 0x579 PUSH2 0xD0E JUMP JUMPDEST DUP3 PUSH2 0x102B JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x58C PUSH2 0x10AA JUMP JUMPDEST SWAP1 POP DUP1 PUSH0 ADD PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x5AE PUSH2 0xCE7 JUMP JUMPDEST SWAP1 POP DUP1 PUSH0 ADD PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5FF PUSH2 0xEB7 JUMP JUMPDEST PUSH2 0x608 PUSH0 PUSH2 0x10D1 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x61C DUP3 PUSH2 0x616 PUSH2 0xD0E JUMP JUMPDEST DUP4 PUSH2 0xD27 JUMP JUMPDEST PUSH2 0x626 DUP3 DUP3 PUSH2 0x102B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH2 0x634 DUP3 PUSH2 0x11A2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x643 PUSH2 0xEB7 JUMP JUMPDEST PUSH2 0x64B PUSH2 0x11F5 JUMP JUMPDEST JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0x60 PUSH0 PUSH2 0x65F PUSH2 0x1264 JUMP JUMPDEST SWAP1 POP PUSH0 DUP1 SHL DUP2 PUSH0 ADD SLOAD EQ DUP1 ISZERO PUSH2 0x67A JUMPI POP PUSH0 DUP1 SHL DUP2 PUSH1 0x1 ADD SLOAD EQ JUMPDEST PUSH2 0x6B9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6B0 SWAP1 PUSH2 0x25F0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x6C1 PUSH2 0x128B JUMP JUMPDEST PUSH2 0x6C9 PUSH2 0x1329 JUMP JUMPDEST CHAINID ADDRESS PUSH0 DUP1 SHL PUSH0 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x6E8 JUMPI PUSH2 0x6E7 PUSH2 0x260E JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x716 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP PUSH32 0xF00000000000000000000000000000000000000000000000000000000000000 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 SWAP8 POP SWAP8 POP SWAP8 POP SWAP8 POP SWAP8 POP SWAP8 POP SWAP8 POP POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x760 PUSH2 0x13C7 JUMP JUMPDEST SWAP1 POP DUP1 PUSH0 ADD PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0x796 PUSH2 0xCE7 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x4 ADD DUP1 SLOAD PUSH2 0x7A7 SWAP1 PUSH2 0x2576 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x7D3 SWAP1 PUSH2 0x2576 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x81E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7F5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x81E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x801 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x833 PUSH2 0xD0E JUMP JUMPDEST SWAP1 POP PUSH2 0x840 DUP2 DUP6 DUP6 PUSH2 0xDB9 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x854 PUSH2 0x13EE JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 PUSH0 ADD PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP PUSH0 DUP3 PUSH0 ADD PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH0 DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x89C JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH0 PUSH1 0x1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x8CF JUMPI POP PUSH0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE EQ JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x8DD JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x914 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF92EE8A900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP6 PUSH0 ADD PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 ISZERO PUSH2 0x961 JUMPI PUSH1 0x1 DUP6 PUSH0 ADD PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 0x9D5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xB DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3432544F4B454E495A4552000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3432544F4B000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x1415 JUMP JUMPDEST PUSH2 0x9DD PUSH2 0x142B JUMP JUMPDEST PUSH2 0x9E5 PUSH2 0x1435 JUMP JUMPDEST PUSH2 0x9EE DUP7 PUSH2 0x1447 JUMP JUMPDEST PUSH2 0xA2C PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xB DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3432544F4B454E495A4552000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x145B JUMP JUMPDEST DUP4 ISZERO PUSH2 0xA86 JUMPI PUSH0 DUP6 PUSH0 ADD PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0xA7D SWAP2 SWAP1 PUSH2 0x2690 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0xAD3 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x6279130200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xACA SWAP2 SWAP1 PUSH2 0x215B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0xB01 DUP13 PUSH2 0x14A5 JUMP JUMPDEST DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xB17 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x26A9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH0 PUSH2 0xB39 DUP3 PUSH2 0x1505 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0xB48 DUP3 DUP8 DUP8 DUP8 PUSH2 0x151E JUMP JUMPDEST SWAP1 POP DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBBC JUMPI DUP1 DUP11 PUSH1 0x40 MLOAD PUSH32 0x4B800E4600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBB3 SWAP3 SWAP2 SWAP1 PUSH2 0x2708 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xBC7 DUP11 DUP11 DUP11 PUSH2 0xD15 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xBDD PUSH2 0xCE7 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 ADD PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xC6B PUSH2 0xEB7 JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xCDB JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCD2 SWAP2 SWAP1 PUSH2 0x2401 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xCE4 DUP2 PUSH2 0x10D1 JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 PUSH32 0x52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE00 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xD22 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x154C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xD32 DUP5 DUP5 PUSH2 0xBD3 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0xDB3 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xDA4 JUMPI DUP3 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xFB8F41B200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD9B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x272F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xDB2 DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x154C JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xE29 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE20 SWAP2 SWAP1 PUSH2 0x2401 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xE99 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE90 SWAP2 SWAP1 PUSH2 0x2401 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xEA4 DUP4 DUP4 DUP4 PUSH2 0x1729 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xEB2 PUSH2 0x1739 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xEBF PUSH2 0xD0E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xEDD PUSH2 0x756 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xF3C JUMPI PUSH2 0xF00 PUSH2 0xD0E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF33 SWAP2 SWAP1 PUSH2 0x2401 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0xF46 PUSH2 0x179C JUMP JUMPDEST PUSH0 PUSH2 0xF4F PUSH2 0x10AA JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 PUSH0 ADD PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH2 0xF94 PUSH2 0xD0E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFA1 SWAP2 SWAP1 PUSH2 0x2401 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x101C JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1013 SWAP2 SWAP1 PUSH2 0x2401 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1027 PUSH0 DUP4 DUP4 PUSH2 0x1729 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x109B JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1092 SWAP2 SWAP1 PUSH2 0x2401 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x10A6 DUP3 PUSH0 DUP4 PUSH2 0x1729 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH32 0xCD5ED15C6E187E77E9AEE88184C21F4F2182AB5827CB3B7E07FBEDCD63F03300 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x10DA PUSH2 0x13C7 JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 PUSH0 ADD PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP3 DUP3 PUSH0 ADD PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x11AC PUSH2 0x17DC JUMP JUMPDEST SWAP1 POP DUP1 PUSH0 ADD PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x11FD PUSH2 0x1803 JUMP JUMPDEST PUSH0 PUSH2 0x1206 PUSH2 0x10AA JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 PUSH0 ADD PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x124C PUSH2 0xD0E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1259 SWAP2 SWAP1 PUSH2 0x2401 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH0 PUSH32 0xA16A46D94261C7517CC8FF89F61C0CE93598E3C849801011DEE649A6A557D100 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0x1296 PUSH2 0x1264 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x2 ADD DUP1 SLOAD PUSH2 0x12A7 SWAP1 PUSH2 0x2576 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x12D3 SWAP1 PUSH2 0x2576 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x131E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x12F5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x131E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1301 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0x1334 PUSH2 0x1264 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x3 ADD DUP1 SLOAD PUSH2 0x1345 SWAP1 PUSH2 0x2576 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1371 SWAP1 PUSH2 0x2576 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x13BC JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1393 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x13BC JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x139F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH0 PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x141D PUSH2 0x1844 JUMP JUMPDEST PUSH2 0x1427 DUP3 DUP3 PUSH2 0x1884 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x1433 PUSH2 0x1844 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x143D PUSH2 0x1844 JUMP JUMPDEST PUSH2 0x1445 PUSH2 0x18C0 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x144F PUSH2 0x1844 JUMP JUMPDEST PUSH2 0x1458 DUP2 PUSH2 0x18F0 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1463 PUSH2 0x1844 JUMP JUMPDEST PUSH2 0x14A2 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3100000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x1974 JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x14AF PUSH2 0x17DC JUMP JUMPDEST SWAP1 POP DUP1 PUSH0 ADD PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 ADD SWAP2 SWAP1 POP SSTORE SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1517 PUSH2 0x1511 PUSH2 0xEA9 JUMP JUMPDEST DUP4 PUSH2 0x19C5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH2 0x152E DUP9 DUP9 DUP9 DUP9 PUSH2 0x1A05 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x153E DUP3 DUP3 PUSH2 0x1AEC JUMP JUMPDEST DUP3 SWAP4 POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x1555 PUSH2 0xCE7 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x15C7 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xE602DF0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15BE SWAP2 SWAP1 PUSH2 0x2401 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1637 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x94280D6200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x162E SWAP2 SWAP1 PUSH2 0x2401 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 DUP2 PUSH1 0x1 ADD PUSH0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 ISZERO PUSH2 0x1722 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP6 PUSH1 0x40 MLOAD PUSH2 0x1719 SWAP2 SWAP1 PUSH2 0x215B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1734 DUP4 DUP4 DUP4 PUSH2 0x1C4E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH2 0x1763 PUSH2 0x1C66 JUMP JUMPDEST PUSH2 0x176B PUSH2 0x1CDC JUMP JUMPDEST CHAINID ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1781 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2764 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x17A4 PUSH2 0x582 JUMP JUMPDEST PUSH2 0x17DA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8DFC202B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH0 PUSH32 0x5AB42CED628888259C08AC98DB1EB0CF702FC1501344311D8B100CD1BFE4BB00 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x180B PUSH2 0x582 JUMP JUMPDEST ISZERO PUSH2 0x1842 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD93C066500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x184C PUSH2 0x1D53 JUMP JUMPDEST PUSH2 0x1882 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD7E6BCF800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x188C PUSH2 0x1844 JUMP JUMPDEST PUSH0 PUSH2 0x1895 PUSH2 0xCE7 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 PUSH1 0x3 ADD SWAP1 DUP2 PUSH2 0x18A8 SWAP2 SWAP1 PUSH2 0x2949 JUMP JUMPDEST POP DUP2 DUP2 PUSH1 0x4 ADD SWAP1 DUP2 PUSH2 0x18BA SWAP2 SWAP1 PUSH2 0x2949 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x18C8 PUSH2 0x1844 JUMP JUMPDEST PUSH0 PUSH2 0x18D1 PUSH2 0x10AA JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 PUSH0 ADD PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0x18F8 PUSH2 0x1844 JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1968 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x195F SWAP2 SWAP1 PUSH2 0x2401 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1971 DUP2 PUSH2 0x10D1 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x197C PUSH2 0x1844 JUMP JUMPDEST PUSH0 PUSH2 0x1985 PUSH2 0x1264 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 PUSH1 0x2 ADD SWAP1 DUP2 PUSH2 0x1998 SWAP2 SWAP1 PUSH2 0x2949 JUMP JUMPDEST POP DUP2 DUP2 PUSH1 0x3 ADD SWAP1 DUP2 PUSH2 0x19AA SWAP2 SWAP1 PUSH2 0x2949 JUMP JUMPDEST POP PUSH0 DUP1 SHL DUP2 PUSH0 ADD DUP2 SWAP1 SSTORE POP PUSH0 DUP1 SHL DUP2 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP4 PUSH1 0x2 DUP3 ADD MSTORE DUP3 PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 DUP2 KECCAK256 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 PUSH0 SHR GT ISZERO PUSH2 0x1A41 JUMPI PUSH0 PUSH1 0x3 DUP6 SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x1AE2 JUMP JUMPDEST PUSH0 PUSH1 0x1 DUP9 DUP9 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x1A64 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A84 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1AD5 JUMPI PUSH0 PUSH1 0x1 PUSH0 DUP1 SHL SWAP4 POP SWAP4 POP SWAP4 POP POP PUSH2 0x1AE2 JUMP JUMPDEST DUP1 PUSH0 DUP1 PUSH0 SHL SWAP4 POP SWAP4 POP SWAP4 POP POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1AFF JUMPI PUSH2 0x1AFE PUSH2 0x2A5B JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1B12 JUMPI PUSH2 0x1B11 PUSH2 0x2A5B JUMP JUMPDEST JUMPDEST SUB ISZERO PUSH2 0x1C4A JUMPI PUSH1 0x1 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1B2C JUMPI PUSH2 0x1B2B PUSH2 0x2A5B JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1B3F JUMPI PUSH2 0x1B3E PUSH2 0x2A5B JUMP JUMPDEST JUMPDEST SUB PUSH2 0x1B76 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF645EEDF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1B8A JUMPI PUSH2 0x1B89 PUSH2 0x2A5B JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1B9D JUMPI PUSH2 0x1B9C PUSH2 0x2A5B JUMP JUMPDEST JUMPDEST SUB PUSH2 0x1BE1 JUMPI DUP1 PUSH0 SHR PUSH1 0x40 MLOAD PUSH32 0xFCE698F700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1BD8 SWAP2 SWAP1 PUSH2 0x215B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 DUP1 DUP2 GT ISZERO PUSH2 0x1BF4 JUMPI PUSH2 0x1BF3 PUSH2 0x2A5B JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1C07 JUMPI PUSH2 0x1C06 PUSH2 0x2A5B JUMP JUMPDEST JUMPDEST SUB PUSH2 0x1C49 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0xD78BCE0C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C40 SWAP2 SWAP1 PUSH2 0x2210 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x1C56 PUSH2 0x1803 JUMP JUMPDEST PUSH2 0x1C61 DUP4 DUP4 DUP4 PUSH2 0x1D71 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x1C70 PUSH2 0x1264 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x1C7B PUSH2 0x128B JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 MLOAD GT ISZERO PUSH2 0x1C97 JUMPI DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP3 POP POP POP PUSH2 0x1CD9 JUMP JUMPDEST PUSH0 DUP3 PUSH0 ADD SLOAD SWAP1 POP PUSH0 DUP1 SHL DUP2 EQ PUSH2 0x1CB2 JUMPI DUP1 SWAP4 POP POP POP POP PUSH2 0x1CD9 JUMP JUMPDEST PUSH32 0xC5D2460186F7233C927E7DB2DCC703C0E500B653CA82273B7BFAD8045D85A470 SWAP4 POP POP POP POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x1CE6 PUSH2 0x1264 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x1CF1 PUSH2 0x1329 JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 MLOAD GT ISZERO PUSH2 0x1D0D JUMPI DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP3 POP POP POP PUSH2 0x1D50 JUMP JUMPDEST PUSH0 DUP3 PUSH1 0x1 ADD SLOAD SWAP1 POP PUSH0 DUP1 SHL DUP2 EQ PUSH2 0x1D29 JUMPI DUP1 SWAP4 POP POP POP POP PUSH2 0x1D50 JUMP JUMPDEST PUSH32 0xC5D2460186F7233C927E7DB2DCC703C0E500B653CA82273B7BFAD8045D85A470 SWAP4 POP POP POP POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x1D5C PUSH2 0x13EE JUMP JUMPDEST PUSH0 ADD PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x1D7A PUSH2 0xCE7 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1DCE JUMPI DUP2 DUP2 PUSH1 0x2 ADD PUSH0 DUP3 DUP3 SLOAD PUSH2 0x1DC2 SWAP2 SWAP1 PUSH2 0x2AB5 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x1EA0 JUMP JUMPDEST PUSH0 DUP2 PUSH0 ADD PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0x1E59 JUMPI DUP5 DUP2 DUP5 PUSH1 0x40 MLOAD PUSH32 0xE450D38C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E50 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x272F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 DUP2 SUB DUP3 PUSH0 ADD PUSH0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1EE9 JUMPI DUP2 DUP2 PUSH1 0x2 ADD PUSH0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x1F35 JUMP JUMPDEST DUP2 DUP2 PUSH0 ADD PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x1F92 SWAP2 SWAP1 PUSH2 0x215B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1FD7 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1FBC JUMP JUMPDEST PUSH0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1FFC DUP3 PUSH2 0x1FA0 JUMP JUMPDEST PUSH2 0x2006 DUP2 DUP6 PUSH2 0x1FAA JUMP JUMPDEST SWAP4 POP PUSH2 0x2016 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1FBA JUMP JUMPDEST PUSH2 0x201F DUP2 PUSH2 0x1FE2 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x2042 DUP2 DUP5 PUSH2 0x1FF2 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x2077 DUP3 PUSH2 0x204E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2087 DUP2 PUSH2 0x206D JUMP JUMPDEST DUP2 EQ PUSH2 0x2091 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x20A2 DUP2 PUSH2 0x207E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x20BA DUP2 PUSH2 0x20A8 JUMP JUMPDEST DUP2 EQ PUSH2 0x20C4 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x20D5 DUP2 PUSH2 0x20B1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x20F1 JUMPI PUSH2 0x20F0 PUSH2 0x204A JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x20FE DUP6 DUP3 DUP7 ADD PUSH2 0x2094 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x210F DUP6 DUP3 DUP7 ADD PUSH2 0x20C7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x212D DUP2 PUSH2 0x2119 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2146 PUSH0 DUP4 ADD DUP5 PUSH2 0x2124 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2155 DUP2 PUSH2 0x20A8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x216E PUSH0 DUP4 ADD DUP5 PUSH2 0x214C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x218B JUMPI PUSH2 0x218A PUSH2 0x204A JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x2198 DUP7 DUP3 DUP8 ADD PUSH2 0x2094 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x21A9 DUP7 DUP3 DUP8 ADD PUSH2 0x2094 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x21BA DUP7 DUP3 DUP8 ADD PUSH2 0x20C7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x21D9 DUP2 PUSH2 0x21C4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x21F2 PUSH0 DUP4 ADD DUP5 PUSH2 0x21D0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x220A DUP2 PUSH2 0x21F8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2223 PUSH0 DUP4 ADD DUP5 PUSH2 0x2201 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x223E JUMPI PUSH2 0x223D PUSH2 0x204A JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x224B DUP5 DUP3 DUP6 ADD PUSH2 0x20C7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2269 JUMPI PUSH2 0x2268 PUSH2 0x204A JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x2276 DUP5 DUP3 DUP6 ADD PUSH2 0x2094 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x22B3 DUP2 PUSH2 0x227F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x22C2 DUP2 PUSH2 0x206D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x22FA DUP2 PUSH2 0x20A8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH2 0x230B DUP4 DUP4 PUSH2 0x22F1 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x232D DUP3 PUSH2 0x22C8 JUMP JUMPDEST PUSH2 0x2337 DUP2 DUP6 PUSH2 0x22D2 JUMP JUMPDEST SWAP4 POP PUSH2 0x2342 DUP4 PUSH2 0x22E2 JUMP JUMPDEST DUP1 PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2372 JUMPI DUP2 MLOAD PUSH2 0x2359 DUP9 DUP3 PUSH2 0x2300 JUMP JUMPDEST SWAP8 POP PUSH2 0x2364 DUP4 PUSH2 0x2317 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x2345 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0xE0 DUP3 ADD SWAP1 POP PUSH2 0x2392 PUSH0 DUP4 ADD DUP11 PUSH2 0x22AA JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x23A4 DUP2 DUP10 PUSH2 0x1FF2 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x23B8 DUP2 DUP9 PUSH2 0x1FF2 JUMP JUMPDEST SWAP1 POP PUSH2 0x23C7 PUSH1 0x60 DUP4 ADD DUP8 PUSH2 0x214C JUMP JUMPDEST PUSH2 0x23D4 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x22B9 JUMP JUMPDEST PUSH2 0x23E1 PUSH1 0xA0 DUP4 ADD DUP6 PUSH2 0x2201 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x23F3 DUP2 DUP5 PUSH2 0x2323 JUMP JUMPDEST SWAP1 POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2414 PUSH0 DUP4 ADD DUP5 PUSH2 0x22B9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2423 DUP2 PUSH2 0x21C4 JUMP JUMPDEST DUP2 EQ PUSH2 0x242D JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x243E DUP2 PUSH2 0x241A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x244D DUP2 PUSH2 0x21F8 JUMP JUMPDEST DUP2 EQ PUSH2 0x2457 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2468 DUP2 PUSH2 0x2444 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x2489 JUMPI PUSH2 0x2488 PUSH2 0x204A JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x2496 DUP11 DUP3 DUP12 ADD PUSH2 0x2094 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 PUSH2 0x24A7 DUP11 DUP3 DUP12 ADD PUSH2 0x2094 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 PUSH2 0x24B8 DUP11 DUP3 DUP12 ADD PUSH2 0x20C7 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 PUSH2 0x24C9 DUP11 DUP3 DUP12 ADD PUSH2 0x20C7 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH2 0x24DA DUP11 DUP3 DUP12 ADD PUSH2 0x2430 JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 PUSH2 0x24EB DUP11 DUP3 DUP12 ADD PUSH2 0x245A JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 PUSH2 0x24FC DUP11 DUP3 DUP12 ADD PUSH2 0x245A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2521 JUMPI PUSH2 0x2520 PUSH2 0x204A JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x252E DUP6 DUP3 DUP7 ADD PUSH2 0x2094 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x253F DUP6 DUP3 DUP7 ADD PUSH2 0x2094 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x258D JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x25A0 JUMPI PUSH2 0x259F PUSH2 0x2549 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4549503731323A20556E696E697469616C697A65640000000000000000000000 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x25DA PUSH1 0x15 DUP4 PUSH2 0x1FAA JUMP JUMPDEST SWAP2 POP PUSH2 0x25E5 DUP3 PUSH2 0x25A6 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x2607 DUP2 PUSH2 0x25CE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x267A PUSH2 0x2675 PUSH2 0x2670 DUP5 PUSH2 0x263B JUMP JUMPDEST PUSH2 0x2657 JUMP JUMPDEST PUSH2 0x2644 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x268A DUP2 PUSH2 0x2660 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x26A3 PUSH0 DUP4 ADD DUP5 PUSH2 0x2681 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0xC0 DUP3 ADD SWAP1 POP PUSH2 0x26BC PUSH0 DUP4 ADD DUP10 PUSH2 0x2201 JUMP JUMPDEST PUSH2 0x26C9 PUSH1 0x20 DUP4 ADD DUP9 PUSH2 0x22B9 JUMP JUMPDEST PUSH2 0x26D6 PUSH1 0x40 DUP4 ADD DUP8 PUSH2 0x22B9 JUMP JUMPDEST PUSH2 0x26E3 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x214C JUMP JUMPDEST PUSH2 0x26F0 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x214C JUMP JUMPDEST PUSH2 0x26FD PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x214C JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x271B PUSH0 DUP4 ADD DUP6 PUSH2 0x22B9 JUMP JUMPDEST PUSH2 0x2728 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x22B9 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2742 PUSH0 DUP4 ADD DUP7 PUSH2 0x22B9 JUMP JUMPDEST PUSH2 0x274F PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x214C JUMP JUMPDEST PUSH2 0x275C PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x214C JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x2777 PUSH0 DUP4 ADD DUP9 PUSH2 0x2201 JUMP JUMPDEST PUSH2 0x2784 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x2201 JUMP JUMPDEST PUSH2 0x2791 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x2201 JUMP JUMPDEST PUSH2 0x279E PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x214C JUMP JUMPDEST PUSH2 0x27AB PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x22B9 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP DUP2 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x8 DUP4 MUL PUSH2 0x2811 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x27D6 JUMP JUMPDEST PUSH2 0x281B DUP7 DUP4 PUSH2 0x27D6 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x284D PUSH2 0x2848 PUSH2 0x2843 DUP5 PUSH2 0x20A8 JUMP JUMPDEST PUSH2 0x2657 JUMP JUMPDEST PUSH2 0x20A8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2866 DUP4 PUSH2 0x2833 JUMP JUMPDEST PUSH2 0x287A PUSH2 0x2872 DUP3 PUSH2 0x2854 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x27E2 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH0 SWAP1 JUMP JUMPDEST PUSH2 0x288E PUSH2 0x2882 JUMP JUMPDEST PUSH2 0x2899 DUP2 DUP5 DUP5 PUSH2 0x285D JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x28BC JUMPI PUSH2 0x28B1 PUSH0 DUP3 PUSH2 0x2886 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x289F JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x2901 JUMPI PUSH2 0x28D2 DUP2 PUSH2 0x27B5 JUMP JUMPDEST PUSH2 0x28DB DUP5 PUSH2 0x27C7 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x28EA JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x28FE PUSH2 0x28F6 DUP6 PUSH2 0x27C7 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x289E JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x2921 PUSH0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x2906 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x2939 DUP4 DUP4 PUSH2 0x2912 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2952 DUP3 PUSH2 0x1FA0 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x296B JUMPI PUSH2 0x296A PUSH2 0x260E JUMP JUMPDEST JUMPDEST PUSH2 0x2975 DUP3 SLOAD PUSH2 0x2576 JUMP JUMPDEST PUSH2 0x2980 DUP3 DUP3 DUP6 PUSH2 0x28C0 JUMP JUMPDEST PUSH0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x29B1 JUMPI PUSH0 DUP5 ISZERO PUSH2 0x299F JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x29A9 DUP6 DUP3 PUSH2 0x292E JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x2A10 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x29BF DUP7 PUSH2 0x27B5 JUMP JUMPDEST PUSH0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x29E6 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x29C1 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x2A03 JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x29FF PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x2912 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2A2B PUSH0 DUP4 ADD DUP8 PUSH2 0x2201 JUMP JUMPDEST PUSH2 0x2A38 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x21D0 JUMP JUMPDEST PUSH2 0x2A45 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2201 JUMP JUMPDEST PUSH2 0x2A52 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x2201 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0x2ABF DUP3 PUSH2 0x20A8 JUMP JUMPDEST SWAP2 POP PUSH2 0x2ACA DUP4 PUSH2 0x20A8 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x2AE2 JUMPI PUSH2 0x2AE1 PUSH2 0x2A88 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH4 0xB4D87D66 0x2A 0xAA 0x4D 0xF 0x49 PUSH11 0x4B54EB5C97CE814D65C630 PUSH8 0x62753A9A5D10D84D 0xBE PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ",
							"sourceMap": "582:1021:20:-:0;;;789:53;;;;;;;;;;813:22;:20;;;:22;;:::i;:::-;582:1021;;7711:422:1;7826:30;7859:26;:24;;;:26;;:::i;:::-;7826:59;;7900:1;:15;;;;;;;;;;;;7896:76;;;7938:23;;;;;;;;;;;;;;7896:76;8003:16;7985:34;;:1;:14;;;;;;;;;;;;:34;;;7981:146;;8052:16;8035:1;:14;;;:33;;;;;;;;;;;;;;;;;;8087:29;8099:16;8087:29;;;;;;:::i;:::-;;;;;;;;7981:146;7760:373;7711:422::o;8737:170::-;8795:30;8870:21;8860:31;;8737:170;:::o;7:101:21:-;43:7;83:18;76:5;72:30;61:41;;7:101;;;:::o;114:115::-;199:23;216:5;199:23;:::i;:::-;194:3;187:36;114:115;;:::o;235:218::-;326:4;364:2;353:9;349:18;341:26;;377:69;443:1;432:9;428:17;419:6;377:69;:::i;:::-;235:218;;;;:::o;582:1021:20:-;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@DOMAIN_SEPARATOR_1348": {
									"entryPoint": 1336,
									"id": 1348,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_EIP712NameHash_1973": {
									"entryPoint": 7270,
									"id": 1973,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_EIP712Name_1905": {
									"entryPoint": 4747,
									"id": 1905,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_EIP712VersionHash_2025": {
									"entryPoint": 7388,
									"id": 2025,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_EIP712Version_1921": {
									"entryPoint": 4905,
									"id": 1921,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@__EIP712_init_unchained_1779": {
									"entryPoint": 6516,
									"id": 1779,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@__ERC20Burnable_init_1086": {
									"entryPoint": 5163,
									"id": 1086,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@__ERC20Pausable_init_1151": {
									"entryPoint": 5173,
									"id": 1151,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@__ERC20Permit_init_1236": {
									"entryPoint": 5211,
									"id": 1236,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@__ERC20_init_516": {
									"entryPoint": 5141,
									"id": 516,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@__ERC20_init_unchained_544": {
									"entryPoint": 6276,
									"id": 544,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@__Ownable_init_54": {
									"entryPoint": 5191,
									"id": 54,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@__Ownable_init_unchained_81": {
									"entryPoint": 6384,
									"id": 81,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@__Pausable_init_unchained_1576": {
									"entryPoint": 6336,
									"id": 1576,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_approve_1016": {
									"entryPoint": 5452,
									"id": 1016,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_approve_948": {
									"entryPoint": 3349,
									"id": 948,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_buildDomainSeparator_1812": {
									"entryPoint": 5945,
									"id": 1812,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_burn_930": {
									"entryPoint": 4139,
									"id": 930,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_checkInitializing_370": {
									"entryPoint": 6212,
									"id": 370,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_checkOwner_122": {
									"entryPoint": 3767,
									"id": 122,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_domainSeparatorV4_1789": {
									"entryPoint": 3753,
									"id": 1789,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_getEIP712Storage_1723": {
									"entryPoint": 4708,
									"id": 1723,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_getERC20Storage_500": {
									"entryPoint": 3303,
									"id": 500,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_getInitializableStorage_447": {
									"entryPoint": 5102,
									"id": 447,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_getNoncesStorage_1426": {
									"entryPoint": 6108,
									"id": 1426,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_getOwnableStorage_25": {
									"entryPoint": 5063,
									"id": 25,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_getPausableStorage_1532": {
									"entryPoint": 4266,
									"id": 1532,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_hashTypedDataV4_1828": {
									"entryPoint": 5381,
									"id": 1828,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_isInitializing_438": {
									"entryPoint": 7507,
									"id": 438,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_mint_897": {
									"entryPoint": 4012,
									"id": 897,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_1377": {
									"entryPoint": 3342,
									"id": 1377,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_pause_1657": {
									"entryPoint": 4597,
									"id": 1657,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_requireNotPaused_1620": {
									"entryPoint": 6147,
									"id": 1620,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_requirePaused_1633": {
									"entryPoint": 6044,
									"id": 1633,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_spendAllowance_1064": {
									"entryPoint": 3367,
									"id": 1064,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_throwError_2930": {
									"entryPoint": 6892,
									"id": 2930,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_transferOwnership_193": {
									"entryPoint": 4305,
									"id": 193,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_transfer_772": {
									"entryPoint": 3513,
									"id": 772,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_unpause_1681": {
									"entryPoint": 3902,
									"id": 1681,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_update_1179": {
									"entryPoint": 7246,
									"id": 1179,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_update_4273": {
									"entryPoint": 5929,
									"id": 4273,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_update_864": {
									"entryPoint": 7537,
									"id": 864,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_useNonce_1480": {
									"entryPoint": 5285,
									"id": 1480,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@allowance_669": {
									"entryPoint": 3027,
									"id": 669,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_693": {
									"entryPoint": 1225,
									"id": 693,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_621": {
									"entryPoint": 1444,
									"id": 621,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@burnFrom_1126": {
									"entryPoint": 1546,
									"id": 1126,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@burn_1105": {
									"entryPoint": 1390,
									"id": 1105,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@decimals_585": {
									"entryPoint": 1328,
									"id": 585,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@eip712Domain_1889": {
									"entryPoint": 1613,
									"id": 1889,
									"parameterSlots": 0,
									"returnSlots": 7
								},
								"@initialize_4219": {
									"entryPoint": 2123,
									"id": 4219,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@mint_4252": {
									"entryPoint": 1368,
									"id": 4252,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@name_560": {
									"entryPoint": 1067,
									"id": 560,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@nonces_1338": {
									"entryPoint": 1578,
									"id": 1338,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@nonces_1458": {
									"entryPoint": 4514,
									"id": 1458,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@owner_105": {
									"entryPoint": 1878,
									"id": 105,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@pause_4228": {
									"entryPoint": 1595,
									"id": 4228,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@paused_1608": {
									"entryPoint": 1410,
									"id": 1608,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@permit_1321": {
									"entryPoint": 2702,
									"id": 1321,
									"parameterSlots": 7,
									"returnSlots": 0
								},
								"@recover_2881": {
									"entryPoint": 5406,
									"id": 2881,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@renounceOwnership_136": {
									"entryPoint": 1527,
									"id": 136,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@symbol_576": {
									"entryPoint": 1931,
									"id": 576,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@toTypedDataHash_3004": {
									"entryPoint": 6597,
									"id": 3004,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@totalSupply_601": {
									"entryPoint": 1259,
									"id": 601,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_725": {
									"entryPoint": 1282,
									"id": 725,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transferOwnership_164": {
									"entryPoint": 3171,
									"id": 164,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@transfer_645": {
									"entryPoint": 2089,
									"id": 645,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@tryRecover_2845": {
									"entryPoint": 6661,
									"id": 2845,
									"parameterSlots": 4,
									"returnSlots": 3
								},
								"@unpause_4237": {
									"entryPoint": 1350,
									"id": 4237,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_decode_t_address": {
									"entryPoint": 8340,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bytes32": {
									"entryPoint": 9306,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 8391,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint8": {
									"entryPoint": 9264,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 8788,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 9483,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 8564,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32": {
									"entryPoint": 9326,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 7
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 8411,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 8745,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encodeUpdatedPos_t_uint256_to_t_uint256": {
									"entryPoint": 8960,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 8889,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack": {
									"entryPoint": 8995,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 8484,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bytes1_to_t_bytes1_fromStack": {
									"entryPoint": 8874,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bytes32_to_t_bytes32_fromStack": {
									"entryPoint": 8705,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_rational_1_by_1_to_t_uint64_fromStack": {
									"entryPoint": 9857,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 8178,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_2e5045ff73280aa8e8acd8c82710f23812497f87f7f576e2220a2ddd0d45eade_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 9678,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_uint256_to_t_uint256": {
									"entryPoint": 8945,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 8524,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_uint8_to_t_uint8_fromStack": {
									"entryPoint": 8656,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 9217,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed": {
									"entryPoint": 9992,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": 10031,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": 8499,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed": {
									"entryPoint": 9087,
									"id": null,
									"parameterSlots": 8,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
									"entryPoint": 8720,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": 9897,
									"id": null,
									"parameterSlots": 7,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
									"entryPoint": 10084,
									"id": null,
									"parameterSlots": 6,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed": {
									"entryPoint": 10776,
									"id": null,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed": {
									"entryPoint": 9872,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 8234,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_2e5045ff73280aa8e8acd8c82710f23812497f87f7f576e2220a2ddd0d45eade__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 9712,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 8539,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": 8671,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr": {
									"entryPoint": 8930,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_dataslot_t_string_storage": {
									"entryPoint": 10165,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_array$_t_uint256_$dyn_memory_ptr": {
									"entryPoint": 8904,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 8096,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr": {
									"entryPoint": 8983,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack": {
									"entryPoint": 8914,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 8106,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 10933,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"clean_up_bytearray_end_slots_t_string_storage": {
									"entryPoint": 10432,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"cleanup_t_address": {
									"entryPoint": 8301,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 8473,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bytes1": {
									"entryPoint": 8831,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bytes32": {
									"entryPoint": 8696,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_rational_1_by_1": {
									"entryPoint": 9787,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 8270,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 8360,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint64": {
									"entryPoint": 9796,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint8": {
									"entryPoint": 8644,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"clear_storage_range_t_bytes1": {
									"entryPoint": 10398,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"convert_t_rational_1_by_1_to_t_uint64": {
									"entryPoint": 9824,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_uint256_to_t_uint256": {
									"entryPoint": 10291,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
									"entryPoint": 10569,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"copy_memory_to_memory_with_cleanup": {
									"entryPoint": 8122,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"divide_by_32_ceil": {
									"entryPoint": 10183,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 9590,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_used_part_and_set_length_of_short_byte_array": {
									"entryPoint": 10542,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"identity": {
									"entryPoint": 9815,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"mask_bytes_dynamic": {
									"entryPoint": 10514,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 10888,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x21": {
									"entryPoint": 10843,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x22": {
									"entryPoint": 9545,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 9742,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"prepare_store_t_uint256": {
									"entryPoint": 10324,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 8266,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 8162,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"shift_left_dynamic": {
									"entryPoint": 10198,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"shift_right_unsigned_dynamic": {
									"entryPoint": 10502,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"storage_set_to_zero_t_uint256": {
									"entryPoint": 10374,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"store_literal_in_memory_2e5045ff73280aa8e8acd8c82710f23812497f87f7f576e2220a2ddd0d45eade": {
									"entryPoint": 9638,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"update_byte_slice_dynamic32": {
									"entryPoint": 10210,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"update_storage_value_t_uint256_to_t_uint256": {
									"entryPoint": 10333,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 8318,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bytes32": {
									"entryPoint": 9284,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 8369,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint8": {
									"entryPoint": 9242,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"zero_value_for_split_t_uint256": {
									"entryPoint": 10370,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:21784:21",
										"nodeType": "YulBlock",
										"src": "0:21784:21",
										"statements": [
											{
												"body": {
													"nativeSrc": "66:40:21",
													"nodeType": "YulBlock",
													"src": "66:40:21",
													"statements": [
														{
															"nativeSrc": "77:22:21",
															"nodeType": "YulAssignment",
															"src": "77:22:21",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "93:5:21",
																		"nodeType": "YulIdentifier",
																		"src": "93:5:21"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "87:5:21",
																	"nodeType": "YulIdentifier",
																	"src": "87:5:21"
																},
																"nativeSrc": "87:12:21",
																"nodeType": "YulFunctionCall",
																"src": "87:12:21"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "77:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "77:6:21"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nativeSrc": "7:99:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "49:5:21",
														"nodeType": "YulTypedName",
														"src": "49:5:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "59:6:21",
														"nodeType": "YulTypedName",
														"src": "59:6:21",
														"type": ""
													}
												],
												"src": "7:99:21"
											},
											{
												"body": {
													"nativeSrc": "208:73:21",
													"nodeType": "YulBlock",
													"src": "208:73:21",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "225:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "225:3:21"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "230:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "230:6:21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "218:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "218:6:21"
																},
																"nativeSrc": "218:19:21",
																"nodeType": "YulFunctionCall",
																"src": "218:19:21"
															},
															"nativeSrc": "218:19:21",
															"nodeType": "YulExpressionStatement",
															"src": "218:19:21"
														},
														{
															"nativeSrc": "246:29:21",
															"nodeType": "YulAssignment",
															"src": "246:29:21",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "265:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "265:3:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "270:4:21",
																		"nodeType": "YulLiteral",
																		"src": "270:4:21",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "261:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "261:3:21"
																},
																"nativeSrc": "261:14:21",
																"nodeType": "YulFunctionCall",
																"src": "261:14:21"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nativeSrc": "246:11:21",
																	"nodeType": "YulIdentifier",
																	"src": "246:11:21"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nativeSrc": "112:169:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "180:3:21",
														"nodeType": "YulTypedName",
														"src": "180:3:21",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "185:6:21",
														"nodeType": "YulTypedName",
														"src": "185:6:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nativeSrc": "196:11:21",
														"nodeType": "YulTypedName",
														"src": "196:11:21",
														"type": ""
													}
												],
												"src": "112:169:21"
											},
											{
												"body": {
													"nativeSrc": "349:184:21",
													"nodeType": "YulBlock",
													"src": "349:184:21",
													"statements": [
														{
															"nativeSrc": "359:10:21",
															"nodeType": "YulVariableDeclaration",
															"src": "359:10:21",
															"value": {
																"kind": "number",
																"nativeSrc": "368:1:21",
																"nodeType": "YulLiteral",
																"src": "368:1:21",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nativeSrc": "363:1:21",
																	"nodeType": "YulTypedName",
																	"src": "363:1:21",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "428:63:21",
																"nodeType": "YulBlock",
																"src": "428:63:21",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nativeSrc": "453:3:21",
																							"nodeType": "YulIdentifier",
																							"src": "453:3:21"
																						},
																						{
																							"name": "i",
																							"nativeSrc": "458:1:21",
																							"nodeType": "YulIdentifier",
																							"src": "458:1:21"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "449:3:21",
																						"nodeType": "YulIdentifier",
																						"src": "449:3:21"
																					},
																					"nativeSrc": "449:11:21",
																					"nodeType": "YulFunctionCall",
																					"src": "449:11:21"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nativeSrc": "472:3:21",
																									"nodeType": "YulIdentifier",
																									"src": "472:3:21"
																								},
																								{
																									"name": "i",
																									"nativeSrc": "477:1:21",
																									"nodeType": "YulIdentifier",
																									"src": "477:1:21"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "468:3:21",
																								"nodeType": "YulIdentifier",
																								"src": "468:3:21"
																							},
																							"nativeSrc": "468:11:21",
																							"nodeType": "YulFunctionCall",
																							"src": "468:11:21"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nativeSrc": "462:5:21",
																						"nodeType": "YulIdentifier",
																						"src": "462:5:21"
																					},
																					"nativeSrc": "462:18:21",
																					"nodeType": "YulFunctionCall",
																					"src": "462:18:21"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "442:6:21",
																				"nodeType": "YulIdentifier",
																				"src": "442:6:21"
																			},
																			"nativeSrc": "442:39:21",
																			"nodeType": "YulFunctionCall",
																			"src": "442:39:21"
																		},
																		"nativeSrc": "442:39:21",
																		"nodeType": "YulExpressionStatement",
																		"src": "442:39:21"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nativeSrc": "389:1:21",
																		"nodeType": "YulIdentifier",
																		"src": "389:1:21"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "392:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "392:6:21"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "386:2:21",
																	"nodeType": "YulIdentifier",
																	"src": "386:2:21"
																},
																"nativeSrc": "386:13:21",
																"nodeType": "YulFunctionCall",
																"src": "386:13:21"
															},
															"nativeSrc": "378:113:21",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "400:19:21",
																"nodeType": "YulBlock",
																"src": "400:19:21",
																"statements": [
																	{
																		"nativeSrc": "402:15:21",
																		"nodeType": "YulAssignment",
																		"src": "402:15:21",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nativeSrc": "411:1:21",
																					"nodeType": "YulIdentifier",
																					"src": "411:1:21"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "414:2:21",
																					"nodeType": "YulLiteral",
																					"src": "414:2:21",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "407:3:21",
																				"nodeType": "YulIdentifier",
																				"src": "407:3:21"
																			},
																			"nativeSrc": "407:10:21",
																			"nodeType": "YulFunctionCall",
																			"src": "407:10:21"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nativeSrc": "402:1:21",
																				"nodeType": "YulIdentifier",
																				"src": "402:1:21"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nativeSrc": "382:3:21",
																"nodeType": "YulBlock",
																"src": "382:3:21",
																"statements": []
															},
															"src": "378:113:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nativeSrc": "511:3:21",
																				"nodeType": "YulIdentifier",
																				"src": "511:3:21"
																			},
																			{
																				"name": "length",
																				"nativeSrc": "516:6:21",
																				"nodeType": "YulIdentifier",
																				"src": "516:6:21"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "507:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "507:3:21"
																		},
																		"nativeSrc": "507:16:21",
																		"nodeType": "YulFunctionCall",
																		"src": "507:16:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "525:1:21",
																		"nodeType": "YulLiteral",
																		"src": "525:1:21",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "500:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "500:6:21"
																},
																"nativeSrc": "500:27:21",
																"nodeType": "YulFunctionCall",
																"src": "500:27:21"
															},
															"nativeSrc": "500:27:21",
															"nodeType": "YulExpressionStatement",
															"src": "500:27:21"
														}
													]
												},
												"name": "copy_memory_to_memory_with_cleanup",
												"nativeSrc": "287:246:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nativeSrc": "331:3:21",
														"nodeType": "YulTypedName",
														"src": "331:3:21",
														"type": ""
													},
													{
														"name": "dst",
														"nativeSrc": "336:3:21",
														"nodeType": "YulTypedName",
														"src": "336:3:21",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "341:6:21",
														"nodeType": "YulTypedName",
														"src": "341:6:21",
														"type": ""
													}
												],
												"src": "287:246:21"
											},
											{
												"body": {
													"nativeSrc": "587:54:21",
													"nodeType": "YulBlock",
													"src": "587:54:21",
													"statements": [
														{
															"nativeSrc": "597:38:21",
															"nodeType": "YulAssignment",
															"src": "597:38:21",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "615:5:21",
																				"nodeType": "YulIdentifier",
																				"src": "615:5:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "622:2:21",
																				"nodeType": "YulLiteral",
																				"src": "622:2:21",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "611:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "611:3:21"
																		},
																		"nativeSrc": "611:14:21",
																		"nodeType": "YulFunctionCall",
																		"src": "611:14:21"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "631:2:21",
																				"nodeType": "YulLiteral",
																				"src": "631:2:21",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "627:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "627:3:21"
																		},
																		"nativeSrc": "627:7:21",
																		"nodeType": "YulFunctionCall",
																		"src": "627:7:21"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "607:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "607:3:21"
																},
																"nativeSrc": "607:28:21",
																"nodeType": "YulFunctionCall",
																"src": "607:28:21"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "597:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "597:6:21"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nativeSrc": "539:102:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "570:5:21",
														"nodeType": "YulTypedName",
														"src": "570:5:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "580:6:21",
														"nodeType": "YulTypedName",
														"src": "580:6:21",
														"type": ""
													}
												],
												"src": "539:102:21"
											},
											{
												"body": {
													"nativeSrc": "739:285:21",
													"nodeType": "YulBlock",
													"src": "739:285:21",
													"statements": [
														{
															"nativeSrc": "749:53:21",
															"nodeType": "YulVariableDeclaration",
															"src": "749:53:21",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "796:5:21",
																		"nodeType": "YulIdentifier",
																		"src": "796:5:21"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nativeSrc": "763:32:21",
																	"nodeType": "YulIdentifier",
																	"src": "763:32:21"
																},
																"nativeSrc": "763:39:21",
																"nodeType": "YulFunctionCall",
																"src": "763:39:21"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "753:6:21",
																	"nodeType": "YulTypedName",
																	"src": "753:6:21",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "811:78:21",
															"nodeType": "YulAssignment",
															"src": "811:78:21",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "877:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "877:3:21"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "882:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "882:6:21"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nativeSrc": "818:58:21",
																	"nodeType": "YulIdentifier",
																	"src": "818:58:21"
																},
																"nativeSrc": "818:71:21",
																"nodeType": "YulFunctionCall",
																"src": "818:71:21"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "811:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "811:3:21"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "937:5:21",
																				"nodeType": "YulIdentifier",
																				"src": "937:5:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "944:4:21",
																				"nodeType": "YulLiteral",
																				"src": "944:4:21",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "933:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "933:3:21"
																		},
																		"nativeSrc": "933:16:21",
																		"nodeType": "YulFunctionCall",
																		"src": "933:16:21"
																	},
																	{
																		"name": "pos",
																		"nativeSrc": "951:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "951:3:21"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "956:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "956:6:21"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nativeSrc": "898:34:21",
																	"nodeType": "YulIdentifier",
																	"src": "898:34:21"
																},
																"nativeSrc": "898:65:21",
																"nodeType": "YulFunctionCall",
																"src": "898:65:21"
															},
															"nativeSrc": "898:65:21",
															"nodeType": "YulExpressionStatement",
															"src": "898:65:21"
														},
														{
															"nativeSrc": "972:46:21",
															"nodeType": "YulAssignment",
															"src": "972:46:21",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "983:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "983:3:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "1010:6:21",
																				"nodeType": "YulIdentifier",
																				"src": "1010:6:21"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nativeSrc": "988:21:21",
																			"nodeType": "YulIdentifier",
																			"src": "988:21:21"
																		},
																		"nativeSrc": "988:29:21",
																		"nodeType": "YulFunctionCall",
																		"src": "988:29:21"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "979:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "979:3:21"
																},
																"nativeSrc": "979:39:21",
																"nodeType": "YulFunctionCall",
																"src": "979:39:21"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "972:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "972:3:21"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "647:377:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "720:5:21",
														"nodeType": "YulTypedName",
														"src": "720:5:21",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "727:3:21",
														"nodeType": "YulTypedName",
														"src": "727:3:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "735:3:21",
														"nodeType": "YulTypedName",
														"src": "735:3:21",
														"type": ""
													}
												],
												"src": "647:377:21"
											},
											{
												"body": {
													"nativeSrc": "1148:195:21",
													"nodeType": "YulBlock",
													"src": "1148:195:21",
													"statements": [
														{
															"nativeSrc": "1158:26:21",
															"nodeType": "YulAssignment",
															"src": "1158:26:21",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1170:9:21",
																		"nodeType": "YulIdentifier",
																		"src": "1170:9:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1181:2:21",
																		"nodeType": "YulLiteral",
																		"src": "1181:2:21",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1166:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "1166:3:21"
																},
																"nativeSrc": "1166:18:21",
																"nodeType": "YulFunctionCall",
																"src": "1166:18:21"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1158:4:21",
																	"nodeType": "YulIdentifier",
																	"src": "1158:4:21"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1205:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "1205:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1216:1:21",
																				"nodeType": "YulLiteral",
																				"src": "1216:1:21",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1201:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "1201:3:21"
																		},
																		"nativeSrc": "1201:17:21",
																		"nodeType": "YulFunctionCall",
																		"src": "1201:17:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nativeSrc": "1224:4:21",
																				"nodeType": "YulIdentifier",
																				"src": "1224:4:21"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "1230:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "1230:9:21"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1220:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "1220:3:21"
																		},
																		"nativeSrc": "1220:20:21",
																		"nodeType": "YulFunctionCall",
																		"src": "1220:20:21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1194:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "1194:6:21"
																},
																"nativeSrc": "1194:47:21",
																"nodeType": "YulFunctionCall",
																"src": "1194:47:21"
															},
															"nativeSrc": "1194:47:21",
															"nodeType": "YulExpressionStatement",
															"src": "1194:47:21"
														},
														{
															"nativeSrc": "1250:86:21",
															"nodeType": "YulAssignment",
															"src": "1250:86:21",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "1322:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "1322:6:21"
																	},
																	{
																		"name": "tail",
																		"nativeSrc": "1331:4:21",
																		"nodeType": "YulIdentifier",
																		"src": "1331:4:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nativeSrc": "1258:63:21",
																	"nodeType": "YulIdentifier",
																	"src": "1258:63:21"
																},
																"nativeSrc": "1258:78:21",
																"nodeType": "YulFunctionCall",
																"src": "1258:78:21"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1250:4:21",
																	"nodeType": "YulIdentifier",
																	"src": "1250:4:21"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "1030:313:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1120:9:21",
														"nodeType": "YulTypedName",
														"src": "1120:9:21",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1132:6:21",
														"nodeType": "YulTypedName",
														"src": "1132:6:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1143:4:21",
														"nodeType": "YulTypedName",
														"src": "1143:4:21",
														"type": ""
													}
												],
												"src": "1030:313:21"
											},
											{
												"body": {
													"nativeSrc": "1389:35:21",
													"nodeType": "YulBlock",
													"src": "1389:35:21",
													"statements": [
														{
															"nativeSrc": "1399:19:21",
															"nodeType": "YulAssignment",
															"src": "1399:19:21",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1415:2:21",
																		"nodeType": "YulLiteral",
																		"src": "1415:2:21",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "1409:5:21",
																	"nodeType": "YulIdentifier",
																	"src": "1409:5:21"
																},
																"nativeSrc": "1409:9:21",
																"nodeType": "YulFunctionCall",
																"src": "1409:9:21"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nativeSrc": "1399:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "1399:6:21"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nativeSrc": "1349:75:21",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nativeSrc": "1382:6:21",
														"nodeType": "YulTypedName",
														"src": "1382:6:21",
														"type": ""
													}
												],
												"src": "1349:75:21"
											},
											{
												"body": {
													"nativeSrc": "1519:28:21",
													"nodeType": "YulBlock",
													"src": "1519:28:21",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1536:1:21",
																		"nodeType": "YulLiteral",
																		"src": "1536:1:21",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1539:1:21",
																		"nodeType": "YulLiteral",
																		"src": "1539:1:21",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "1529:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "1529:6:21"
																},
																"nativeSrc": "1529:12:21",
																"nodeType": "YulFunctionCall",
																"src": "1529:12:21"
															},
															"nativeSrc": "1529:12:21",
															"nodeType": "YulExpressionStatement",
															"src": "1529:12:21"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nativeSrc": "1430:117:21",
												"nodeType": "YulFunctionDefinition",
												"src": "1430:117:21"
											},
											{
												"body": {
													"nativeSrc": "1642:28:21",
													"nodeType": "YulBlock",
													"src": "1642:28:21",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1659:1:21",
																		"nodeType": "YulLiteral",
																		"src": "1659:1:21",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1662:1:21",
																		"nodeType": "YulLiteral",
																		"src": "1662:1:21",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "1652:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "1652:6:21"
																},
																"nativeSrc": "1652:12:21",
																"nodeType": "YulFunctionCall",
																"src": "1652:12:21"
															},
															"nativeSrc": "1652:12:21",
															"nodeType": "YulExpressionStatement",
															"src": "1652:12:21"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nativeSrc": "1553:117:21",
												"nodeType": "YulFunctionDefinition",
												"src": "1553:117:21"
											},
											{
												"body": {
													"nativeSrc": "1721:81:21",
													"nodeType": "YulBlock",
													"src": "1721:81:21",
													"statements": [
														{
															"nativeSrc": "1731:65:21",
															"nodeType": "YulAssignment",
															"src": "1731:65:21",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "1746:5:21",
																		"nodeType": "YulIdentifier",
																		"src": "1746:5:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1753:42:21",
																		"nodeType": "YulLiteral",
																		"src": "1753:42:21",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "1742:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "1742:3:21"
																},
																"nativeSrc": "1742:54:21",
																"nodeType": "YulFunctionCall",
																"src": "1742:54:21"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "1731:7:21",
																	"nodeType": "YulIdentifier",
																	"src": "1731:7:21"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nativeSrc": "1676:126:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "1703:5:21",
														"nodeType": "YulTypedName",
														"src": "1703:5:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "1713:7:21",
														"nodeType": "YulTypedName",
														"src": "1713:7:21",
														"type": ""
													}
												],
												"src": "1676:126:21"
											},
											{
												"body": {
													"nativeSrc": "1853:51:21",
													"nodeType": "YulBlock",
													"src": "1853:51:21",
													"statements": [
														{
															"nativeSrc": "1863:35:21",
															"nodeType": "YulAssignment",
															"src": "1863:35:21",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "1892:5:21",
																		"nodeType": "YulIdentifier",
																		"src": "1892:5:21"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nativeSrc": "1874:17:21",
																	"nodeType": "YulIdentifier",
																	"src": "1874:17:21"
																},
																"nativeSrc": "1874:24:21",
																"nodeType": "YulFunctionCall",
																"src": "1874:24:21"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "1863:7:21",
																	"nodeType": "YulIdentifier",
																	"src": "1863:7:21"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nativeSrc": "1808:96:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "1835:5:21",
														"nodeType": "YulTypedName",
														"src": "1835:5:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "1845:7:21",
														"nodeType": "YulTypedName",
														"src": "1845:7:21",
														"type": ""
													}
												],
												"src": "1808:96:21"
											},
											{
												"body": {
													"nativeSrc": "1953:79:21",
													"nodeType": "YulBlock",
													"src": "1953:79:21",
													"statements": [
														{
															"body": {
																"nativeSrc": "2010:16:21",
																"nodeType": "YulBlock",
																"src": "2010:16:21",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2019:1:21",
																					"nodeType": "YulLiteral",
																					"src": "2019:1:21",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2022:1:21",
																					"nodeType": "YulLiteral",
																					"src": "2022:1:21",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2012:6:21",
																				"nodeType": "YulIdentifier",
																				"src": "2012:6:21"
																			},
																			"nativeSrc": "2012:12:21",
																			"nodeType": "YulFunctionCall",
																			"src": "2012:12:21"
																		},
																		"nativeSrc": "2012:12:21",
																		"nodeType": "YulExpressionStatement",
																		"src": "2012:12:21"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "1976:5:21",
																				"nodeType": "YulIdentifier",
																				"src": "1976:5:21"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "2001:5:21",
																						"nodeType": "YulIdentifier",
																						"src": "2001:5:21"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nativeSrc": "1983:17:21",
																					"nodeType": "YulIdentifier",
																					"src": "1983:17:21"
																				},
																				"nativeSrc": "1983:24:21",
																				"nodeType": "YulFunctionCall",
																				"src": "1983:24:21"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "1973:2:21",
																			"nodeType": "YulIdentifier",
																			"src": "1973:2:21"
																		},
																		"nativeSrc": "1973:35:21",
																		"nodeType": "YulFunctionCall",
																		"src": "1973:35:21"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "1966:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "1966:6:21"
																},
																"nativeSrc": "1966:43:21",
																"nodeType": "YulFunctionCall",
																"src": "1966:43:21"
															},
															"nativeSrc": "1963:63:21",
															"nodeType": "YulIf",
															"src": "1963:63:21"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nativeSrc": "1910:122:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "1946:5:21",
														"nodeType": "YulTypedName",
														"src": "1946:5:21",
														"type": ""
													}
												],
												"src": "1910:122:21"
											},
											{
												"body": {
													"nativeSrc": "2090:87:21",
													"nodeType": "YulBlock",
													"src": "2090:87:21",
													"statements": [
														{
															"nativeSrc": "2100:29:21",
															"nodeType": "YulAssignment",
															"src": "2100:29:21",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "2122:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "2122:6:21"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "2109:12:21",
																	"nodeType": "YulIdentifier",
																	"src": "2109:12:21"
																},
																"nativeSrc": "2109:20:21",
																"nodeType": "YulFunctionCall",
																"src": "2109:20:21"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "2100:5:21",
																	"nodeType": "YulIdentifier",
																	"src": "2100:5:21"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "2165:5:21",
																		"nodeType": "YulIdentifier",
																		"src": "2165:5:21"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nativeSrc": "2138:26:21",
																	"nodeType": "YulIdentifier",
																	"src": "2138:26:21"
																},
																"nativeSrc": "2138:33:21",
																"nodeType": "YulFunctionCall",
																"src": "2138:33:21"
															},
															"nativeSrc": "2138:33:21",
															"nodeType": "YulExpressionStatement",
															"src": "2138:33:21"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nativeSrc": "2038:139:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "2068:6:21",
														"nodeType": "YulTypedName",
														"src": "2068:6:21",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "2076:3:21",
														"nodeType": "YulTypedName",
														"src": "2076:3:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "2084:5:21",
														"nodeType": "YulTypedName",
														"src": "2084:5:21",
														"type": ""
													}
												],
												"src": "2038:139:21"
											},
											{
												"body": {
													"nativeSrc": "2228:32:21",
													"nodeType": "YulBlock",
													"src": "2228:32:21",
													"statements": [
														{
															"nativeSrc": "2238:16:21",
															"nodeType": "YulAssignment",
															"src": "2238:16:21",
															"value": {
																"name": "value",
																"nativeSrc": "2249:5:21",
																"nodeType": "YulIdentifier",
																"src": "2249:5:21"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "2238:7:21",
																	"nodeType": "YulIdentifier",
																	"src": "2238:7:21"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nativeSrc": "2183:77:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2210:5:21",
														"nodeType": "YulTypedName",
														"src": "2210:5:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "2220:7:21",
														"nodeType": "YulTypedName",
														"src": "2220:7:21",
														"type": ""
													}
												],
												"src": "2183:77:21"
											},
											{
												"body": {
													"nativeSrc": "2309:79:21",
													"nodeType": "YulBlock",
													"src": "2309:79:21",
													"statements": [
														{
															"body": {
																"nativeSrc": "2366:16:21",
																"nodeType": "YulBlock",
																"src": "2366:16:21",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2375:1:21",
																					"nodeType": "YulLiteral",
																					"src": "2375:1:21",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2378:1:21",
																					"nodeType": "YulLiteral",
																					"src": "2378:1:21",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2368:6:21",
																				"nodeType": "YulIdentifier",
																				"src": "2368:6:21"
																			},
																			"nativeSrc": "2368:12:21",
																			"nodeType": "YulFunctionCall",
																			"src": "2368:12:21"
																		},
																		"nativeSrc": "2368:12:21",
																		"nodeType": "YulExpressionStatement",
																		"src": "2368:12:21"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "2332:5:21",
																				"nodeType": "YulIdentifier",
																				"src": "2332:5:21"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "2357:5:21",
																						"nodeType": "YulIdentifier",
																						"src": "2357:5:21"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nativeSrc": "2339:17:21",
																					"nodeType": "YulIdentifier",
																					"src": "2339:17:21"
																				},
																				"nativeSrc": "2339:24:21",
																				"nodeType": "YulFunctionCall",
																				"src": "2339:24:21"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "2329:2:21",
																			"nodeType": "YulIdentifier",
																			"src": "2329:2:21"
																		},
																		"nativeSrc": "2329:35:21",
																		"nodeType": "YulFunctionCall",
																		"src": "2329:35:21"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "2322:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "2322:6:21"
																},
																"nativeSrc": "2322:43:21",
																"nodeType": "YulFunctionCall",
																"src": "2322:43:21"
															},
															"nativeSrc": "2319:63:21",
															"nodeType": "YulIf",
															"src": "2319:63:21"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nativeSrc": "2266:122:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2302:5:21",
														"nodeType": "YulTypedName",
														"src": "2302:5:21",
														"type": ""
													}
												],
												"src": "2266:122:21"
											},
											{
												"body": {
													"nativeSrc": "2446:87:21",
													"nodeType": "YulBlock",
													"src": "2446:87:21",
													"statements": [
														{
															"nativeSrc": "2456:29:21",
															"nodeType": "YulAssignment",
															"src": "2456:29:21",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "2478:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "2478:6:21"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "2465:12:21",
																	"nodeType": "YulIdentifier",
																	"src": "2465:12:21"
																},
																"nativeSrc": "2465:20:21",
																"nodeType": "YulFunctionCall",
																"src": "2465:20:21"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "2456:5:21",
																	"nodeType": "YulIdentifier",
																	"src": "2456:5:21"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "2521:5:21",
																		"nodeType": "YulIdentifier",
																		"src": "2521:5:21"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nativeSrc": "2494:26:21",
																	"nodeType": "YulIdentifier",
																	"src": "2494:26:21"
																},
																"nativeSrc": "2494:33:21",
																"nodeType": "YulFunctionCall",
																"src": "2494:33:21"
															},
															"nativeSrc": "2494:33:21",
															"nodeType": "YulExpressionStatement",
															"src": "2494:33:21"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nativeSrc": "2394:139:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "2424:6:21",
														"nodeType": "YulTypedName",
														"src": "2424:6:21",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "2432:3:21",
														"nodeType": "YulTypedName",
														"src": "2432:3:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "2440:5:21",
														"nodeType": "YulTypedName",
														"src": "2440:5:21",
														"type": ""
													}
												],
												"src": "2394:139:21"
											},
											{
												"body": {
													"nativeSrc": "2622:391:21",
													"nodeType": "YulBlock",
													"src": "2622:391:21",
													"statements": [
														{
															"body": {
																"nativeSrc": "2668:83:21",
																"nodeType": "YulBlock",
																"src": "2668:83:21",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "2670:77:21",
																				"nodeType": "YulIdentifier",
																				"src": "2670:77:21"
																			},
																			"nativeSrc": "2670:79:21",
																			"nodeType": "YulFunctionCall",
																			"src": "2670:79:21"
																		},
																		"nativeSrc": "2670:79:21",
																		"nodeType": "YulExpressionStatement",
																		"src": "2670:79:21"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2643:7:21",
																				"nodeType": "YulIdentifier",
																				"src": "2643:7:21"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "2652:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "2652:9:21"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "2639:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "2639:3:21"
																		},
																		"nativeSrc": "2639:23:21",
																		"nodeType": "YulFunctionCall",
																		"src": "2639:23:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2664:2:21",
																		"nodeType": "YulLiteral",
																		"src": "2664:2:21",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "2635:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "2635:3:21"
																},
																"nativeSrc": "2635:32:21",
																"nodeType": "YulFunctionCall",
																"src": "2635:32:21"
															},
															"nativeSrc": "2632:119:21",
															"nodeType": "YulIf",
															"src": "2632:119:21"
														},
														{
															"nativeSrc": "2761:117:21",
															"nodeType": "YulBlock",
															"src": "2761:117:21",
															"statements": [
																{
																	"nativeSrc": "2776:15:21",
																	"nodeType": "YulVariableDeclaration",
																	"src": "2776:15:21",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "2790:1:21",
																		"nodeType": "YulLiteral",
																		"src": "2790:1:21",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "2780:6:21",
																			"nodeType": "YulTypedName",
																			"src": "2780:6:21",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "2805:63:21",
																	"nodeType": "YulAssignment",
																	"src": "2805:63:21",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "2840:9:21",
																						"nodeType": "YulIdentifier",
																						"src": "2840:9:21"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "2851:6:21",
																						"nodeType": "YulIdentifier",
																						"src": "2851:6:21"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "2836:3:21",
																					"nodeType": "YulIdentifier",
																					"src": "2836:3:21"
																				},
																				"nativeSrc": "2836:22:21",
																				"nodeType": "YulFunctionCall",
																				"src": "2836:22:21"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2860:7:21",
																				"nodeType": "YulIdentifier",
																				"src": "2860:7:21"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "2815:20:21",
																			"nodeType": "YulIdentifier",
																			"src": "2815:20:21"
																		},
																		"nativeSrc": "2815:53:21",
																		"nodeType": "YulFunctionCall",
																		"src": "2815:53:21"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "2805:6:21",
																			"nodeType": "YulIdentifier",
																			"src": "2805:6:21"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "2888:118:21",
															"nodeType": "YulBlock",
															"src": "2888:118:21",
															"statements": [
																{
																	"nativeSrc": "2903:16:21",
																	"nodeType": "YulVariableDeclaration",
																	"src": "2903:16:21",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "2917:2:21",
																		"nodeType": "YulLiteral",
																		"src": "2917:2:21",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "2907:6:21",
																			"nodeType": "YulTypedName",
																			"src": "2907:6:21",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "2933:63:21",
																	"nodeType": "YulAssignment",
																	"src": "2933:63:21",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "2968:9:21",
																						"nodeType": "YulIdentifier",
																						"src": "2968:9:21"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "2979:6:21",
																						"nodeType": "YulIdentifier",
																						"src": "2979:6:21"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "2964:3:21",
																					"nodeType": "YulIdentifier",
																					"src": "2964:3:21"
																				},
																				"nativeSrc": "2964:22:21",
																				"nodeType": "YulFunctionCall",
																				"src": "2964:22:21"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2988:7:21",
																				"nodeType": "YulIdentifier",
																				"src": "2988:7:21"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "2943:20:21",
																			"nodeType": "YulIdentifier",
																			"src": "2943:20:21"
																		},
																		"nativeSrc": "2943:53:21",
																		"nodeType": "YulFunctionCall",
																		"src": "2943:53:21"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "2933:6:21",
																			"nodeType": "YulIdentifier",
																			"src": "2933:6:21"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nativeSrc": "2539:474:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2584:9:21",
														"nodeType": "YulTypedName",
														"src": "2584:9:21",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "2595:7:21",
														"nodeType": "YulTypedName",
														"src": "2595:7:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "2607:6:21",
														"nodeType": "YulTypedName",
														"src": "2607:6:21",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "2615:6:21",
														"nodeType": "YulTypedName",
														"src": "2615:6:21",
														"type": ""
													}
												],
												"src": "2539:474:21"
											},
											{
												"body": {
													"nativeSrc": "3061:48:21",
													"nodeType": "YulBlock",
													"src": "3061:48:21",
													"statements": [
														{
															"nativeSrc": "3071:32:21",
															"nodeType": "YulAssignment",
															"src": "3071:32:21",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "3096:5:21",
																				"nodeType": "YulIdentifier",
																				"src": "3096:5:21"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nativeSrc": "3089:6:21",
																			"nodeType": "YulIdentifier",
																			"src": "3089:6:21"
																		},
																		"nativeSrc": "3089:13:21",
																		"nodeType": "YulFunctionCall",
																		"src": "3089:13:21"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "3082:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "3082:6:21"
																},
																"nativeSrc": "3082:21:21",
																"nodeType": "YulFunctionCall",
																"src": "3082:21:21"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "3071:7:21",
																	"nodeType": "YulIdentifier",
																	"src": "3071:7:21"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nativeSrc": "3019:90:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "3043:5:21",
														"nodeType": "YulTypedName",
														"src": "3043:5:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "3053:7:21",
														"nodeType": "YulTypedName",
														"src": "3053:7:21",
														"type": ""
													}
												],
												"src": "3019:90:21"
											},
											{
												"body": {
													"nativeSrc": "3174:50:21",
													"nodeType": "YulBlock",
													"src": "3174:50:21",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "3191:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "3191:3:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "3211:5:21",
																				"nodeType": "YulIdentifier",
																				"src": "3211:5:21"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nativeSrc": "3196:14:21",
																			"nodeType": "YulIdentifier",
																			"src": "3196:14:21"
																		},
																		"nativeSrc": "3196:21:21",
																		"nodeType": "YulFunctionCall",
																		"src": "3196:21:21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3184:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "3184:6:21"
																},
																"nativeSrc": "3184:34:21",
																"nodeType": "YulFunctionCall",
																"src": "3184:34:21"
															},
															"nativeSrc": "3184:34:21",
															"nodeType": "YulExpressionStatement",
															"src": "3184:34:21"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nativeSrc": "3115:109:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "3162:5:21",
														"nodeType": "YulTypedName",
														"src": "3162:5:21",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "3169:3:21",
														"nodeType": "YulTypedName",
														"src": "3169:3:21",
														"type": ""
													}
												],
												"src": "3115:109:21"
											},
											{
												"body": {
													"nativeSrc": "3322:118:21",
													"nodeType": "YulBlock",
													"src": "3322:118:21",
													"statements": [
														{
															"nativeSrc": "3332:26:21",
															"nodeType": "YulAssignment",
															"src": "3332:26:21",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3344:9:21",
																		"nodeType": "YulIdentifier",
																		"src": "3344:9:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3355:2:21",
																		"nodeType": "YulLiteral",
																		"src": "3355:2:21",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3340:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "3340:3:21"
																},
																"nativeSrc": "3340:18:21",
																"nodeType": "YulFunctionCall",
																"src": "3340:18:21"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "3332:4:21",
																	"nodeType": "YulIdentifier",
																	"src": "3332:4:21"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "3406:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "3406:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3419:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "3419:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3430:1:21",
																				"nodeType": "YulLiteral",
																				"src": "3430:1:21",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3415:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "3415:3:21"
																		},
																		"nativeSrc": "3415:17:21",
																		"nodeType": "YulFunctionCall",
																		"src": "3415:17:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nativeSrc": "3368:37:21",
																	"nodeType": "YulIdentifier",
																	"src": "3368:37:21"
																},
																"nativeSrc": "3368:65:21",
																"nodeType": "YulFunctionCall",
																"src": "3368:65:21"
															},
															"nativeSrc": "3368:65:21",
															"nodeType": "YulExpressionStatement",
															"src": "3368:65:21"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nativeSrc": "3230:210:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3294:9:21",
														"nodeType": "YulTypedName",
														"src": "3294:9:21",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "3306:6:21",
														"nodeType": "YulTypedName",
														"src": "3306:6:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "3317:4:21",
														"nodeType": "YulTypedName",
														"src": "3317:4:21",
														"type": ""
													}
												],
												"src": "3230:210:21"
											},
											{
												"body": {
													"nativeSrc": "3511:53:21",
													"nodeType": "YulBlock",
													"src": "3511:53:21",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "3528:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "3528:3:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "3551:5:21",
																				"nodeType": "YulIdentifier",
																				"src": "3551:5:21"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nativeSrc": "3533:17:21",
																			"nodeType": "YulIdentifier",
																			"src": "3533:17:21"
																		},
																		"nativeSrc": "3533:24:21",
																		"nodeType": "YulFunctionCall",
																		"src": "3533:24:21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3521:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "3521:6:21"
																},
																"nativeSrc": "3521:37:21",
																"nodeType": "YulFunctionCall",
																"src": "3521:37:21"
															},
															"nativeSrc": "3521:37:21",
															"nodeType": "YulExpressionStatement",
															"src": "3521:37:21"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "3446:118:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "3499:5:21",
														"nodeType": "YulTypedName",
														"src": "3499:5:21",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "3506:3:21",
														"nodeType": "YulTypedName",
														"src": "3506:3:21",
														"type": ""
													}
												],
												"src": "3446:118:21"
											},
											{
												"body": {
													"nativeSrc": "3668:124:21",
													"nodeType": "YulBlock",
													"src": "3668:124:21",
													"statements": [
														{
															"nativeSrc": "3678:26:21",
															"nodeType": "YulAssignment",
															"src": "3678:26:21",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3690:9:21",
																		"nodeType": "YulIdentifier",
																		"src": "3690:9:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3701:2:21",
																		"nodeType": "YulLiteral",
																		"src": "3701:2:21",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3686:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "3686:3:21"
																},
																"nativeSrc": "3686:18:21",
																"nodeType": "YulFunctionCall",
																"src": "3686:18:21"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "3678:4:21",
																	"nodeType": "YulIdentifier",
																	"src": "3678:4:21"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "3758:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "3758:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3771:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "3771:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3782:1:21",
																				"nodeType": "YulLiteral",
																				"src": "3782:1:21",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3767:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "3767:3:21"
																		},
																		"nativeSrc": "3767:17:21",
																		"nodeType": "YulFunctionCall",
																		"src": "3767:17:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "3714:43:21",
																	"nodeType": "YulIdentifier",
																	"src": "3714:43:21"
																},
																"nativeSrc": "3714:71:21",
																"nodeType": "YulFunctionCall",
																"src": "3714:71:21"
															},
															"nativeSrc": "3714:71:21",
															"nodeType": "YulExpressionStatement",
															"src": "3714:71:21"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nativeSrc": "3570:222:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3640:9:21",
														"nodeType": "YulTypedName",
														"src": "3640:9:21",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "3652:6:21",
														"nodeType": "YulTypedName",
														"src": "3652:6:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "3663:4:21",
														"nodeType": "YulTypedName",
														"src": "3663:4:21",
														"type": ""
													}
												],
												"src": "3570:222:21"
											},
											{
												"body": {
													"nativeSrc": "3898:519:21",
													"nodeType": "YulBlock",
													"src": "3898:519:21",
													"statements": [
														{
															"body": {
																"nativeSrc": "3944:83:21",
																"nodeType": "YulBlock",
																"src": "3944:83:21",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "3946:77:21",
																				"nodeType": "YulIdentifier",
																				"src": "3946:77:21"
																			},
																			"nativeSrc": "3946:79:21",
																			"nodeType": "YulFunctionCall",
																			"src": "3946:79:21"
																		},
																		"nativeSrc": "3946:79:21",
																		"nodeType": "YulExpressionStatement",
																		"src": "3946:79:21"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "3919:7:21",
																				"nodeType": "YulIdentifier",
																				"src": "3919:7:21"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "3928:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "3928:9:21"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "3915:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "3915:3:21"
																		},
																		"nativeSrc": "3915:23:21",
																		"nodeType": "YulFunctionCall",
																		"src": "3915:23:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3940:2:21",
																		"nodeType": "YulLiteral",
																		"src": "3940:2:21",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "3911:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "3911:3:21"
																},
																"nativeSrc": "3911:32:21",
																"nodeType": "YulFunctionCall",
																"src": "3911:32:21"
															},
															"nativeSrc": "3908:119:21",
															"nodeType": "YulIf",
															"src": "3908:119:21"
														},
														{
															"nativeSrc": "4037:117:21",
															"nodeType": "YulBlock",
															"src": "4037:117:21",
															"statements": [
																{
																	"nativeSrc": "4052:15:21",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4052:15:21",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "4066:1:21",
																		"nodeType": "YulLiteral",
																		"src": "4066:1:21",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "4056:6:21",
																			"nodeType": "YulTypedName",
																			"src": "4056:6:21",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4081:63:21",
																	"nodeType": "YulAssignment",
																	"src": "4081:63:21",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "4116:9:21",
																						"nodeType": "YulIdentifier",
																						"src": "4116:9:21"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "4127:6:21",
																						"nodeType": "YulIdentifier",
																						"src": "4127:6:21"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "4112:3:21",
																					"nodeType": "YulIdentifier",
																					"src": "4112:3:21"
																				},
																				"nativeSrc": "4112:22:21",
																				"nodeType": "YulFunctionCall",
																				"src": "4112:22:21"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4136:7:21",
																				"nodeType": "YulIdentifier",
																				"src": "4136:7:21"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "4091:20:21",
																			"nodeType": "YulIdentifier",
																			"src": "4091:20:21"
																		},
																		"nativeSrc": "4091:53:21",
																		"nodeType": "YulFunctionCall",
																		"src": "4091:53:21"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "4081:6:21",
																			"nodeType": "YulIdentifier",
																			"src": "4081:6:21"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "4164:118:21",
															"nodeType": "YulBlock",
															"src": "4164:118:21",
															"statements": [
																{
																	"nativeSrc": "4179:16:21",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4179:16:21",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "4193:2:21",
																		"nodeType": "YulLiteral",
																		"src": "4193:2:21",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "4183:6:21",
																			"nodeType": "YulTypedName",
																			"src": "4183:6:21",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4209:63:21",
																	"nodeType": "YulAssignment",
																	"src": "4209:63:21",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "4244:9:21",
																						"nodeType": "YulIdentifier",
																						"src": "4244:9:21"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "4255:6:21",
																						"nodeType": "YulIdentifier",
																						"src": "4255:6:21"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "4240:3:21",
																					"nodeType": "YulIdentifier",
																					"src": "4240:3:21"
																				},
																				"nativeSrc": "4240:22:21",
																				"nodeType": "YulFunctionCall",
																				"src": "4240:22:21"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4264:7:21",
																				"nodeType": "YulIdentifier",
																				"src": "4264:7:21"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "4219:20:21",
																			"nodeType": "YulIdentifier",
																			"src": "4219:20:21"
																		},
																		"nativeSrc": "4219:53:21",
																		"nodeType": "YulFunctionCall",
																		"src": "4219:53:21"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "4209:6:21",
																			"nodeType": "YulIdentifier",
																			"src": "4209:6:21"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "4292:118:21",
															"nodeType": "YulBlock",
															"src": "4292:118:21",
															"statements": [
																{
																	"nativeSrc": "4307:16:21",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4307:16:21",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "4321:2:21",
																		"nodeType": "YulLiteral",
																		"src": "4321:2:21",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "4311:6:21",
																			"nodeType": "YulTypedName",
																			"src": "4311:6:21",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4337:63:21",
																	"nodeType": "YulAssignment",
																	"src": "4337:63:21",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "4372:9:21",
																						"nodeType": "YulIdentifier",
																						"src": "4372:9:21"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "4383:6:21",
																						"nodeType": "YulIdentifier",
																						"src": "4383:6:21"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "4368:3:21",
																					"nodeType": "YulIdentifier",
																					"src": "4368:3:21"
																				},
																				"nativeSrc": "4368:22:21",
																				"nodeType": "YulFunctionCall",
																				"src": "4368:22:21"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4392:7:21",
																				"nodeType": "YulIdentifier",
																				"src": "4392:7:21"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "4347:20:21",
																			"nodeType": "YulIdentifier",
																			"src": "4347:20:21"
																		},
																		"nativeSrc": "4347:53:21",
																		"nodeType": "YulFunctionCall",
																		"src": "4347:53:21"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nativeSrc": "4337:6:21",
																			"nodeType": "YulIdentifier",
																			"src": "4337:6:21"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nativeSrc": "3798:619:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3852:9:21",
														"nodeType": "YulTypedName",
														"src": "3852:9:21",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "3863:7:21",
														"nodeType": "YulTypedName",
														"src": "3863:7:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "3875:6:21",
														"nodeType": "YulTypedName",
														"src": "3875:6:21",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "3883:6:21",
														"nodeType": "YulTypedName",
														"src": "3883:6:21",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "3891:6:21",
														"nodeType": "YulTypedName",
														"src": "3891:6:21",
														"type": ""
													}
												],
												"src": "3798:619:21"
											},
											{
												"body": {
													"nativeSrc": "4466:43:21",
													"nodeType": "YulBlock",
													"src": "4466:43:21",
													"statements": [
														{
															"nativeSrc": "4476:27:21",
															"nodeType": "YulAssignment",
															"src": "4476:27:21",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "4491:5:21",
																		"nodeType": "YulIdentifier",
																		"src": "4491:5:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4498:4:21",
																		"nodeType": "YulLiteral",
																		"src": "4498:4:21",
																		"type": "",
																		"value": "0xff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "4487:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "4487:3:21"
																},
																"nativeSrc": "4487:16:21",
																"nodeType": "YulFunctionCall",
																"src": "4487:16:21"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "4476:7:21",
																	"nodeType": "YulIdentifier",
																	"src": "4476:7:21"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint8",
												"nativeSrc": "4423:86:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "4448:5:21",
														"nodeType": "YulTypedName",
														"src": "4448:5:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "4458:7:21",
														"nodeType": "YulTypedName",
														"src": "4458:7:21",
														"type": ""
													}
												],
												"src": "4423:86:21"
											},
											{
												"body": {
													"nativeSrc": "4576:51:21",
													"nodeType": "YulBlock",
													"src": "4576:51:21",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "4593:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "4593:3:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "4614:5:21",
																				"nodeType": "YulIdentifier",
																				"src": "4614:5:21"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint8",
																			"nativeSrc": "4598:15:21",
																			"nodeType": "YulIdentifier",
																			"src": "4598:15:21"
																		},
																		"nativeSrc": "4598:22:21",
																		"nodeType": "YulFunctionCall",
																		"src": "4598:22:21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4586:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "4586:6:21"
																},
																"nativeSrc": "4586:35:21",
																"nodeType": "YulFunctionCall",
																"src": "4586:35:21"
															},
															"nativeSrc": "4586:35:21",
															"nodeType": "YulExpressionStatement",
															"src": "4586:35:21"
														}
													]
												},
												"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
												"nativeSrc": "4515:112:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "4564:5:21",
														"nodeType": "YulTypedName",
														"src": "4564:5:21",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "4571:3:21",
														"nodeType": "YulTypedName",
														"src": "4571:3:21",
														"type": ""
													}
												],
												"src": "4515:112:21"
											},
											{
												"body": {
													"nativeSrc": "4727:120:21",
													"nodeType": "YulBlock",
													"src": "4727:120:21",
													"statements": [
														{
															"nativeSrc": "4737:26:21",
															"nodeType": "YulAssignment",
															"src": "4737:26:21",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "4749:9:21",
																		"nodeType": "YulIdentifier",
																		"src": "4749:9:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4760:2:21",
																		"nodeType": "YulLiteral",
																		"src": "4760:2:21",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "4745:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "4745:3:21"
																},
																"nativeSrc": "4745:18:21",
																"nodeType": "YulFunctionCall",
																"src": "4745:18:21"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "4737:4:21",
																	"nodeType": "YulIdentifier",
																	"src": "4737:4:21"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "4813:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "4813:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4826:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "4826:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4837:1:21",
																				"nodeType": "YulLiteral",
																				"src": "4837:1:21",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4822:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "4822:3:21"
																		},
																		"nativeSrc": "4822:17:21",
																		"nodeType": "YulFunctionCall",
																		"src": "4822:17:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
																	"nativeSrc": "4773:39:21",
																	"nodeType": "YulIdentifier",
																	"src": "4773:39:21"
																},
																"nativeSrc": "4773:67:21",
																"nodeType": "YulFunctionCall",
																"src": "4773:67:21"
															},
															"nativeSrc": "4773:67:21",
															"nodeType": "YulExpressionStatement",
															"src": "4773:67:21"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nativeSrc": "4633:214:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "4699:9:21",
														"nodeType": "YulTypedName",
														"src": "4699:9:21",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "4711:6:21",
														"nodeType": "YulTypedName",
														"src": "4711:6:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "4722:4:21",
														"nodeType": "YulTypedName",
														"src": "4722:4:21",
														"type": ""
													}
												],
												"src": "4633:214:21"
											},
											{
												"body": {
													"nativeSrc": "4898:32:21",
													"nodeType": "YulBlock",
													"src": "4898:32:21",
													"statements": [
														{
															"nativeSrc": "4908:16:21",
															"nodeType": "YulAssignment",
															"src": "4908:16:21",
															"value": {
																"name": "value",
																"nativeSrc": "4919:5:21",
																"nodeType": "YulIdentifier",
																"src": "4919:5:21"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "4908:7:21",
																	"nodeType": "YulIdentifier",
																	"src": "4908:7:21"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bytes32",
												"nativeSrc": "4853:77:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "4880:5:21",
														"nodeType": "YulTypedName",
														"src": "4880:5:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "4890:7:21",
														"nodeType": "YulTypedName",
														"src": "4890:7:21",
														"type": ""
													}
												],
												"src": "4853:77:21"
											},
											{
												"body": {
													"nativeSrc": "5001:53:21",
													"nodeType": "YulBlock",
													"src": "5001:53:21",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "5018:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "5018:3:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "5041:5:21",
																				"nodeType": "YulIdentifier",
																				"src": "5041:5:21"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bytes32",
																			"nativeSrc": "5023:17:21",
																			"nodeType": "YulIdentifier",
																			"src": "5023:17:21"
																		},
																		"nativeSrc": "5023:24:21",
																		"nodeType": "YulFunctionCall",
																		"src": "5023:24:21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5011:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "5011:6:21"
																},
																"nativeSrc": "5011:37:21",
																"nodeType": "YulFunctionCall",
																"src": "5011:37:21"
															},
															"nativeSrc": "5011:37:21",
															"nodeType": "YulExpressionStatement",
															"src": "5011:37:21"
														}
													]
												},
												"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
												"nativeSrc": "4936:118:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "4989:5:21",
														"nodeType": "YulTypedName",
														"src": "4989:5:21",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "4996:3:21",
														"nodeType": "YulTypedName",
														"src": "4996:3:21",
														"type": ""
													}
												],
												"src": "4936:118:21"
											},
											{
												"body": {
													"nativeSrc": "5158:124:21",
													"nodeType": "YulBlock",
													"src": "5158:124:21",
													"statements": [
														{
															"nativeSrc": "5168:26:21",
															"nodeType": "YulAssignment",
															"src": "5168:26:21",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5180:9:21",
																		"nodeType": "YulIdentifier",
																		"src": "5180:9:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5191:2:21",
																		"nodeType": "YulLiteral",
																		"src": "5191:2:21",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "5176:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "5176:3:21"
																},
																"nativeSrc": "5176:18:21",
																"nodeType": "YulFunctionCall",
																"src": "5176:18:21"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "5168:4:21",
																	"nodeType": "YulIdentifier",
																	"src": "5168:4:21"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "5248:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "5248:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5261:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "5261:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5272:1:21",
																				"nodeType": "YulLiteral",
																				"src": "5272:1:21",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5257:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "5257:3:21"
																		},
																		"nativeSrc": "5257:17:21",
																		"nodeType": "YulFunctionCall",
																		"src": "5257:17:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nativeSrc": "5204:43:21",
																	"nodeType": "YulIdentifier",
																	"src": "5204:43:21"
																},
																"nativeSrc": "5204:71:21",
																"nodeType": "YulFunctionCall",
																"src": "5204:71:21"
															},
															"nativeSrc": "5204:71:21",
															"nodeType": "YulExpressionStatement",
															"src": "5204:71:21"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
												"nativeSrc": "5060:222:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5130:9:21",
														"nodeType": "YulTypedName",
														"src": "5130:9:21",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "5142:6:21",
														"nodeType": "YulTypedName",
														"src": "5142:6:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "5153:4:21",
														"nodeType": "YulTypedName",
														"src": "5153:4:21",
														"type": ""
													}
												],
												"src": "5060:222:21"
											},
											{
												"body": {
													"nativeSrc": "5354:263:21",
													"nodeType": "YulBlock",
													"src": "5354:263:21",
													"statements": [
														{
															"body": {
																"nativeSrc": "5400:83:21",
																"nodeType": "YulBlock",
																"src": "5400:83:21",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "5402:77:21",
																				"nodeType": "YulIdentifier",
																				"src": "5402:77:21"
																			},
																			"nativeSrc": "5402:79:21",
																			"nodeType": "YulFunctionCall",
																			"src": "5402:79:21"
																		},
																		"nativeSrc": "5402:79:21",
																		"nodeType": "YulExpressionStatement",
																		"src": "5402:79:21"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5375:7:21",
																				"nodeType": "YulIdentifier",
																				"src": "5375:7:21"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "5384:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "5384:9:21"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5371:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "5371:3:21"
																		},
																		"nativeSrc": "5371:23:21",
																		"nodeType": "YulFunctionCall",
																		"src": "5371:23:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5396:2:21",
																		"nodeType": "YulLiteral",
																		"src": "5396:2:21",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "5367:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "5367:3:21"
																},
																"nativeSrc": "5367:32:21",
																"nodeType": "YulFunctionCall",
																"src": "5367:32:21"
															},
															"nativeSrc": "5364:119:21",
															"nodeType": "YulIf",
															"src": "5364:119:21"
														},
														{
															"nativeSrc": "5493:117:21",
															"nodeType": "YulBlock",
															"src": "5493:117:21",
															"statements": [
																{
																	"nativeSrc": "5508:15:21",
																	"nodeType": "YulVariableDeclaration",
																	"src": "5508:15:21",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "5522:1:21",
																		"nodeType": "YulLiteral",
																		"src": "5522:1:21",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "5512:6:21",
																			"nodeType": "YulTypedName",
																			"src": "5512:6:21",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "5537:63:21",
																	"nodeType": "YulAssignment",
																	"src": "5537:63:21",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "5572:9:21",
																						"nodeType": "YulIdentifier",
																						"src": "5572:9:21"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "5583:6:21",
																						"nodeType": "YulIdentifier",
																						"src": "5583:6:21"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "5568:3:21",
																					"nodeType": "YulIdentifier",
																					"src": "5568:3:21"
																				},
																				"nativeSrc": "5568:22:21",
																				"nodeType": "YulFunctionCall",
																				"src": "5568:22:21"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5592:7:21",
																				"nodeType": "YulIdentifier",
																				"src": "5592:7:21"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "5547:20:21",
																			"nodeType": "YulIdentifier",
																			"src": "5547:20:21"
																		},
																		"nativeSrc": "5547:53:21",
																		"nodeType": "YulFunctionCall",
																		"src": "5547:53:21"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "5537:6:21",
																			"nodeType": "YulIdentifier",
																			"src": "5537:6:21"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nativeSrc": "5288:329:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5324:9:21",
														"nodeType": "YulTypedName",
														"src": "5324:9:21",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "5335:7:21",
														"nodeType": "YulTypedName",
														"src": "5335:7:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "5347:6:21",
														"nodeType": "YulTypedName",
														"src": "5347:6:21",
														"type": ""
													}
												],
												"src": "5288:329:21"
											},
											{
												"body": {
													"nativeSrc": "5689:263:21",
													"nodeType": "YulBlock",
													"src": "5689:263:21",
													"statements": [
														{
															"body": {
																"nativeSrc": "5735:83:21",
																"nodeType": "YulBlock",
																"src": "5735:83:21",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "5737:77:21",
																				"nodeType": "YulIdentifier",
																				"src": "5737:77:21"
																			},
																			"nativeSrc": "5737:79:21",
																			"nodeType": "YulFunctionCall",
																			"src": "5737:79:21"
																		},
																		"nativeSrc": "5737:79:21",
																		"nodeType": "YulExpressionStatement",
																		"src": "5737:79:21"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5710:7:21",
																				"nodeType": "YulIdentifier",
																				"src": "5710:7:21"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "5719:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "5719:9:21"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5706:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "5706:3:21"
																		},
																		"nativeSrc": "5706:23:21",
																		"nodeType": "YulFunctionCall",
																		"src": "5706:23:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5731:2:21",
																		"nodeType": "YulLiteral",
																		"src": "5731:2:21",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "5702:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "5702:3:21"
																},
																"nativeSrc": "5702:32:21",
																"nodeType": "YulFunctionCall",
																"src": "5702:32:21"
															},
															"nativeSrc": "5699:119:21",
															"nodeType": "YulIf",
															"src": "5699:119:21"
														},
														{
															"nativeSrc": "5828:117:21",
															"nodeType": "YulBlock",
															"src": "5828:117:21",
															"statements": [
																{
																	"nativeSrc": "5843:15:21",
																	"nodeType": "YulVariableDeclaration",
																	"src": "5843:15:21",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "5857:1:21",
																		"nodeType": "YulLiteral",
																		"src": "5857:1:21",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "5847:6:21",
																			"nodeType": "YulTypedName",
																			"src": "5847:6:21",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "5872:63:21",
																	"nodeType": "YulAssignment",
																	"src": "5872:63:21",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "5907:9:21",
																						"nodeType": "YulIdentifier",
																						"src": "5907:9:21"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "5918:6:21",
																						"nodeType": "YulIdentifier",
																						"src": "5918:6:21"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "5903:3:21",
																					"nodeType": "YulIdentifier",
																					"src": "5903:3:21"
																				},
																				"nativeSrc": "5903:22:21",
																				"nodeType": "YulFunctionCall",
																				"src": "5903:22:21"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5927:7:21",
																				"nodeType": "YulIdentifier",
																				"src": "5927:7:21"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "5882:20:21",
																			"nodeType": "YulIdentifier",
																			"src": "5882:20:21"
																		},
																		"nativeSrc": "5882:53:21",
																		"nodeType": "YulFunctionCall",
																		"src": "5882:53:21"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "5872:6:21",
																			"nodeType": "YulIdentifier",
																			"src": "5872:6:21"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nativeSrc": "5623:329:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5659:9:21",
														"nodeType": "YulTypedName",
														"src": "5659:9:21",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "5670:7:21",
														"nodeType": "YulTypedName",
														"src": "5670:7:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "5682:6:21",
														"nodeType": "YulTypedName",
														"src": "5682:6:21",
														"type": ""
													}
												],
												"src": "5623:329:21"
											},
											{
												"body": {
													"nativeSrc": "6002:105:21",
													"nodeType": "YulBlock",
													"src": "6002:105:21",
													"statements": [
														{
															"nativeSrc": "6012:89:21",
															"nodeType": "YulAssignment",
															"src": "6012:89:21",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "6027:5:21",
																		"nodeType": "YulIdentifier",
																		"src": "6027:5:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6034:66:21",
																		"nodeType": "YulLiteral",
																		"src": "6034:66:21",
																		"type": "",
																		"value": "0xff00000000000000000000000000000000000000000000000000000000000000"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "6023:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "6023:3:21"
																},
																"nativeSrc": "6023:78:21",
																"nodeType": "YulFunctionCall",
																"src": "6023:78:21"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "6012:7:21",
																	"nodeType": "YulIdentifier",
																	"src": "6012:7:21"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bytes1",
												"nativeSrc": "5958:149:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "5984:5:21",
														"nodeType": "YulTypedName",
														"src": "5984:5:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "5994:7:21",
														"nodeType": "YulTypedName",
														"src": "5994:7:21",
														"type": ""
													}
												],
												"src": "5958:149:21"
											},
											{
												"body": {
													"nativeSrc": "6176:52:21",
													"nodeType": "YulBlock",
													"src": "6176:52:21",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "6193:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "6193:3:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "6215:5:21",
																				"nodeType": "YulIdentifier",
																				"src": "6215:5:21"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bytes1",
																			"nativeSrc": "6198:16:21",
																			"nodeType": "YulIdentifier",
																			"src": "6198:16:21"
																		},
																		"nativeSrc": "6198:23:21",
																		"nodeType": "YulFunctionCall",
																		"src": "6198:23:21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6186:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "6186:6:21"
																},
																"nativeSrc": "6186:36:21",
																"nodeType": "YulFunctionCall",
																"src": "6186:36:21"
															},
															"nativeSrc": "6186:36:21",
															"nodeType": "YulExpressionStatement",
															"src": "6186:36:21"
														}
													]
												},
												"name": "abi_encode_t_bytes1_to_t_bytes1_fromStack",
												"nativeSrc": "6113:115:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "6164:5:21",
														"nodeType": "YulTypedName",
														"src": "6164:5:21",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "6171:3:21",
														"nodeType": "YulTypedName",
														"src": "6171:3:21",
														"type": ""
													}
												],
												"src": "6113:115:21"
											},
											{
												"body": {
													"nativeSrc": "6299:53:21",
													"nodeType": "YulBlock",
													"src": "6299:53:21",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "6316:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "6316:3:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "6339:5:21",
																				"nodeType": "YulIdentifier",
																				"src": "6339:5:21"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nativeSrc": "6321:17:21",
																			"nodeType": "YulIdentifier",
																			"src": "6321:17:21"
																		},
																		"nativeSrc": "6321:24:21",
																		"nodeType": "YulFunctionCall",
																		"src": "6321:24:21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6309:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "6309:6:21"
																},
																"nativeSrc": "6309:37:21",
																"nodeType": "YulFunctionCall",
																"src": "6309:37:21"
															},
															"nativeSrc": "6309:37:21",
															"nodeType": "YulExpressionStatement",
															"src": "6309:37:21"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "6234:118:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "6287:5:21",
														"nodeType": "YulTypedName",
														"src": "6287:5:21",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "6294:3:21",
														"nodeType": "YulTypedName",
														"src": "6294:3:21",
														"type": ""
													}
												],
												"src": "6234:118:21"
											},
											{
												"body": {
													"nativeSrc": "6432:40:21",
													"nodeType": "YulBlock",
													"src": "6432:40:21",
													"statements": [
														{
															"nativeSrc": "6443:22:21",
															"nodeType": "YulAssignment",
															"src": "6443:22:21",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "6459:5:21",
																		"nodeType": "YulIdentifier",
																		"src": "6459:5:21"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "6453:5:21",
																	"nodeType": "YulIdentifier",
																	"src": "6453:5:21"
																},
																"nativeSrc": "6453:12:21",
																"nodeType": "YulFunctionCall",
																"src": "6453:12:21"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "6443:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "6443:6:21"
																}
															]
														}
													]
												},
												"name": "array_length_t_array$_t_uint256_$dyn_memory_ptr",
												"nativeSrc": "6358:114:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "6415:5:21",
														"nodeType": "YulTypedName",
														"src": "6415:5:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "6425:6:21",
														"nodeType": "YulTypedName",
														"src": "6425:6:21",
														"type": ""
													}
												],
												"src": "6358:114:21"
											},
											{
												"body": {
													"nativeSrc": "6589:73:21",
													"nodeType": "YulBlock",
													"src": "6589:73:21",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "6606:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "6606:3:21"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "6611:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "6611:6:21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6599:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "6599:6:21"
																},
																"nativeSrc": "6599:19:21",
																"nodeType": "YulFunctionCall",
																"src": "6599:19:21"
															},
															"nativeSrc": "6599:19:21",
															"nodeType": "YulExpressionStatement",
															"src": "6599:19:21"
														},
														{
															"nativeSrc": "6627:29:21",
															"nodeType": "YulAssignment",
															"src": "6627:29:21",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "6646:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "6646:3:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6651:4:21",
																		"nodeType": "YulLiteral",
																		"src": "6651:4:21",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "6642:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "6642:3:21"
																},
																"nativeSrc": "6642:14:21",
																"nodeType": "YulFunctionCall",
																"src": "6642:14:21"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nativeSrc": "6627:11:21",
																	"nodeType": "YulIdentifier",
																	"src": "6627:11:21"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
												"nativeSrc": "6478:184:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "6561:3:21",
														"nodeType": "YulTypedName",
														"src": "6561:3:21",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "6566:6:21",
														"nodeType": "YulTypedName",
														"src": "6566:6:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nativeSrc": "6577:11:21",
														"nodeType": "YulTypedName",
														"src": "6577:11:21",
														"type": ""
													}
												],
												"src": "6478:184:21"
											},
											{
												"body": {
													"nativeSrc": "6740:60:21",
													"nodeType": "YulBlock",
													"src": "6740:60:21",
													"statements": [
														{
															"nativeSrc": "6750:11:21",
															"nodeType": "YulAssignment",
															"src": "6750:11:21",
															"value": {
																"name": "ptr",
																"nativeSrc": "6758:3:21",
																"nodeType": "YulIdentifier",
																"src": "6758:3:21"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "6750:4:21",
																	"nodeType": "YulIdentifier",
																	"src": "6750:4:21"
																}
															]
														},
														{
															"nativeSrc": "6771:22:21",
															"nodeType": "YulAssignment",
															"src": "6771:22:21",
															"value": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nativeSrc": "6783:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "6783:3:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6788:4:21",
																		"nodeType": "YulLiteral",
																		"src": "6788:4:21",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "6779:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "6779:3:21"
																},
																"nativeSrc": "6779:14:21",
																"nodeType": "YulFunctionCall",
																"src": "6779:14:21"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "6771:4:21",
																	"nodeType": "YulIdentifier",
																	"src": "6771:4:21"
																}
															]
														}
													]
												},
												"name": "array_dataslot_t_array$_t_uint256_$dyn_memory_ptr",
												"nativeSrc": "6668:132:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nativeSrc": "6727:3:21",
														"nodeType": "YulTypedName",
														"src": "6727:3:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nativeSrc": "6735:4:21",
														"nodeType": "YulTypedName",
														"src": "6735:4:21",
														"type": ""
													}
												],
												"src": "6668:132:21"
											},
											{
												"body": {
													"nativeSrc": "6861:53:21",
													"nodeType": "YulBlock",
													"src": "6861:53:21",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "6878:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "6878:3:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "6901:5:21",
																				"nodeType": "YulIdentifier",
																				"src": "6901:5:21"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nativeSrc": "6883:17:21",
																			"nodeType": "YulIdentifier",
																			"src": "6883:17:21"
																		},
																		"nativeSrc": "6883:24:21",
																		"nodeType": "YulFunctionCall",
																		"src": "6883:24:21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6871:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "6871:6:21"
																},
																"nativeSrc": "6871:37:21",
																"nodeType": "YulFunctionCall",
																"src": "6871:37:21"
															},
															"nativeSrc": "6871:37:21",
															"nodeType": "YulExpressionStatement",
															"src": "6871:37:21"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256",
												"nativeSrc": "6806:108:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "6849:5:21",
														"nodeType": "YulTypedName",
														"src": "6849:5:21",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "6856:3:21",
														"nodeType": "YulTypedName",
														"src": "6856:3:21",
														"type": ""
													}
												],
												"src": "6806:108:21"
											},
											{
												"body": {
													"nativeSrc": "7000:99:21",
													"nodeType": "YulBlock",
													"src": "7000:99:21",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "7044:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "7044:6:21"
																	},
																	{
																		"name": "pos",
																		"nativeSrc": "7052:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "7052:3:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256",
																	"nativeSrc": "7010:33:21",
																	"nodeType": "YulIdentifier",
																	"src": "7010:33:21"
																},
																"nativeSrc": "7010:46:21",
																"nodeType": "YulFunctionCall",
																"src": "7010:46:21"
															},
															"nativeSrc": "7010:46:21",
															"nodeType": "YulExpressionStatement",
															"src": "7010:46:21"
														},
														{
															"nativeSrc": "7065:28:21",
															"nodeType": "YulAssignment",
															"src": "7065:28:21",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "7083:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "7083:3:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7088:4:21",
																		"nodeType": "YulLiteral",
																		"src": "7088:4:21",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "7079:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "7079:3:21"
																},
																"nativeSrc": "7079:14:21",
																"nodeType": "YulFunctionCall",
																"src": "7079:14:21"
															},
															"variableNames": [
																{
																	"name": "updatedPos",
																	"nativeSrc": "7065:10:21",
																	"nodeType": "YulIdentifier",
																	"src": "7065:10:21"
																}
															]
														}
													]
												},
												"name": "abi_encodeUpdatedPos_t_uint256_to_t_uint256",
												"nativeSrc": "6920:179:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value0",
														"nativeSrc": "6973:6:21",
														"nodeType": "YulTypedName",
														"src": "6973:6:21",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "6981:3:21",
														"nodeType": "YulTypedName",
														"src": "6981:3:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updatedPos",
														"nativeSrc": "6989:10:21",
														"nodeType": "YulTypedName",
														"src": "6989:10:21",
														"type": ""
													}
												],
												"src": "6920:179:21"
											},
											{
												"body": {
													"nativeSrc": "7180:38:21",
													"nodeType": "YulBlock",
													"src": "7180:38:21",
													"statements": [
														{
															"nativeSrc": "7190:22:21",
															"nodeType": "YulAssignment",
															"src": "7190:22:21",
															"value": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nativeSrc": "7202:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "7202:3:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7207:4:21",
																		"nodeType": "YulLiteral",
																		"src": "7207:4:21",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "7198:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "7198:3:21"
																},
																"nativeSrc": "7198:14:21",
																"nodeType": "YulFunctionCall",
																"src": "7198:14:21"
															},
															"variableNames": [
																{
																	"name": "next",
																	"nativeSrc": "7190:4:21",
																	"nodeType": "YulIdentifier",
																	"src": "7190:4:21"
																}
															]
														}
													]
												},
												"name": "array_nextElement_t_array$_t_uint256_$dyn_memory_ptr",
												"nativeSrc": "7105:113:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nativeSrc": "7167:3:21",
														"nodeType": "YulTypedName",
														"src": "7167:3:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "next",
														"nativeSrc": "7175:4:21",
														"nodeType": "YulTypedName",
														"src": "7175:4:21",
														"type": ""
													}
												],
												"src": "7105:113:21"
											},
											{
												"body": {
													"nativeSrc": "7378:608:21",
													"nodeType": "YulBlock",
													"src": "7378:608:21",
													"statements": [
														{
															"nativeSrc": "7388:68:21",
															"nodeType": "YulVariableDeclaration",
															"src": "7388:68:21",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "7450:5:21",
																		"nodeType": "YulIdentifier",
																		"src": "7450:5:21"
																	}
																],
																"functionName": {
																	"name": "array_length_t_array$_t_uint256_$dyn_memory_ptr",
																	"nativeSrc": "7402:47:21",
																	"nodeType": "YulIdentifier",
																	"src": "7402:47:21"
																},
																"nativeSrc": "7402:54:21",
																"nodeType": "YulFunctionCall",
																"src": "7402:54:21"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "7392:6:21",
																	"nodeType": "YulTypedName",
																	"src": "7392:6:21",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "7465:93:21",
															"nodeType": "YulAssignment",
															"src": "7465:93:21",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "7546:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "7546:3:21"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "7551:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "7551:6:21"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
																	"nativeSrc": "7472:73:21",
																	"nodeType": "YulIdentifier",
																	"src": "7472:73:21"
																},
																"nativeSrc": "7472:86:21",
																"nodeType": "YulFunctionCall",
																"src": "7472:86:21"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "7465:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "7465:3:21"
																}
															]
														},
														{
															"nativeSrc": "7567:71:21",
															"nodeType": "YulVariableDeclaration",
															"src": "7567:71:21",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "7632:5:21",
																		"nodeType": "YulIdentifier",
																		"src": "7632:5:21"
																	}
																],
																"functionName": {
																	"name": "array_dataslot_t_array$_t_uint256_$dyn_memory_ptr",
																	"nativeSrc": "7582:49:21",
																	"nodeType": "YulIdentifier",
																	"src": "7582:49:21"
																},
																"nativeSrc": "7582:56:21",
																"nodeType": "YulFunctionCall",
																"src": "7582:56:21"
															},
															"variables": [
																{
																	"name": "baseRef",
																	"nativeSrc": "7571:7:21",
																	"nodeType": "YulTypedName",
																	"src": "7571:7:21",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "7647:21:21",
															"nodeType": "YulVariableDeclaration",
															"src": "7647:21:21",
															"value": {
																"name": "baseRef",
																"nativeSrc": "7661:7:21",
																"nodeType": "YulIdentifier",
																"src": "7661:7:21"
															},
															"variables": [
																{
																	"name": "srcPtr",
																	"nativeSrc": "7651:6:21",
																	"nodeType": "YulTypedName",
																	"src": "7651:6:21",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "7737:224:21",
																"nodeType": "YulBlock",
																"src": "7737:224:21",
																"statements": [
																	{
																		"nativeSrc": "7751:34:21",
																		"nodeType": "YulVariableDeclaration",
																		"src": "7751:34:21",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcPtr",
																					"nativeSrc": "7778:6:21",
																					"nodeType": "YulIdentifier",
																					"src": "7778:6:21"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "7772:5:21",
																				"nodeType": "YulIdentifier",
																				"src": "7772:5:21"
																			},
																			"nativeSrc": "7772:13:21",
																			"nodeType": "YulFunctionCall",
																			"src": "7772:13:21"
																		},
																		"variables": [
																			{
																				"name": "elementValue0",
																				"nativeSrc": "7755:13:21",
																				"nodeType": "YulTypedName",
																				"src": "7755:13:21",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nativeSrc": "7798:70:21",
																		"nodeType": "YulAssignment",
																		"src": "7798:70:21",
																		"value": {
																			"arguments": [
																				{
																					"name": "elementValue0",
																					"nativeSrc": "7849:13:21",
																					"nodeType": "YulIdentifier",
																					"src": "7849:13:21"
																				},
																				{
																					"name": "pos",
																					"nativeSrc": "7864:3:21",
																					"nodeType": "YulIdentifier",
																					"src": "7864:3:21"
																				}
																			],
																			"functionName": {
																				"name": "abi_encodeUpdatedPos_t_uint256_to_t_uint256",
																				"nativeSrc": "7805:43:21",
																				"nodeType": "YulIdentifier",
																				"src": "7805:43:21"
																			},
																			"nativeSrc": "7805:63:21",
																			"nodeType": "YulFunctionCall",
																			"src": "7805:63:21"
																		},
																		"variableNames": [
																			{
																				"name": "pos",
																				"nativeSrc": "7798:3:21",
																				"nodeType": "YulIdentifier",
																				"src": "7798:3:21"
																			}
																		]
																	},
																	{
																		"nativeSrc": "7881:70:21",
																		"nodeType": "YulAssignment",
																		"src": "7881:70:21",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcPtr",
																					"nativeSrc": "7944:6:21",
																					"nodeType": "YulIdentifier",
																					"src": "7944:6:21"
																				}
																			],
																			"functionName": {
																				"name": "array_nextElement_t_array$_t_uint256_$dyn_memory_ptr",
																				"nativeSrc": "7891:52:21",
																				"nodeType": "YulIdentifier",
																				"src": "7891:52:21"
																			},
																			"nativeSrc": "7891:60:21",
																			"nodeType": "YulFunctionCall",
																			"src": "7891:60:21"
																		},
																		"variableNames": [
																			{
																				"name": "srcPtr",
																				"nativeSrc": "7881:6:21",
																				"nodeType": "YulIdentifier",
																				"src": "7881:6:21"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nativeSrc": "7699:1:21",
																		"nodeType": "YulIdentifier",
																		"src": "7699:1:21"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "7702:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "7702:6:21"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "7696:2:21",
																	"nodeType": "YulIdentifier",
																	"src": "7696:2:21"
																},
																"nativeSrc": "7696:13:21",
																"nodeType": "YulFunctionCall",
																"src": "7696:13:21"
															},
															"nativeSrc": "7677:284:21",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "7710:18:21",
																"nodeType": "YulBlock",
																"src": "7710:18:21",
																"statements": [
																	{
																		"nativeSrc": "7712:14:21",
																		"nodeType": "YulAssignment",
																		"src": "7712:14:21",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nativeSrc": "7721:1:21",
																					"nodeType": "YulIdentifier",
																					"src": "7721:1:21"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "7724:1:21",
																					"nodeType": "YulLiteral",
																					"src": "7724:1:21",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "7717:3:21",
																				"nodeType": "YulIdentifier",
																				"src": "7717:3:21"
																			},
																			"nativeSrc": "7717:9:21",
																			"nodeType": "YulFunctionCall",
																			"src": "7717:9:21"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nativeSrc": "7712:1:21",
																				"nodeType": "YulIdentifier",
																				"src": "7712:1:21"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nativeSrc": "7681:14:21",
																"nodeType": "YulBlock",
																"src": "7681:14:21",
																"statements": [
																	{
																		"nativeSrc": "7683:10:21",
																		"nodeType": "YulVariableDeclaration",
																		"src": "7683:10:21",
																		"value": {
																			"kind": "number",
																			"nativeSrc": "7692:1:21",
																			"nodeType": "YulLiteral",
																			"src": "7692:1:21",
																			"type": "",
																			"value": "0"
																		},
																		"variables": [
																			{
																				"name": "i",
																				"nativeSrc": "7687:1:21",
																				"nodeType": "YulTypedName",
																				"src": "7687:1:21",
																				"type": ""
																			}
																		]
																	}
																]
															},
															"src": "7677:284:21"
														},
														{
															"nativeSrc": "7970:10:21",
															"nodeType": "YulAssignment",
															"src": "7970:10:21",
															"value": {
																"name": "pos",
																"nativeSrc": "7977:3:21",
																"nodeType": "YulIdentifier",
																"src": "7977:3:21"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "7970:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "7970:3:21"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
												"nativeSrc": "7254:732:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "7357:5:21",
														"nodeType": "YulTypedName",
														"src": "7357:5:21",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "7364:3:21",
														"nodeType": "YulTypedName",
														"src": "7364:3:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "7373:3:21",
														"nodeType": "YulTypedName",
														"src": "7373:3:21",
														"type": ""
													}
												],
												"src": "7254:732:21"
											},
											{
												"body": {
													"nativeSrc": "8346:861:21",
													"nodeType": "YulBlock",
													"src": "8346:861:21",
													"statements": [
														{
															"nativeSrc": "8356:27:21",
															"nodeType": "YulAssignment",
															"src": "8356:27:21",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "8368:9:21",
																		"nodeType": "YulIdentifier",
																		"src": "8368:9:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8379:3:21",
																		"nodeType": "YulLiteral",
																		"src": "8379:3:21",
																		"type": "",
																		"value": "224"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "8364:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "8364:3:21"
																},
																"nativeSrc": "8364:19:21",
																"nodeType": "YulFunctionCall",
																"src": "8364:19:21"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "8356:4:21",
																	"nodeType": "YulIdentifier",
																	"src": "8356:4:21"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "8435:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "8435:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "8448:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "8448:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8459:1:21",
																				"nodeType": "YulLiteral",
																				"src": "8459:1:21",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8444:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "8444:3:21"
																		},
																		"nativeSrc": "8444:17:21",
																		"nodeType": "YulFunctionCall",
																		"src": "8444:17:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes1_to_t_bytes1_fromStack",
																	"nativeSrc": "8393:41:21",
																	"nodeType": "YulIdentifier",
																	"src": "8393:41:21"
																},
																"nativeSrc": "8393:69:21",
																"nodeType": "YulFunctionCall",
																"src": "8393:69:21"
															},
															"nativeSrc": "8393:69:21",
															"nodeType": "YulExpressionStatement",
															"src": "8393:69:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "8483:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "8483:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8494:2:21",
																				"nodeType": "YulLiteral",
																				"src": "8494:2:21",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8479:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "8479:3:21"
																		},
																		"nativeSrc": "8479:18:21",
																		"nodeType": "YulFunctionCall",
																		"src": "8479:18:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nativeSrc": "8503:4:21",
																				"nodeType": "YulIdentifier",
																				"src": "8503:4:21"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "8509:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "8509:9:21"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "8499:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "8499:3:21"
																		},
																		"nativeSrc": "8499:20:21",
																		"nodeType": "YulFunctionCall",
																		"src": "8499:20:21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8472:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "8472:6:21"
																},
																"nativeSrc": "8472:48:21",
																"nodeType": "YulFunctionCall",
																"src": "8472:48:21"
															},
															"nativeSrc": "8472:48:21",
															"nodeType": "YulExpressionStatement",
															"src": "8472:48:21"
														},
														{
															"nativeSrc": "8529:86:21",
															"nodeType": "YulAssignment",
															"src": "8529:86:21",
															"value": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "8601:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "8601:6:21"
																	},
																	{
																		"name": "tail",
																		"nativeSrc": "8610:4:21",
																		"nodeType": "YulIdentifier",
																		"src": "8610:4:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nativeSrc": "8537:63:21",
																	"nodeType": "YulIdentifier",
																	"src": "8537:63:21"
																},
																"nativeSrc": "8537:78:21",
																"nodeType": "YulFunctionCall",
																"src": "8537:78:21"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "8529:4:21",
																	"nodeType": "YulIdentifier",
																	"src": "8529:4:21"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "8636:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "8636:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8647:2:21",
																				"nodeType": "YulLiteral",
																				"src": "8647:2:21",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8632:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "8632:3:21"
																		},
																		"nativeSrc": "8632:18:21",
																		"nodeType": "YulFunctionCall",
																		"src": "8632:18:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nativeSrc": "8656:4:21",
																				"nodeType": "YulIdentifier",
																				"src": "8656:4:21"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "8662:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "8662:9:21"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "8652:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "8652:3:21"
																		},
																		"nativeSrc": "8652:20:21",
																		"nodeType": "YulFunctionCall",
																		"src": "8652:20:21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8625:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "8625:6:21"
																},
																"nativeSrc": "8625:48:21",
																"nodeType": "YulFunctionCall",
																"src": "8625:48:21"
															},
															"nativeSrc": "8625:48:21",
															"nodeType": "YulExpressionStatement",
															"src": "8625:48:21"
														},
														{
															"nativeSrc": "8682:86:21",
															"nodeType": "YulAssignment",
															"src": "8682:86:21",
															"value": {
																"arguments": [
																	{
																		"name": "value2",
																		"nativeSrc": "8754:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "8754:6:21"
																	},
																	{
																		"name": "tail",
																		"nativeSrc": "8763:4:21",
																		"nodeType": "YulIdentifier",
																		"src": "8763:4:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nativeSrc": "8690:63:21",
																	"nodeType": "YulIdentifier",
																	"src": "8690:63:21"
																},
																"nativeSrc": "8690:78:21",
																"nodeType": "YulFunctionCall",
																"src": "8690:78:21"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "8682:4:21",
																	"nodeType": "YulIdentifier",
																	"src": "8682:4:21"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value3",
																		"nativeSrc": "8822:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "8822:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "8835:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "8835:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8846:2:21",
																				"nodeType": "YulLiteral",
																				"src": "8846:2:21",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8831:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "8831:3:21"
																		},
																		"nativeSrc": "8831:18:21",
																		"nodeType": "YulFunctionCall",
																		"src": "8831:18:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "8778:43:21",
																	"nodeType": "YulIdentifier",
																	"src": "8778:43:21"
																},
																"nativeSrc": "8778:72:21",
																"nodeType": "YulFunctionCall",
																"src": "8778:72:21"
															},
															"nativeSrc": "8778:72:21",
															"nodeType": "YulExpressionStatement",
															"src": "8778:72:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value4",
																		"nativeSrc": "8904:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "8904:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "8917:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "8917:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8928:3:21",
																				"nodeType": "YulLiteral",
																				"src": "8928:3:21",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8913:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "8913:3:21"
																		},
																		"nativeSrc": "8913:19:21",
																		"nodeType": "YulFunctionCall",
																		"src": "8913:19:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "8860:43:21",
																	"nodeType": "YulIdentifier",
																	"src": "8860:43:21"
																},
																"nativeSrc": "8860:73:21",
																"nodeType": "YulFunctionCall",
																"src": "8860:73:21"
															},
															"nativeSrc": "8860:73:21",
															"nodeType": "YulExpressionStatement",
															"src": "8860:73:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value5",
																		"nativeSrc": "8987:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "8987:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "9000:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "9000:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9011:3:21",
																				"nodeType": "YulLiteral",
																				"src": "9011:3:21",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8996:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "8996:3:21"
																		},
																		"nativeSrc": "8996:19:21",
																		"nodeType": "YulFunctionCall",
																		"src": "8996:19:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nativeSrc": "8943:43:21",
																	"nodeType": "YulIdentifier",
																	"src": "8943:43:21"
																},
																"nativeSrc": "8943:73:21",
																"nodeType": "YulFunctionCall",
																"src": "8943:73:21"
															},
															"nativeSrc": "8943:73:21",
															"nodeType": "YulExpressionStatement",
															"src": "8943:73:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "9037:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "9037:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9048:3:21",
																				"nodeType": "YulLiteral",
																				"src": "9048:3:21",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9033:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "9033:3:21"
																		},
																		"nativeSrc": "9033:19:21",
																		"nodeType": "YulFunctionCall",
																		"src": "9033:19:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nativeSrc": "9058:4:21",
																				"nodeType": "YulIdentifier",
																				"src": "9058:4:21"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "9064:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "9064:9:21"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "9054:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "9054:3:21"
																		},
																		"nativeSrc": "9054:20:21",
																		"nodeType": "YulFunctionCall",
																		"src": "9054:20:21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9026:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "9026:6:21"
																},
																"nativeSrc": "9026:49:21",
																"nodeType": "YulFunctionCall",
																"src": "9026:49:21"
															},
															"nativeSrc": "9026:49:21",
															"nodeType": "YulExpressionStatement",
															"src": "9026:49:21"
														},
														{
															"nativeSrc": "9084:116:21",
															"nodeType": "YulAssignment",
															"src": "9084:116:21",
															"value": {
																"arguments": [
																	{
																		"name": "value6",
																		"nativeSrc": "9186:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "9186:6:21"
																	},
																	{
																		"name": "tail",
																		"nativeSrc": "9195:4:21",
																		"nodeType": "YulIdentifier",
																		"src": "9195:4:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
																	"nativeSrc": "9092:93:21",
																	"nodeType": "YulIdentifier",
																	"src": "9092:93:21"
																},
																"nativeSrc": "9092:108:21",
																"nodeType": "YulFunctionCall",
																"src": "9092:108:21"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "9084:4:21",
																	"nodeType": "YulIdentifier",
																	"src": "9084:4:21"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed",
												"nativeSrc": "7992:1215:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "8270:9:21",
														"nodeType": "YulTypedName",
														"src": "8270:9:21",
														"type": ""
													},
													{
														"name": "value6",
														"nativeSrc": "8282:6:21",
														"nodeType": "YulTypedName",
														"src": "8282:6:21",
														"type": ""
													},
													{
														"name": "value5",
														"nativeSrc": "8290:6:21",
														"nodeType": "YulTypedName",
														"src": "8290:6:21",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "8298:6:21",
														"nodeType": "YulTypedName",
														"src": "8298:6:21",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "8306:6:21",
														"nodeType": "YulTypedName",
														"src": "8306:6:21",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "8314:6:21",
														"nodeType": "YulTypedName",
														"src": "8314:6:21",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "8322:6:21",
														"nodeType": "YulTypedName",
														"src": "8322:6:21",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "8330:6:21",
														"nodeType": "YulTypedName",
														"src": "8330:6:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "8341:4:21",
														"nodeType": "YulTypedName",
														"src": "8341:4:21",
														"type": ""
													}
												],
												"src": "7992:1215:21"
											},
											{
												"body": {
													"nativeSrc": "9311:124:21",
													"nodeType": "YulBlock",
													"src": "9311:124:21",
													"statements": [
														{
															"nativeSrc": "9321:26:21",
															"nodeType": "YulAssignment",
															"src": "9321:26:21",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "9333:9:21",
																		"nodeType": "YulIdentifier",
																		"src": "9333:9:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9344:2:21",
																		"nodeType": "YulLiteral",
																		"src": "9344:2:21",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "9329:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "9329:3:21"
																},
																"nativeSrc": "9329:18:21",
																"nodeType": "YulFunctionCall",
																"src": "9329:18:21"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "9321:4:21",
																	"nodeType": "YulIdentifier",
																	"src": "9321:4:21"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "9401:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "9401:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "9414:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "9414:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9425:1:21",
																				"nodeType": "YulLiteral",
																				"src": "9425:1:21",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9410:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "9410:3:21"
																		},
																		"nativeSrc": "9410:17:21",
																		"nodeType": "YulFunctionCall",
																		"src": "9410:17:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "9357:43:21",
																	"nodeType": "YulIdentifier",
																	"src": "9357:43:21"
																},
																"nativeSrc": "9357:71:21",
																"nodeType": "YulFunctionCall",
																"src": "9357:71:21"
															},
															"nativeSrc": "9357:71:21",
															"nodeType": "YulExpressionStatement",
															"src": "9357:71:21"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "9213:222:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "9283:9:21",
														"nodeType": "YulTypedName",
														"src": "9283:9:21",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "9295:6:21",
														"nodeType": "YulTypedName",
														"src": "9295:6:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "9306:4:21",
														"nodeType": "YulTypedName",
														"src": "9306:4:21",
														"type": ""
													}
												],
												"src": "9213:222:21"
											},
											{
												"body": {
													"nativeSrc": "9482:77:21",
													"nodeType": "YulBlock",
													"src": "9482:77:21",
													"statements": [
														{
															"body": {
																"nativeSrc": "9537:16:21",
																"nodeType": "YulBlock",
																"src": "9537:16:21",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "9546:1:21",
																					"nodeType": "YulLiteral",
																					"src": "9546:1:21",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "9549:1:21",
																					"nodeType": "YulLiteral",
																					"src": "9549:1:21",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "9539:6:21",
																				"nodeType": "YulIdentifier",
																				"src": "9539:6:21"
																			},
																			"nativeSrc": "9539:12:21",
																			"nodeType": "YulFunctionCall",
																			"src": "9539:12:21"
																		},
																		"nativeSrc": "9539:12:21",
																		"nodeType": "YulExpressionStatement",
																		"src": "9539:12:21"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "9505:5:21",
																				"nodeType": "YulIdentifier",
																				"src": "9505:5:21"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "9528:5:21",
																						"nodeType": "YulIdentifier",
																						"src": "9528:5:21"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint8",
																					"nativeSrc": "9512:15:21",
																					"nodeType": "YulIdentifier",
																					"src": "9512:15:21"
																				},
																				"nativeSrc": "9512:22:21",
																				"nodeType": "YulFunctionCall",
																				"src": "9512:22:21"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "9502:2:21",
																			"nodeType": "YulIdentifier",
																			"src": "9502:2:21"
																		},
																		"nativeSrc": "9502:33:21",
																		"nodeType": "YulFunctionCall",
																		"src": "9502:33:21"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "9495:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "9495:6:21"
																},
																"nativeSrc": "9495:41:21",
																"nodeType": "YulFunctionCall",
																"src": "9495:41:21"
															},
															"nativeSrc": "9492:61:21",
															"nodeType": "YulIf",
															"src": "9492:61:21"
														}
													]
												},
												"name": "validator_revert_t_uint8",
												"nativeSrc": "9441:118:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "9475:5:21",
														"nodeType": "YulTypedName",
														"src": "9475:5:21",
														"type": ""
													}
												],
												"src": "9441:118:21"
											},
											{
												"body": {
													"nativeSrc": "9615:85:21",
													"nodeType": "YulBlock",
													"src": "9615:85:21",
													"statements": [
														{
															"nativeSrc": "9625:29:21",
															"nodeType": "YulAssignment",
															"src": "9625:29:21",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "9647:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "9647:6:21"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "9634:12:21",
																	"nodeType": "YulIdentifier",
																	"src": "9634:12:21"
																},
																"nativeSrc": "9634:20:21",
																"nodeType": "YulFunctionCall",
																"src": "9634:20:21"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "9625:5:21",
																	"nodeType": "YulIdentifier",
																	"src": "9625:5:21"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "9688:5:21",
																		"nodeType": "YulIdentifier",
																		"src": "9688:5:21"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint8",
																	"nativeSrc": "9663:24:21",
																	"nodeType": "YulIdentifier",
																	"src": "9663:24:21"
																},
																"nativeSrc": "9663:31:21",
																"nodeType": "YulFunctionCall",
																"src": "9663:31:21"
															},
															"nativeSrc": "9663:31:21",
															"nodeType": "YulExpressionStatement",
															"src": "9663:31:21"
														}
													]
												},
												"name": "abi_decode_t_uint8",
												"nativeSrc": "9565:135:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "9593:6:21",
														"nodeType": "YulTypedName",
														"src": "9593:6:21",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "9601:3:21",
														"nodeType": "YulTypedName",
														"src": "9601:3:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "9609:5:21",
														"nodeType": "YulTypedName",
														"src": "9609:5:21",
														"type": ""
													}
												],
												"src": "9565:135:21"
											},
											{
												"body": {
													"nativeSrc": "9749:79:21",
													"nodeType": "YulBlock",
													"src": "9749:79:21",
													"statements": [
														{
															"body": {
																"nativeSrc": "9806:16:21",
																"nodeType": "YulBlock",
																"src": "9806:16:21",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "9815:1:21",
																					"nodeType": "YulLiteral",
																					"src": "9815:1:21",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "9818:1:21",
																					"nodeType": "YulLiteral",
																					"src": "9818:1:21",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "9808:6:21",
																				"nodeType": "YulIdentifier",
																				"src": "9808:6:21"
																			},
																			"nativeSrc": "9808:12:21",
																			"nodeType": "YulFunctionCall",
																			"src": "9808:12:21"
																		},
																		"nativeSrc": "9808:12:21",
																		"nodeType": "YulExpressionStatement",
																		"src": "9808:12:21"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "9772:5:21",
																				"nodeType": "YulIdentifier",
																				"src": "9772:5:21"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "9797:5:21",
																						"nodeType": "YulIdentifier",
																						"src": "9797:5:21"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bytes32",
																					"nativeSrc": "9779:17:21",
																					"nodeType": "YulIdentifier",
																					"src": "9779:17:21"
																				},
																				"nativeSrc": "9779:24:21",
																				"nodeType": "YulFunctionCall",
																				"src": "9779:24:21"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "9769:2:21",
																			"nodeType": "YulIdentifier",
																			"src": "9769:2:21"
																		},
																		"nativeSrc": "9769:35:21",
																		"nodeType": "YulFunctionCall",
																		"src": "9769:35:21"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "9762:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "9762:6:21"
																},
																"nativeSrc": "9762:43:21",
																"nodeType": "YulFunctionCall",
																"src": "9762:43:21"
															},
															"nativeSrc": "9759:63:21",
															"nodeType": "YulIf",
															"src": "9759:63:21"
														}
													]
												},
												"name": "validator_revert_t_bytes32",
												"nativeSrc": "9706:122:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "9742:5:21",
														"nodeType": "YulTypedName",
														"src": "9742:5:21",
														"type": ""
													}
												],
												"src": "9706:122:21"
											},
											{
												"body": {
													"nativeSrc": "9886:87:21",
													"nodeType": "YulBlock",
													"src": "9886:87:21",
													"statements": [
														{
															"nativeSrc": "9896:29:21",
															"nodeType": "YulAssignment",
															"src": "9896:29:21",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "9918:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "9918:6:21"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "9905:12:21",
																	"nodeType": "YulIdentifier",
																	"src": "9905:12:21"
																},
																"nativeSrc": "9905:20:21",
																"nodeType": "YulFunctionCall",
																"src": "9905:20:21"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "9896:5:21",
																	"nodeType": "YulIdentifier",
																	"src": "9896:5:21"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "9961:5:21",
																		"nodeType": "YulIdentifier",
																		"src": "9961:5:21"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bytes32",
																	"nativeSrc": "9934:26:21",
																	"nodeType": "YulIdentifier",
																	"src": "9934:26:21"
																},
																"nativeSrc": "9934:33:21",
																"nodeType": "YulFunctionCall",
																"src": "9934:33:21"
															},
															"nativeSrc": "9934:33:21",
															"nodeType": "YulExpressionStatement",
															"src": "9934:33:21"
														}
													]
												},
												"name": "abi_decode_t_bytes32",
												"nativeSrc": "9834:139:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "9864:6:21",
														"nodeType": "YulTypedName",
														"src": "9864:6:21",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "9872:3:21",
														"nodeType": "YulTypedName",
														"src": "9872:3:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "9880:5:21",
														"nodeType": "YulTypedName",
														"src": "9880:5:21",
														"type": ""
													}
												],
												"src": "9834:139:21"
											},
											{
												"body": {
													"nativeSrc": "10145:1033:21",
													"nodeType": "YulBlock",
													"src": "10145:1033:21",
													"statements": [
														{
															"body": {
																"nativeSrc": "10192:83:21",
																"nodeType": "YulBlock",
																"src": "10192:83:21",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "10194:77:21",
																				"nodeType": "YulIdentifier",
																				"src": "10194:77:21"
																			},
																			"nativeSrc": "10194:79:21",
																			"nodeType": "YulFunctionCall",
																			"src": "10194:79:21"
																		},
																		"nativeSrc": "10194:79:21",
																		"nodeType": "YulExpressionStatement",
																		"src": "10194:79:21"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "10166:7:21",
																				"nodeType": "YulIdentifier",
																				"src": "10166:7:21"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "10175:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "10175:9:21"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "10162:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "10162:3:21"
																		},
																		"nativeSrc": "10162:23:21",
																		"nodeType": "YulFunctionCall",
																		"src": "10162:23:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "10187:3:21",
																		"nodeType": "YulLiteral",
																		"src": "10187:3:21",
																		"type": "",
																		"value": "224"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "10158:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "10158:3:21"
																},
																"nativeSrc": "10158:33:21",
																"nodeType": "YulFunctionCall",
																"src": "10158:33:21"
															},
															"nativeSrc": "10155:120:21",
															"nodeType": "YulIf",
															"src": "10155:120:21"
														},
														{
															"nativeSrc": "10285:117:21",
															"nodeType": "YulBlock",
															"src": "10285:117:21",
															"statements": [
																{
																	"nativeSrc": "10300:15:21",
																	"nodeType": "YulVariableDeclaration",
																	"src": "10300:15:21",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "10314:1:21",
																		"nodeType": "YulLiteral",
																		"src": "10314:1:21",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "10304:6:21",
																			"nodeType": "YulTypedName",
																			"src": "10304:6:21",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "10329:63:21",
																	"nodeType": "YulAssignment",
																	"src": "10329:63:21",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "10364:9:21",
																						"nodeType": "YulIdentifier",
																						"src": "10364:9:21"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "10375:6:21",
																						"nodeType": "YulIdentifier",
																						"src": "10375:6:21"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "10360:3:21",
																					"nodeType": "YulIdentifier",
																					"src": "10360:3:21"
																				},
																				"nativeSrc": "10360:22:21",
																				"nodeType": "YulFunctionCall",
																				"src": "10360:22:21"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "10384:7:21",
																				"nodeType": "YulIdentifier",
																				"src": "10384:7:21"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "10339:20:21",
																			"nodeType": "YulIdentifier",
																			"src": "10339:20:21"
																		},
																		"nativeSrc": "10339:53:21",
																		"nodeType": "YulFunctionCall",
																		"src": "10339:53:21"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "10329:6:21",
																			"nodeType": "YulIdentifier",
																			"src": "10329:6:21"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "10412:118:21",
															"nodeType": "YulBlock",
															"src": "10412:118:21",
															"statements": [
																{
																	"nativeSrc": "10427:16:21",
																	"nodeType": "YulVariableDeclaration",
																	"src": "10427:16:21",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "10441:2:21",
																		"nodeType": "YulLiteral",
																		"src": "10441:2:21",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "10431:6:21",
																			"nodeType": "YulTypedName",
																			"src": "10431:6:21",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "10457:63:21",
																	"nodeType": "YulAssignment",
																	"src": "10457:63:21",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "10492:9:21",
																						"nodeType": "YulIdentifier",
																						"src": "10492:9:21"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "10503:6:21",
																						"nodeType": "YulIdentifier",
																						"src": "10503:6:21"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "10488:3:21",
																					"nodeType": "YulIdentifier",
																					"src": "10488:3:21"
																				},
																				"nativeSrc": "10488:22:21",
																				"nodeType": "YulFunctionCall",
																				"src": "10488:22:21"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "10512:7:21",
																				"nodeType": "YulIdentifier",
																				"src": "10512:7:21"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "10467:20:21",
																			"nodeType": "YulIdentifier",
																			"src": "10467:20:21"
																		},
																		"nativeSrc": "10467:53:21",
																		"nodeType": "YulFunctionCall",
																		"src": "10467:53:21"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "10457:6:21",
																			"nodeType": "YulIdentifier",
																			"src": "10457:6:21"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "10540:118:21",
															"nodeType": "YulBlock",
															"src": "10540:118:21",
															"statements": [
																{
																	"nativeSrc": "10555:16:21",
																	"nodeType": "YulVariableDeclaration",
																	"src": "10555:16:21",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "10569:2:21",
																		"nodeType": "YulLiteral",
																		"src": "10569:2:21",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "10559:6:21",
																			"nodeType": "YulTypedName",
																			"src": "10559:6:21",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "10585:63:21",
																	"nodeType": "YulAssignment",
																	"src": "10585:63:21",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "10620:9:21",
																						"nodeType": "YulIdentifier",
																						"src": "10620:9:21"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "10631:6:21",
																						"nodeType": "YulIdentifier",
																						"src": "10631:6:21"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "10616:3:21",
																					"nodeType": "YulIdentifier",
																					"src": "10616:3:21"
																				},
																				"nativeSrc": "10616:22:21",
																				"nodeType": "YulFunctionCall",
																				"src": "10616:22:21"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "10640:7:21",
																				"nodeType": "YulIdentifier",
																				"src": "10640:7:21"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "10595:20:21",
																			"nodeType": "YulIdentifier",
																			"src": "10595:20:21"
																		},
																		"nativeSrc": "10595:53:21",
																		"nodeType": "YulFunctionCall",
																		"src": "10595:53:21"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nativeSrc": "10585:6:21",
																			"nodeType": "YulIdentifier",
																			"src": "10585:6:21"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "10668:118:21",
															"nodeType": "YulBlock",
															"src": "10668:118:21",
															"statements": [
																{
																	"nativeSrc": "10683:16:21",
																	"nodeType": "YulVariableDeclaration",
																	"src": "10683:16:21",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "10697:2:21",
																		"nodeType": "YulLiteral",
																		"src": "10697:2:21",
																		"type": "",
																		"value": "96"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "10687:6:21",
																			"nodeType": "YulTypedName",
																			"src": "10687:6:21",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "10713:63:21",
																	"nodeType": "YulAssignment",
																	"src": "10713:63:21",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "10748:9:21",
																						"nodeType": "YulIdentifier",
																						"src": "10748:9:21"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "10759:6:21",
																						"nodeType": "YulIdentifier",
																						"src": "10759:6:21"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "10744:3:21",
																					"nodeType": "YulIdentifier",
																					"src": "10744:3:21"
																				},
																				"nativeSrc": "10744:22:21",
																				"nodeType": "YulFunctionCall",
																				"src": "10744:22:21"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "10768:7:21",
																				"nodeType": "YulIdentifier",
																				"src": "10768:7:21"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "10723:20:21",
																			"nodeType": "YulIdentifier",
																			"src": "10723:20:21"
																		},
																		"nativeSrc": "10723:53:21",
																		"nodeType": "YulFunctionCall",
																		"src": "10723:53:21"
																	},
																	"variableNames": [
																		{
																			"name": "value3",
																			"nativeSrc": "10713:6:21",
																			"nodeType": "YulIdentifier",
																			"src": "10713:6:21"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "10796:117:21",
															"nodeType": "YulBlock",
															"src": "10796:117:21",
															"statements": [
																{
																	"nativeSrc": "10811:17:21",
																	"nodeType": "YulVariableDeclaration",
																	"src": "10811:17:21",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "10825:3:21",
																		"nodeType": "YulLiteral",
																		"src": "10825:3:21",
																		"type": "",
																		"value": "128"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "10815:6:21",
																			"nodeType": "YulTypedName",
																			"src": "10815:6:21",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "10842:61:21",
																	"nodeType": "YulAssignment",
																	"src": "10842:61:21",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "10875:9:21",
																						"nodeType": "YulIdentifier",
																						"src": "10875:9:21"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "10886:6:21",
																						"nodeType": "YulIdentifier",
																						"src": "10886:6:21"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "10871:3:21",
																					"nodeType": "YulIdentifier",
																					"src": "10871:3:21"
																				},
																				"nativeSrc": "10871:22:21",
																				"nodeType": "YulFunctionCall",
																				"src": "10871:22:21"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "10895:7:21",
																				"nodeType": "YulIdentifier",
																				"src": "10895:7:21"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint8",
																			"nativeSrc": "10852:18:21",
																			"nodeType": "YulIdentifier",
																			"src": "10852:18:21"
																		},
																		"nativeSrc": "10852:51:21",
																		"nodeType": "YulFunctionCall",
																		"src": "10852:51:21"
																	},
																	"variableNames": [
																		{
																			"name": "value4",
																			"nativeSrc": "10842:6:21",
																			"nodeType": "YulIdentifier",
																			"src": "10842:6:21"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "10923:119:21",
															"nodeType": "YulBlock",
															"src": "10923:119:21",
															"statements": [
																{
																	"nativeSrc": "10938:17:21",
																	"nodeType": "YulVariableDeclaration",
																	"src": "10938:17:21",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "10952:3:21",
																		"nodeType": "YulLiteral",
																		"src": "10952:3:21",
																		"type": "",
																		"value": "160"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "10942:6:21",
																			"nodeType": "YulTypedName",
																			"src": "10942:6:21",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "10969:63:21",
																	"nodeType": "YulAssignment",
																	"src": "10969:63:21",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "11004:9:21",
																						"nodeType": "YulIdentifier",
																						"src": "11004:9:21"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "11015:6:21",
																						"nodeType": "YulIdentifier",
																						"src": "11015:6:21"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "11000:3:21",
																					"nodeType": "YulIdentifier",
																					"src": "11000:3:21"
																				},
																				"nativeSrc": "11000:22:21",
																				"nodeType": "YulFunctionCall",
																				"src": "11000:22:21"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "11024:7:21",
																				"nodeType": "YulIdentifier",
																				"src": "11024:7:21"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes32",
																			"nativeSrc": "10979:20:21",
																			"nodeType": "YulIdentifier",
																			"src": "10979:20:21"
																		},
																		"nativeSrc": "10979:53:21",
																		"nodeType": "YulFunctionCall",
																		"src": "10979:53:21"
																	},
																	"variableNames": [
																		{
																			"name": "value5",
																			"nativeSrc": "10969:6:21",
																			"nodeType": "YulIdentifier",
																			"src": "10969:6:21"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "11052:119:21",
															"nodeType": "YulBlock",
															"src": "11052:119:21",
															"statements": [
																{
																	"nativeSrc": "11067:17:21",
																	"nodeType": "YulVariableDeclaration",
																	"src": "11067:17:21",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "11081:3:21",
																		"nodeType": "YulLiteral",
																		"src": "11081:3:21",
																		"type": "",
																		"value": "192"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "11071:6:21",
																			"nodeType": "YulTypedName",
																			"src": "11071:6:21",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "11098:63:21",
																	"nodeType": "YulAssignment",
																	"src": "11098:63:21",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "11133:9:21",
																						"nodeType": "YulIdentifier",
																						"src": "11133:9:21"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "11144:6:21",
																						"nodeType": "YulIdentifier",
																						"src": "11144:6:21"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "11129:3:21",
																					"nodeType": "YulIdentifier",
																					"src": "11129:3:21"
																				},
																				"nativeSrc": "11129:22:21",
																				"nodeType": "YulFunctionCall",
																				"src": "11129:22:21"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "11153:7:21",
																				"nodeType": "YulIdentifier",
																				"src": "11153:7:21"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes32",
																			"nativeSrc": "11108:20:21",
																			"nodeType": "YulIdentifier",
																			"src": "11108:20:21"
																		},
																		"nativeSrc": "11108:53:21",
																		"nodeType": "YulFunctionCall",
																		"src": "11108:53:21"
																	},
																	"variableNames": [
																		{
																			"name": "value6",
																			"nativeSrc": "11098:6:21",
																			"nodeType": "YulIdentifier",
																			"src": "11098:6:21"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32",
												"nativeSrc": "9979:1199:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "10067:9:21",
														"nodeType": "YulTypedName",
														"src": "10067:9:21",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "10078:7:21",
														"nodeType": "YulTypedName",
														"src": "10078:7:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "10090:6:21",
														"nodeType": "YulTypedName",
														"src": "10090:6:21",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "10098:6:21",
														"nodeType": "YulTypedName",
														"src": "10098:6:21",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "10106:6:21",
														"nodeType": "YulTypedName",
														"src": "10106:6:21",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "10114:6:21",
														"nodeType": "YulTypedName",
														"src": "10114:6:21",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "10122:6:21",
														"nodeType": "YulTypedName",
														"src": "10122:6:21",
														"type": ""
													},
													{
														"name": "value5",
														"nativeSrc": "10130:6:21",
														"nodeType": "YulTypedName",
														"src": "10130:6:21",
														"type": ""
													},
													{
														"name": "value6",
														"nativeSrc": "10138:6:21",
														"nodeType": "YulTypedName",
														"src": "10138:6:21",
														"type": ""
													}
												],
												"src": "9979:1199:21"
											},
											{
												"body": {
													"nativeSrc": "11267:391:21",
													"nodeType": "YulBlock",
													"src": "11267:391:21",
													"statements": [
														{
															"body": {
																"nativeSrc": "11313:83:21",
																"nodeType": "YulBlock",
																"src": "11313:83:21",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "11315:77:21",
																				"nodeType": "YulIdentifier",
																				"src": "11315:77:21"
																			},
																			"nativeSrc": "11315:79:21",
																			"nodeType": "YulFunctionCall",
																			"src": "11315:79:21"
																		},
																		"nativeSrc": "11315:79:21",
																		"nodeType": "YulExpressionStatement",
																		"src": "11315:79:21"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "11288:7:21",
																				"nodeType": "YulIdentifier",
																				"src": "11288:7:21"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "11297:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "11297:9:21"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "11284:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "11284:3:21"
																		},
																		"nativeSrc": "11284:23:21",
																		"nodeType": "YulFunctionCall",
																		"src": "11284:23:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11309:2:21",
																		"nodeType": "YulLiteral",
																		"src": "11309:2:21",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "11280:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "11280:3:21"
																},
																"nativeSrc": "11280:32:21",
																"nodeType": "YulFunctionCall",
																"src": "11280:32:21"
															},
															"nativeSrc": "11277:119:21",
															"nodeType": "YulIf",
															"src": "11277:119:21"
														},
														{
															"nativeSrc": "11406:117:21",
															"nodeType": "YulBlock",
															"src": "11406:117:21",
															"statements": [
																{
																	"nativeSrc": "11421:15:21",
																	"nodeType": "YulVariableDeclaration",
																	"src": "11421:15:21",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "11435:1:21",
																		"nodeType": "YulLiteral",
																		"src": "11435:1:21",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "11425:6:21",
																			"nodeType": "YulTypedName",
																			"src": "11425:6:21",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "11450:63:21",
																	"nodeType": "YulAssignment",
																	"src": "11450:63:21",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "11485:9:21",
																						"nodeType": "YulIdentifier",
																						"src": "11485:9:21"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "11496:6:21",
																						"nodeType": "YulIdentifier",
																						"src": "11496:6:21"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "11481:3:21",
																					"nodeType": "YulIdentifier",
																					"src": "11481:3:21"
																				},
																				"nativeSrc": "11481:22:21",
																				"nodeType": "YulFunctionCall",
																				"src": "11481:22:21"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "11505:7:21",
																				"nodeType": "YulIdentifier",
																				"src": "11505:7:21"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "11460:20:21",
																			"nodeType": "YulIdentifier",
																			"src": "11460:20:21"
																		},
																		"nativeSrc": "11460:53:21",
																		"nodeType": "YulFunctionCall",
																		"src": "11460:53:21"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "11450:6:21",
																			"nodeType": "YulIdentifier",
																			"src": "11450:6:21"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "11533:118:21",
															"nodeType": "YulBlock",
															"src": "11533:118:21",
															"statements": [
																{
																	"nativeSrc": "11548:16:21",
																	"nodeType": "YulVariableDeclaration",
																	"src": "11548:16:21",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "11562:2:21",
																		"nodeType": "YulLiteral",
																		"src": "11562:2:21",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "11552:6:21",
																			"nodeType": "YulTypedName",
																			"src": "11552:6:21",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "11578:63:21",
																	"nodeType": "YulAssignment",
																	"src": "11578:63:21",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "11613:9:21",
																						"nodeType": "YulIdentifier",
																						"src": "11613:9:21"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "11624:6:21",
																						"nodeType": "YulIdentifier",
																						"src": "11624:6:21"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "11609:3:21",
																					"nodeType": "YulIdentifier",
																					"src": "11609:3:21"
																				},
																				"nativeSrc": "11609:22:21",
																				"nodeType": "YulFunctionCall",
																				"src": "11609:22:21"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "11633:7:21",
																				"nodeType": "YulIdentifier",
																				"src": "11633:7:21"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "11588:20:21",
																			"nodeType": "YulIdentifier",
																			"src": "11588:20:21"
																		},
																		"nativeSrc": "11588:53:21",
																		"nodeType": "YulFunctionCall",
																		"src": "11588:53:21"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "11578:6:21",
																			"nodeType": "YulIdentifier",
																			"src": "11578:6:21"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nativeSrc": "11184:474:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "11229:9:21",
														"nodeType": "YulTypedName",
														"src": "11229:9:21",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "11240:7:21",
														"nodeType": "YulTypedName",
														"src": "11240:7:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "11252:6:21",
														"nodeType": "YulTypedName",
														"src": "11252:6:21",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "11260:6:21",
														"nodeType": "YulTypedName",
														"src": "11260:6:21",
														"type": ""
													}
												],
												"src": "11184:474:21"
											},
											{
												"body": {
													"nativeSrc": "11692:152:21",
													"nodeType": "YulBlock",
													"src": "11692:152:21",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "11709:1:21",
																		"nodeType": "YulLiteral",
																		"src": "11709:1:21",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11712:77:21",
																		"nodeType": "YulLiteral",
																		"src": "11712:77:21",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "11702:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "11702:6:21"
																},
																"nativeSrc": "11702:88:21",
																"nodeType": "YulFunctionCall",
																"src": "11702:88:21"
															},
															"nativeSrc": "11702:88:21",
															"nodeType": "YulExpressionStatement",
															"src": "11702:88:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "11806:1:21",
																		"nodeType": "YulLiteral",
																		"src": "11806:1:21",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11809:4:21",
																		"nodeType": "YulLiteral",
																		"src": "11809:4:21",
																		"type": "",
																		"value": "0x22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "11799:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "11799:6:21"
																},
																"nativeSrc": "11799:15:21",
																"nodeType": "YulFunctionCall",
																"src": "11799:15:21"
															},
															"nativeSrc": "11799:15:21",
															"nodeType": "YulExpressionStatement",
															"src": "11799:15:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "11830:1:21",
																		"nodeType": "YulLiteral",
																		"src": "11830:1:21",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11833:4:21",
																		"nodeType": "YulLiteral",
																		"src": "11833:4:21",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "11823:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "11823:6:21"
																},
																"nativeSrc": "11823:15:21",
																"nodeType": "YulFunctionCall",
																"src": "11823:15:21"
															},
															"nativeSrc": "11823:15:21",
															"nodeType": "YulExpressionStatement",
															"src": "11823:15:21"
														}
													]
												},
												"name": "panic_error_0x22",
												"nativeSrc": "11664:180:21",
												"nodeType": "YulFunctionDefinition",
												"src": "11664:180:21"
											},
											{
												"body": {
													"nativeSrc": "11901:269:21",
													"nodeType": "YulBlock",
													"src": "11901:269:21",
													"statements": [
														{
															"nativeSrc": "11911:22:21",
															"nodeType": "YulAssignment",
															"src": "11911:22:21",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "11925:4:21",
																		"nodeType": "YulIdentifier",
																		"src": "11925:4:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11931:1:21",
																		"nodeType": "YulLiteral",
																		"src": "11931:1:21",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nativeSrc": "11921:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "11921:3:21"
																},
																"nativeSrc": "11921:12:21",
																"nodeType": "YulFunctionCall",
																"src": "11921:12:21"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "11911:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "11911:6:21"
																}
															]
														},
														{
															"nativeSrc": "11942:38:21",
															"nodeType": "YulVariableDeclaration",
															"src": "11942:38:21",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "11972:4:21",
																		"nodeType": "YulIdentifier",
																		"src": "11972:4:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11978:1:21",
																		"nodeType": "YulLiteral",
																		"src": "11978:1:21",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "11968:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "11968:3:21"
																},
																"nativeSrc": "11968:12:21",
																"nodeType": "YulFunctionCall",
																"src": "11968:12:21"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nativeSrc": "11946:18:21",
																	"nodeType": "YulTypedName",
																	"src": "11946:18:21",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "12019:51:21",
																"nodeType": "YulBlock",
																"src": "12019:51:21",
																"statements": [
																	{
																		"nativeSrc": "12033:27:21",
																		"nodeType": "YulAssignment",
																		"src": "12033:27:21",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nativeSrc": "12047:6:21",
																					"nodeType": "YulIdentifier",
																					"src": "12047:6:21"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "12055:4:21",
																					"nodeType": "YulLiteral",
																					"src": "12055:4:21",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "12043:3:21",
																				"nodeType": "YulIdentifier",
																				"src": "12043:3:21"
																			},
																			"nativeSrc": "12043:17:21",
																			"nodeType": "YulFunctionCall",
																			"src": "12043:17:21"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nativeSrc": "12033:6:21",
																				"nodeType": "YulIdentifier",
																				"src": "12033:6:21"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "11999:18:21",
																		"nodeType": "YulIdentifier",
																		"src": "11999:18:21"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "11992:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "11992:6:21"
																},
																"nativeSrc": "11992:26:21",
																"nodeType": "YulFunctionCall",
																"src": "11992:26:21"
															},
															"nativeSrc": "11989:81:21",
															"nodeType": "YulIf",
															"src": "11989:81:21"
														},
														{
															"body": {
																"nativeSrc": "12122:42:21",
																"nodeType": "YulBlock",
																"src": "12122:42:21",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x22",
																				"nativeSrc": "12136:16:21",
																				"nodeType": "YulIdentifier",
																				"src": "12136:16:21"
																			},
																			"nativeSrc": "12136:18:21",
																			"nodeType": "YulFunctionCall",
																			"src": "12136:18:21"
																		},
																		"nativeSrc": "12136:18:21",
																		"nodeType": "YulExpressionStatement",
																		"src": "12136:18:21"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "12086:18:21",
																		"nodeType": "YulIdentifier",
																		"src": "12086:18:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "12109:6:21",
																				"nodeType": "YulIdentifier",
																				"src": "12109:6:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "12117:2:21",
																				"nodeType": "YulLiteral",
																				"src": "12117:2:21",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nativeSrc": "12106:2:21",
																			"nodeType": "YulIdentifier",
																			"src": "12106:2:21"
																		},
																		"nativeSrc": "12106:14:21",
																		"nodeType": "YulFunctionCall",
																		"src": "12106:14:21"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nativeSrc": "12083:2:21",
																	"nodeType": "YulIdentifier",
																	"src": "12083:2:21"
																},
																"nativeSrc": "12083:38:21",
																"nodeType": "YulFunctionCall",
																"src": "12083:38:21"
															},
															"nativeSrc": "12080:84:21",
															"nodeType": "YulIf",
															"src": "12080:84:21"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nativeSrc": "11850:320:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "11885:4:21",
														"nodeType": "YulTypedName",
														"src": "11885:4:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "11894:6:21",
														"nodeType": "YulTypedName",
														"src": "11894:6:21",
														"type": ""
													}
												],
												"src": "11850:320:21"
											},
											{
												"body": {
													"nativeSrc": "12282:65:21",
													"nodeType": "YulBlock",
													"src": "12282:65:21",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nativeSrc": "12304:6:21",
																				"nodeType": "YulIdentifier",
																				"src": "12304:6:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "12312:1:21",
																				"nodeType": "YulLiteral",
																				"src": "12312:1:21",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "12300:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "12300:3:21"
																		},
																		"nativeSrc": "12300:14:21",
																		"nodeType": "YulFunctionCall",
																		"src": "12300:14:21"
																	},
																	{
																		"hexValue": "4549503731323a20556e696e697469616c697a6564",
																		"kind": "string",
																		"nativeSrc": "12316:23:21",
																		"nodeType": "YulLiteral",
																		"src": "12316:23:21",
																		"type": "",
																		"value": "EIP712: Uninitialized"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "12293:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "12293:6:21"
																},
																"nativeSrc": "12293:47:21",
																"nodeType": "YulFunctionCall",
																"src": "12293:47:21"
															},
															"nativeSrc": "12293:47:21",
															"nodeType": "YulExpressionStatement",
															"src": "12293:47:21"
														}
													]
												},
												"name": "store_literal_in_memory_2e5045ff73280aa8e8acd8c82710f23812497f87f7f576e2220a2ddd0d45eade",
												"nativeSrc": "12176:171:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nativeSrc": "12274:6:21",
														"nodeType": "YulTypedName",
														"src": "12274:6:21",
														"type": ""
													}
												],
												"src": "12176:171:21"
											},
											{
												"body": {
													"nativeSrc": "12499:220:21",
													"nodeType": "YulBlock",
													"src": "12499:220:21",
													"statements": [
														{
															"nativeSrc": "12509:74:21",
															"nodeType": "YulAssignment",
															"src": "12509:74:21",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "12575:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "12575:3:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "12580:2:21",
																		"nodeType": "YulLiteral",
																		"src": "12580:2:21",
																		"type": "",
																		"value": "21"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nativeSrc": "12516:58:21",
																	"nodeType": "YulIdentifier",
																	"src": "12516:58:21"
																},
																"nativeSrc": "12516:67:21",
																"nodeType": "YulFunctionCall",
																"src": "12516:67:21"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "12509:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "12509:3:21"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "12681:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "12681:3:21"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_2e5045ff73280aa8e8acd8c82710f23812497f87f7f576e2220a2ddd0d45eade",
																	"nativeSrc": "12592:88:21",
																	"nodeType": "YulIdentifier",
																	"src": "12592:88:21"
																},
																"nativeSrc": "12592:93:21",
																"nodeType": "YulFunctionCall",
																"src": "12592:93:21"
															},
															"nativeSrc": "12592:93:21",
															"nodeType": "YulExpressionStatement",
															"src": "12592:93:21"
														},
														{
															"nativeSrc": "12694:19:21",
															"nodeType": "YulAssignment",
															"src": "12694:19:21",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "12705:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "12705:3:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "12710:2:21",
																		"nodeType": "YulLiteral",
																		"src": "12710:2:21",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "12701:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "12701:3:21"
																},
																"nativeSrc": "12701:12:21",
																"nodeType": "YulFunctionCall",
																"src": "12701:12:21"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "12694:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "12694:3:21"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_2e5045ff73280aa8e8acd8c82710f23812497f87f7f576e2220a2ddd0d45eade_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "12353:366:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "12487:3:21",
														"nodeType": "YulTypedName",
														"src": "12487:3:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "12495:3:21",
														"nodeType": "YulTypedName",
														"src": "12495:3:21",
														"type": ""
													}
												],
												"src": "12353:366:21"
											},
											{
												"body": {
													"nativeSrc": "12896:248:21",
													"nodeType": "YulBlock",
													"src": "12896:248:21",
													"statements": [
														{
															"nativeSrc": "12906:26:21",
															"nodeType": "YulAssignment",
															"src": "12906:26:21",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "12918:9:21",
																		"nodeType": "YulIdentifier",
																		"src": "12918:9:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "12929:2:21",
																		"nodeType": "YulLiteral",
																		"src": "12929:2:21",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "12914:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "12914:3:21"
																},
																"nativeSrc": "12914:18:21",
																"nodeType": "YulFunctionCall",
																"src": "12914:18:21"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "12906:4:21",
																	"nodeType": "YulIdentifier",
																	"src": "12906:4:21"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "12953:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "12953:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "12964:1:21",
																				"nodeType": "YulLiteral",
																				"src": "12964:1:21",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "12949:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "12949:3:21"
																		},
																		"nativeSrc": "12949:17:21",
																		"nodeType": "YulFunctionCall",
																		"src": "12949:17:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nativeSrc": "12972:4:21",
																				"nodeType": "YulIdentifier",
																				"src": "12972:4:21"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "12978:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "12978:9:21"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "12968:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "12968:3:21"
																		},
																		"nativeSrc": "12968:20:21",
																		"nodeType": "YulFunctionCall",
																		"src": "12968:20:21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "12942:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "12942:6:21"
																},
																"nativeSrc": "12942:47:21",
																"nodeType": "YulFunctionCall",
																"src": "12942:47:21"
															},
															"nativeSrc": "12942:47:21",
															"nodeType": "YulExpressionStatement",
															"src": "12942:47:21"
														},
														{
															"nativeSrc": "12998:139:21",
															"nodeType": "YulAssignment",
															"src": "12998:139:21",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nativeSrc": "13132:4:21",
																		"nodeType": "YulIdentifier",
																		"src": "13132:4:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_2e5045ff73280aa8e8acd8c82710f23812497f87f7f576e2220a2ddd0d45eade_to_t_string_memory_ptr_fromStack",
																	"nativeSrc": "13006:124:21",
																	"nodeType": "YulIdentifier",
																	"src": "13006:124:21"
																},
																"nativeSrc": "13006:131:21",
																"nodeType": "YulFunctionCall",
																"src": "13006:131:21"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "12998:4:21",
																	"nodeType": "YulIdentifier",
																	"src": "12998:4:21"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_2e5045ff73280aa8e8acd8c82710f23812497f87f7f576e2220a2ddd0d45eade__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "12725:419:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "12876:9:21",
														"nodeType": "YulTypedName",
														"src": "12876:9:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "12891:4:21",
														"nodeType": "YulTypedName",
														"src": "12891:4:21",
														"type": ""
													}
												],
												"src": "12725:419:21"
											},
											{
												"body": {
													"nativeSrc": "13178:152:21",
													"nodeType": "YulBlock",
													"src": "13178:152:21",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "13195:1:21",
																		"nodeType": "YulLiteral",
																		"src": "13195:1:21",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "13198:77:21",
																		"nodeType": "YulLiteral",
																		"src": "13198:77:21",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "13188:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "13188:6:21"
																},
																"nativeSrc": "13188:88:21",
																"nodeType": "YulFunctionCall",
																"src": "13188:88:21"
															},
															"nativeSrc": "13188:88:21",
															"nodeType": "YulExpressionStatement",
															"src": "13188:88:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "13292:1:21",
																		"nodeType": "YulLiteral",
																		"src": "13292:1:21",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "13295:4:21",
																		"nodeType": "YulLiteral",
																		"src": "13295:4:21",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "13285:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "13285:6:21"
																},
																"nativeSrc": "13285:15:21",
																"nodeType": "YulFunctionCall",
																"src": "13285:15:21"
															},
															"nativeSrc": "13285:15:21",
															"nodeType": "YulExpressionStatement",
															"src": "13285:15:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "13316:1:21",
																		"nodeType": "YulLiteral",
																		"src": "13316:1:21",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "13319:4:21",
																		"nodeType": "YulLiteral",
																		"src": "13319:4:21",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "13309:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "13309:6:21"
																},
																"nativeSrc": "13309:15:21",
																"nodeType": "YulFunctionCall",
																"src": "13309:15:21"
															},
															"nativeSrc": "13309:15:21",
															"nodeType": "YulExpressionStatement",
															"src": "13309:15:21"
														}
													]
												},
												"name": "panic_error_0x41",
												"nativeSrc": "13150:180:21",
												"nodeType": "YulFunctionDefinition",
												"src": "13150:180:21"
											},
											{
												"body": {
													"nativeSrc": "13389:32:21",
													"nodeType": "YulBlock",
													"src": "13389:32:21",
													"statements": [
														{
															"nativeSrc": "13399:16:21",
															"nodeType": "YulAssignment",
															"src": "13399:16:21",
															"value": {
																"name": "value",
																"nativeSrc": "13410:5:21",
																"nodeType": "YulIdentifier",
																"src": "13410:5:21"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "13399:7:21",
																	"nodeType": "YulIdentifier",
																	"src": "13399:7:21"
																}
															]
														}
													]
												},
												"name": "cleanup_t_rational_1_by_1",
												"nativeSrc": "13336:85:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "13371:5:21",
														"nodeType": "YulTypedName",
														"src": "13371:5:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "13381:7:21",
														"nodeType": "YulTypedName",
														"src": "13381:7:21",
														"type": ""
													}
												],
												"src": "13336:85:21"
											},
											{
												"body": {
													"nativeSrc": "13471:57:21",
													"nodeType": "YulBlock",
													"src": "13471:57:21",
													"statements": [
														{
															"nativeSrc": "13481:41:21",
															"nodeType": "YulAssignment",
															"src": "13481:41:21",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "13496:5:21",
																		"nodeType": "YulIdentifier",
																		"src": "13496:5:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "13503:18:21",
																		"nodeType": "YulLiteral",
																		"src": "13503:18:21",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "13492:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "13492:3:21"
																},
																"nativeSrc": "13492:30:21",
																"nodeType": "YulFunctionCall",
																"src": "13492:30:21"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "13481:7:21",
																	"nodeType": "YulIdentifier",
																	"src": "13481:7:21"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint64",
												"nativeSrc": "13427:101:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "13453:5:21",
														"nodeType": "YulTypedName",
														"src": "13453:5:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "13463:7:21",
														"nodeType": "YulTypedName",
														"src": "13463:7:21",
														"type": ""
													}
												],
												"src": "13427:101:21"
											},
											{
												"body": {
													"nativeSrc": "13566:28:21",
													"nodeType": "YulBlock",
													"src": "13566:28:21",
													"statements": [
														{
															"nativeSrc": "13576:12:21",
															"nodeType": "YulAssignment",
															"src": "13576:12:21",
															"value": {
																"name": "value",
																"nativeSrc": "13583:5:21",
																"nodeType": "YulIdentifier",
																"src": "13583:5:21"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nativeSrc": "13576:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "13576:3:21"
																}
															]
														}
													]
												},
												"name": "identity",
												"nativeSrc": "13534:60:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "13552:5:21",
														"nodeType": "YulTypedName",
														"src": "13552:5:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nativeSrc": "13562:3:21",
														"nodeType": "YulTypedName",
														"src": "13562:3:21",
														"type": ""
													}
												],
												"src": "13534:60:21"
											},
											{
												"body": {
													"nativeSrc": "13667:89:21",
													"nodeType": "YulBlock",
													"src": "13667:89:21",
													"statements": [
														{
															"nativeSrc": "13677:73:21",
															"nodeType": "YulAssignment",
															"src": "13677:73:21",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "13742:5:21",
																						"nodeType": "YulIdentifier",
																						"src": "13742:5:21"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_rational_1_by_1",
																					"nativeSrc": "13716:25:21",
																					"nodeType": "YulIdentifier",
																					"src": "13716:25:21"
																				},
																				"nativeSrc": "13716:32:21",
																				"nodeType": "YulFunctionCall",
																				"src": "13716:32:21"
																			}
																		],
																		"functionName": {
																			"name": "identity",
																			"nativeSrc": "13707:8:21",
																			"nodeType": "YulIdentifier",
																			"src": "13707:8:21"
																		},
																		"nativeSrc": "13707:42:21",
																		"nodeType": "YulFunctionCall",
																		"src": "13707:42:21"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint64",
																	"nativeSrc": "13690:16:21",
																	"nodeType": "YulIdentifier",
																	"src": "13690:16:21"
																},
																"nativeSrc": "13690:60:21",
																"nodeType": "YulFunctionCall",
																"src": "13690:60:21"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nativeSrc": "13677:9:21",
																	"nodeType": "YulIdentifier",
																	"src": "13677:9:21"
																}
															]
														}
													]
												},
												"name": "convert_t_rational_1_by_1_to_t_uint64",
												"nativeSrc": "13600:156:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "13647:5:21",
														"nodeType": "YulTypedName",
														"src": "13647:5:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nativeSrc": "13657:9:21",
														"nodeType": "YulTypedName",
														"src": "13657:9:21",
														"type": ""
													}
												],
												"src": "13600:156:21"
											},
											{
												"body": {
													"nativeSrc": "13834:73:21",
													"nodeType": "YulBlock",
													"src": "13834:73:21",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "13851:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "13851:3:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "13894:5:21",
																				"nodeType": "YulIdentifier",
																				"src": "13894:5:21"
																			}
																		],
																		"functionName": {
																			"name": "convert_t_rational_1_by_1_to_t_uint64",
																			"nativeSrc": "13856:37:21",
																			"nodeType": "YulIdentifier",
																			"src": "13856:37:21"
																		},
																		"nativeSrc": "13856:44:21",
																		"nodeType": "YulFunctionCall",
																		"src": "13856:44:21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "13844:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "13844:6:21"
																},
																"nativeSrc": "13844:57:21",
																"nodeType": "YulFunctionCall",
																"src": "13844:57:21"
															},
															"nativeSrc": "13844:57:21",
															"nodeType": "YulExpressionStatement",
															"src": "13844:57:21"
														}
													]
												},
												"name": "abi_encode_t_rational_1_by_1_to_t_uint64_fromStack",
												"nativeSrc": "13762:145:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "13822:5:21",
														"nodeType": "YulTypedName",
														"src": "13822:5:21",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "13829:3:21",
														"nodeType": "YulTypedName",
														"src": "13829:3:21",
														"type": ""
													}
												],
												"src": "13762:145:21"
											},
											{
												"body": {
													"nativeSrc": "14018:131:21",
													"nodeType": "YulBlock",
													"src": "14018:131:21",
													"statements": [
														{
															"nativeSrc": "14028:26:21",
															"nodeType": "YulAssignment",
															"src": "14028:26:21",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "14040:9:21",
																		"nodeType": "YulIdentifier",
																		"src": "14040:9:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "14051:2:21",
																		"nodeType": "YulLiteral",
																		"src": "14051:2:21",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "14036:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "14036:3:21"
																},
																"nativeSrc": "14036:18:21",
																"nodeType": "YulFunctionCall",
																"src": "14036:18:21"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "14028:4:21",
																	"nodeType": "YulIdentifier",
																	"src": "14028:4:21"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "14115:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "14115:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "14128:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "14128:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "14139:1:21",
																				"nodeType": "YulLiteral",
																				"src": "14139:1:21",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "14124:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "14124:3:21"
																		},
																		"nativeSrc": "14124:17:21",
																		"nodeType": "YulFunctionCall",
																		"src": "14124:17:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_rational_1_by_1_to_t_uint64_fromStack",
																	"nativeSrc": "14064:50:21",
																	"nodeType": "YulIdentifier",
																	"src": "14064:50:21"
																},
																"nativeSrc": "14064:78:21",
																"nodeType": "YulFunctionCall",
																"src": "14064:78:21"
															},
															"nativeSrc": "14064:78:21",
															"nodeType": "YulExpressionStatement",
															"src": "14064:78:21"
														}
													]
												},
												"name": "abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed",
												"nativeSrc": "13913:236:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "13990:9:21",
														"nodeType": "YulTypedName",
														"src": "13990:9:21",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "14002:6:21",
														"nodeType": "YulTypedName",
														"src": "14002:6:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "14013:4:21",
														"nodeType": "YulTypedName",
														"src": "14013:4:21",
														"type": ""
													}
												],
												"src": "13913:236:21"
											},
											{
												"body": {
													"nativeSrc": "14393:537:21",
													"nodeType": "YulBlock",
													"src": "14393:537:21",
													"statements": [
														{
															"nativeSrc": "14403:27:21",
															"nodeType": "YulAssignment",
															"src": "14403:27:21",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "14415:9:21",
																		"nodeType": "YulIdentifier",
																		"src": "14415:9:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "14426:3:21",
																		"nodeType": "YulLiteral",
																		"src": "14426:3:21",
																		"type": "",
																		"value": "192"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "14411:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "14411:3:21"
																},
																"nativeSrc": "14411:19:21",
																"nodeType": "YulFunctionCall",
																"src": "14411:19:21"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "14403:4:21",
																	"nodeType": "YulIdentifier",
																	"src": "14403:4:21"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "14484:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "14484:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "14497:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "14497:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "14508:1:21",
																				"nodeType": "YulLiteral",
																				"src": "14508:1:21",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "14493:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "14493:3:21"
																		},
																		"nativeSrc": "14493:17:21",
																		"nodeType": "YulFunctionCall",
																		"src": "14493:17:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nativeSrc": "14440:43:21",
																	"nodeType": "YulIdentifier",
																	"src": "14440:43:21"
																},
																"nativeSrc": "14440:71:21",
																"nodeType": "YulFunctionCall",
																"src": "14440:71:21"
															},
															"nativeSrc": "14440:71:21",
															"nodeType": "YulExpressionStatement",
															"src": "14440:71:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "14565:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "14565:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "14578:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "14578:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "14589:2:21",
																				"nodeType": "YulLiteral",
																				"src": "14589:2:21",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "14574:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "14574:3:21"
																		},
																		"nativeSrc": "14574:18:21",
																		"nodeType": "YulFunctionCall",
																		"src": "14574:18:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "14521:43:21",
																	"nodeType": "YulIdentifier",
																	"src": "14521:43:21"
																},
																"nativeSrc": "14521:72:21",
																"nodeType": "YulFunctionCall",
																"src": "14521:72:21"
															},
															"nativeSrc": "14521:72:21",
															"nodeType": "YulExpressionStatement",
															"src": "14521:72:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nativeSrc": "14647:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "14647:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "14660:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "14660:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "14671:2:21",
																				"nodeType": "YulLiteral",
																				"src": "14671:2:21",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "14656:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "14656:3:21"
																		},
																		"nativeSrc": "14656:18:21",
																		"nodeType": "YulFunctionCall",
																		"src": "14656:18:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "14603:43:21",
																	"nodeType": "YulIdentifier",
																	"src": "14603:43:21"
																},
																"nativeSrc": "14603:72:21",
																"nodeType": "YulFunctionCall",
																"src": "14603:72:21"
															},
															"nativeSrc": "14603:72:21",
															"nodeType": "YulExpressionStatement",
															"src": "14603:72:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value3",
																		"nativeSrc": "14729:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "14729:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "14742:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "14742:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "14753:2:21",
																				"nodeType": "YulLiteral",
																				"src": "14753:2:21",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "14738:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "14738:3:21"
																		},
																		"nativeSrc": "14738:18:21",
																		"nodeType": "YulFunctionCall",
																		"src": "14738:18:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "14685:43:21",
																	"nodeType": "YulIdentifier",
																	"src": "14685:43:21"
																},
																"nativeSrc": "14685:72:21",
																"nodeType": "YulFunctionCall",
																"src": "14685:72:21"
															},
															"nativeSrc": "14685:72:21",
															"nodeType": "YulExpressionStatement",
															"src": "14685:72:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value4",
																		"nativeSrc": "14811:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "14811:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "14824:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "14824:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "14835:3:21",
																				"nodeType": "YulLiteral",
																				"src": "14835:3:21",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "14820:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "14820:3:21"
																		},
																		"nativeSrc": "14820:19:21",
																		"nodeType": "YulFunctionCall",
																		"src": "14820:19:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "14767:43:21",
																	"nodeType": "YulIdentifier",
																	"src": "14767:43:21"
																},
																"nativeSrc": "14767:73:21",
																"nodeType": "YulFunctionCall",
																"src": "14767:73:21"
															},
															"nativeSrc": "14767:73:21",
															"nodeType": "YulExpressionStatement",
															"src": "14767:73:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value5",
																		"nativeSrc": "14894:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "14894:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "14907:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "14907:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "14918:3:21",
																				"nodeType": "YulLiteral",
																				"src": "14918:3:21",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "14903:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "14903:3:21"
																		},
																		"nativeSrc": "14903:19:21",
																		"nodeType": "YulFunctionCall",
																		"src": "14903:19:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "14850:43:21",
																	"nodeType": "YulIdentifier",
																	"src": "14850:43:21"
																},
																"nativeSrc": "14850:73:21",
																"nodeType": "YulFunctionCall",
																"src": "14850:73:21"
															},
															"nativeSrc": "14850:73:21",
															"nodeType": "YulExpressionStatement",
															"src": "14850:73:21"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "14155:775:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "14325:9:21",
														"nodeType": "YulTypedName",
														"src": "14325:9:21",
														"type": ""
													},
													{
														"name": "value5",
														"nativeSrc": "14337:6:21",
														"nodeType": "YulTypedName",
														"src": "14337:6:21",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "14345:6:21",
														"nodeType": "YulTypedName",
														"src": "14345:6:21",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "14353:6:21",
														"nodeType": "YulTypedName",
														"src": "14353:6:21",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "14361:6:21",
														"nodeType": "YulTypedName",
														"src": "14361:6:21",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "14369:6:21",
														"nodeType": "YulTypedName",
														"src": "14369:6:21",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "14377:6:21",
														"nodeType": "YulTypedName",
														"src": "14377:6:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "14388:4:21",
														"nodeType": "YulTypedName",
														"src": "14388:4:21",
														"type": ""
													}
												],
												"src": "14155:775:21"
											},
											{
												"body": {
													"nativeSrc": "15062:206:21",
													"nodeType": "YulBlock",
													"src": "15062:206:21",
													"statements": [
														{
															"nativeSrc": "15072:26:21",
															"nodeType": "YulAssignment",
															"src": "15072:26:21",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "15084:9:21",
																		"nodeType": "YulIdentifier",
																		"src": "15084:9:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "15095:2:21",
																		"nodeType": "YulLiteral",
																		"src": "15095:2:21",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "15080:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "15080:3:21"
																},
																"nativeSrc": "15080:18:21",
																"nodeType": "YulFunctionCall",
																"src": "15080:18:21"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "15072:4:21",
																	"nodeType": "YulIdentifier",
																	"src": "15072:4:21"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "15152:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "15152:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "15165:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "15165:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "15176:1:21",
																				"nodeType": "YulLiteral",
																				"src": "15176:1:21",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "15161:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "15161:3:21"
																		},
																		"nativeSrc": "15161:17:21",
																		"nodeType": "YulFunctionCall",
																		"src": "15161:17:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "15108:43:21",
																	"nodeType": "YulIdentifier",
																	"src": "15108:43:21"
																},
																"nativeSrc": "15108:71:21",
																"nodeType": "YulFunctionCall",
																"src": "15108:71:21"
															},
															"nativeSrc": "15108:71:21",
															"nodeType": "YulExpressionStatement",
															"src": "15108:71:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "15233:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "15233:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "15246:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "15246:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "15257:2:21",
																				"nodeType": "YulLiteral",
																				"src": "15257:2:21",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "15242:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "15242:3:21"
																		},
																		"nativeSrc": "15242:18:21",
																		"nodeType": "YulFunctionCall",
																		"src": "15242:18:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "15189:43:21",
																	"nodeType": "YulIdentifier",
																	"src": "15189:43:21"
																},
																"nativeSrc": "15189:72:21",
																"nodeType": "YulFunctionCall",
																"src": "15189:72:21"
															},
															"nativeSrc": "15189:72:21",
															"nodeType": "YulExpressionStatement",
															"src": "15189:72:21"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
												"nativeSrc": "14936:332:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "15026:9:21",
														"nodeType": "YulTypedName",
														"src": "15026:9:21",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "15038:6:21",
														"nodeType": "YulTypedName",
														"src": "15038:6:21",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "15046:6:21",
														"nodeType": "YulTypedName",
														"src": "15046:6:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "15057:4:21",
														"nodeType": "YulTypedName",
														"src": "15057:4:21",
														"type": ""
													}
												],
												"src": "14936:332:21"
											},
											{
												"body": {
													"nativeSrc": "15428:288:21",
													"nodeType": "YulBlock",
													"src": "15428:288:21",
													"statements": [
														{
															"nativeSrc": "15438:26:21",
															"nodeType": "YulAssignment",
															"src": "15438:26:21",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "15450:9:21",
																		"nodeType": "YulIdentifier",
																		"src": "15450:9:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "15461:2:21",
																		"nodeType": "YulLiteral",
																		"src": "15461:2:21",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "15446:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "15446:3:21"
																},
																"nativeSrc": "15446:18:21",
																"nodeType": "YulFunctionCall",
																"src": "15446:18:21"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "15438:4:21",
																	"nodeType": "YulIdentifier",
																	"src": "15438:4:21"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "15518:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "15518:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "15531:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "15531:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "15542:1:21",
																				"nodeType": "YulLiteral",
																				"src": "15542:1:21",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "15527:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "15527:3:21"
																		},
																		"nativeSrc": "15527:17:21",
																		"nodeType": "YulFunctionCall",
																		"src": "15527:17:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "15474:43:21",
																	"nodeType": "YulIdentifier",
																	"src": "15474:43:21"
																},
																"nativeSrc": "15474:71:21",
																"nodeType": "YulFunctionCall",
																"src": "15474:71:21"
															},
															"nativeSrc": "15474:71:21",
															"nodeType": "YulExpressionStatement",
															"src": "15474:71:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "15599:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "15599:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "15612:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "15612:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "15623:2:21",
																				"nodeType": "YulLiteral",
																				"src": "15623:2:21",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "15608:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "15608:3:21"
																		},
																		"nativeSrc": "15608:18:21",
																		"nodeType": "YulFunctionCall",
																		"src": "15608:18:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "15555:43:21",
																	"nodeType": "YulIdentifier",
																	"src": "15555:43:21"
																},
																"nativeSrc": "15555:72:21",
																"nodeType": "YulFunctionCall",
																"src": "15555:72:21"
															},
															"nativeSrc": "15555:72:21",
															"nodeType": "YulExpressionStatement",
															"src": "15555:72:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nativeSrc": "15681:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "15681:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "15694:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "15694:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "15705:2:21",
																				"nodeType": "YulLiteral",
																				"src": "15705:2:21",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "15690:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "15690:3:21"
																		},
																		"nativeSrc": "15690:18:21",
																		"nodeType": "YulFunctionCall",
																		"src": "15690:18:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "15637:43:21",
																	"nodeType": "YulIdentifier",
																	"src": "15637:43:21"
																},
																"nativeSrc": "15637:72:21",
																"nodeType": "YulFunctionCall",
																"src": "15637:72:21"
															},
															"nativeSrc": "15637:72:21",
															"nodeType": "YulExpressionStatement",
															"src": "15637:72:21"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "15274:442:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "15384:9:21",
														"nodeType": "YulTypedName",
														"src": "15384:9:21",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "15396:6:21",
														"nodeType": "YulTypedName",
														"src": "15396:6:21",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "15404:6:21",
														"nodeType": "YulTypedName",
														"src": "15404:6:21",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "15412:6:21",
														"nodeType": "YulTypedName",
														"src": "15412:6:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "15423:4:21",
														"nodeType": "YulTypedName",
														"src": "15423:4:21",
														"type": ""
													}
												],
												"src": "15274:442:21"
											},
											{
												"body": {
													"nativeSrc": "15932:454:21",
													"nodeType": "YulBlock",
													"src": "15932:454:21",
													"statements": [
														{
															"nativeSrc": "15942:27:21",
															"nodeType": "YulAssignment",
															"src": "15942:27:21",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "15954:9:21",
																		"nodeType": "YulIdentifier",
																		"src": "15954:9:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "15965:3:21",
																		"nodeType": "YulLiteral",
																		"src": "15965:3:21",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "15950:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "15950:3:21"
																},
																"nativeSrc": "15950:19:21",
																"nodeType": "YulFunctionCall",
																"src": "15950:19:21"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "15942:4:21",
																	"nodeType": "YulIdentifier",
																	"src": "15942:4:21"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "16023:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "16023:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "16036:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "16036:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "16047:1:21",
																				"nodeType": "YulLiteral",
																				"src": "16047:1:21",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "16032:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "16032:3:21"
																		},
																		"nativeSrc": "16032:17:21",
																		"nodeType": "YulFunctionCall",
																		"src": "16032:17:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nativeSrc": "15979:43:21",
																	"nodeType": "YulIdentifier",
																	"src": "15979:43:21"
																},
																"nativeSrc": "15979:71:21",
																"nodeType": "YulFunctionCall",
																"src": "15979:71:21"
															},
															"nativeSrc": "15979:71:21",
															"nodeType": "YulExpressionStatement",
															"src": "15979:71:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "16104:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "16104:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "16117:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "16117:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "16128:2:21",
																				"nodeType": "YulLiteral",
																				"src": "16128:2:21",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "16113:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "16113:3:21"
																		},
																		"nativeSrc": "16113:18:21",
																		"nodeType": "YulFunctionCall",
																		"src": "16113:18:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nativeSrc": "16060:43:21",
																	"nodeType": "YulIdentifier",
																	"src": "16060:43:21"
																},
																"nativeSrc": "16060:72:21",
																"nodeType": "YulFunctionCall",
																"src": "16060:72:21"
															},
															"nativeSrc": "16060:72:21",
															"nodeType": "YulExpressionStatement",
															"src": "16060:72:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nativeSrc": "16186:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "16186:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "16199:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "16199:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "16210:2:21",
																				"nodeType": "YulLiteral",
																				"src": "16210:2:21",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "16195:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "16195:3:21"
																		},
																		"nativeSrc": "16195:18:21",
																		"nodeType": "YulFunctionCall",
																		"src": "16195:18:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nativeSrc": "16142:43:21",
																	"nodeType": "YulIdentifier",
																	"src": "16142:43:21"
																},
																"nativeSrc": "16142:72:21",
																"nodeType": "YulFunctionCall",
																"src": "16142:72:21"
															},
															"nativeSrc": "16142:72:21",
															"nodeType": "YulExpressionStatement",
															"src": "16142:72:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value3",
																		"nativeSrc": "16268:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "16268:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "16281:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "16281:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "16292:2:21",
																				"nodeType": "YulLiteral",
																				"src": "16292:2:21",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "16277:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "16277:3:21"
																		},
																		"nativeSrc": "16277:18:21",
																		"nodeType": "YulFunctionCall",
																		"src": "16277:18:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "16224:43:21",
																	"nodeType": "YulIdentifier",
																	"src": "16224:43:21"
																},
																"nativeSrc": "16224:72:21",
																"nodeType": "YulFunctionCall",
																"src": "16224:72:21"
															},
															"nativeSrc": "16224:72:21",
															"nodeType": "YulExpressionStatement",
															"src": "16224:72:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value4",
																		"nativeSrc": "16350:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "16350:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "16363:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "16363:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "16374:3:21",
																				"nodeType": "YulLiteral",
																				"src": "16374:3:21",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "16359:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "16359:3:21"
																		},
																		"nativeSrc": "16359:19:21",
																		"nodeType": "YulFunctionCall",
																		"src": "16359:19:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "16306:43:21",
																	"nodeType": "YulIdentifier",
																	"src": "16306:43:21"
																},
																"nativeSrc": "16306:73:21",
																"nodeType": "YulFunctionCall",
																"src": "16306:73:21"
															},
															"nativeSrc": "16306:73:21",
															"nodeType": "YulExpressionStatement",
															"src": "16306:73:21"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
												"nativeSrc": "15722:664:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "15872:9:21",
														"nodeType": "YulTypedName",
														"src": "15872:9:21",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "15884:6:21",
														"nodeType": "YulTypedName",
														"src": "15884:6:21",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "15892:6:21",
														"nodeType": "YulTypedName",
														"src": "15892:6:21",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "15900:6:21",
														"nodeType": "YulTypedName",
														"src": "15900:6:21",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "15908:6:21",
														"nodeType": "YulTypedName",
														"src": "15908:6:21",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "15916:6:21",
														"nodeType": "YulTypedName",
														"src": "15916:6:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "15927:4:21",
														"nodeType": "YulTypedName",
														"src": "15927:4:21",
														"type": ""
													}
												],
												"src": "15722:664:21"
											},
											{
												"body": {
													"nativeSrc": "16446:87:21",
													"nodeType": "YulBlock",
													"src": "16446:87:21",
													"statements": [
														{
															"nativeSrc": "16456:11:21",
															"nodeType": "YulAssignment",
															"src": "16456:11:21",
															"value": {
																"name": "ptr",
																"nativeSrc": "16464:3:21",
																"nodeType": "YulIdentifier",
																"src": "16464:3:21"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "16456:4:21",
																	"nodeType": "YulIdentifier",
																	"src": "16456:4:21"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "16484:1:21",
																		"nodeType": "YulLiteral",
																		"src": "16484:1:21",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "ptr",
																		"nativeSrc": "16487:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "16487:3:21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "16477:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "16477:6:21"
																},
																"nativeSrc": "16477:14:21",
																"nodeType": "YulFunctionCall",
																"src": "16477:14:21"
															},
															"nativeSrc": "16477:14:21",
															"nodeType": "YulExpressionStatement",
															"src": "16477:14:21"
														},
														{
															"nativeSrc": "16500:26:21",
															"nodeType": "YulAssignment",
															"src": "16500:26:21",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "16518:1:21",
																		"nodeType": "YulLiteral",
																		"src": "16518:1:21",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "16521:4:21",
																		"nodeType": "YulLiteral",
																		"src": "16521:4:21",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nativeSrc": "16508:9:21",
																	"nodeType": "YulIdentifier",
																	"src": "16508:9:21"
																},
																"nativeSrc": "16508:18:21",
																"nodeType": "YulFunctionCall",
																"src": "16508:18:21"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "16500:4:21",
																	"nodeType": "YulIdentifier",
																	"src": "16500:4:21"
																}
															]
														}
													]
												},
												"name": "array_dataslot_t_string_storage",
												"nativeSrc": "16392:141:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nativeSrc": "16433:3:21",
														"nodeType": "YulTypedName",
														"src": "16433:3:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nativeSrc": "16441:4:21",
														"nodeType": "YulTypedName",
														"src": "16441:4:21",
														"type": ""
													}
												],
												"src": "16392:141:21"
											},
											{
												"body": {
													"nativeSrc": "16583:49:21",
													"nodeType": "YulBlock",
													"src": "16583:49:21",
													"statements": [
														{
															"nativeSrc": "16593:33:21",
															"nodeType": "YulAssignment",
															"src": "16593:33:21",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "16611:5:21",
																				"nodeType": "YulIdentifier",
																				"src": "16611:5:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "16618:2:21",
																				"nodeType": "YulLiteral",
																				"src": "16618:2:21",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "16607:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "16607:3:21"
																		},
																		"nativeSrc": "16607:14:21",
																		"nodeType": "YulFunctionCall",
																		"src": "16607:14:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "16623:2:21",
																		"nodeType": "YulLiteral",
																		"src": "16623:2:21",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nativeSrc": "16603:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "16603:3:21"
																},
																"nativeSrc": "16603:23:21",
																"nodeType": "YulFunctionCall",
																"src": "16603:23:21"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "16593:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "16593:6:21"
																}
															]
														}
													]
												},
												"name": "divide_by_32_ceil",
												"nativeSrc": "16539:93:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "16566:5:21",
														"nodeType": "YulTypedName",
														"src": "16566:5:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "16576:6:21",
														"nodeType": "YulTypedName",
														"src": "16576:6:21",
														"type": ""
													}
												],
												"src": "16539:93:21"
											},
											{
												"body": {
													"nativeSrc": "16691:54:21",
													"nodeType": "YulBlock",
													"src": "16691:54:21",
													"statements": [
														{
															"nativeSrc": "16701:37:21",
															"nodeType": "YulAssignment",
															"src": "16701:37:21",
															"value": {
																"arguments": [
																	{
																		"name": "bits",
																		"nativeSrc": "16726:4:21",
																		"nodeType": "YulIdentifier",
																		"src": "16726:4:21"
																	},
																	{
																		"name": "value",
																		"nativeSrc": "16732:5:21",
																		"nodeType": "YulIdentifier",
																		"src": "16732:5:21"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nativeSrc": "16722:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "16722:3:21"
																},
																"nativeSrc": "16722:16:21",
																"nodeType": "YulFunctionCall",
																"src": "16722:16:21"
															},
															"variableNames": [
																{
																	"name": "newValue",
																	"nativeSrc": "16701:8:21",
																	"nodeType": "YulIdentifier",
																	"src": "16701:8:21"
																}
															]
														}
													]
												},
												"name": "shift_left_dynamic",
												"nativeSrc": "16638:107:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "bits",
														"nativeSrc": "16666:4:21",
														"nodeType": "YulTypedName",
														"src": "16666:4:21",
														"type": ""
													},
													{
														"name": "value",
														"nativeSrc": "16672:5:21",
														"nodeType": "YulTypedName",
														"src": "16672:5:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "newValue",
														"nativeSrc": "16682:8:21",
														"nodeType": "YulTypedName",
														"src": "16682:8:21",
														"type": ""
													}
												],
												"src": "16638:107:21"
											},
											{
												"body": {
													"nativeSrc": "16827:317:21",
													"nodeType": "YulBlock",
													"src": "16827:317:21",
													"statements": [
														{
															"nativeSrc": "16837:35:21",
															"nodeType": "YulVariableDeclaration",
															"src": "16837:35:21",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBytes",
																		"nativeSrc": "16858:10:21",
																		"nodeType": "YulIdentifier",
																		"src": "16858:10:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "16870:1:21",
																		"nodeType": "YulLiteral",
																		"src": "16870:1:21",
																		"type": "",
																		"value": "8"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nativeSrc": "16854:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "16854:3:21"
																},
																"nativeSrc": "16854:18:21",
																"nodeType": "YulFunctionCall",
																"src": "16854:18:21"
															},
															"variables": [
																{
																	"name": "shiftBits",
																	"nativeSrc": "16841:9:21",
																	"nodeType": "YulTypedName",
																	"src": "16841:9:21",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "16881:109:21",
															"nodeType": "YulVariableDeclaration",
															"src": "16881:109:21",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBits",
																		"nativeSrc": "16912:9:21",
																		"nodeType": "YulIdentifier",
																		"src": "16912:9:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "16923:66:21",
																		"nodeType": "YulLiteral",
																		"src": "16923:66:21",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "shift_left_dynamic",
																	"nativeSrc": "16893:18:21",
																	"nodeType": "YulIdentifier",
																	"src": "16893:18:21"
																},
																"nativeSrc": "16893:97:21",
																"nodeType": "YulFunctionCall",
																"src": "16893:97:21"
															},
															"variables": [
																{
																	"name": "mask",
																	"nativeSrc": "16885:4:21",
																	"nodeType": "YulTypedName",
																	"src": "16885:4:21",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "16999:51:21",
															"nodeType": "YulAssignment",
															"src": "16999:51:21",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBits",
																		"nativeSrc": "17030:9:21",
																		"nodeType": "YulIdentifier",
																		"src": "17030:9:21"
																	},
																	{
																		"name": "toInsert",
																		"nativeSrc": "17041:8:21",
																		"nodeType": "YulIdentifier",
																		"src": "17041:8:21"
																	}
																],
																"functionName": {
																	"name": "shift_left_dynamic",
																	"nativeSrc": "17011:18:21",
																	"nodeType": "YulIdentifier",
																	"src": "17011:18:21"
																},
																"nativeSrc": "17011:39:21",
																"nodeType": "YulFunctionCall",
																"src": "17011:39:21"
															},
															"variableNames": [
																{
																	"name": "toInsert",
																	"nativeSrc": "16999:8:21",
																	"nodeType": "YulIdentifier",
																	"src": "16999:8:21"
																}
															]
														},
														{
															"nativeSrc": "17059:30:21",
															"nodeType": "YulAssignment",
															"src": "17059:30:21",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "17072:5:21",
																		"nodeType": "YulIdentifier",
																		"src": "17072:5:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "mask",
																				"nativeSrc": "17083:4:21",
																				"nodeType": "YulIdentifier",
																				"src": "17083:4:21"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "17079:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "17079:3:21"
																		},
																		"nativeSrc": "17079:9:21",
																		"nodeType": "YulFunctionCall",
																		"src": "17079:9:21"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "17068:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "17068:3:21"
																},
																"nativeSrc": "17068:21:21",
																"nodeType": "YulFunctionCall",
																"src": "17068:21:21"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "17059:5:21",
																	"nodeType": "YulIdentifier",
																	"src": "17059:5:21"
																}
															]
														},
														{
															"nativeSrc": "17098:40:21",
															"nodeType": "YulAssignment",
															"src": "17098:40:21",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "17111:5:21",
																		"nodeType": "YulIdentifier",
																		"src": "17111:5:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "toInsert",
																				"nativeSrc": "17122:8:21",
																				"nodeType": "YulIdentifier",
																				"src": "17122:8:21"
																			},
																			{
																				"name": "mask",
																				"nativeSrc": "17132:4:21",
																				"nodeType": "YulIdentifier",
																				"src": "17132:4:21"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "17118:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "17118:3:21"
																		},
																		"nativeSrc": "17118:19:21",
																		"nodeType": "YulFunctionCall",
																		"src": "17118:19:21"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "17108:2:21",
																	"nodeType": "YulIdentifier",
																	"src": "17108:2:21"
																},
																"nativeSrc": "17108:30:21",
																"nodeType": "YulFunctionCall",
																"src": "17108:30:21"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "17098:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "17098:6:21"
																}
															]
														}
													]
												},
												"name": "update_byte_slice_dynamic32",
												"nativeSrc": "16751:393:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "16788:5:21",
														"nodeType": "YulTypedName",
														"src": "16788:5:21",
														"type": ""
													},
													{
														"name": "shiftBytes",
														"nativeSrc": "16795:10:21",
														"nodeType": "YulTypedName",
														"src": "16795:10:21",
														"type": ""
													},
													{
														"name": "toInsert",
														"nativeSrc": "16807:8:21",
														"nodeType": "YulTypedName",
														"src": "16807:8:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "16820:6:21",
														"nodeType": "YulTypedName",
														"src": "16820:6:21",
														"type": ""
													}
												],
												"src": "16751:393:21"
											},
											{
												"body": {
													"nativeSrc": "17210:82:21",
													"nodeType": "YulBlock",
													"src": "17210:82:21",
													"statements": [
														{
															"nativeSrc": "17220:66:21",
															"nodeType": "YulAssignment",
															"src": "17220:66:21",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "17278:5:21",
																						"nodeType": "YulIdentifier",
																						"src": "17278:5:21"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nativeSrc": "17260:17:21",
																					"nodeType": "YulIdentifier",
																					"src": "17260:17:21"
																				},
																				"nativeSrc": "17260:24:21",
																				"nodeType": "YulFunctionCall",
																				"src": "17260:24:21"
																			}
																		],
																		"functionName": {
																			"name": "identity",
																			"nativeSrc": "17251:8:21",
																			"nodeType": "YulIdentifier",
																			"src": "17251:8:21"
																		},
																		"nativeSrc": "17251:34:21",
																		"nodeType": "YulFunctionCall",
																		"src": "17251:34:21"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "17233:17:21",
																	"nodeType": "YulIdentifier",
																	"src": "17233:17:21"
																},
																"nativeSrc": "17233:53:21",
																"nodeType": "YulFunctionCall",
																"src": "17233:53:21"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nativeSrc": "17220:9:21",
																	"nodeType": "YulIdentifier",
																	"src": "17220:9:21"
																}
															]
														}
													]
												},
												"name": "convert_t_uint256_to_t_uint256",
												"nativeSrc": "17150:142:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "17190:5:21",
														"nodeType": "YulTypedName",
														"src": "17190:5:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nativeSrc": "17200:9:21",
														"nodeType": "YulTypedName",
														"src": "17200:9:21",
														"type": ""
													}
												],
												"src": "17150:142:21"
											},
											{
												"body": {
													"nativeSrc": "17345:28:21",
													"nodeType": "YulBlock",
													"src": "17345:28:21",
													"statements": [
														{
															"nativeSrc": "17355:12:21",
															"nodeType": "YulAssignment",
															"src": "17355:12:21",
															"value": {
																"name": "value",
																"nativeSrc": "17362:5:21",
																"nodeType": "YulIdentifier",
																"src": "17362:5:21"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nativeSrc": "17355:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "17355:3:21"
																}
															]
														}
													]
												},
												"name": "prepare_store_t_uint256",
												"nativeSrc": "17298:75:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "17331:5:21",
														"nodeType": "YulTypedName",
														"src": "17331:5:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nativeSrc": "17341:3:21",
														"nodeType": "YulTypedName",
														"src": "17341:3:21",
														"type": ""
													}
												],
												"src": "17298:75:21"
											},
											{
												"body": {
													"nativeSrc": "17455:193:21",
													"nodeType": "YulBlock",
													"src": "17455:193:21",
													"statements": [
														{
															"nativeSrc": "17465:63:21",
															"nodeType": "YulVariableDeclaration",
															"src": "17465:63:21",
															"value": {
																"arguments": [
																	{
																		"name": "value_0",
																		"nativeSrc": "17520:7:21",
																		"nodeType": "YulIdentifier",
																		"src": "17520:7:21"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint256_to_t_uint256",
																	"nativeSrc": "17489:30:21",
																	"nodeType": "YulIdentifier",
																	"src": "17489:30:21"
																},
																"nativeSrc": "17489:39:21",
																"nodeType": "YulFunctionCall",
																"src": "17489:39:21"
															},
															"variables": [
																{
																	"name": "convertedValue_0",
																	"nativeSrc": "17469:16:21",
																	"nodeType": "YulTypedName",
																	"src": "17469:16:21",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "17544:4:21",
																		"nodeType": "YulIdentifier",
																		"src": "17544:4:21"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "slot",
																						"nativeSrc": "17584:4:21",
																						"nodeType": "YulIdentifier",
																						"src": "17584:4:21"
																					}
																				],
																				"functionName": {
																					"name": "sload",
																					"nativeSrc": "17578:5:21",
																					"nodeType": "YulIdentifier",
																					"src": "17578:5:21"
																				},
																				"nativeSrc": "17578:11:21",
																				"nodeType": "YulFunctionCall",
																				"src": "17578:11:21"
																			},
																			{
																				"name": "offset",
																				"nativeSrc": "17591:6:21",
																				"nodeType": "YulIdentifier",
																				"src": "17591:6:21"
																			},
																			{
																				"arguments": [
																					{
																						"name": "convertedValue_0",
																						"nativeSrc": "17623:16:21",
																						"nodeType": "YulIdentifier",
																						"src": "17623:16:21"
																					}
																				],
																				"functionName": {
																					"name": "prepare_store_t_uint256",
																					"nativeSrc": "17599:23:21",
																					"nodeType": "YulIdentifier",
																					"src": "17599:23:21"
																				},
																				"nativeSrc": "17599:41:21",
																				"nodeType": "YulFunctionCall",
																				"src": "17599:41:21"
																			}
																		],
																		"functionName": {
																			"name": "update_byte_slice_dynamic32",
																			"nativeSrc": "17550:27:21",
																			"nodeType": "YulIdentifier",
																			"src": "17550:27:21"
																		},
																		"nativeSrc": "17550:91:21",
																		"nodeType": "YulFunctionCall",
																		"src": "17550:91:21"
																	}
																],
																"functionName": {
																	"name": "sstore",
																	"nativeSrc": "17537:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "17537:6:21"
																},
																"nativeSrc": "17537:105:21",
																"nodeType": "YulFunctionCall",
																"src": "17537:105:21"
															},
															"nativeSrc": "17537:105:21",
															"nodeType": "YulExpressionStatement",
															"src": "17537:105:21"
														}
													]
												},
												"name": "update_storage_value_t_uint256_to_t_uint256",
												"nativeSrc": "17379:269:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nativeSrc": "17432:4:21",
														"nodeType": "YulTypedName",
														"src": "17432:4:21",
														"type": ""
													},
													{
														"name": "offset",
														"nativeSrc": "17438:6:21",
														"nodeType": "YulTypedName",
														"src": "17438:6:21",
														"type": ""
													},
													{
														"name": "value_0",
														"nativeSrc": "17446:7:21",
														"nodeType": "YulTypedName",
														"src": "17446:7:21",
														"type": ""
													}
												],
												"src": "17379:269:21"
											},
											{
												"body": {
													"nativeSrc": "17703:24:21",
													"nodeType": "YulBlock",
													"src": "17703:24:21",
													"statements": [
														{
															"nativeSrc": "17713:8:21",
															"nodeType": "YulAssignment",
															"src": "17713:8:21",
															"value": {
																"kind": "number",
																"nativeSrc": "17720:1:21",
																"nodeType": "YulLiteral",
																"src": "17720:1:21",
																"type": "",
																"value": "0"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nativeSrc": "17713:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "17713:3:21"
																}
															]
														}
													]
												},
												"name": "zero_value_for_split_t_uint256",
												"nativeSrc": "17654:73:21",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "ret",
														"nativeSrc": "17699:3:21",
														"nodeType": "YulTypedName",
														"src": "17699:3:21",
														"type": ""
													}
												],
												"src": "17654:73:21"
											},
											{
												"body": {
													"nativeSrc": "17786:136:21",
													"nodeType": "YulBlock",
													"src": "17786:136:21",
													"statements": [
														{
															"nativeSrc": "17796:46:21",
															"nodeType": "YulVariableDeclaration",
															"src": "17796:46:21",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "zero_value_for_split_t_uint256",
																	"nativeSrc": "17810:30:21",
																	"nodeType": "YulIdentifier",
																	"src": "17810:30:21"
																},
																"nativeSrc": "17810:32:21",
																"nodeType": "YulFunctionCall",
																"src": "17810:32:21"
															},
															"variables": [
																{
																	"name": "zero_0",
																	"nativeSrc": "17800:6:21",
																	"nodeType": "YulTypedName",
																	"src": "17800:6:21",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "17895:4:21",
																		"nodeType": "YulIdentifier",
																		"src": "17895:4:21"
																	},
																	{
																		"name": "offset",
																		"nativeSrc": "17901:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "17901:6:21"
																	},
																	{
																		"name": "zero_0",
																		"nativeSrc": "17909:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "17909:6:21"
																	}
																],
																"functionName": {
																	"name": "update_storage_value_t_uint256_to_t_uint256",
																	"nativeSrc": "17851:43:21",
																	"nodeType": "YulIdentifier",
																	"src": "17851:43:21"
																},
																"nativeSrc": "17851:65:21",
																"nodeType": "YulFunctionCall",
																"src": "17851:65:21"
															},
															"nativeSrc": "17851:65:21",
															"nodeType": "YulExpressionStatement",
															"src": "17851:65:21"
														}
													]
												},
												"name": "storage_set_to_zero_t_uint256",
												"nativeSrc": "17733:189:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nativeSrc": "17772:4:21",
														"nodeType": "YulTypedName",
														"src": "17772:4:21",
														"type": ""
													},
													{
														"name": "offset",
														"nativeSrc": "17778:6:21",
														"nodeType": "YulTypedName",
														"src": "17778:6:21",
														"type": ""
													}
												],
												"src": "17733:189:21"
											},
											{
												"body": {
													"nativeSrc": "17978:136:21",
													"nodeType": "YulBlock",
													"src": "17978:136:21",
													"statements": [
														{
															"body": {
																"nativeSrc": "18045:63:21",
																"nodeType": "YulBlock",
																"src": "18045:63:21",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "start",
																					"nativeSrc": "18089:5:21",
																					"nodeType": "YulIdentifier",
																					"src": "18089:5:21"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "18096:1:21",
																					"nodeType": "YulLiteral",
																					"src": "18096:1:21",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "storage_set_to_zero_t_uint256",
																				"nativeSrc": "18059:29:21",
																				"nodeType": "YulIdentifier",
																				"src": "18059:29:21"
																			},
																			"nativeSrc": "18059:39:21",
																			"nodeType": "YulFunctionCall",
																			"src": "18059:39:21"
																		},
																		"nativeSrc": "18059:39:21",
																		"nodeType": "YulExpressionStatement",
																		"src": "18059:39:21"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "start",
																		"nativeSrc": "17998:5:21",
																		"nodeType": "YulIdentifier",
																		"src": "17998:5:21"
																	},
																	{
																		"name": "end",
																		"nativeSrc": "18005:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "18005:3:21"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "17995:2:21",
																	"nodeType": "YulIdentifier",
																	"src": "17995:2:21"
																},
																"nativeSrc": "17995:14:21",
																"nodeType": "YulFunctionCall",
																"src": "17995:14:21"
															},
															"nativeSrc": "17988:120:21",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "18010:26:21",
																"nodeType": "YulBlock",
																"src": "18010:26:21",
																"statements": [
																	{
																		"nativeSrc": "18012:22:21",
																		"nodeType": "YulAssignment",
																		"src": "18012:22:21",
																		"value": {
																			"arguments": [
																				{
																					"name": "start",
																					"nativeSrc": "18025:5:21",
																					"nodeType": "YulIdentifier",
																					"src": "18025:5:21"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "18032:1:21",
																					"nodeType": "YulLiteral",
																					"src": "18032:1:21",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "18021:3:21",
																				"nodeType": "YulIdentifier",
																				"src": "18021:3:21"
																			},
																			"nativeSrc": "18021:13:21",
																			"nodeType": "YulFunctionCall",
																			"src": "18021:13:21"
																		},
																		"variableNames": [
																			{
																				"name": "start",
																				"nativeSrc": "18012:5:21",
																				"nodeType": "YulIdentifier",
																				"src": "18012:5:21"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nativeSrc": "17992:2:21",
																"nodeType": "YulBlock",
																"src": "17992:2:21",
																"statements": []
															},
															"src": "17988:120:21"
														}
													]
												},
												"name": "clear_storage_range_t_bytes1",
												"nativeSrc": "17928:186:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "start",
														"nativeSrc": "17966:5:21",
														"nodeType": "YulTypedName",
														"src": "17966:5:21",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "17973:3:21",
														"nodeType": "YulTypedName",
														"src": "17973:3:21",
														"type": ""
													}
												],
												"src": "17928:186:21"
											},
											{
												"body": {
													"nativeSrc": "18199:464:21",
													"nodeType": "YulBlock",
													"src": "18199:464:21",
													"statements": [
														{
															"body": {
																"nativeSrc": "18225:431:21",
																"nodeType": "YulBlock",
																"src": "18225:431:21",
																"statements": [
																	{
																		"nativeSrc": "18239:54:21",
																		"nodeType": "YulVariableDeclaration",
																		"src": "18239:54:21",
																		"value": {
																			"arguments": [
																				{
																					"name": "array",
																					"nativeSrc": "18287:5:21",
																					"nodeType": "YulIdentifier",
																					"src": "18287:5:21"
																				}
																			],
																			"functionName": {
																				"name": "array_dataslot_t_string_storage",
																				"nativeSrc": "18255:31:21",
																				"nodeType": "YulIdentifier",
																				"src": "18255:31:21"
																			},
																			"nativeSrc": "18255:38:21",
																			"nodeType": "YulFunctionCall",
																			"src": "18255:38:21"
																		},
																		"variables": [
																			{
																				"name": "dataArea",
																				"nativeSrc": "18243:8:21",
																				"nodeType": "YulTypedName",
																				"src": "18243:8:21",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nativeSrc": "18306:63:21",
																		"nodeType": "YulVariableDeclaration",
																		"src": "18306:63:21",
																		"value": {
																			"arguments": [
																				{
																					"name": "dataArea",
																					"nativeSrc": "18329:8:21",
																					"nodeType": "YulIdentifier",
																					"src": "18329:8:21"
																				},
																				{
																					"arguments": [
																						{
																							"name": "startIndex",
																							"nativeSrc": "18357:10:21",
																							"nodeType": "YulIdentifier",
																							"src": "18357:10:21"
																						}
																					],
																					"functionName": {
																						"name": "divide_by_32_ceil",
																						"nativeSrc": "18339:17:21",
																						"nodeType": "YulIdentifier",
																						"src": "18339:17:21"
																					},
																					"nativeSrc": "18339:29:21",
																					"nodeType": "YulFunctionCall",
																					"src": "18339:29:21"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "18325:3:21",
																				"nodeType": "YulIdentifier",
																				"src": "18325:3:21"
																			},
																			"nativeSrc": "18325:44:21",
																			"nodeType": "YulFunctionCall",
																			"src": "18325:44:21"
																		},
																		"variables": [
																			{
																				"name": "deleteStart",
																				"nativeSrc": "18310:11:21",
																				"nodeType": "YulTypedName",
																				"src": "18310:11:21",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nativeSrc": "18526:27:21",
																			"nodeType": "YulBlock",
																			"src": "18526:27:21",
																			"statements": [
																				{
																					"nativeSrc": "18528:23:21",
																					"nodeType": "YulAssignment",
																					"src": "18528:23:21",
																					"value": {
																						"name": "dataArea",
																						"nativeSrc": "18543:8:21",
																						"nodeType": "YulIdentifier",
																						"src": "18543:8:21"
																					},
																					"variableNames": [
																						{
																							"name": "deleteStart",
																							"nativeSrc": "18528:11:21",
																							"nodeType": "YulIdentifier",
																							"src": "18528:11:21"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "startIndex",
																					"nativeSrc": "18510:10:21",
																					"nodeType": "YulIdentifier",
																					"src": "18510:10:21"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "18522:2:21",
																					"nodeType": "YulLiteral",
																					"src": "18522:2:21",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nativeSrc": "18507:2:21",
																				"nodeType": "YulIdentifier",
																				"src": "18507:2:21"
																			},
																			"nativeSrc": "18507:18:21",
																			"nodeType": "YulFunctionCall",
																			"src": "18507:18:21"
																		},
																		"nativeSrc": "18504:49:21",
																		"nodeType": "YulIf",
																		"src": "18504:49:21"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "deleteStart",
																					"nativeSrc": "18595:11:21",
																					"nodeType": "YulIdentifier",
																					"src": "18595:11:21"
																				},
																				{
																					"arguments": [
																						{
																							"name": "dataArea",
																							"nativeSrc": "18612:8:21",
																							"nodeType": "YulIdentifier",
																							"src": "18612:8:21"
																						},
																						{
																							"arguments": [
																								{
																									"name": "len",
																									"nativeSrc": "18640:3:21",
																									"nodeType": "YulIdentifier",
																									"src": "18640:3:21"
																								}
																							],
																							"functionName": {
																								"name": "divide_by_32_ceil",
																								"nativeSrc": "18622:17:21",
																								"nodeType": "YulIdentifier",
																								"src": "18622:17:21"
																							},
																							"nativeSrc": "18622:22:21",
																							"nodeType": "YulFunctionCall",
																							"src": "18622:22:21"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "18608:3:21",
																						"nodeType": "YulIdentifier",
																						"src": "18608:3:21"
																					},
																					"nativeSrc": "18608:37:21",
																					"nodeType": "YulFunctionCall",
																					"src": "18608:37:21"
																				}
																			],
																			"functionName": {
																				"name": "clear_storage_range_t_bytes1",
																				"nativeSrc": "18566:28:21",
																				"nodeType": "YulIdentifier",
																				"src": "18566:28:21"
																			},
																			"nativeSrc": "18566:80:21",
																			"nodeType": "YulFunctionCall",
																			"src": "18566:80:21"
																		},
																		"nativeSrc": "18566:80:21",
																		"nodeType": "YulExpressionStatement",
																		"src": "18566:80:21"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "len",
																		"nativeSrc": "18216:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "18216:3:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "18221:2:21",
																		"nodeType": "YulLiteral",
																		"src": "18221:2:21",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "18213:2:21",
																	"nodeType": "YulIdentifier",
																	"src": "18213:2:21"
																},
																"nativeSrc": "18213:11:21",
																"nodeType": "YulFunctionCall",
																"src": "18213:11:21"
															},
															"nativeSrc": "18210:446:21",
															"nodeType": "YulIf",
															"src": "18210:446:21"
														}
													]
												},
												"name": "clean_up_bytearray_end_slots_t_string_storage",
												"nativeSrc": "18120:543:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nativeSrc": "18175:5:21",
														"nodeType": "YulTypedName",
														"src": "18175:5:21",
														"type": ""
													},
													{
														"name": "len",
														"nativeSrc": "18182:3:21",
														"nodeType": "YulTypedName",
														"src": "18182:3:21",
														"type": ""
													},
													{
														"name": "startIndex",
														"nativeSrc": "18187:10:21",
														"nodeType": "YulTypedName",
														"src": "18187:10:21",
														"type": ""
													}
												],
												"src": "18120:543:21"
											},
											{
												"body": {
													"nativeSrc": "18732:54:21",
													"nodeType": "YulBlock",
													"src": "18732:54:21",
													"statements": [
														{
															"nativeSrc": "18742:37:21",
															"nodeType": "YulAssignment",
															"src": "18742:37:21",
															"value": {
																"arguments": [
																	{
																		"name": "bits",
																		"nativeSrc": "18767:4:21",
																		"nodeType": "YulIdentifier",
																		"src": "18767:4:21"
																	},
																	{
																		"name": "value",
																		"nativeSrc": "18773:5:21",
																		"nodeType": "YulIdentifier",
																		"src": "18773:5:21"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nativeSrc": "18763:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "18763:3:21"
																},
																"nativeSrc": "18763:16:21",
																"nodeType": "YulFunctionCall",
																"src": "18763:16:21"
															},
															"variableNames": [
																{
																	"name": "newValue",
																	"nativeSrc": "18742:8:21",
																	"nodeType": "YulIdentifier",
																	"src": "18742:8:21"
																}
															]
														}
													]
												},
												"name": "shift_right_unsigned_dynamic",
												"nativeSrc": "18669:117:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "bits",
														"nativeSrc": "18707:4:21",
														"nodeType": "YulTypedName",
														"src": "18707:4:21",
														"type": ""
													},
													{
														"name": "value",
														"nativeSrc": "18713:5:21",
														"nodeType": "YulTypedName",
														"src": "18713:5:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "newValue",
														"nativeSrc": "18723:8:21",
														"nodeType": "YulTypedName",
														"src": "18723:8:21",
														"type": ""
													}
												],
												"src": "18669:117:21"
											},
											{
												"body": {
													"nativeSrc": "18843:118:21",
													"nodeType": "YulBlock",
													"src": "18843:118:21",
													"statements": [
														{
															"nativeSrc": "18853:68:21",
															"nodeType": "YulVariableDeclaration",
															"src": "18853:68:21",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "18902:1:21",
																						"nodeType": "YulLiteral",
																						"src": "18902:1:21",
																						"type": "",
																						"value": "8"
																					},
																					{
																						"name": "bytes",
																						"nativeSrc": "18905:5:21",
																						"nodeType": "YulIdentifier",
																						"src": "18905:5:21"
																					}
																				],
																				"functionName": {
																					"name": "mul",
																					"nativeSrc": "18898:3:21",
																					"nodeType": "YulIdentifier",
																					"src": "18898:3:21"
																				},
																				"nativeSrc": "18898:13:21",
																				"nodeType": "YulFunctionCall",
																				"src": "18898:13:21"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "18917:1:21",
																						"nodeType": "YulLiteral",
																						"src": "18917:1:21",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "18913:3:21",
																					"nodeType": "YulIdentifier",
																					"src": "18913:3:21"
																				},
																				"nativeSrc": "18913:6:21",
																				"nodeType": "YulFunctionCall",
																				"src": "18913:6:21"
																			}
																		],
																		"functionName": {
																			"name": "shift_right_unsigned_dynamic",
																			"nativeSrc": "18869:28:21",
																			"nodeType": "YulIdentifier",
																			"src": "18869:28:21"
																		},
																		"nativeSrc": "18869:51:21",
																		"nodeType": "YulFunctionCall",
																		"src": "18869:51:21"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nativeSrc": "18865:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "18865:3:21"
																},
																"nativeSrc": "18865:56:21",
																"nodeType": "YulFunctionCall",
																"src": "18865:56:21"
															},
															"variables": [
																{
																	"name": "mask",
																	"nativeSrc": "18857:4:21",
																	"nodeType": "YulTypedName",
																	"src": "18857:4:21",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "18930:25:21",
															"nodeType": "YulAssignment",
															"src": "18930:25:21",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "18944:4:21",
																		"nodeType": "YulIdentifier",
																		"src": "18944:4:21"
																	},
																	{
																		"name": "mask",
																		"nativeSrc": "18950:4:21",
																		"nodeType": "YulIdentifier",
																		"src": "18950:4:21"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "18940:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "18940:3:21"
																},
																"nativeSrc": "18940:15:21",
																"nodeType": "YulFunctionCall",
																"src": "18940:15:21"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "18930:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "18930:6:21"
																}
															]
														}
													]
												},
												"name": "mask_bytes_dynamic",
												"nativeSrc": "18792:169:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "18820:4:21",
														"nodeType": "YulTypedName",
														"src": "18820:4:21",
														"type": ""
													},
													{
														"name": "bytes",
														"nativeSrc": "18826:5:21",
														"nodeType": "YulTypedName",
														"src": "18826:5:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "18836:6:21",
														"nodeType": "YulTypedName",
														"src": "18836:6:21",
														"type": ""
													}
												],
												"src": "18792:169:21"
											},
											{
												"body": {
													"nativeSrc": "19047:214:21",
													"nodeType": "YulBlock",
													"src": "19047:214:21",
													"statements": [
														{
															"nativeSrc": "19180:37:21",
															"nodeType": "YulAssignment",
															"src": "19180:37:21",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "19207:4:21",
																		"nodeType": "YulIdentifier",
																		"src": "19207:4:21"
																	},
																	{
																		"name": "len",
																		"nativeSrc": "19213:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "19213:3:21"
																	}
																],
																"functionName": {
																	"name": "mask_bytes_dynamic",
																	"nativeSrc": "19188:18:21",
																	"nodeType": "YulIdentifier",
																	"src": "19188:18:21"
																},
																"nativeSrc": "19188:29:21",
																"nodeType": "YulFunctionCall",
																"src": "19188:29:21"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "19180:4:21",
																	"nodeType": "YulIdentifier",
																	"src": "19180:4:21"
																}
															]
														},
														{
															"nativeSrc": "19226:29:21",
															"nodeType": "YulAssignment",
															"src": "19226:29:21",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "19237:4:21",
																		"nodeType": "YulIdentifier",
																		"src": "19237:4:21"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "19247:1:21",
																				"nodeType": "YulLiteral",
																				"src": "19247:1:21",
																				"type": "",
																				"value": "2"
																			},
																			{
																				"name": "len",
																				"nativeSrc": "19250:3:21",
																				"nodeType": "YulIdentifier",
																				"src": "19250:3:21"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nativeSrc": "19243:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "19243:3:21"
																		},
																		"nativeSrc": "19243:11:21",
																		"nodeType": "YulFunctionCall",
																		"src": "19243:11:21"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "19234:2:21",
																	"nodeType": "YulIdentifier",
																	"src": "19234:2:21"
																},
																"nativeSrc": "19234:21:21",
																"nodeType": "YulFunctionCall",
																"src": "19234:21:21"
															},
															"variableNames": [
																{
																	"name": "used",
																	"nativeSrc": "19226:4:21",
																	"nodeType": "YulIdentifier",
																	"src": "19226:4:21"
																}
															]
														}
													]
												},
												"name": "extract_used_part_and_set_length_of_short_byte_array",
												"nativeSrc": "18966:295:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "19028:4:21",
														"nodeType": "YulTypedName",
														"src": "19028:4:21",
														"type": ""
													},
													{
														"name": "len",
														"nativeSrc": "19034:3:21",
														"nodeType": "YulTypedName",
														"src": "19034:3:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "used",
														"nativeSrc": "19042:4:21",
														"nodeType": "YulTypedName",
														"src": "19042:4:21",
														"type": ""
													}
												],
												"src": "18966:295:21"
											},
											{
												"body": {
													"nativeSrc": "19358:1303:21",
													"nodeType": "YulBlock",
													"src": "19358:1303:21",
													"statements": [
														{
															"nativeSrc": "19369:51:21",
															"nodeType": "YulVariableDeclaration",
															"src": "19369:51:21",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nativeSrc": "19416:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "19416:3:21"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nativeSrc": "19383:32:21",
																	"nodeType": "YulIdentifier",
																	"src": "19383:32:21"
																},
																"nativeSrc": "19383:37:21",
																"nodeType": "YulFunctionCall",
																"src": "19383:37:21"
															},
															"variables": [
																{
																	"name": "newLen",
																	"nativeSrc": "19373:6:21",
																	"nodeType": "YulTypedName",
																	"src": "19373:6:21",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "19505:22:21",
																"nodeType": "YulBlock",
																"src": "19505:22:21",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nativeSrc": "19507:16:21",
																				"nodeType": "YulIdentifier",
																				"src": "19507:16:21"
																			},
																			"nativeSrc": "19507:18:21",
																			"nodeType": "YulFunctionCall",
																			"src": "19507:18:21"
																		},
																		"nativeSrc": "19507:18:21",
																		"nodeType": "YulExpressionStatement",
																		"src": "19507:18:21"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "19477:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "19477:6:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "19485:18:21",
																		"nodeType": "YulLiteral",
																		"src": "19485:18:21",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "19474:2:21",
																	"nodeType": "YulIdentifier",
																	"src": "19474:2:21"
																},
																"nativeSrc": "19474:30:21",
																"nodeType": "YulFunctionCall",
																"src": "19474:30:21"
															},
															"nativeSrc": "19471:56:21",
															"nodeType": "YulIf",
															"src": "19471:56:21"
														},
														{
															"nativeSrc": "19537:52:21",
															"nodeType": "YulVariableDeclaration",
															"src": "19537:52:21",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "slot",
																				"nativeSrc": "19583:4:21",
																				"nodeType": "YulIdentifier",
																				"src": "19583:4:21"
																			}
																		],
																		"functionName": {
																			"name": "sload",
																			"nativeSrc": "19577:5:21",
																			"nodeType": "YulIdentifier",
																			"src": "19577:5:21"
																		},
																		"nativeSrc": "19577:11:21",
																		"nodeType": "YulFunctionCall",
																		"src": "19577:11:21"
																	}
																],
																"functionName": {
																	"name": "extract_byte_array_length",
																	"nativeSrc": "19551:25:21",
																	"nodeType": "YulIdentifier",
																	"src": "19551:25:21"
																},
																"nativeSrc": "19551:38:21",
																"nodeType": "YulFunctionCall",
																"src": "19551:38:21"
															},
															"variables": [
																{
																	"name": "oldLen",
																	"nativeSrc": "19541:6:21",
																	"nodeType": "YulTypedName",
																	"src": "19541:6:21",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "19682:4:21",
																		"nodeType": "YulIdentifier",
																		"src": "19682:4:21"
																	},
																	{
																		"name": "oldLen",
																		"nativeSrc": "19688:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "19688:6:21"
																	},
																	{
																		"name": "newLen",
																		"nativeSrc": "19696:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "19696:6:21"
																	}
																],
																"functionName": {
																	"name": "clean_up_bytearray_end_slots_t_string_storage",
																	"nativeSrc": "19636:45:21",
																	"nodeType": "YulIdentifier",
																	"src": "19636:45:21"
																},
																"nativeSrc": "19636:67:21",
																"nodeType": "YulFunctionCall",
																"src": "19636:67:21"
															},
															"nativeSrc": "19636:67:21",
															"nodeType": "YulExpressionStatement",
															"src": "19636:67:21"
														},
														{
															"nativeSrc": "19713:18:21",
															"nodeType": "YulVariableDeclaration",
															"src": "19713:18:21",
															"value": {
																"kind": "number",
																"nativeSrc": "19730:1:21",
																"nodeType": "YulLiteral",
																"src": "19730:1:21",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "srcOffset",
																	"nativeSrc": "19717:9:21",
																	"nodeType": "YulTypedName",
																	"src": "19717:9:21",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "19741:17:21",
															"nodeType": "YulAssignment",
															"src": "19741:17:21",
															"value": {
																"kind": "number",
																"nativeSrc": "19754:4:21",
																"nodeType": "YulLiteral",
																"src": "19754:4:21",
																"type": "",
																"value": "0x20"
															},
															"variableNames": [
																{
																	"name": "srcOffset",
																	"nativeSrc": "19741:9:21",
																	"nodeType": "YulIdentifier",
																	"src": "19741:9:21"
																}
															]
														},
														{
															"cases": [
																{
																	"body": {
																		"nativeSrc": "19805:611:21",
																		"nodeType": "YulBlock",
																		"src": "19805:611:21",
																		"statements": [
																			{
																				"nativeSrc": "19819:37:21",
																				"nodeType": "YulVariableDeclaration",
																				"src": "19819:37:21",
																				"value": {
																					"arguments": [
																						{
																							"name": "newLen",
																							"nativeSrc": "19838:6:21",
																							"nodeType": "YulIdentifier",
																							"src": "19838:6:21"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nativeSrc": "19850:4:21",
																									"nodeType": "YulLiteral",
																									"src": "19850:4:21",
																									"type": "",
																									"value": "0x1f"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nativeSrc": "19846:3:21",
																								"nodeType": "YulIdentifier",
																								"src": "19846:3:21"
																							},
																							"nativeSrc": "19846:9:21",
																							"nodeType": "YulFunctionCall",
																							"src": "19846:9:21"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nativeSrc": "19834:3:21",
																						"nodeType": "YulIdentifier",
																						"src": "19834:3:21"
																					},
																					"nativeSrc": "19834:22:21",
																					"nodeType": "YulFunctionCall",
																					"src": "19834:22:21"
																				},
																				"variables": [
																					{
																						"name": "loopEnd",
																						"nativeSrc": "19823:7:21",
																						"nodeType": "YulTypedName",
																						"src": "19823:7:21",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "19870:51:21",
																				"nodeType": "YulVariableDeclaration",
																				"src": "19870:51:21",
																				"value": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "19916:4:21",
																							"nodeType": "YulIdentifier",
																							"src": "19916:4:21"
																						}
																					],
																					"functionName": {
																						"name": "array_dataslot_t_string_storage",
																						"nativeSrc": "19884:31:21",
																						"nodeType": "YulIdentifier",
																						"src": "19884:31:21"
																					},
																					"nativeSrc": "19884:37:21",
																					"nodeType": "YulFunctionCall",
																					"src": "19884:37:21"
																				},
																				"variables": [
																					{
																						"name": "dstPtr",
																						"nativeSrc": "19874:6:21",
																						"nodeType": "YulTypedName",
																						"src": "19874:6:21",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "19934:10:21",
																				"nodeType": "YulVariableDeclaration",
																				"src": "19934:10:21",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "19943:1:21",
																					"nodeType": "YulLiteral",
																					"src": "19943:1:21",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "i",
																						"nativeSrc": "19938:1:21",
																						"nodeType": "YulTypedName",
																						"src": "19938:1:21",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "20002:163:21",
																					"nodeType": "YulBlock",
																					"src": "20002:163:21",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "20027:6:21",
																										"nodeType": "YulIdentifier",
																										"src": "20027:6:21"
																									},
																									{
																										"arguments": [
																											{
																												"arguments": [
																													{
																														"name": "src",
																														"nativeSrc": "20045:3:21",
																														"nodeType": "YulIdentifier",
																														"src": "20045:3:21"
																													},
																													{
																														"name": "srcOffset",
																														"nativeSrc": "20050:9:21",
																														"nodeType": "YulIdentifier",
																														"src": "20050:9:21"
																													}
																												],
																												"functionName": {
																													"name": "add",
																													"nativeSrc": "20041:3:21",
																													"nodeType": "YulIdentifier",
																													"src": "20041:3:21"
																												},
																												"nativeSrc": "20041:19:21",
																												"nodeType": "YulFunctionCall",
																												"src": "20041:19:21"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nativeSrc": "20035:5:21",
																											"nodeType": "YulIdentifier",
																											"src": "20035:5:21"
																										},
																										"nativeSrc": "20035:26:21",
																										"nodeType": "YulFunctionCall",
																										"src": "20035:26:21"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nativeSrc": "20020:6:21",
																									"nodeType": "YulIdentifier",
																									"src": "20020:6:21"
																								},
																								"nativeSrc": "20020:42:21",
																								"nodeType": "YulFunctionCall",
																								"src": "20020:42:21"
																							},
																							"nativeSrc": "20020:42:21",
																							"nodeType": "YulExpressionStatement",
																							"src": "20020:42:21"
																						},
																						{
																							"nativeSrc": "20079:24:21",
																							"nodeType": "YulAssignment",
																							"src": "20079:24:21",
																							"value": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "20093:6:21",
																										"nodeType": "YulIdentifier",
																										"src": "20093:6:21"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "20101:1:21",
																										"nodeType": "YulLiteral",
																										"src": "20101:1:21",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "20089:3:21",
																									"nodeType": "YulIdentifier",
																									"src": "20089:3:21"
																								},
																								"nativeSrc": "20089:14:21",
																								"nodeType": "YulFunctionCall",
																								"src": "20089:14:21"
																							},
																							"variableNames": [
																								{
																									"name": "dstPtr",
																									"nativeSrc": "20079:6:21",
																									"nodeType": "YulIdentifier",
																									"src": "20079:6:21"
																								}
																							]
																						},
																						{
																							"nativeSrc": "20120:31:21",
																							"nodeType": "YulAssignment",
																							"src": "20120:31:21",
																							"value": {
																								"arguments": [
																									{
																										"name": "srcOffset",
																										"nativeSrc": "20137:9:21",
																										"nodeType": "YulIdentifier",
																										"src": "20137:9:21"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "20148:2:21",
																										"nodeType": "YulLiteral",
																										"src": "20148:2:21",
																										"type": "",
																										"value": "32"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "20133:3:21",
																									"nodeType": "YulIdentifier",
																									"src": "20133:3:21"
																								},
																								"nativeSrc": "20133:18:21",
																								"nodeType": "YulFunctionCall",
																								"src": "20133:18:21"
																							},
																							"variableNames": [
																								{
																									"name": "srcOffset",
																									"nativeSrc": "20120:9:21",
																									"nodeType": "YulIdentifier",
																									"src": "20120:9:21"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "i",
																							"nativeSrc": "19968:1:21",
																							"nodeType": "YulIdentifier",
																							"src": "19968:1:21"
																						},
																						{
																							"name": "loopEnd",
																							"nativeSrc": "19971:7:21",
																							"nodeType": "YulIdentifier",
																							"src": "19971:7:21"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nativeSrc": "19965:2:21",
																						"nodeType": "YulIdentifier",
																						"src": "19965:2:21"
																					},
																					"nativeSrc": "19965:14:21",
																					"nodeType": "YulFunctionCall",
																					"src": "19965:14:21"
																				},
																				"nativeSrc": "19957:208:21",
																				"nodeType": "YulForLoop",
																				"post": {
																					"nativeSrc": "19980:21:21",
																					"nodeType": "YulBlock",
																					"src": "19980:21:21",
																					"statements": [
																						{
																							"nativeSrc": "19982:17:21",
																							"nodeType": "YulAssignment",
																							"src": "19982:17:21",
																							"value": {
																								"arguments": [
																									{
																										"name": "i",
																										"nativeSrc": "19991:1:21",
																										"nodeType": "YulIdentifier",
																										"src": "19991:1:21"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "19994:4:21",
																										"nodeType": "YulLiteral",
																										"src": "19994:4:21",
																										"type": "",
																										"value": "0x20"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "19987:3:21",
																									"nodeType": "YulIdentifier",
																									"src": "19987:3:21"
																								},
																								"nativeSrc": "19987:12:21",
																								"nodeType": "YulFunctionCall",
																								"src": "19987:12:21"
																							},
																							"variableNames": [
																								{
																									"name": "i",
																									"nativeSrc": "19982:1:21",
																									"nodeType": "YulIdentifier",
																									"src": "19982:1:21"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nativeSrc": "19961:3:21",
																					"nodeType": "YulBlock",
																					"src": "19961:3:21",
																					"statements": []
																				},
																				"src": "19957:208:21"
																			},
																			{
																				"body": {
																					"nativeSrc": "20201:156:21",
																					"nodeType": "YulBlock",
																					"src": "20201:156:21",
																					"statements": [
																						{
																							"nativeSrc": "20219:43:21",
																							"nodeType": "YulVariableDeclaration",
																							"src": "20219:43:21",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nativeSrc": "20246:3:21",
																												"nodeType": "YulIdentifier",
																												"src": "20246:3:21"
																											},
																											{
																												"name": "srcOffset",
																												"nativeSrc": "20251:9:21",
																												"nodeType": "YulIdentifier",
																												"src": "20251:9:21"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nativeSrc": "20242:3:21",
																											"nodeType": "YulIdentifier",
																											"src": "20242:3:21"
																										},
																										"nativeSrc": "20242:19:21",
																										"nodeType": "YulFunctionCall",
																										"src": "20242:19:21"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nativeSrc": "20236:5:21",
																									"nodeType": "YulIdentifier",
																									"src": "20236:5:21"
																								},
																								"nativeSrc": "20236:26:21",
																								"nodeType": "YulFunctionCall",
																								"src": "20236:26:21"
																							},
																							"variables": [
																								{
																									"name": "lastValue",
																									"nativeSrc": "20223:9:21",
																									"nodeType": "YulTypedName",
																									"src": "20223:9:21",
																									"type": ""
																								}
																							]
																						},
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "20286:6:21",
																										"nodeType": "YulIdentifier",
																										"src": "20286:6:21"
																									},
																									{
																										"arguments": [
																											{
																												"name": "lastValue",
																												"nativeSrc": "20313:9:21",
																												"nodeType": "YulIdentifier",
																												"src": "20313:9:21"
																											},
																											{
																												"arguments": [
																													{
																														"name": "newLen",
																														"nativeSrc": "20328:6:21",
																														"nodeType": "YulIdentifier",
																														"src": "20328:6:21"
																													},
																													{
																														"kind": "number",
																														"nativeSrc": "20336:4:21",
																														"nodeType": "YulLiteral",
																														"src": "20336:4:21",
																														"type": "",
																														"value": "0x1f"
																													}
																												],
																												"functionName": {
																													"name": "and",
																													"nativeSrc": "20324:3:21",
																													"nodeType": "YulIdentifier",
																													"src": "20324:3:21"
																												},
																												"nativeSrc": "20324:17:21",
																												"nodeType": "YulFunctionCall",
																												"src": "20324:17:21"
																											}
																										],
																										"functionName": {
																											"name": "mask_bytes_dynamic",
																											"nativeSrc": "20294:18:21",
																											"nodeType": "YulIdentifier",
																											"src": "20294:18:21"
																										},
																										"nativeSrc": "20294:48:21",
																										"nodeType": "YulFunctionCall",
																										"src": "20294:48:21"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nativeSrc": "20279:6:21",
																									"nodeType": "YulIdentifier",
																									"src": "20279:6:21"
																								},
																								"nativeSrc": "20279:64:21",
																								"nodeType": "YulFunctionCall",
																								"src": "20279:64:21"
																							},
																							"nativeSrc": "20279:64:21",
																							"nodeType": "YulExpressionStatement",
																							"src": "20279:64:21"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "loopEnd",
																							"nativeSrc": "20184:7:21",
																							"nodeType": "YulIdentifier",
																							"src": "20184:7:21"
																						},
																						{
																							"name": "newLen",
																							"nativeSrc": "20193:6:21",
																							"nodeType": "YulIdentifier",
																							"src": "20193:6:21"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nativeSrc": "20181:2:21",
																						"nodeType": "YulIdentifier",
																						"src": "20181:2:21"
																					},
																					"nativeSrc": "20181:19:21",
																					"nodeType": "YulFunctionCall",
																					"src": "20181:19:21"
																				},
																				"nativeSrc": "20178:179:21",
																				"nodeType": "YulIf",
																				"src": "20178:179:21"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "20377:4:21",
																							"nodeType": "YulIdentifier",
																							"src": "20377:4:21"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "newLen",
																											"nativeSrc": "20391:6:21",
																											"nodeType": "YulIdentifier",
																											"src": "20391:6:21"
																										},
																										{
																											"kind": "number",
																											"nativeSrc": "20399:1:21",
																											"nodeType": "YulLiteral",
																											"src": "20399:1:21",
																											"type": "",
																											"value": "2"
																										}
																									],
																									"functionName": {
																										"name": "mul",
																										"nativeSrc": "20387:3:21",
																										"nodeType": "YulIdentifier",
																										"src": "20387:3:21"
																									},
																									"nativeSrc": "20387:14:21",
																									"nodeType": "YulFunctionCall",
																									"src": "20387:14:21"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "20403:1:21",
																									"nodeType": "YulLiteral",
																									"src": "20403:1:21",
																									"type": "",
																									"value": "1"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "20383:3:21",
																								"nodeType": "YulIdentifier",
																								"src": "20383:3:21"
																							},
																							"nativeSrc": "20383:22:21",
																							"nodeType": "YulFunctionCall",
																							"src": "20383:22:21"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nativeSrc": "20370:6:21",
																						"nodeType": "YulIdentifier",
																						"src": "20370:6:21"
																					},
																					"nativeSrc": "20370:36:21",
																					"nodeType": "YulFunctionCall",
																					"src": "20370:36:21"
																				},
																				"nativeSrc": "20370:36:21",
																				"nodeType": "YulExpressionStatement",
																				"src": "20370:36:21"
																			}
																		]
																	},
																	"nativeSrc": "19798:618:21",
																	"nodeType": "YulCase",
																	"src": "19798:618:21",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "19803:1:21",
																		"nodeType": "YulLiteral",
																		"src": "19803:1:21",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nativeSrc": "20433:222:21",
																		"nodeType": "YulBlock",
																		"src": "20433:222:21",
																		"statements": [
																			{
																				"nativeSrc": "20447:14:21",
																				"nodeType": "YulVariableDeclaration",
																				"src": "20447:14:21",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "20460:1:21",
																					"nodeType": "YulLiteral",
																					"src": "20460:1:21",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "value",
																						"nativeSrc": "20451:5:21",
																						"nodeType": "YulTypedName",
																						"src": "20451:5:21",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "20484:67:21",
																					"nodeType": "YulBlock",
																					"src": "20484:67:21",
																					"statements": [
																						{
																							"nativeSrc": "20502:35:21",
																							"nodeType": "YulAssignment",
																							"src": "20502:35:21",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nativeSrc": "20521:3:21",
																												"nodeType": "YulIdentifier",
																												"src": "20521:3:21"
																											},
																											{
																												"name": "srcOffset",
																												"nativeSrc": "20526:9:21",
																												"nodeType": "YulIdentifier",
																												"src": "20526:9:21"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nativeSrc": "20517:3:21",
																											"nodeType": "YulIdentifier",
																											"src": "20517:3:21"
																										},
																										"nativeSrc": "20517:19:21",
																										"nodeType": "YulFunctionCall",
																										"src": "20517:19:21"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nativeSrc": "20511:5:21",
																									"nodeType": "YulIdentifier",
																									"src": "20511:5:21"
																								},
																								"nativeSrc": "20511:26:21",
																								"nodeType": "YulFunctionCall",
																								"src": "20511:26:21"
																							},
																							"variableNames": [
																								{
																									"name": "value",
																									"nativeSrc": "20502:5:21",
																									"nodeType": "YulIdentifier",
																									"src": "20502:5:21"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"name": "newLen",
																					"nativeSrc": "20477:6:21",
																					"nodeType": "YulIdentifier",
																					"src": "20477:6:21"
																				},
																				"nativeSrc": "20474:77:21",
																				"nodeType": "YulIf",
																				"src": "20474:77:21"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "20571:4:21",
																							"nodeType": "YulIdentifier",
																							"src": "20571:4:21"
																						},
																						{
																							"arguments": [
																								{
																									"name": "value",
																									"nativeSrc": "20630:5:21",
																									"nodeType": "YulIdentifier",
																									"src": "20630:5:21"
																								},
																								{
																									"name": "newLen",
																									"nativeSrc": "20637:6:21",
																									"nodeType": "YulIdentifier",
																									"src": "20637:6:21"
																								}
																							],
																							"functionName": {
																								"name": "extract_used_part_and_set_length_of_short_byte_array",
																								"nativeSrc": "20577:52:21",
																								"nodeType": "YulIdentifier",
																								"src": "20577:52:21"
																							},
																							"nativeSrc": "20577:67:21",
																							"nodeType": "YulFunctionCall",
																							"src": "20577:67:21"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nativeSrc": "20564:6:21",
																						"nodeType": "YulIdentifier",
																						"src": "20564:6:21"
																					},
																					"nativeSrc": "20564:81:21",
																					"nodeType": "YulFunctionCall",
																					"src": "20564:81:21"
																				},
																				"nativeSrc": "20564:81:21",
																				"nodeType": "YulExpressionStatement",
																				"src": "20564:81:21"
																			}
																		]
																	},
																	"nativeSrc": "20425:230:21",
																	"nodeType": "YulCase",
																	"src": "20425:230:21",
																	"value": "default"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "19778:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "19778:6:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "19786:2:21",
																		"nodeType": "YulLiteral",
																		"src": "19786:2:21",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "19775:2:21",
																	"nodeType": "YulIdentifier",
																	"src": "19775:2:21"
																},
																"nativeSrc": "19775:14:21",
																"nodeType": "YulFunctionCall",
																"src": "19775:14:21"
															},
															"nativeSrc": "19768:887:21",
															"nodeType": "YulSwitch",
															"src": "19768:887:21"
														}
													]
												},
												"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
												"nativeSrc": "19266:1395:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nativeSrc": "19347:4:21",
														"nodeType": "YulTypedName",
														"src": "19347:4:21",
														"type": ""
													},
													{
														"name": "src",
														"nativeSrc": "19353:3:21",
														"nodeType": "YulTypedName",
														"src": "19353:3:21",
														"type": ""
													}
												],
												"src": "19266:1395:21"
											},
											{
												"body": {
													"nativeSrc": "20845:367:21",
													"nodeType": "YulBlock",
													"src": "20845:367:21",
													"statements": [
														{
															"nativeSrc": "20855:27:21",
															"nodeType": "YulAssignment",
															"src": "20855:27:21",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "20867:9:21",
																		"nodeType": "YulIdentifier",
																		"src": "20867:9:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "20878:3:21",
																		"nodeType": "YulLiteral",
																		"src": "20878:3:21",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "20863:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "20863:3:21"
																},
																"nativeSrc": "20863:19:21",
																"nodeType": "YulFunctionCall",
																"src": "20863:19:21"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "20855:4:21",
																	"nodeType": "YulIdentifier",
																	"src": "20855:4:21"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "20936:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "20936:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "20949:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "20949:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "20960:1:21",
																				"nodeType": "YulLiteral",
																				"src": "20960:1:21",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "20945:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "20945:3:21"
																		},
																		"nativeSrc": "20945:17:21",
																		"nodeType": "YulFunctionCall",
																		"src": "20945:17:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nativeSrc": "20892:43:21",
																	"nodeType": "YulIdentifier",
																	"src": "20892:43:21"
																},
																"nativeSrc": "20892:71:21",
																"nodeType": "YulFunctionCall",
																"src": "20892:71:21"
															},
															"nativeSrc": "20892:71:21",
															"nodeType": "YulExpressionStatement",
															"src": "20892:71:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "21013:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "21013:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "21026:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "21026:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "21037:2:21",
																				"nodeType": "YulLiteral",
																				"src": "21037:2:21",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "21022:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "21022:3:21"
																		},
																		"nativeSrc": "21022:18:21",
																		"nodeType": "YulFunctionCall",
																		"src": "21022:18:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
																	"nativeSrc": "20973:39:21",
																	"nodeType": "YulIdentifier",
																	"src": "20973:39:21"
																},
																"nativeSrc": "20973:68:21",
																"nodeType": "YulFunctionCall",
																"src": "20973:68:21"
															},
															"nativeSrc": "20973:68:21",
															"nodeType": "YulExpressionStatement",
															"src": "20973:68:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nativeSrc": "21095:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "21095:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "21108:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "21108:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "21119:2:21",
																				"nodeType": "YulLiteral",
																				"src": "21119:2:21",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "21104:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "21104:3:21"
																		},
																		"nativeSrc": "21104:18:21",
																		"nodeType": "YulFunctionCall",
																		"src": "21104:18:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nativeSrc": "21051:43:21",
																	"nodeType": "YulIdentifier",
																	"src": "21051:43:21"
																},
																"nativeSrc": "21051:72:21",
																"nodeType": "YulFunctionCall",
																"src": "21051:72:21"
															},
															"nativeSrc": "21051:72:21",
															"nodeType": "YulExpressionStatement",
															"src": "21051:72:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value3",
																		"nativeSrc": "21177:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "21177:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "21190:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "21190:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "21201:2:21",
																				"nodeType": "YulLiteral",
																				"src": "21201:2:21",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "21186:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "21186:3:21"
																		},
																		"nativeSrc": "21186:18:21",
																		"nodeType": "YulFunctionCall",
																		"src": "21186:18:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nativeSrc": "21133:43:21",
																	"nodeType": "YulIdentifier",
																	"src": "21133:43:21"
																},
																"nativeSrc": "21133:72:21",
																"nodeType": "YulFunctionCall",
																"src": "21133:72:21"
															},
															"nativeSrc": "21133:72:21",
															"nodeType": "YulExpressionStatement",
															"src": "21133:72:21"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed",
												"nativeSrc": "20667:545:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "20793:9:21",
														"nodeType": "YulTypedName",
														"src": "20793:9:21",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "20805:6:21",
														"nodeType": "YulTypedName",
														"src": "20805:6:21",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "20813:6:21",
														"nodeType": "YulTypedName",
														"src": "20813:6:21",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "20821:6:21",
														"nodeType": "YulTypedName",
														"src": "20821:6:21",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "20829:6:21",
														"nodeType": "YulTypedName",
														"src": "20829:6:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "20840:4:21",
														"nodeType": "YulTypedName",
														"src": "20840:4:21",
														"type": ""
													}
												],
												"src": "20667:545:21"
											},
											{
												"body": {
													"nativeSrc": "21246:152:21",
													"nodeType": "YulBlock",
													"src": "21246:152:21",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "21263:1:21",
																		"nodeType": "YulLiteral",
																		"src": "21263:1:21",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "21266:77:21",
																		"nodeType": "YulLiteral",
																		"src": "21266:77:21",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "21256:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "21256:6:21"
																},
																"nativeSrc": "21256:88:21",
																"nodeType": "YulFunctionCall",
																"src": "21256:88:21"
															},
															"nativeSrc": "21256:88:21",
															"nodeType": "YulExpressionStatement",
															"src": "21256:88:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "21360:1:21",
																		"nodeType": "YulLiteral",
																		"src": "21360:1:21",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "21363:4:21",
																		"nodeType": "YulLiteral",
																		"src": "21363:4:21",
																		"type": "",
																		"value": "0x21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "21353:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "21353:6:21"
																},
																"nativeSrc": "21353:15:21",
																"nodeType": "YulFunctionCall",
																"src": "21353:15:21"
															},
															"nativeSrc": "21353:15:21",
															"nodeType": "YulExpressionStatement",
															"src": "21353:15:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "21384:1:21",
																		"nodeType": "YulLiteral",
																		"src": "21384:1:21",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "21387:4:21",
																		"nodeType": "YulLiteral",
																		"src": "21387:4:21",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "21377:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "21377:6:21"
																},
																"nativeSrc": "21377:15:21",
																"nodeType": "YulFunctionCall",
																"src": "21377:15:21"
															},
															"nativeSrc": "21377:15:21",
															"nodeType": "YulExpressionStatement",
															"src": "21377:15:21"
														}
													]
												},
												"name": "panic_error_0x21",
												"nativeSrc": "21218:180:21",
												"nodeType": "YulFunctionDefinition",
												"src": "21218:180:21"
											},
											{
												"body": {
													"nativeSrc": "21432:152:21",
													"nodeType": "YulBlock",
													"src": "21432:152:21",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "21449:1:21",
																		"nodeType": "YulLiteral",
																		"src": "21449:1:21",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "21452:77:21",
																		"nodeType": "YulLiteral",
																		"src": "21452:77:21",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "21442:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "21442:6:21"
																},
																"nativeSrc": "21442:88:21",
																"nodeType": "YulFunctionCall",
																"src": "21442:88:21"
															},
															"nativeSrc": "21442:88:21",
															"nodeType": "YulExpressionStatement",
															"src": "21442:88:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "21546:1:21",
																		"nodeType": "YulLiteral",
																		"src": "21546:1:21",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "21549:4:21",
																		"nodeType": "YulLiteral",
																		"src": "21549:4:21",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "21539:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "21539:6:21"
																},
																"nativeSrc": "21539:15:21",
																"nodeType": "YulFunctionCall",
																"src": "21539:15:21"
															},
															"nativeSrc": "21539:15:21",
															"nodeType": "YulExpressionStatement",
															"src": "21539:15:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "21570:1:21",
																		"nodeType": "YulLiteral",
																		"src": "21570:1:21",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "21573:4:21",
																		"nodeType": "YulLiteral",
																		"src": "21573:4:21",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "21563:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "21563:6:21"
																},
																"nativeSrc": "21563:15:21",
																"nodeType": "YulFunctionCall",
																"src": "21563:15:21"
															},
															"nativeSrc": "21563:15:21",
															"nodeType": "YulExpressionStatement",
															"src": "21563:15:21"
														}
													]
												},
												"name": "panic_error_0x11",
												"nativeSrc": "21404:180:21",
												"nodeType": "YulFunctionDefinition",
												"src": "21404:180:21"
											},
											{
												"body": {
													"nativeSrc": "21634:147:21",
													"nodeType": "YulBlock",
													"src": "21634:147:21",
													"statements": [
														{
															"nativeSrc": "21644:25:21",
															"nodeType": "YulAssignment",
															"src": "21644:25:21",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "21667:1:21",
																		"nodeType": "YulIdentifier",
																		"src": "21667:1:21"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "21649:17:21",
																	"nodeType": "YulIdentifier",
																	"src": "21649:17:21"
																},
																"nativeSrc": "21649:20:21",
																"nodeType": "YulFunctionCall",
																"src": "21649:20:21"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nativeSrc": "21644:1:21",
																	"nodeType": "YulIdentifier",
																	"src": "21644:1:21"
																}
															]
														},
														{
															"nativeSrc": "21678:25:21",
															"nodeType": "YulAssignment",
															"src": "21678:25:21",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "21701:1:21",
																		"nodeType": "YulIdentifier",
																		"src": "21701:1:21"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "21683:17:21",
																	"nodeType": "YulIdentifier",
																	"src": "21683:17:21"
																},
																"nativeSrc": "21683:20:21",
																"nodeType": "YulFunctionCall",
																"src": "21683:20:21"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nativeSrc": "21678:1:21",
																	"nodeType": "YulIdentifier",
																	"src": "21678:1:21"
																}
															]
														},
														{
															"nativeSrc": "21712:16:21",
															"nodeType": "YulAssignment",
															"src": "21712:16:21",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "21723:1:21",
																		"nodeType": "YulIdentifier",
																		"src": "21723:1:21"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "21726:1:21",
																		"nodeType": "YulIdentifier",
																		"src": "21726:1:21"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "21719:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "21719:3:21"
																},
																"nativeSrc": "21719:9:21",
																"nodeType": "YulFunctionCall",
																"src": "21719:9:21"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nativeSrc": "21712:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "21712:3:21"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "21752:22:21",
																"nodeType": "YulBlock",
																"src": "21752:22:21",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "21754:16:21",
																				"nodeType": "YulIdentifier",
																				"src": "21754:16:21"
																			},
																			"nativeSrc": "21754:18:21",
																			"nodeType": "YulFunctionCall",
																			"src": "21754:18:21"
																		},
																		"nativeSrc": "21754:18:21",
																		"nodeType": "YulExpressionStatement",
																		"src": "21754:18:21"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "21744:1:21",
																		"nodeType": "YulIdentifier",
																		"src": "21744:1:21"
																	},
																	{
																		"name": "sum",
																		"nativeSrc": "21747:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "21747:3:21"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "21741:2:21",
																	"nodeType": "YulIdentifier",
																	"src": "21741:2:21"
																},
																"nativeSrc": "21741:10:21",
																"nodeType": "YulFunctionCall",
																"src": "21741:10:21"
															},
															"nativeSrc": "21738:36:21",
															"nodeType": "YulIf",
															"src": "21738:36:21"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nativeSrc": "21590:191:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "21621:1:21",
														"nodeType": "YulTypedName",
														"src": "21621:1:21",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "21624:1:21",
														"nodeType": "YulTypedName",
														"src": "21624:1:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nativeSrc": "21630:3:21",
														"nodeType": "YulTypedName",
														"src": "21630:3:21",
														"type": ""
													}
												],
												"src": "21590:191:21"
											}
										]
									},
									"contents": "{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bytes1(value) -> cleaned {\n        cleaned := and(value, 0xff00000000000000000000000000000000000000000000000000000000000000)\n    }\n\n    function abi_encode_t_bytes1_to_t_bytes1_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes1(value))\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function array_length_t_array$_t_uint256_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encodeUpdatedPos_t_uint256_to_t_uint256(value0, pos) -> updatedPos {\n        abi_encode_t_uint256_to_t_uint256(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // uint256[] -> uint256[]\n    function abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_uint256_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_uint256_to_t_uint256(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart , value6, value5, value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 224)\n\n        abi_encode_t_bytes1_to_t_bytes1_fromStack(value0,  add(headStart, 0))\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value1,  tail)\n\n        mstore(add(headStart, 64), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value2,  tail)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_address_to_t_address_fromStack(value4,  add(headStart, 128))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value5,  add(headStart, 160))\n\n        mstore(add(headStart, 192), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value6,  tail)\n\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_uint8(value) {\n        if iszero(eq(value, cleanup_t_uint8(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint8(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint8(value)\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6 {\n        if slt(sub(dataEnd, headStart), 224) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint8(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value5 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 192\n\n            value6 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function store_literal_in_memory_2e5045ff73280aa8e8acd8c82710f23812497f87f7f576e2220a2ddd0d45eade(memPtr) {\n\n        mstore(add(memPtr, 0), \"EIP712: Uninitialized\")\n\n    }\n\n    function abi_encode_t_stringliteral_2e5045ff73280aa8e8acd8c82710f23812497f87f7f576e2220a2ddd0d45eade_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 21)\n        store_literal_in_memory_2e5045ff73280aa8e8acd8c82710f23812497f87f7f576e2220a2ddd0d45eade(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_2e5045ff73280aa8e8acd8c82710f23812497f87f7f576e2220a2ddd0d45eade__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_2e5045ff73280aa8e8acd8c82710f23812497f87f7f576e2220a2ddd0d45eade_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function cleanup_t_rational_1_by_1(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_rational_1_by_1_to_t_uint64(value) -> converted {\n        converted := cleanup_t_uint64(identity(cleanup_t_rational_1_by_1(value)))\n    }\n\n    function abi_encode_t_rational_1_by_1_to_t_uint64_fromStack(value, pos) {\n        mstore(pos, convert_t_rational_1_by_1_to_t_uint64(value))\n    }\n\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_rational_1_by_1_to_t_uint64_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart , value5, value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 192)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value4,  add(headStart, 128))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value5,  add(headStart, 160))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_address_to_t_address_fromStack(value4,  add(headStart, 128))\n\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value3,  add(headStart, 96))\n\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n}\n",
									"id": 21,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x14B JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xC1 JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x7A JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x359 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x377 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x3A7 JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x3C3 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x3DF JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x40F JUMPI PUSH2 0x14B JUMP JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x2B7 JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x2C1 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x2DD JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x30D JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x317 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x33B JUMPI PUSH2 0x14B JUMP JUMPDEST DUP1 PUSH4 0x3644E515 GT PUSH2 0x113 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x209 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x227 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x231 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x24D JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x269 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x287 JUMPI PUSH2 0x14B JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x14F JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x16D JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x19D JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1EB JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x157 PUSH2 0x42B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x164 SWAP2 SWAP1 PUSH2 0x202A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x187 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x182 SWAP2 SWAP1 PUSH2 0x20DB JUMP JUMPDEST PUSH2 0x4C9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x194 SWAP2 SWAP1 PUSH2 0x2133 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A5 PUSH2 0x4EB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B2 SWAP2 SWAP1 PUSH2 0x215B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1D0 SWAP2 SWAP1 PUSH2 0x2174 JUMP JUMPDEST PUSH2 0x502 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E2 SWAP2 SWAP1 PUSH2 0x2133 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F3 PUSH2 0x530 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x200 SWAP2 SWAP1 PUSH2 0x21DF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x211 PUSH2 0x538 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21E SWAP2 SWAP1 PUSH2 0x2210 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x22F PUSH2 0x546 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x24B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x246 SWAP2 SWAP1 PUSH2 0x20DB JUMP JUMPDEST PUSH2 0x558 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x267 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x262 SWAP2 SWAP1 PUSH2 0x2229 JUMP JUMPDEST PUSH2 0x56E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x271 PUSH2 0x582 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x27E SWAP2 SWAP1 PUSH2 0x2133 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x29C SWAP2 SWAP1 PUSH2 0x2254 JUMP JUMPDEST PUSH2 0x5A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2AE SWAP2 SWAP1 PUSH2 0x215B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2BF PUSH2 0x5F7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2DB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2D6 SWAP2 SWAP1 PUSH2 0x20DB JUMP JUMPDEST PUSH2 0x60A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2F7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2F2 SWAP2 SWAP1 PUSH2 0x2254 JUMP JUMPDEST PUSH2 0x62A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x304 SWAP2 SWAP1 PUSH2 0x215B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x315 PUSH2 0x63B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x31F PUSH2 0x64D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x332 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x237F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x343 PUSH2 0x756 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x350 SWAP2 SWAP1 PUSH2 0x2401 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x361 PUSH2 0x78B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x36E SWAP2 SWAP1 PUSH2 0x202A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x391 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x38C SWAP2 SWAP1 PUSH2 0x20DB JUMP JUMPDEST PUSH2 0x829 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x39E SWAP2 SWAP1 PUSH2 0x2133 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3C1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3BC SWAP2 SWAP1 PUSH2 0x2254 JUMP JUMPDEST PUSH2 0x84B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3DD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3D8 SWAP2 SWAP1 PUSH2 0x246E JUMP JUMPDEST PUSH2 0xA8E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3F9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3F4 SWAP2 SWAP1 PUSH2 0x250B JUMP JUMPDEST PUSH2 0xBD3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x406 SWAP2 SWAP1 PUSH2 0x215B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x429 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x424 SWAP2 SWAP1 PUSH2 0x2254 JUMP JUMPDEST PUSH2 0xC63 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0x436 PUSH2 0xCE7 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x3 ADD DUP1 SLOAD PUSH2 0x447 SWAP1 PUSH2 0x2576 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x473 SWAP1 PUSH2 0x2576 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4BE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x495 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x4BE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x4A1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x4D3 PUSH2 0xD0E JUMP JUMPDEST SWAP1 POP PUSH2 0x4E0 DUP2 DUP6 DUP6 PUSH2 0xD15 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x4F5 PUSH2 0xCE7 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x2 ADD SLOAD SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x50C PUSH2 0xD0E JUMP JUMPDEST SWAP1 POP PUSH2 0x519 DUP6 DUP3 DUP6 PUSH2 0xD27 JUMP JUMPDEST PUSH2 0x524 DUP6 DUP6 DUP6 PUSH2 0xDB9 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x541 PUSH2 0xEA9 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x54E PUSH2 0xEB7 JUMP JUMPDEST PUSH2 0x556 PUSH2 0xF3E JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x560 PUSH2 0xEB7 JUMP JUMPDEST PUSH2 0x56A DUP3 DUP3 PUSH2 0xFAC JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x57F PUSH2 0x579 PUSH2 0xD0E JUMP JUMPDEST DUP3 PUSH2 0x102B JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x58C PUSH2 0x10AA JUMP JUMPDEST SWAP1 POP DUP1 PUSH0 ADD PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x5AE PUSH2 0xCE7 JUMP JUMPDEST SWAP1 POP DUP1 PUSH0 ADD PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5FF PUSH2 0xEB7 JUMP JUMPDEST PUSH2 0x608 PUSH0 PUSH2 0x10D1 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x61C DUP3 PUSH2 0x616 PUSH2 0xD0E JUMP JUMPDEST DUP4 PUSH2 0xD27 JUMP JUMPDEST PUSH2 0x626 DUP3 DUP3 PUSH2 0x102B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH2 0x634 DUP3 PUSH2 0x11A2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x643 PUSH2 0xEB7 JUMP JUMPDEST PUSH2 0x64B PUSH2 0x11F5 JUMP JUMPDEST JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0x60 PUSH0 PUSH2 0x65F PUSH2 0x1264 JUMP JUMPDEST SWAP1 POP PUSH0 DUP1 SHL DUP2 PUSH0 ADD SLOAD EQ DUP1 ISZERO PUSH2 0x67A JUMPI POP PUSH0 DUP1 SHL DUP2 PUSH1 0x1 ADD SLOAD EQ JUMPDEST PUSH2 0x6B9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6B0 SWAP1 PUSH2 0x25F0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x6C1 PUSH2 0x128B JUMP JUMPDEST PUSH2 0x6C9 PUSH2 0x1329 JUMP JUMPDEST CHAINID ADDRESS PUSH0 DUP1 SHL PUSH0 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x6E8 JUMPI PUSH2 0x6E7 PUSH2 0x260E JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x716 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP PUSH32 0xF00000000000000000000000000000000000000000000000000000000000000 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 SWAP8 POP SWAP8 POP SWAP8 POP SWAP8 POP SWAP8 POP SWAP8 POP SWAP8 POP POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x760 PUSH2 0x13C7 JUMP JUMPDEST SWAP1 POP DUP1 PUSH0 ADD PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0x796 PUSH2 0xCE7 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x4 ADD DUP1 SLOAD PUSH2 0x7A7 SWAP1 PUSH2 0x2576 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x7D3 SWAP1 PUSH2 0x2576 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x81E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7F5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x81E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x801 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x833 PUSH2 0xD0E JUMP JUMPDEST SWAP1 POP PUSH2 0x840 DUP2 DUP6 DUP6 PUSH2 0xDB9 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x854 PUSH2 0x13EE JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 PUSH0 ADD PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP PUSH0 DUP3 PUSH0 ADD PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH0 DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x89C JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH0 PUSH1 0x1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x8CF JUMPI POP PUSH0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE EQ JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x8DD JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x914 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF92EE8A900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP6 PUSH0 ADD PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 ISZERO PUSH2 0x961 JUMPI PUSH1 0x1 DUP6 PUSH0 ADD PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 0x9D5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xB DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3432544F4B454E495A4552000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3432544F4B000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x1415 JUMP JUMPDEST PUSH2 0x9DD PUSH2 0x142B JUMP JUMPDEST PUSH2 0x9E5 PUSH2 0x1435 JUMP JUMPDEST PUSH2 0x9EE DUP7 PUSH2 0x1447 JUMP JUMPDEST PUSH2 0xA2C PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xB DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3432544F4B454E495A4552000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x145B JUMP JUMPDEST DUP4 ISZERO PUSH2 0xA86 JUMPI PUSH0 DUP6 PUSH0 ADD PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0xA7D SWAP2 SWAP1 PUSH2 0x2690 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0xAD3 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x6279130200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xACA SWAP2 SWAP1 PUSH2 0x215B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0xB01 DUP13 PUSH2 0x14A5 JUMP JUMPDEST DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xB17 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x26A9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH0 PUSH2 0xB39 DUP3 PUSH2 0x1505 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0xB48 DUP3 DUP8 DUP8 DUP8 PUSH2 0x151E JUMP JUMPDEST SWAP1 POP DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBBC JUMPI DUP1 DUP11 PUSH1 0x40 MLOAD PUSH32 0x4B800E4600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBB3 SWAP3 SWAP2 SWAP1 PUSH2 0x2708 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xBC7 DUP11 DUP11 DUP11 PUSH2 0xD15 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xBDD PUSH2 0xCE7 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 ADD PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xC6B PUSH2 0xEB7 JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xCDB JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCD2 SWAP2 SWAP1 PUSH2 0x2401 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xCE4 DUP2 PUSH2 0x10D1 JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 PUSH32 0x52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE00 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xD22 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x154C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xD32 DUP5 DUP5 PUSH2 0xBD3 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0xDB3 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xDA4 JUMPI DUP3 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xFB8F41B200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD9B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x272F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xDB2 DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x154C JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xE29 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE20 SWAP2 SWAP1 PUSH2 0x2401 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xE99 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE90 SWAP2 SWAP1 PUSH2 0x2401 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xEA4 DUP4 DUP4 DUP4 PUSH2 0x1729 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xEB2 PUSH2 0x1739 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xEBF PUSH2 0xD0E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xEDD PUSH2 0x756 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xF3C JUMPI PUSH2 0xF00 PUSH2 0xD0E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF33 SWAP2 SWAP1 PUSH2 0x2401 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0xF46 PUSH2 0x179C JUMP JUMPDEST PUSH0 PUSH2 0xF4F PUSH2 0x10AA JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 PUSH0 ADD PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH2 0xF94 PUSH2 0xD0E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFA1 SWAP2 SWAP1 PUSH2 0x2401 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x101C JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1013 SWAP2 SWAP1 PUSH2 0x2401 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1027 PUSH0 DUP4 DUP4 PUSH2 0x1729 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x109B JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1092 SWAP2 SWAP1 PUSH2 0x2401 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x10A6 DUP3 PUSH0 DUP4 PUSH2 0x1729 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH32 0xCD5ED15C6E187E77E9AEE88184C21F4F2182AB5827CB3B7E07FBEDCD63F03300 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x10DA PUSH2 0x13C7 JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 PUSH0 ADD PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP3 DUP3 PUSH0 ADD PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x11AC PUSH2 0x17DC JUMP JUMPDEST SWAP1 POP DUP1 PUSH0 ADD PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x11FD PUSH2 0x1803 JUMP JUMPDEST PUSH0 PUSH2 0x1206 PUSH2 0x10AA JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 PUSH0 ADD PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x124C PUSH2 0xD0E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1259 SWAP2 SWAP1 PUSH2 0x2401 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH0 PUSH32 0xA16A46D94261C7517CC8FF89F61C0CE93598E3C849801011DEE649A6A557D100 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0x1296 PUSH2 0x1264 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x2 ADD DUP1 SLOAD PUSH2 0x12A7 SWAP1 PUSH2 0x2576 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x12D3 SWAP1 PUSH2 0x2576 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x131E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x12F5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x131E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1301 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0x1334 PUSH2 0x1264 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x3 ADD DUP1 SLOAD PUSH2 0x1345 SWAP1 PUSH2 0x2576 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1371 SWAP1 PUSH2 0x2576 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x13BC JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1393 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x13BC JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x139F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH0 PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x141D PUSH2 0x1844 JUMP JUMPDEST PUSH2 0x1427 DUP3 DUP3 PUSH2 0x1884 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x1433 PUSH2 0x1844 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x143D PUSH2 0x1844 JUMP JUMPDEST PUSH2 0x1445 PUSH2 0x18C0 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x144F PUSH2 0x1844 JUMP JUMPDEST PUSH2 0x1458 DUP2 PUSH2 0x18F0 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1463 PUSH2 0x1844 JUMP JUMPDEST PUSH2 0x14A2 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3100000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x1974 JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x14AF PUSH2 0x17DC JUMP JUMPDEST SWAP1 POP DUP1 PUSH0 ADD PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 ADD SWAP2 SWAP1 POP SSTORE SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1517 PUSH2 0x1511 PUSH2 0xEA9 JUMP JUMPDEST DUP4 PUSH2 0x19C5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH2 0x152E DUP9 DUP9 DUP9 DUP9 PUSH2 0x1A05 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x153E DUP3 DUP3 PUSH2 0x1AEC JUMP JUMPDEST DUP3 SWAP4 POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x1555 PUSH2 0xCE7 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x15C7 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xE602DF0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15BE SWAP2 SWAP1 PUSH2 0x2401 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1637 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x94280D6200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x162E SWAP2 SWAP1 PUSH2 0x2401 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 DUP2 PUSH1 0x1 ADD PUSH0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 ISZERO PUSH2 0x1722 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP6 PUSH1 0x40 MLOAD PUSH2 0x1719 SWAP2 SWAP1 PUSH2 0x215B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1734 DUP4 DUP4 DUP4 PUSH2 0x1C4E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH2 0x1763 PUSH2 0x1C66 JUMP JUMPDEST PUSH2 0x176B PUSH2 0x1CDC JUMP JUMPDEST CHAINID ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1781 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2764 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x17A4 PUSH2 0x582 JUMP JUMPDEST PUSH2 0x17DA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8DFC202B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH0 PUSH32 0x5AB42CED628888259C08AC98DB1EB0CF702FC1501344311D8B100CD1BFE4BB00 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x180B PUSH2 0x582 JUMP JUMPDEST ISZERO PUSH2 0x1842 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD93C066500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x184C PUSH2 0x1D53 JUMP JUMPDEST PUSH2 0x1882 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD7E6BCF800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x188C PUSH2 0x1844 JUMP JUMPDEST PUSH0 PUSH2 0x1895 PUSH2 0xCE7 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 PUSH1 0x3 ADD SWAP1 DUP2 PUSH2 0x18A8 SWAP2 SWAP1 PUSH2 0x2949 JUMP JUMPDEST POP DUP2 DUP2 PUSH1 0x4 ADD SWAP1 DUP2 PUSH2 0x18BA SWAP2 SWAP1 PUSH2 0x2949 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x18C8 PUSH2 0x1844 JUMP JUMPDEST PUSH0 PUSH2 0x18D1 PUSH2 0x10AA JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 PUSH0 ADD PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0x18F8 PUSH2 0x1844 JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1968 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x195F SWAP2 SWAP1 PUSH2 0x2401 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1971 DUP2 PUSH2 0x10D1 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x197C PUSH2 0x1844 JUMP JUMPDEST PUSH0 PUSH2 0x1985 PUSH2 0x1264 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 PUSH1 0x2 ADD SWAP1 DUP2 PUSH2 0x1998 SWAP2 SWAP1 PUSH2 0x2949 JUMP JUMPDEST POP DUP2 DUP2 PUSH1 0x3 ADD SWAP1 DUP2 PUSH2 0x19AA SWAP2 SWAP1 PUSH2 0x2949 JUMP JUMPDEST POP PUSH0 DUP1 SHL DUP2 PUSH0 ADD DUP2 SWAP1 SSTORE POP PUSH0 DUP1 SHL DUP2 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP4 PUSH1 0x2 DUP3 ADD MSTORE DUP3 PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 DUP2 KECCAK256 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 PUSH0 SHR GT ISZERO PUSH2 0x1A41 JUMPI PUSH0 PUSH1 0x3 DUP6 SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x1AE2 JUMP JUMPDEST PUSH0 PUSH1 0x1 DUP9 DUP9 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x1A64 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A84 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1AD5 JUMPI PUSH0 PUSH1 0x1 PUSH0 DUP1 SHL SWAP4 POP SWAP4 POP SWAP4 POP POP PUSH2 0x1AE2 JUMP JUMPDEST DUP1 PUSH0 DUP1 PUSH0 SHL SWAP4 POP SWAP4 POP SWAP4 POP POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1AFF JUMPI PUSH2 0x1AFE PUSH2 0x2A5B JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1B12 JUMPI PUSH2 0x1B11 PUSH2 0x2A5B JUMP JUMPDEST JUMPDEST SUB ISZERO PUSH2 0x1C4A JUMPI PUSH1 0x1 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1B2C JUMPI PUSH2 0x1B2B PUSH2 0x2A5B JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1B3F JUMPI PUSH2 0x1B3E PUSH2 0x2A5B JUMP JUMPDEST JUMPDEST SUB PUSH2 0x1B76 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF645EEDF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1B8A JUMPI PUSH2 0x1B89 PUSH2 0x2A5B JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1B9D JUMPI PUSH2 0x1B9C PUSH2 0x2A5B JUMP JUMPDEST JUMPDEST SUB PUSH2 0x1BE1 JUMPI DUP1 PUSH0 SHR PUSH1 0x40 MLOAD PUSH32 0xFCE698F700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1BD8 SWAP2 SWAP1 PUSH2 0x215B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 DUP1 DUP2 GT ISZERO PUSH2 0x1BF4 JUMPI PUSH2 0x1BF3 PUSH2 0x2A5B JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1C07 JUMPI PUSH2 0x1C06 PUSH2 0x2A5B JUMP JUMPDEST JUMPDEST SUB PUSH2 0x1C49 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0xD78BCE0C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C40 SWAP2 SWAP1 PUSH2 0x2210 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x1C56 PUSH2 0x1803 JUMP JUMPDEST PUSH2 0x1C61 DUP4 DUP4 DUP4 PUSH2 0x1D71 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x1C70 PUSH2 0x1264 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x1C7B PUSH2 0x128B JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 MLOAD GT ISZERO PUSH2 0x1C97 JUMPI DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP3 POP POP POP PUSH2 0x1CD9 JUMP JUMPDEST PUSH0 DUP3 PUSH0 ADD SLOAD SWAP1 POP PUSH0 DUP1 SHL DUP2 EQ PUSH2 0x1CB2 JUMPI DUP1 SWAP4 POP POP POP POP PUSH2 0x1CD9 JUMP JUMPDEST PUSH32 0xC5D2460186F7233C927E7DB2DCC703C0E500B653CA82273B7BFAD8045D85A470 SWAP4 POP POP POP POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x1CE6 PUSH2 0x1264 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x1CF1 PUSH2 0x1329 JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 MLOAD GT ISZERO PUSH2 0x1D0D JUMPI DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP3 POP POP POP PUSH2 0x1D50 JUMP JUMPDEST PUSH0 DUP3 PUSH1 0x1 ADD SLOAD SWAP1 POP PUSH0 DUP1 SHL DUP2 EQ PUSH2 0x1D29 JUMPI DUP1 SWAP4 POP POP POP POP PUSH2 0x1D50 JUMP JUMPDEST PUSH32 0xC5D2460186F7233C927E7DB2DCC703C0E500B653CA82273B7BFAD8045D85A470 SWAP4 POP POP POP POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x1D5C PUSH2 0x13EE JUMP JUMPDEST PUSH0 ADD PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x1D7A PUSH2 0xCE7 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1DCE JUMPI DUP2 DUP2 PUSH1 0x2 ADD PUSH0 DUP3 DUP3 SLOAD PUSH2 0x1DC2 SWAP2 SWAP1 PUSH2 0x2AB5 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x1EA0 JUMP JUMPDEST PUSH0 DUP2 PUSH0 ADD PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0x1E59 JUMPI DUP5 DUP2 DUP5 PUSH1 0x40 MLOAD PUSH32 0xE450D38C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E50 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x272F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 DUP2 SUB DUP3 PUSH0 ADD PUSH0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1EE9 JUMPI DUP2 DUP2 PUSH1 0x2 ADD PUSH0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x1F35 JUMP JUMPDEST DUP2 DUP2 PUSH0 ADD PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x1F92 SWAP2 SWAP1 PUSH2 0x215B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1FD7 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1FBC JUMP JUMPDEST PUSH0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1FFC DUP3 PUSH2 0x1FA0 JUMP JUMPDEST PUSH2 0x2006 DUP2 DUP6 PUSH2 0x1FAA JUMP JUMPDEST SWAP4 POP PUSH2 0x2016 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1FBA JUMP JUMPDEST PUSH2 0x201F DUP2 PUSH2 0x1FE2 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x2042 DUP2 DUP5 PUSH2 0x1FF2 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x2077 DUP3 PUSH2 0x204E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2087 DUP2 PUSH2 0x206D JUMP JUMPDEST DUP2 EQ PUSH2 0x2091 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x20A2 DUP2 PUSH2 0x207E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x20BA DUP2 PUSH2 0x20A8 JUMP JUMPDEST DUP2 EQ PUSH2 0x20C4 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x20D5 DUP2 PUSH2 0x20B1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x20F1 JUMPI PUSH2 0x20F0 PUSH2 0x204A JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x20FE DUP6 DUP3 DUP7 ADD PUSH2 0x2094 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x210F DUP6 DUP3 DUP7 ADD PUSH2 0x20C7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x212D DUP2 PUSH2 0x2119 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2146 PUSH0 DUP4 ADD DUP5 PUSH2 0x2124 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2155 DUP2 PUSH2 0x20A8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x216E PUSH0 DUP4 ADD DUP5 PUSH2 0x214C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x218B JUMPI PUSH2 0x218A PUSH2 0x204A JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x2198 DUP7 DUP3 DUP8 ADD PUSH2 0x2094 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x21A9 DUP7 DUP3 DUP8 ADD PUSH2 0x2094 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x21BA DUP7 DUP3 DUP8 ADD PUSH2 0x20C7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x21D9 DUP2 PUSH2 0x21C4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x21F2 PUSH0 DUP4 ADD DUP5 PUSH2 0x21D0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x220A DUP2 PUSH2 0x21F8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2223 PUSH0 DUP4 ADD DUP5 PUSH2 0x2201 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x223E JUMPI PUSH2 0x223D PUSH2 0x204A JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x224B DUP5 DUP3 DUP6 ADD PUSH2 0x20C7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2269 JUMPI PUSH2 0x2268 PUSH2 0x204A JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x2276 DUP5 DUP3 DUP6 ADD PUSH2 0x2094 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x22B3 DUP2 PUSH2 0x227F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x22C2 DUP2 PUSH2 0x206D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x22FA DUP2 PUSH2 0x20A8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH2 0x230B DUP4 DUP4 PUSH2 0x22F1 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x232D DUP3 PUSH2 0x22C8 JUMP JUMPDEST PUSH2 0x2337 DUP2 DUP6 PUSH2 0x22D2 JUMP JUMPDEST SWAP4 POP PUSH2 0x2342 DUP4 PUSH2 0x22E2 JUMP JUMPDEST DUP1 PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2372 JUMPI DUP2 MLOAD PUSH2 0x2359 DUP9 DUP3 PUSH2 0x2300 JUMP JUMPDEST SWAP8 POP PUSH2 0x2364 DUP4 PUSH2 0x2317 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x2345 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0xE0 DUP3 ADD SWAP1 POP PUSH2 0x2392 PUSH0 DUP4 ADD DUP11 PUSH2 0x22AA JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x23A4 DUP2 DUP10 PUSH2 0x1FF2 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x23B8 DUP2 DUP9 PUSH2 0x1FF2 JUMP JUMPDEST SWAP1 POP PUSH2 0x23C7 PUSH1 0x60 DUP4 ADD DUP8 PUSH2 0x214C JUMP JUMPDEST PUSH2 0x23D4 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x22B9 JUMP JUMPDEST PUSH2 0x23E1 PUSH1 0xA0 DUP4 ADD DUP6 PUSH2 0x2201 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x23F3 DUP2 DUP5 PUSH2 0x2323 JUMP JUMPDEST SWAP1 POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2414 PUSH0 DUP4 ADD DUP5 PUSH2 0x22B9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2423 DUP2 PUSH2 0x21C4 JUMP JUMPDEST DUP2 EQ PUSH2 0x242D JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x243E DUP2 PUSH2 0x241A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x244D DUP2 PUSH2 0x21F8 JUMP JUMPDEST DUP2 EQ PUSH2 0x2457 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2468 DUP2 PUSH2 0x2444 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x2489 JUMPI PUSH2 0x2488 PUSH2 0x204A JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x2496 DUP11 DUP3 DUP12 ADD PUSH2 0x2094 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 PUSH2 0x24A7 DUP11 DUP3 DUP12 ADD PUSH2 0x2094 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 PUSH2 0x24B8 DUP11 DUP3 DUP12 ADD PUSH2 0x20C7 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 PUSH2 0x24C9 DUP11 DUP3 DUP12 ADD PUSH2 0x20C7 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH2 0x24DA DUP11 DUP3 DUP12 ADD PUSH2 0x2430 JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 PUSH2 0x24EB DUP11 DUP3 DUP12 ADD PUSH2 0x245A JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 PUSH2 0x24FC DUP11 DUP3 DUP12 ADD PUSH2 0x245A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2521 JUMPI PUSH2 0x2520 PUSH2 0x204A JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x252E DUP6 DUP3 DUP7 ADD PUSH2 0x2094 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x253F DUP6 DUP3 DUP7 ADD PUSH2 0x2094 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x258D JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x25A0 JUMPI PUSH2 0x259F PUSH2 0x2549 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4549503731323A20556E696E697469616C697A65640000000000000000000000 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x25DA PUSH1 0x15 DUP4 PUSH2 0x1FAA JUMP JUMPDEST SWAP2 POP PUSH2 0x25E5 DUP3 PUSH2 0x25A6 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x2607 DUP2 PUSH2 0x25CE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x267A PUSH2 0x2675 PUSH2 0x2670 DUP5 PUSH2 0x263B JUMP JUMPDEST PUSH2 0x2657 JUMP JUMPDEST PUSH2 0x2644 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x268A DUP2 PUSH2 0x2660 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x26A3 PUSH0 DUP4 ADD DUP5 PUSH2 0x2681 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0xC0 DUP3 ADD SWAP1 POP PUSH2 0x26BC PUSH0 DUP4 ADD DUP10 PUSH2 0x2201 JUMP JUMPDEST PUSH2 0x26C9 PUSH1 0x20 DUP4 ADD DUP9 PUSH2 0x22B9 JUMP JUMPDEST PUSH2 0x26D6 PUSH1 0x40 DUP4 ADD DUP8 PUSH2 0x22B9 JUMP JUMPDEST PUSH2 0x26E3 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x214C JUMP JUMPDEST PUSH2 0x26F0 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x214C JUMP JUMPDEST PUSH2 0x26FD PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x214C JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x271B PUSH0 DUP4 ADD DUP6 PUSH2 0x22B9 JUMP JUMPDEST PUSH2 0x2728 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x22B9 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2742 PUSH0 DUP4 ADD DUP7 PUSH2 0x22B9 JUMP JUMPDEST PUSH2 0x274F PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x214C JUMP JUMPDEST PUSH2 0x275C PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x214C JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x2777 PUSH0 DUP4 ADD DUP9 PUSH2 0x2201 JUMP JUMPDEST PUSH2 0x2784 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x2201 JUMP JUMPDEST PUSH2 0x2791 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x2201 JUMP JUMPDEST PUSH2 0x279E PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x214C JUMP JUMPDEST PUSH2 0x27AB PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x22B9 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP DUP2 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x8 DUP4 MUL PUSH2 0x2811 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x27D6 JUMP JUMPDEST PUSH2 0x281B DUP7 DUP4 PUSH2 0x27D6 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x284D PUSH2 0x2848 PUSH2 0x2843 DUP5 PUSH2 0x20A8 JUMP JUMPDEST PUSH2 0x2657 JUMP JUMPDEST PUSH2 0x20A8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2866 DUP4 PUSH2 0x2833 JUMP JUMPDEST PUSH2 0x287A PUSH2 0x2872 DUP3 PUSH2 0x2854 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x27E2 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH0 SWAP1 JUMP JUMPDEST PUSH2 0x288E PUSH2 0x2882 JUMP JUMPDEST PUSH2 0x2899 DUP2 DUP5 DUP5 PUSH2 0x285D JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x28BC JUMPI PUSH2 0x28B1 PUSH0 DUP3 PUSH2 0x2886 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x289F JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x2901 JUMPI PUSH2 0x28D2 DUP2 PUSH2 0x27B5 JUMP JUMPDEST PUSH2 0x28DB DUP5 PUSH2 0x27C7 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x28EA JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x28FE PUSH2 0x28F6 DUP6 PUSH2 0x27C7 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x289E JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x2921 PUSH0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x2906 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x2939 DUP4 DUP4 PUSH2 0x2912 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2952 DUP3 PUSH2 0x1FA0 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x296B JUMPI PUSH2 0x296A PUSH2 0x260E JUMP JUMPDEST JUMPDEST PUSH2 0x2975 DUP3 SLOAD PUSH2 0x2576 JUMP JUMPDEST PUSH2 0x2980 DUP3 DUP3 DUP6 PUSH2 0x28C0 JUMP JUMPDEST PUSH0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x29B1 JUMPI PUSH0 DUP5 ISZERO PUSH2 0x299F JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x29A9 DUP6 DUP3 PUSH2 0x292E JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x2A10 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x29BF DUP7 PUSH2 0x27B5 JUMP JUMPDEST PUSH0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x29E6 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x29C1 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x2A03 JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x29FF PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x2912 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2A2B PUSH0 DUP4 ADD DUP8 PUSH2 0x2201 JUMP JUMPDEST PUSH2 0x2A38 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x21D0 JUMP JUMPDEST PUSH2 0x2A45 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2201 JUMP JUMPDEST PUSH2 0x2A52 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x2201 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0x2ABF DUP3 PUSH2 0x20A8 JUMP JUMPDEST SWAP2 POP PUSH2 0x2ACA DUP4 PUSH2 0x20A8 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x2AE2 JUMPI PUSH2 0x2AE1 PUSH2 0x2A88 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH4 0xB4D87D66 0x2A 0xAA 0x4D 0xF 0x49 PUSH11 0x4B54EB5C97CE814D65C630 PUSH8 0x62753A9A5D10D84D 0xBE PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ",
							"sourceMap": "582:1021:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3011:144:2;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5505:186;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4191:152;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6251:244;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4049:82;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3082:112:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1178:63:20;;;:::i;:::-;;1247:93;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;931:87:3;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2692:145:8;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4401:171:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3155:101:0;;;:::i;:::-;;1334:158:3;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2821:154:5;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1113:59:20;;;:::i;:::-;;5173:903:9;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;2441:144:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3268:148:2;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4767:178;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;848:259:20;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2095:672:5;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5003:195:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3405:215:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3011:144:2;3056:13;3081:22;3106:18;:16;:18::i;:::-;3081:43;;3141:1;:7;;3134:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3011:144;:::o;5505:186::-;5578:4;5594:13;5610:12;:10;:12::i;:::-;5594:28;;5632:31;5641:5;5648:7;5657:5;5632:8;:31::i;:::-;5680:4;5673:11;;;5505:186;;;;:::o;4191:152::-;4243:7;4262:22;4287:18;:16;:18::i;:::-;4262:43;;4322:1;:14;;;4315:21;;;4191:152;:::o;6251:244::-;6338:4;6354:15;6372:12;:10;:12::i;:::-;6354:30;;6394:37;6410:4;6416:7;6425:5;6394:15;:37::i;:::-;6441:26;6451:4;6457:2;6461:5;6441:9;:26::i;:::-;6484:4;6477:11;;;6251:244;;;;;:::o;4049:82::-;4098:5;4122:2;4115:9;;4049:82;:::o;3082:112:5:-;3141:7;3167:20;:18;:20::i;:::-;3160:27;;3082:112;:::o;1178:63:20:-;2334:13:0;:11;:13::i;:::-;1224:10:20::1;:8;:10::i;:::-;1178:63::o:0;1247:93::-;2334:13:0;:11;:13::i;:::-;1316:17:20::1;1322:2;1326:6;1316:5;:17::i;:::-;1247:93:::0;;:::o;931:87:3:-;985:26;991:12;:10;:12::i;:::-;1005:5;985;:26::i;:::-;931:87;:::o;2692:145:8:-;2739:4;2755:25;2783:21;:19;:21::i;:::-;2755:49;;2821:1;:9;;;;;;;;;;;;2814:16;;;2692:145;:::o;4401:171:2:-;4466:7;4485:22;4510:18;:16;:18::i;:::-;4485:43;;4545:1;:11;;:20;4557:7;4545:20;;;;;;;;;;;;;;;;4538:27;;;4401:171;;;:::o;3155:101:0:-;2334:13;:11;:13::i;:::-;3219:30:::1;3246:1;3219:18;:30::i;:::-;3155:101::o:0;1334:158:3:-;1409:45;1425:7;1434:12;:10;:12::i;:::-;1448:5;1409:15;:45::i;:::-;1464:21;1470:7;1479:5;1464;:21::i;:::-;1334:158;;:::o;2821:154:5:-;2923:7;2949:19;2962:5;2949:12;:19::i;:::-;2942:26;;2821:154;;;:::o;1113:59:20:-;2334:13:0;:11;:13::i;:::-;1157:8:20::1;:6;:8::i;:::-;1113:59::o:0;5173:903:9:-;5271:13;5298:18;5330:21;5365:15;5394:25;5433:12;5459:27;5511:23;5537:19;:17;:19::i;:::-;5511:45;;5794:1;5777:18;;:1;:13;;;:18;:43;;;;;5819:1;5799:21;;:1;:16;;;:21;5777:43;5769:77;;;;;;;;;;;;:::i;:::-;;;;;;;;;5908:13;:11;:13::i;:::-;5935:16;:14;:16::i;:::-;5965:13;6000:4;6027:1;6019:10;;6057:1;6043:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5857:212;;;;;;;;;;;;;;;;;;;;;;5173:903;;;;;;;:::o;2441:144:0:-;2487:7;2506:24;2533:20;:18;:20::i;:::-;2506:47;;2570:1;:8;;;;;;;;;;;;2563:15;;;2441:144;:::o;3268:148:2:-;3315:13;3340:22;3365:18;:16;:18::i;:::-;3340:43;;3400:1;:9;;3393:16;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3268:148;:::o;4767:178::-;4836:4;4852:13;4868:12;:10;:12::i;:::-;4852:28;;4890:27;4900:5;4907:2;4911:5;4890:9;:27::i;:::-;4934:4;4927:11;;;4767:178;;;;:::o;848:259:20:-;4158:30:1;4191:26;:24;:26::i;:::-;4158:59;;4279:19;4302:1;:15;;;;;;;;;;;;4301:16;4279:38;;4327:18;4348:1;:14;;;;;;;;;;;;4327:35;;4706:17;4741:1;4726:11;:16;;;:34;;;;;4746:14;4726:34;4706:54;;4770:17;4805:1;4790:11;:16;;;:50;;;;;4839:1;4818:4;4810:25;;;:30;4790:50;4770:70;;4856:12;4855:13;:30;;;;;4873:12;4872:13;4855:30;4851:91;;;4908:23;;;;;;;;;;;;;;4851:91;4968:1;4951;:14;;;:18;;;;;;;;;;;;;;;;;;4983:14;4979:67;;;5031:4;5013:1;:15;;;:22;;;;;;;;;;;;;;;;;;4979:67;919:36:20::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;::::0;:12:::1;:36::i;:::-;965:22;:20;:22::i;:::-;997;:20;:22::i;:::-;1029:28;1044:12;1029:14;:28::i;:::-;1067:33;;;;;;;;;;;;;;;;;::::0;:18:::1;:33::i;:::-;5070:14:1::0;5066:101;;;5118:5;5100:1;:15;;;:23;;;;;;;;;;;;;;;;;;5142:14;5154:1;5142:14;;;;;;:::i;:::-;;;;;;;;5066:101;4092:1081;;;;;848:259:20;:::o;2095:672:5:-;2316:8;2298:15;:26;2294:97;;;2371:8;2347:33;;;;;;;;;;;:::i;:::-;;;;;;;;2294:97;2401:18;1277:95;2460:5;2467:7;2476:5;2483:16;2493:5;2483:9;:16::i;:::-;2501:8;2432:78;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2422:89;;;;;;2401:110;;2522:12;2537:28;2554:10;2537:16;:28::i;:::-;2522:43;;2576:14;2593:28;2607:4;2613:1;2616;2619;2593:13;:28::i;:::-;2576:45;;2645:5;2635:15;;:6;:15;;;2631:88;;2694:6;2702:5;2673:35;;;;;;;;;;;;:::i;:::-;;;;;;;;2631:88;2729:31;2738:5;2745:7;2754:5;2729:8;:31::i;:::-;2284:483;;;2095:672;;;;;;;:::o;5003:195:2:-;5083:7;5102:22;5127:18;:16;:18::i;:::-;5102:43;;5162:1;:13;;:20;5176:5;5162:20;;;;;;;;;;;;;;;:29;5183:7;5162:29;;;;;;;;;;;;;;;;5155:36;;;5003:195;;;;:::o;3405:215:0:-;2334:13;:11;:13::i;:::-;3509:1:::1;3489:22;;:8;:22;;::::0;3485:91:::1;;3562:1;3534:31;;;;;;;;;;;:::i;:::-;;;;;;;;3485:91;3585:28;3604:8;3585:18;:28::i;:::-;3405:215:::0;:::o;2242:153:2:-;2292:22;2359:20;2349:30;;2242:153;:::o;887:96:6:-;940:7;966:10;959:17;;887:96;:::o;10264:128:2:-;10348:37;10357:5;10364:7;10373:5;10380:4;10348:8;:37::i;:::-;10264:128;;;:::o;11993:477::-;12092:24;12119:25;12129:5;12136:7;12119:9;:25::i;:::-;12092:52;;12178:17;12158:16;:37;12154:310;;12234:5;12215:16;:24;12211:130;;;12293:7;12302:16;12320:5;12266:60;;;;;;;;;;;;;:::i;:::-;;;;;;;;12211:130;12382:57;12391:5;12398:7;12426:5;12407:16;:24;12433:5;12382:8;:57::i;:::-;12154:310;12082:388;11993:477;;;:::o;6868:300::-;6967:1;6951:18;;:4;:18;;;6947:86;;7019:1;6992:30;;;;;;;;;;;:::i;:::-;;;;;;;;6947:86;7060:1;7046:16;;:2;:16;;;7042:86;;7114:1;7085:32;;;;;;;;;;;:::i;:::-;;;;;;;;7042:86;7137:24;7145:4;7151:2;7155:5;7137:7;:24::i;:::-;6868:300;;;:::o;4015:109:9:-;4068:7;4094:23;:21;:23::i;:::-;4087:30;;4015:109;:::o;2658:162:0:-;2728:12;:10;:12::i;:::-;2717:23;;:7;:5;:7::i;:::-;:23;;;2713:101;;2790:12;:10;:12::i;:::-;2763:40;;;;;;;;;;;:::i;:::-;;;;;;;;2713:101;2658:162::o;3674:178:8:-;2563:16;:14;:16::i;:::-;3732:25:::1;3760:21;:19;:21::i;:::-;3732:49;;3803:5;3791:1;:9;;;:17;;;;;;;;;;;;;;;;;;3823:22;3832:12;:10;:12::i;:::-;3823:22;;;;;;:::i;:::-;;;;;;;;3722:130;3674:178::o:0;8996:208:2:-;9085:1;9066:21;;:7;:21;;;9062:91;;9139:1;9110:32;;;;;;;;;;;:::i;:::-;;;;;;;;9062:91;9162:35;9178:1;9182:7;9191:5;9162:7;:35::i;:::-;8996:208;;:::o;9522:206::-;9611:1;9592:21;;:7;:21;;;9588:89;;9663:1;9636:30;;;;;;;;;;;:::i;:::-;;;;;;;;9588:89;9686:35;9694:7;9711:1;9715:5;9686:7;:35::i;:::-;9522:206;;:::o;1147:162:8:-;1200:25;1270:23;1260:33;;1147:162;:::o;3774:248:0:-;3847:24;3874:20;:18;:20::i;:::-;3847:47;;3904:16;3923:1;:8;;;;;;;;;;;;3904:27;;3952:8;3941:1;:8;;;:19;;;;;;;;;;;;;;;;;;4006:8;3975:40;;3996:8;3975:40;;;;;;;;;;;;3837:185;;3774:248;:::o;1259:164:7:-;1319:7;1338:23;1364:19;:17;:19::i;:::-;1338:45;;1400:1;:9;;:16;1410:5;1400:16;;;;;;;;;;;;;;;;1393:23;;;1259:164;;;:::o;3366:176:8:-;2316:19;:17;:19::i;:::-;3425:25:::1;3453:21;:19;:21::i;:::-;3425:49;;3496:4;3484:1;:9;;;:16;;;;;;;;;;;;;;;;;;3515:20;3522:12;:10;:12::i;:::-;3515:20;;;;;;:::i;:::-;;;;;;;;3415:127;3366:176::o:0;2720:156:9:-;2771:23;2839:21;2829:31;;2720:156;:::o;6300:155::-;6354:13;6379:23;6405:19;:17;:19::i;:::-;6379:45;;6441:1;:7;;6434:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6300:155;:::o;6682:161::-;6739:13;6764:23;6790:19;:17;:19::i;:::-;6764:45;;6826:1;:10;;6819:17;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6682:161;:::o;1192:159:0:-;1244:24;1313:22;1303:32;;1192:159;:::o;8737:170:1:-;8795:30;8870:21;8860:31;;8737:170;:::o;2577:147:2:-;6931:20:1;:18;:20::i;:::-;2679:38:2::1;2702:5;2709:7;2679:22;:38::i;:::-;2577:147:::0;;:::o;666:65:3:-;6931:20:1;:18;:20::i;:::-;666:65:3:o;1148:102:4:-;6931:20:1;:18;:20::i;:::-;1216:27:4::1;:25;:27::i;:::-;1148:102::o:0;1847:127:0:-;6931:20:1;:18;:20::i;:::-;1929:38:0::1;1954:12;1929:24;:38::i;:::-;1847:127:::0;:::o;1829:125:5:-;6931:20:1;:18;:20::i;:::-;1913:34:5::1;1937:4;1913:34;;;;;;;;;;;;;;;;::::0;:23:::1;:34::i;:::-;1829:125:::0;:::o;1537:452:7:-;1597:7;1616:23;1642:19;:17;:19::i;:::-;1616:45;;1954:1;:9;;:16;1964:5;1954:16;;;;;;;;;;;;;;;;:18;;;;;;;;;;;;1947:25;;;1537:452;;;:::o;4946:176:9:-;5023:7;5049:66;5082:20;:18;:20::i;:::-;5104:10;5049:32;:66::i;:::-;5042:73;;4946:176;;;:::o;6803:260:16:-;6888:7;6908:17;6927:18;6947:16;6967:25;6978:4;6984:1;6987;6990;6967:10;:25::i;:::-;6907:85;;;;;;7002:28;7014:5;7021:8;7002:11;:28::i;:::-;7047:9;7040:16;;;;;6803:260;;;;;;:::o;11224:487:2:-;11332:22;11357:18;:16;:18::i;:::-;11332:43;;11406:1;11389:19;;:5;:19;;;11385:89;;11460:1;11431:32;;;;;;;;;;;:::i;:::-;;;;;;;;11385:89;11506:1;11487:21;;:7;:21;;;11483:90;;11559:1;11531:31;;;;;;;;;;;:::i;:::-;;;;;;;;11483:90;11614:5;11582:1;:13;;:20;11596:5;11582:20;;;;;;;;;;;;;;;:29;11603:7;11582:29;;;;;;;;;;;;;;;:37;;;;11633:9;11629:76;;;11679:7;11663:31;;11672:5;11663:31;;;11688:5;11663:31;;;;;;:::i;:::-;;;;;;;;11629:76;11322:389;11224:487;;;;:::o;1414:187:20:-;1564:30;1578:4;1584:2;1588:5;1564:13;:30::i;:::-;1414:187;;;:::o;4130:191:9:-;4185:7;2073:95;4243:17;:15;:17::i;:::-;4262:20;:18;:20::i;:::-;4284:13;4307:4;4221:92;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4211:103;;;;;;4204:110;;4130:191;:::o;3105:126:8:-;3168:8;:6;:8::i;:::-;3163:62;;3199:15;;;;;;;;;;;;;;3163:62;3105:126::o;886:156:7:-;937:23;1005:21;995:31;;886:156;:::o;2905:128:8:-;2970:8;:6;:8::i;:::-;2966:61;;;3001:15;;;;;;;;;;;;;;2966:61;2905:128::o;7084:141:1:-;7151:17;:15;:17::i;:::-;7146:73;;7191:17;;;;;;;;;;;;;;7146:73;7084:141::o;2730:216:2:-;6931:20:1;:18;:20::i;:::-;2842:22:2::1;2867:18;:16;:18::i;:::-;2842:43;;2905:5;2895:1;:7;;:15;;;;;;:::i;:::-;;2932:7;2920:1;:9;;:19;;;;;;:::i;:::-;;2832:114;2730:216:::0;;:::o;1939:156:8:-;6931:20:1;:18;:20::i;:::-;2012:25:8::1;2040:21;:19;:21::i;:::-;2012:49;;2083:5;2071:1;:9;;;:17;;;;;;;;;;;;;;;;;;2002:93;1939:156::o:0;1980:235:0:-;6931:20:1;:18;:20::i;:::-;2100:1:0::1;2076:26;;:12;:26;;::::0;2072:95:::1;;2153:1;2125:31;;;;;;;;;;;:::i;:::-;;;;;;;;2072:95;2176:32;2195:12;2176:18;:32::i;:::-;1980:235:::0;:::o;3599:330:9:-;6931:20:1;:18;:20::i;:::-;3711:23:9::1;3737:19;:17;:19::i;:::-;3711:45;;3776:4;3766:1;:7;;:14;;;;;;:::i;:::-;;3803:7;3790:1;:10;;:20;;;;;;:::i;:::-;;3891:1;3875:17:::0;::::1;:1;:13;;:17;;;;3921:1;3902:20:::0;::::1;:1;:16;;:20;;;;3701:228;3599:330:::0;;:::o;3353:401:17:-;3446:14;3555:4;3549:11;3585:10;3580:3;3573:23;3632:15;3625:4;3620:3;3616:14;3609:39;3684:10;3677:4;3672:3;3668:14;3661:34;3733:4;3728:3;3718:20;3708:30;;3524:224;3353:401;;;;:::o;5140:1530:16:-;5266:7;5275:12;5289:7;6199:66;6194:1;6186:10;;:79;6182:164;;;6297:1;6301:30;6333:1;6281:54;;;;;;;;6182:164;6440:14;6457:24;6467:4;6473:1;6476;6479;6457:24;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6440:41;;6513:1;6495:20;;:6;:20;;;6491:113;;6547:1;6551:29;6590:1;6582:10;;6531:62;;;;;;;;;6491:113;6622:6;6630:20;6660:1;6652:10;;6614:49;;;;;;;5140:1530;;;;;;;;;:::o;7196:532::-;7291:20;7282:29;;;;;;;;:::i;:::-;;:5;:29;;;;;;;;:::i;:::-;;;7278:444;7327:7;7278:444;7387:29;7378:38;;;;;;;;:::i;:::-;;:5;:38;;;;;;;;:::i;:::-;;;7374:348;;7439:23;;;;;;;;;;;;;;7374:348;7492:35;7483:44;;;;;;;;:::i;:::-;;:5;:44;;;;;;;;:::i;:::-;;;7479:243;;7586:8;7578:17;;7550:46;;;;;;;;;;;:::i;:::-;;;;;;;;7479:243;7626:30;7617:39;;;;;;;;:::i;:::-;;:5;:39;;;;;;;;:::i;:::-;;;7613:109;;7702:8;7679:32;;;;;;;;;;;:::i;:::-;;;;;;;;7613:109;7196:532;;;:::o;1462:145:4:-;2316:19:8;:17;:19::i;:::-;1570:30:4::1;1584:4;1590:2;1594:5;1570:13;:30::i;:::-;1462:145:::0;;;:::o;7058:687:9:-;7108:7;7127:23;7153:19;:17;:19::i;:::-;7127:45;;7182:18;7203:13;:11;:13::i;:::-;7182:34;;7251:1;7236:4;7230:18;:22;7226:513;;;7291:4;7275:22;;;;;;7268:29;;;;;;7226:513;7551:18;7572:1;:13;;;7551:34;;7617:1;7603:15;;:10;:15;7599:130;;7645:10;7638:17;;;;;;;7599:130;7701:13;7694:20;;;;;7058:687;;:::o;7966:723::-;8019:7;8038:23;8064:19;:17;:19::i;:::-;8038:45;;8093:21;8117:16;:14;:16::i;:::-;8093:40;;8171:1;8153:7;8147:21;:25;8143:540;;;8211:7;8195:25;;;;;;8188:32;;;;;;8143:540;8483:21;8507:1;:16;;;8483:40;;8558:1;8541:18;;:13;:18;8537:136;;8586:13;8579:20;;;;;;;8537:136;8645:13;8638:20;;;;;7966:723;;:::o;8487:120:1:-;8537:4;8560:26;:24;:26::i;:::-;:40;;;;;;;;;;;;8553:47;;8487:120;:::o;7483:1170:2:-;7568:22;7593:18;:16;:18::i;:::-;7568:43;;7641:1;7625:18;;:4;:18;;;7621:546;;7779:5;7761:1;:14;;;:23;;;;;;;:::i;:::-;;;;;;;;7621:546;;;7815:19;7837:1;:11;;:17;7849:4;7837:17;;;;;;;;;;;;;;;;7815:39;;7886:5;7872:11;:19;7868:115;;;7943:4;7949:11;7962:5;7918:50;;;;;;;;;;;;;:::i;:::-;;;;;;;;7868:115;8137:5;8123:11;:19;8103:1;:11;;:17;8115:4;8103:17;;;;;;;;;;;;;;;:39;;;;7801:366;7621:546;8195:1;8181:16;;:2;:16;;;8177:429;;8362:5;8344:1;:14;;;:23;;;;;;;;;;;8177:429;;;8576:5;8557:1;:11;;:15;8569:2;8557:15;;;;;;;;;;;;;;;;:24;;;;;;;;;;;8177:429;8636:2;8621:25;;8630:4;8621:25;;;8640:5;8621:25;;;;;;:::i;:::-;;;;;;;;7558:1095;7483:1170;;;:::o;7:99:21:-;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:169::-;196:11;230:6;225:3;218:19;270:4;265:3;261:14;246:29;;112:169;;;;:::o;287:246::-;368:1;378:113;392:6;389:1;386:13;378:113;;;477:1;472:3;468:11;462:18;458:1;453:3;449:11;442:39;414:2;411:1;407:10;402:15;;378:113;;;525:1;516:6;511:3;507:16;500:27;349:184;287:246;;;:::o;539:102::-;580:6;631:2;627:7;622:2;615:5;611:14;607:28;597:38;;539:102;;;:::o;647:377::-;735:3;763:39;796:5;763:39;:::i;:::-;818:71;882:6;877:3;818:71;:::i;:::-;811:78;;898:65;956:6;951:3;944:4;937:5;933:16;898:65;:::i;:::-;988:29;1010:6;988:29;:::i;:::-;983:3;979:39;972:46;;739:285;647:377;;;;:::o;1030:313::-;1143:4;1181:2;1170:9;1166:18;1158:26;;1230:9;1224:4;1220:20;1216:1;1205:9;1201:17;1194:47;1258:78;1331:4;1322:6;1258:78;:::i;:::-;1250:86;;1030:313;;;;:::o;1430:117::-;1539:1;1536;1529:12;1676:126;1713:7;1753:42;1746:5;1742:54;1731:65;;1676:126;;;:::o;1808:96::-;1845:7;1874:24;1892:5;1874:24;:::i;:::-;1863:35;;1808:96;;;:::o;1910:122::-;1983:24;2001:5;1983:24;:::i;:::-;1976:5;1973:35;1963:63;;2022:1;2019;2012:12;1963:63;1910:122;:::o;2038:139::-;2084:5;2122:6;2109:20;2100:29;;2138:33;2165:5;2138:33;:::i;:::-;2038:139;;;;:::o;2183:77::-;2220:7;2249:5;2238:16;;2183:77;;;:::o;2266:122::-;2339:24;2357:5;2339:24;:::i;:::-;2332:5;2329:35;2319:63;;2378:1;2375;2368:12;2319:63;2266:122;:::o;2394:139::-;2440:5;2478:6;2465:20;2456:29;;2494:33;2521:5;2494:33;:::i;:::-;2394:139;;;;:::o;2539:474::-;2607:6;2615;2664:2;2652:9;2643:7;2639:23;2635:32;2632:119;;;2670:79;;:::i;:::-;2632:119;2790:1;2815:53;2860:7;2851:6;2840:9;2836:22;2815:53;:::i;:::-;2805:63;;2761:117;2917:2;2943:53;2988:7;2979:6;2968:9;2964:22;2943:53;:::i;:::-;2933:63;;2888:118;2539:474;;;;;:::o;3019:90::-;3053:7;3096:5;3089:13;3082:21;3071:32;;3019:90;;;:::o;3115:109::-;3196:21;3211:5;3196:21;:::i;:::-;3191:3;3184:34;3115:109;;:::o;3230:210::-;3317:4;3355:2;3344:9;3340:18;3332:26;;3368:65;3430:1;3419:9;3415:17;3406:6;3368:65;:::i;:::-;3230:210;;;;:::o;3446:118::-;3533:24;3551:5;3533:24;:::i;:::-;3528:3;3521:37;3446:118;;:::o;3570:222::-;3663:4;3701:2;3690:9;3686:18;3678:26;;3714:71;3782:1;3771:9;3767:17;3758:6;3714:71;:::i;:::-;3570:222;;;;:::o;3798:619::-;3875:6;3883;3891;3940:2;3928:9;3919:7;3915:23;3911:32;3908:119;;;3946:79;;:::i;:::-;3908:119;4066:1;4091:53;4136:7;4127:6;4116:9;4112:22;4091:53;:::i;:::-;4081:63;;4037:117;4193:2;4219:53;4264:7;4255:6;4244:9;4240:22;4219:53;:::i;:::-;4209:63;;4164:118;4321:2;4347:53;4392:7;4383:6;4372:9;4368:22;4347:53;:::i;:::-;4337:63;;4292:118;3798:619;;;;;:::o;4423:86::-;4458:7;4498:4;4491:5;4487:16;4476:27;;4423:86;;;:::o;4515:112::-;4598:22;4614:5;4598:22;:::i;:::-;4593:3;4586:35;4515:112;;:::o;4633:214::-;4722:4;4760:2;4749:9;4745:18;4737:26;;4773:67;4837:1;4826:9;4822:17;4813:6;4773:67;:::i;:::-;4633:214;;;;:::o;4853:77::-;4890:7;4919:5;4908:16;;4853:77;;;:::o;4936:118::-;5023:24;5041:5;5023:24;:::i;:::-;5018:3;5011:37;4936:118;;:::o;5060:222::-;5153:4;5191:2;5180:9;5176:18;5168:26;;5204:71;5272:1;5261:9;5257:17;5248:6;5204:71;:::i;:::-;5060:222;;;;:::o;5288:329::-;5347:6;5396:2;5384:9;5375:7;5371:23;5367:32;5364:119;;;5402:79;;:::i;:::-;5364:119;5522:1;5547:53;5592:7;5583:6;5572:9;5568:22;5547:53;:::i;:::-;5537:63;;5493:117;5288:329;;;;:::o;5623:::-;5682:6;5731:2;5719:9;5710:7;5706:23;5702:32;5699:119;;;5737:79;;:::i;:::-;5699:119;5857:1;5882:53;5927:7;5918:6;5907:9;5903:22;5882:53;:::i;:::-;5872:63;;5828:117;5623:329;;;;:::o;5958:149::-;5994:7;6034:66;6027:5;6023:78;6012:89;;5958:149;;;:::o;6113:115::-;6198:23;6215:5;6198:23;:::i;:::-;6193:3;6186:36;6113:115;;:::o;6234:118::-;6321:24;6339:5;6321:24;:::i;:::-;6316:3;6309:37;6234:118;;:::o;6358:114::-;6425:6;6459:5;6453:12;6443:22;;6358:114;;;:::o;6478:184::-;6577:11;6611:6;6606:3;6599:19;6651:4;6646:3;6642:14;6627:29;;6478:184;;;;:::o;6668:132::-;6735:4;6758:3;6750:11;;6788:4;6783:3;6779:14;6771:22;;6668:132;;;:::o;6806:108::-;6883:24;6901:5;6883:24;:::i;:::-;6878:3;6871:37;6806:108;;:::o;6920:179::-;6989:10;7010:46;7052:3;7044:6;7010:46;:::i;:::-;7088:4;7083:3;7079:14;7065:28;;6920:179;;;;:::o;7105:113::-;7175:4;7207;7202:3;7198:14;7190:22;;7105:113;;;:::o;7254:732::-;7373:3;7402:54;7450:5;7402:54;:::i;:::-;7472:86;7551:6;7546:3;7472:86;:::i;:::-;7465:93;;7582:56;7632:5;7582:56;:::i;:::-;7661:7;7692:1;7677:284;7702:6;7699:1;7696:13;7677:284;;;7778:6;7772:13;7805:63;7864:3;7849:13;7805:63;:::i;:::-;7798:70;;7891:60;7944:6;7891:60;:::i;:::-;7881:70;;7737:224;7724:1;7721;7717:9;7712:14;;7677:284;;;7681:14;7977:3;7970:10;;7378:608;;;7254:732;;;;:::o;7992:1215::-;8341:4;8379:3;8368:9;8364:19;8356:27;;8393:69;8459:1;8448:9;8444:17;8435:6;8393:69;:::i;:::-;8509:9;8503:4;8499:20;8494:2;8483:9;8479:18;8472:48;8537:78;8610:4;8601:6;8537:78;:::i;:::-;8529:86;;8662:9;8656:4;8652:20;8647:2;8636:9;8632:18;8625:48;8690:78;8763:4;8754:6;8690:78;:::i;:::-;8682:86;;8778:72;8846:2;8835:9;8831:18;8822:6;8778:72;:::i;:::-;8860:73;8928:3;8917:9;8913:19;8904:6;8860:73;:::i;:::-;8943;9011:3;9000:9;8996:19;8987:6;8943:73;:::i;:::-;9064:9;9058:4;9054:20;9048:3;9037:9;9033:19;9026:49;9092:108;9195:4;9186:6;9092:108;:::i;:::-;9084:116;;7992:1215;;;;;;;;;;:::o;9213:222::-;9306:4;9344:2;9333:9;9329:18;9321:26;;9357:71;9425:1;9414:9;9410:17;9401:6;9357:71;:::i;:::-;9213:222;;;;:::o;9441:118::-;9512:22;9528:5;9512:22;:::i;:::-;9505:5;9502:33;9492:61;;9549:1;9546;9539:12;9492:61;9441:118;:::o;9565:135::-;9609:5;9647:6;9634:20;9625:29;;9663:31;9688:5;9663:31;:::i;:::-;9565:135;;;;:::o;9706:122::-;9779:24;9797:5;9779:24;:::i;:::-;9772:5;9769:35;9759:63;;9818:1;9815;9808:12;9759:63;9706:122;:::o;9834:139::-;9880:5;9918:6;9905:20;9896:29;;9934:33;9961:5;9934:33;:::i;:::-;9834:139;;;;:::o;9979:1199::-;10090:6;10098;10106;10114;10122;10130;10138;10187:3;10175:9;10166:7;10162:23;10158:33;10155:120;;;10194:79;;:::i;:::-;10155:120;10314:1;10339:53;10384:7;10375:6;10364:9;10360:22;10339:53;:::i;:::-;10329:63;;10285:117;10441:2;10467:53;10512:7;10503:6;10492:9;10488:22;10467:53;:::i;:::-;10457:63;;10412:118;10569:2;10595:53;10640:7;10631:6;10620:9;10616:22;10595:53;:::i;:::-;10585:63;;10540:118;10697:2;10723:53;10768:7;10759:6;10748:9;10744:22;10723:53;:::i;:::-;10713:63;;10668:118;10825:3;10852:51;10895:7;10886:6;10875:9;10871:22;10852:51;:::i;:::-;10842:61;;10796:117;10952:3;10979:53;11024:7;11015:6;11004:9;11000:22;10979:53;:::i;:::-;10969:63;;10923:119;11081:3;11108:53;11153:7;11144:6;11133:9;11129:22;11108:53;:::i;:::-;11098:63;;11052:119;9979:1199;;;;;;;;;;:::o;11184:474::-;11252:6;11260;11309:2;11297:9;11288:7;11284:23;11280:32;11277:119;;;11315:79;;:::i;:::-;11277:119;11435:1;11460:53;11505:7;11496:6;11485:9;11481:22;11460:53;:::i;:::-;11450:63;;11406:117;11562:2;11588:53;11633:7;11624:6;11613:9;11609:22;11588:53;:::i;:::-;11578:63;;11533:118;11184:474;;;;;:::o;11664:180::-;11712:77;11709:1;11702:88;11809:4;11806:1;11799:15;11833:4;11830:1;11823:15;11850:320;11894:6;11931:1;11925:4;11921:12;11911:22;;11978:1;11972:4;11968:12;11999:18;11989:81;;12055:4;12047:6;12043:17;12033:27;;11989:81;12117:2;12109:6;12106:14;12086:18;12083:38;12080:84;;12136:18;;:::i;:::-;12080:84;11901:269;11850:320;;;:::o;12176:171::-;12316:23;12312:1;12304:6;12300:14;12293:47;12176:171;:::o;12353:366::-;12495:3;12516:67;12580:2;12575:3;12516:67;:::i;:::-;12509:74;;12592:93;12681:3;12592:93;:::i;:::-;12710:2;12705:3;12701:12;12694:19;;12353:366;;;:::o;12725:419::-;12891:4;12929:2;12918:9;12914:18;12906:26;;12978:9;12972:4;12968:20;12964:1;12953:9;12949:17;12942:47;13006:131;13132:4;13006:131;:::i;:::-;12998:139;;12725:419;;;:::o;13150:180::-;13198:77;13195:1;13188:88;13295:4;13292:1;13285:15;13319:4;13316:1;13309:15;13336:85;13381:7;13410:5;13399:16;;13336:85;;;:::o;13427:101::-;13463:7;13503:18;13496:5;13492:30;13481:41;;13427:101;;;:::o;13534:60::-;13562:3;13583:5;13576:12;;13534:60;;;:::o;13600:156::-;13657:9;13690:60;13707:42;13716:32;13742:5;13716:32;:::i;:::-;13707:42;:::i;:::-;13690:60;:::i;:::-;13677:73;;13600:156;;;:::o;13762:145::-;13856:44;13894:5;13856:44;:::i;:::-;13851:3;13844:57;13762:145;;:::o;13913:236::-;14013:4;14051:2;14040:9;14036:18;14028:26;;14064:78;14139:1;14128:9;14124:17;14115:6;14064:78;:::i;:::-;13913:236;;;;:::o;14155:775::-;14388:4;14426:3;14415:9;14411:19;14403:27;;14440:71;14508:1;14497:9;14493:17;14484:6;14440:71;:::i;:::-;14521:72;14589:2;14578:9;14574:18;14565:6;14521:72;:::i;:::-;14603;14671:2;14660:9;14656:18;14647:6;14603:72;:::i;:::-;14685;14753:2;14742:9;14738:18;14729:6;14685:72;:::i;:::-;14767:73;14835:3;14824:9;14820:19;14811:6;14767:73;:::i;:::-;14850;14918:3;14907:9;14903:19;14894:6;14850:73;:::i;:::-;14155:775;;;;;;;;;:::o;14936:332::-;15057:4;15095:2;15084:9;15080:18;15072:26;;15108:71;15176:1;15165:9;15161:17;15152:6;15108:71;:::i;:::-;15189:72;15257:2;15246:9;15242:18;15233:6;15189:72;:::i;:::-;14936:332;;;;;:::o;15274:442::-;15423:4;15461:2;15450:9;15446:18;15438:26;;15474:71;15542:1;15531:9;15527:17;15518:6;15474:71;:::i;:::-;15555:72;15623:2;15612:9;15608:18;15599:6;15555:72;:::i;:::-;15637;15705:2;15694:9;15690:18;15681:6;15637:72;:::i;:::-;15274:442;;;;;;:::o;15722:664::-;15927:4;15965:3;15954:9;15950:19;15942:27;;15979:71;16047:1;16036:9;16032:17;16023:6;15979:71;:::i;:::-;16060:72;16128:2;16117:9;16113:18;16104:6;16060:72;:::i;:::-;16142;16210:2;16199:9;16195:18;16186:6;16142:72;:::i;:::-;16224;16292:2;16281:9;16277:18;16268:6;16224:72;:::i;:::-;16306:73;16374:3;16363:9;16359:19;16350:6;16306:73;:::i;:::-;15722:664;;;;;;;;:::o;16392:141::-;16441:4;16464:3;16456:11;;16487:3;16484:1;16477:14;16521:4;16518:1;16508:18;16500:26;;16392:141;;;:::o;16539:93::-;16576:6;16623:2;16618;16611:5;16607:14;16603:23;16593:33;;16539:93;;;:::o;16638:107::-;16682:8;16732:5;16726:4;16722:16;16701:37;;16638:107;;;;:::o;16751:393::-;16820:6;16870:1;16858:10;16854:18;16893:97;16923:66;16912:9;16893:97;:::i;:::-;17011:39;17041:8;17030:9;17011:39;:::i;:::-;16999:51;;17083:4;17079:9;17072:5;17068:21;17059:30;;17132:4;17122:8;17118:19;17111:5;17108:30;17098:40;;16827:317;;16751:393;;;;;:::o;17150:142::-;17200:9;17233:53;17251:34;17260:24;17278:5;17260:24;:::i;:::-;17251:34;:::i;:::-;17233:53;:::i;:::-;17220:66;;17150:142;;;:::o;17298:75::-;17341:3;17362:5;17355:12;;17298:75;;;:::o;17379:269::-;17489:39;17520:7;17489:39;:::i;:::-;17550:91;17599:41;17623:16;17599:41;:::i;:::-;17591:6;17584:4;17578:11;17550:91;:::i;:::-;17544:4;17537:105;17455:193;17379:269;;;:::o;17654:73::-;17699:3;17654:73;:::o;17733:189::-;17810:32;;:::i;:::-;17851:65;17909:6;17901;17895:4;17851:65;:::i;:::-;17786:136;17733:189;;:::o;17928:186::-;17988:120;18005:3;17998:5;17995:14;17988:120;;;18059:39;18096:1;18089:5;18059:39;:::i;:::-;18032:1;18025:5;18021:13;18012:22;;17988:120;;;17928:186;;:::o;18120:543::-;18221:2;18216:3;18213:11;18210:446;;;18255:38;18287:5;18255:38;:::i;:::-;18339:29;18357:10;18339:29;:::i;:::-;18329:8;18325:44;18522:2;18510:10;18507:18;18504:49;;;18543:8;18528:23;;18504:49;18566:80;18622:22;18640:3;18622:22;:::i;:::-;18612:8;18608:37;18595:11;18566:80;:::i;:::-;18225:431;;18210:446;18120:543;;;:::o;18669:117::-;18723:8;18773:5;18767:4;18763:16;18742:37;;18669:117;;;;:::o;18792:169::-;18836:6;18869:51;18917:1;18913:6;18905:5;18902:1;18898:13;18869:51;:::i;:::-;18865:56;18950:4;18944;18940:15;18930:25;;18843:118;18792:169;;;;:::o;18966:295::-;19042:4;19188:29;19213:3;19207:4;19188:29;:::i;:::-;19180:37;;19250:3;19247:1;19243:11;19237:4;19234:21;19226:29;;18966:295;;;;:::o;19266:1395::-;19383:37;19416:3;19383:37;:::i;:::-;19485:18;19477:6;19474:30;19471:56;;;19507:18;;:::i;:::-;19471:56;19551:38;19583:4;19577:11;19551:38;:::i;:::-;19636:67;19696:6;19688;19682:4;19636:67;:::i;:::-;19730:1;19754:4;19741:17;;19786:2;19778:6;19775:14;19803:1;19798:618;;;;20460:1;20477:6;20474:77;;;20526:9;20521:3;20517:19;20511:26;20502:35;;20474:77;20577:67;20637:6;20630:5;20577:67;:::i;:::-;20571:4;20564:81;20433:222;19768:887;;19798:618;19850:4;19846:9;19838:6;19834:22;19884:37;19916:4;19884:37;:::i;:::-;19943:1;19957:208;19971:7;19968:1;19965:14;19957:208;;;20050:9;20045:3;20041:19;20035:26;20027:6;20020:42;20101:1;20093:6;20089:14;20079:24;;20148:2;20137:9;20133:18;20120:31;;19994:4;19991:1;19987:12;19982:17;;19957:208;;;20193:6;20184:7;20181:19;20178:179;;;20251:9;20246:3;20242:19;20236:26;20294:48;20336:4;20328:6;20324:17;20313:9;20294:48;:::i;:::-;20286:6;20279:64;20201:156;20178:179;20403:1;20399;20391:6;20387:14;20383:22;20377:4;20370:36;19805:611;;;19768:887;;19358:1303;;;19266:1395;;:::o;20667:545::-;20840:4;20878:3;20867:9;20863:19;20855:27;;20892:71;20960:1;20949:9;20945:17;20936:6;20892:71;:::i;:::-;20973:68;21037:2;21026:9;21022:18;21013:6;20973:68;:::i;:::-;21051:72;21119:2;21108:9;21104:18;21095:6;21051:72;:::i;:::-;21133;21201:2;21190:9;21186:18;21177:6;21133:72;:::i;:::-;20667:545;;;;;;;:::o;21218:180::-;21266:77;21263:1;21256:88;21363:4;21360:1;21353:15;21387:4;21384:1;21377:15;21404:180;21452:77;21449:1;21442:88;21549:4;21546:1;21539:15;21573:4;21570:1;21563:15;21590:191;21630:3;21649:20;21667:1;21649:20;:::i;:::-;21644:25;;21683:20;21701:1;21683:20;:::i;:::-;21678:25;;21726:1;21723;21719:9;21712:16;;21747:3;21744:1;21741:10;21738:36;;;21754:18;;:::i;:::-;21738:36;21590:191;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "2207600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"DOMAIN_SEPARATOR()": "infinite",
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "infinite",
								"balanceOf(address)": "3014",
								"burn(uint256)": "infinite",
								"burnFrom(address,uint256)": "infinite",
								"decimals()": "450",
								"eip712Domain()": "infinite",
								"initialize(address)": "infinite",
								"mint(address,uint256)": "infinite",
								"name()": "infinite",
								"nonces(address)": "2990",
								"owner()": "2700",
								"pause()": "infinite",
								"paused()": "2636",
								"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"renounceOwnership()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "2553",
								"transfer(address,uint256)": "infinite",
								"transferFrom(address,address,uint256)": "infinite",
								"transferOwnership(address)": "infinite",
								"unpause()": "infinite"
							},
							"internal": {
								"_update(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 582,
									"end": 1603,
									"name": "PUSH",
									"source": 20,
									"value": "80"
								},
								{
									"begin": 582,
									"end": 1603,
									"name": "PUSH",
									"source": 20,
									"value": "40"
								},
								{
									"begin": 582,
									"end": 1603,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 789,
									"end": 842,
									"name": "CALLVALUE",
									"source": 20
								},
								{
									"begin": 789,
									"end": 842,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 789,
									"end": 842,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 789,
									"end": 842,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 789,
									"end": 842,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 789,
									"end": 842,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 789,
									"end": 842,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 789,
									"end": 842,
									"name": "REVERT",
									"source": 20
								},
								{
									"begin": 789,
									"end": 842,
									"name": "tag",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 789,
									"end": 842,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 789,
									"end": 842,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 813,
									"end": 835,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "4"
								},
								{
									"begin": 813,
									"end": 833,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "5"
								},
								{
									"begin": 813,
									"end": 833,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 813,
									"end": 833,
									"name": "SHL",
									"source": 20
								},
								{
									"begin": 813,
									"end": 835,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 813,
									"end": 835,
									"name": "SHR",
									"source": 20
								},
								{
									"begin": 813,
									"end": 835,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 813,
									"end": 835,
									"name": "tag",
									"source": 20,
									"value": "4"
								},
								{
									"begin": 813,
									"end": 835,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 582,
									"end": 1603,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "6"
								},
								{
									"begin": 582,
									"end": 1603,
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 7711,
									"end": 8133,
									"name": "tag",
									"source": 1,
									"value": "5"
								},
								{
									"begin": 7711,
									"end": 8133,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 7826,
									"end": 7856,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 7859,
									"end": 7885,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "8"
								},
								{
									"begin": 7859,
									"end": 7883,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "9"
								},
								{
									"begin": 7859,
									"end": 7883,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 7859,
									"end": 7883,
									"name": "SHL",
									"source": 1
								},
								{
									"begin": 7859,
									"end": 7885,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 7859,
									"end": 7885,
									"name": "SHR",
									"source": 1
								},
								{
									"begin": 7859,
									"end": 7885,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 7859,
									"end": 7885,
									"name": "tag",
									"source": 1,
									"value": "8"
								},
								{
									"begin": 7859,
									"end": 7885,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 7826,
									"end": 7885,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 7826,
									"end": 7885,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 7900,
									"end": 7901,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 7900,
									"end": 7915,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 7900,
									"end": 7915,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 7900,
									"end": 7915,
									"name": "PUSH",
									"source": 1,
									"value": "8"
								},
								{
									"begin": 7900,
									"end": 7915,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 7900,
									"end": 7915,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": 7900,
									"end": 7915,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 7900,
									"end": 7915,
									"name": "PUSH",
									"source": 1,
									"value": "100"
								},
								{
									"begin": 7900,
									"end": 7915,
									"name": "EXP",
									"source": 1
								},
								{
									"begin": 7900,
									"end": 7915,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 7900,
									"end": 7915,
									"name": "DIV",
									"source": 1
								},
								{
									"begin": 7900,
									"end": 7915,
									"name": "PUSH",
									"source": 1,
									"value": "FF"
								},
								{
									"begin": 7900,
									"end": 7915,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 7896,
									"end": 7972,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 7896,
									"end": 7972,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "10"
								},
								{
									"begin": 7896,
									"end": 7972,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 7938,
									"end": 7961,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 7938,
									"end": 7961,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 7938,
									"end": 7961,
									"name": "PUSH",
									"source": 1,
									"value": "F92EE8A900000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 7938,
									"end": 7961,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 7938,
									"end": 7961,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 7938,
									"end": 7961,
									"name": "PUSH",
									"source": 1,
									"value": "4"
								},
								{
									"begin": 7938,
									"end": 7961,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 7938,
									"end": 7961,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 7938,
									"end": 7961,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 7938,
									"end": 7961,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 7938,
									"end": 7961,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 7938,
									"end": 7961,
									"name": "SUB",
									"source": 1
								},
								{
									"begin": 7938,
									"end": 7961,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 7938,
									"end": 7961,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 7896,
									"end": 7972,
									"name": "tag",
									"source": 1,
									"value": "10"
								},
								{
									"begin": 7896,
									"end": 7972,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 8003,
									"end": 8019,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 7985,
									"end": 8019,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 7985,
									"end": 8019,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 7985,
									"end": 7986,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 7985,
									"end": 7999,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 7985,
									"end": 7999,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 7985,
									"end": 7999,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 7985,
									"end": 7999,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 7985,
									"end": 7999,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": 7985,
									"end": 7999,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 7985,
									"end": 7999,
									"name": "PUSH",
									"source": 1,
									"value": "100"
								},
								{
									"begin": 7985,
									"end": 7999,
									"name": "EXP",
									"source": 1
								},
								{
									"begin": 7985,
									"end": 7999,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 7985,
									"end": 7999,
									"name": "DIV",
									"source": 1
								},
								{
									"begin": 7985,
									"end": 7999,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 7985,
									"end": 7999,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 7985,
									"end": 8019,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 7985,
									"end": 8019,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 7985,
									"end": 8019,
									"name": "EQ",
									"source": 1
								},
								{
									"begin": 7981,
									"end": 8127,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "11"
								},
								{
									"begin": 7981,
									"end": 8127,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 8052,
									"end": 8068,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 8035,
									"end": 8036,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 8035,
									"end": 8049,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 8035,
									"end": 8049,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 8035,
									"end": 8049,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 8035,
									"end": 8068,
									"name": "PUSH",
									"source": 1,
									"value": "100"
								},
								{
									"begin": 8035,
									"end": 8068,
									"name": "EXP",
									"source": 1
								},
								{
									"begin": 8035,
									"end": 8068,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 8035,
									"end": 8068,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": 8035,
									"end": 8068,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 8035,
									"end": 8068,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 8035,
									"end": 8068,
									"name": "MUL",
									"source": 1
								},
								{
									"begin": 8035,
									"end": 8068,
									"name": "NOT",
									"source": 1
								},
								{
									"begin": 8035,
									"end": 8068,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 8035,
									"end": 8068,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 8035,
									"end": 8068,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 8035,
									"end": 8068,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 8035,
									"end": 8068,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 8035,
									"end": 8068,
									"name": "MUL",
									"source": 1
								},
								{
									"begin": 8035,
									"end": 8068,
									"name": "OR",
									"source": 1
								},
								{
									"begin": 8035,
									"end": 8068,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 8035,
									"end": 8068,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 8035,
									"end": 8068,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 8087,
									"end": 8116,
									"name": "PUSH",
									"source": 1,
									"value": "C7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2"
								},
								{
									"begin": 8099,
									"end": 8115,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 8087,
									"end": 8116,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 8087,
									"end": 8116,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 8087,
									"end": 8116,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "12"
								},
								{
									"begin": 8087,
									"end": 8116,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 8087,
									"end": 8116,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 8087,
									"end": 8116,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "13"
								},
								{
									"begin": 8087,
									"end": 8116,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 8087,
									"end": 8116,
									"name": "tag",
									"source": 1,
									"value": "12"
								},
								{
									"begin": 8087,
									"end": 8116,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 8087,
									"end": 8116,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 8087,
									"end": 8116,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 8087,
									"end": 8116,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 8087,
									"end": 8116,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 8087,
									"end": 8116,
									"name": "SUB",
									"source": 1
								},
								{
									"begin": 8087,
									"end": 8116,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 8087,
									"end": 8116,
									"name": "LOG1",
									"source": 1
								},
								{
									"begin": 7981,
									"end": 8127,
									"name": "tag",
									"source": 1,
									"value": "11"
								},
								{
									"begin": 7981,
									"end": 8127,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 7760,
									"end": 8133,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 7711,
									"end": 8133,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 8737,
									"end": 8907,
									"name": "tag",
									"source": 1,
									"value": "9"
								},
								{
									"begin": 8737,
									"end": 8907,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 8795,
									"end": 8825,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 8870,
									"end": 8891,
									"name": "PUSH",
									"source": 1,
									"value": "F0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00"
								},
								{
									"begin": 8860,
									"end": 8891,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 8860,
									"end": 8891,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 8737,
									"end": 8907,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 8737,
									"end": 8907,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 7,
									"end": 108,
									"name": "tag",
									"source": 21,
									"value": "15"
								},
								{
									"begin": 7,
									"end": 108,
									"name": "JUMPDEST",
									"source": 21
								},
								{
									"begin": 43,
									"end": 50,
									"name": "PUSH",
									"source": 21,
									"value": "0"
								},
								{
									"begin": 83,
									"end": 101,
									"name": "PUSH",
									"source": 21,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 76,
									"end": 81,
									"name": "DUP3",
									"source": 21
								},
								{
									"begin": 72,
									"end": 102,
									"name": "AND",
									"source": 21
								},
								{
									"begin": 61,
									"end": 102,
									"name": "SWAP1",
									"source": 21
								},
								{
									"begin": 61,
									"end": 102,
									"name": "POP",
									"source": 21
								},
								{
									"begin": 7,
									"end": 108,
									"name": "SWAP2",
									"source": 21
								},
								{
									"begin": 7,
									"end": 108,
									"name": "SWAP1",
									"source": 21
								},
								{
									"begin": 7,
									"end": 108,
									"name": "POP",
									"source": 21
								},
								{
									"begin": 7,
									"end": 108,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 21
								},
								{
									"begin": 114,
									"end": 229,
									"name": "tag",
									"source": 21,
									"value": "16"
								},
								{
									"begin": 114,
									"end": 229,
									"name": "JUMPDEST",
									"source": 21
								},
								{
									"begin": 199,
									"end": 222,
									"name": "PUSH [tag]",
									"source": 21,
									"value": "20"
								},
								{
									"begin": 216,
									"end": 221,
									"name": "DUP2",
									"source": 21
								},
								{
									"begin": 199,
									"end": 222,
									"name": "PUSH [tag]",
									"source": 21,
									"value": "15"
								},
								{
									"begin": 199,
									"end": 222,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 21
								},
								{
									"begin": 199,
									"end": 222,
									"name": "tag",
									"source": 21,
									"value": "20"
								},
								{
									"begin": 199,
									"end": 222,
									"name": "JUMPDEST",
									"source": 21
								},
								{
									"begin": 194,
									"end": 197,
									"name": "DUP3",
									"source": 21
								},
								{
									"begin": 187,
									"end": 223,
									"name": "MSTORE",
									"source": 21
								},
								{
									"begin": 114,
									"end": 229,
									"name": "POP",
									"source": 21
								},
								{
									"begin": 114,
									"end": 229,
									"name": "POP",
									"source": 21
								},
								{
									"begin": 114,
									"end": 229,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 21
								},
								{
									"begin": 235,
									"end": 453,
									"name": "tag",
									"source": 21,
									"value": "13"
								},
								{
									"begin": 235,
									"end": 453,
									"name": "JUMPDEST",
									"source": 21
								},
								{
									"begin": 326,
									"end": 330,
									"name": "PUSH",
									"source": 21,
									"value": "0"
								},
								{
									"begin": 364,
									"end": 366,
									"name": "PUSH",
									"source": 21,
									"value": "20"
								},
								{
									"begin": 353,
									"end": 362,
									"name": "DUP3",
									"source": 21
								},
								{
									"begin": 349,
									"end": 367,
									"name": "ADD",
									"source": 21
								},
								{
									"begin": 341,
									"end": 367,
									"name": "SWAP1",
									"source": 21
								},
								{
									"begin": 341,
									"end": 367,
									"name": "POP",
									"source": 21
								},
								{
									"begin": 377,
									"end": 446,
									"name": "PUSH [tag]",
									"source": 21,
									"value": "22"
								},
								{
									"begin": 443,
									"end": 444,
									"name": "PUSH",
									"source": 21,
									"value": "0"
								},
								{
									"begin": 432,
									"end": 441,
									"name": "DUP4",
									"source": 21
								},
								{
									"begin": 428,
									"end": 445,
									"name": "ADD",
									"source": 21
								},
								{
									"begin": 419,
									"end": 425,
									"name": "DUP5",
									"source": 21
								},
								{
									"begin": 377,
									"end": 446,
									"name": "PUSH [tag]",
									"source": 21,
									"value": "16"
								},
								{
									"begin": 377,
									"end": 446,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 21
								},
								{
									"begin": 377,
									"end": 446,
									"name": "tag",
									"source": 21,
									"value": "22"
								},
								{
									"begin": 377,
									"end": 446,
									"name": "JUMPDEST",
									"source": 21
								},
								{
									"begin": 235,
									"end": 453,
									"name": "SWAP3",
									"source": 21
								},
								{
									"begin": 235,
									"end": 453,
									"name": "SWAP2",
									"source": 21
								},
								{
									"begin": 235,
									"end": 453,
									"name": "POP",
									"source": 21
								},
								{
									"begin": 235,
									"end": 453,
									"name": "POP",
									"source": 21
								},
								{
									"begin": 235,
									"end": 453,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 21
								},
								{
									"begin": 582,
									"end": 1603,
									"name": "tag",
									"source": 20,
									"value": "6"
								},
								{
									"begin": 582,
									"end": 1603,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 582,
									"end": 1603,
									"name": "PUSH #[$]",
									"source": 20,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 582,
									"end": 1603,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 582,
									"end": 1603,
									"name": "PUSH [$]",
									"source": 20,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 582,
									"end": 1603,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 582,
									"end": 1603,
									"name": "CODECOPY",
									"source": 20
								},
								{
									"begin": 582,
									"end": 1603,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 582,
									"end": 1603,
									"name": "RETURN",
									"source": 20
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122063b4d87d662aaa4d0f496a4b54eb5c97ce814d65c6306762753a9a5d10d84dbe64736f6c63430008160033",
									".code": [
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH",
											"source": 20,
											"value": "80"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "CALLVALUE",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "1"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "tag",
											"source": 20,
											"value": "1"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "CALLDATASIZE",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "LT",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "2"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH",
											"source": 20,
											"value": "E0"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "SHR",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH",
											"source": 20,
											"value": "715018A6"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "GT",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "26"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH",
											"source": 20,
											"value": "95D89B41"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "GT",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "27"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH",
											"source": 20,
											"value": "95D89B41"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH",
											"source": 20,
											"value": "A9059CBB"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "21"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH",
											"source": 20,
											"value": "C4D66DE8"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "22"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH",
											"source": 20,
											"value": "D505ACCF"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "23"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH",
											"source": 20,
											"value": "DD62ED3E"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH",
											"source": 20,
											"value": "F2FDE38B"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "25"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "2"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "tag",
											"source": 20,
											"value": "27"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH",
											"source": 20,
											"value": "715018A6"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "14"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH",
											"source": 20,
											"value": "79CC6790"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "15"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH",
											"source": 20,
											"value": "7ECEBE00"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "16"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH",
											"source": 20,
											"value": "8456CB59"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "17"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH",
											"source": 20,
											"value": "84B0196E"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "18"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH",
											"source": 20,
											"value": "8DA5CB5B"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "19"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "2"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "tag",
											"source": 20,
											"value": "26"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH",
											"source": 20,
											"value": "3644E515"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "GT",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "28"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH",
											"source": 20,
											"value": "3644E515"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "8"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH",
											"source": 20,
											"value": "3F4BA83A"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "9"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH",
											"source": 20,
											"value": "40C10F19"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "10"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH",
											"source": 20,
											"value": "42966C68"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "11"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH",
											"source": 20,
											"value": "5C975ABB"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "12"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH",
											"source": 20,
											"value": "70A08231"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "13"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "2"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "tag",
											"source": 20,
											"value": "28"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH",
											"source": 20,
											"value": "6FDDE03"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "3"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH",
											"source": 20,
											"value": "95EA7B3"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH",
											"source": 20,
											"value": "18160DDD"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "5"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH",
											"source": 20,
											"value": "23B872DD"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "6"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH",
											"source": 20,
											"value": "313CE567"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "7"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "tag",
											"source": 20,
											"value": "2"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 582,
											"end": 1603,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "tag",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 3011,
											"end": 3155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "tag",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 3011,
											"end": 3155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "tag",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "tag",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 5505,
											"end": 5691,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "tag",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 5505,
											"end": 5691,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "tag",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 5505,
											"end": 5691,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "tag",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "tag",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4191,
											"end": 4343,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "tag",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 4191,
											"end": 4343,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "tag",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "tag",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "45"
										},
										{
											"begin": 6251,
											"end": 6495,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "tag",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "46"
										},
										{
											"begin": 6251,
											"end": 6495,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "tag",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "47"
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 6251,
											"end": 6495,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "tag",
											"source": 2,
											"value": "47"
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "tag",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "49"
										},
										{
											"begin": 4049,
											"end": 4131,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "tag",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "50"
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 4049,
											"end": 4131,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "tag",
											"source": 2,
											"value": "50"
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 3082,
											"end": 3194,
											"name": "tag",
											"source": 5,
											"value": "8"
										},
										{
											"begin": 3082,
											"end": 3194,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3082,
											"end": 3194,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "52"
										},
										{
											"begin": 3082,
											"end": 3194,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "53"
										},
										{
											"begin": 3082,
											"end": 3194,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3082,
											"end": 3194,
											"name": "tag",
											"source": 5,
											"value": "52"
										},
										{
											"begin": 3082,
											"end": 3194,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3082,
											"end": 3194,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3082,
											"end": 3194,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 3082,
											"end": 3194,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "54"
										},
										{
											"begin": 3082,
											"end": 3194,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3082,
											"end": 3194,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3082,
											"end": 3194,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "55"
										},
										{
											"begin": 3082,
											"end": 3194,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3082,
											"end": 3194,
											"name": "tag",
											"source": 5,
											"value": "54"
										},
										{
											"begin": 3082,
											"end": 3194,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3082,
											"end": 3194,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3082,
											"end": 3194,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 3082,
											"end": 3194,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3082,
											"end": 3194,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3082,
											"end": 3194,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 3082,
											"end": 3194,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3082,
											"end": 3194,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 1178,
											"end": 1241,
											"name": "tag",
											"source": 20,
											"value": "9"
										},
										{
											"begin": 1178,
											"end": 1241,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1178,
											"end": 1241,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "56"
										},
										{
											"begin": 1178,
											"end": 1241,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "57"
										},
										{
											"begin": 1178,
											"end": 1241,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1178,
											"end": 1241,
											"name": "tag",
											"source": 20,
											"value": "56"
										},
										{
											"begin": 1178,
											"end": 1241,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1178,
											"end": 1241,
											"name": "STOP",
											"source": 20
										},
										{
											"begin": 1247,
											"end": 1340,
											"name": "tag",
											"source": 20,
											"value": "10"
										},
										{
											"begin": 1247,
											"end": 1340,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1247,
											"end": 1340,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "58"
										},
										{
											"begin": 1247,
											"end": 1340,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 1247,
											"end": 1340,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1247,
											"end": 1340,
											"name": "CALLDATASIZE",
											"source": 20
										},
										{
											"begin": 1247,
											"end": 1340,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 1247,
											"end": 1340,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1247,
											"end": 1340,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1247,
											"end": 1340,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1247,
											"end": 1340,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "59"
										},
										{
											"begin": 1247,
											"end": 1340,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1247,
											"end": 1340,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1247,
											"end": 1340,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "35"
										},
										{
											"begin": 1247,
											"end": 1340,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1247,
											"end": 1340,
											"name": "tag",
											"source": 20,
											"value": "59"
										},
										{
											"begin": 1247,
											"end": 1340,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1247,
											"end": 1340,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "60"
										},
										{
											"begin": 1247,
											"end": 1340,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1247,
											"end": 1340,
											"name": "tag",
											"source": 20,
											"value": "58"
										},
										{
											"begin": 1247,
											"end": 1340,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1247,
											"end": 1340,
											"name": "STOP",
											"source": 20
										},
										{
											"begin": 931,
											"end": 1018,
											"name": "tag",
											"source": 3,
											"value": "11"
										},
										{
											"begin": 931,
											"end": 1018,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 931,
											"end": 1018,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "61"
										},
										{
											"begin": 931,
											"end": 1018,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 931,
											"end": 1018,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 931,
											"end": 1018,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 931,
											"end": 1018,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 931,
											"end": 1018,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 931,
											"end": 1018,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 931,
											"end": 1018,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 931,
											"end": 1018,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "62"
										},
										{
											"begin": 931,
											"end": 1018,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 931,
											"end": 1018,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 931,
											"end": 1018,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "63"
										},
										{
											"begin": 931,
											"end": 1018,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 931,
											"end": 1018,
											"name": "tag",
											"source": 3,
											"value": "62"
										},
										{
											"begin": 931,
											"end": 1018,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 931,
											"end": 1018,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 931,
											"end": 1018,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 931,
											"end": 1018,
											"name": "tag",
											"source": 3,
											"value": "61"
										},
										{
											"begin": 931,
											"end": 1018,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 931,
											"end": 1018,
											"name": "STOP",
											"source": 3
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "tag",
											"source": 8,
											"value": "12"
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "65"
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "66"
										},
										{
											"begin": 2692,
											"end": 2837,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "tag",
											"source": 8,
											"value": "65"
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "67"
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "38"
										},
										{
											"begin": 2692,
											"end": 2837,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "tag",
											"source": 8,
											"value": "67"
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "tag",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "70"
										},
										{
											"begin": 4401,
											"end": 4572,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "tag",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "71"
										},
										{
											"begin": 4401,
											"end": 4572,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "tag",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 4401,
											"end": 4572,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "tag",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 3155,
											"end": 3256,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "tag",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 1334,
											"end": 1492,
											"name": "tag",
											"source": 3,
											"value": "15"
										},
										{
											"begin": 1334,
											"end": 1492,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1334,
											"end": 1492,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "75"
										},
										{
											"begin": 1334,
											"end": 1492,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1334,
											"end": 1492,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1334,
											"end": 1492,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 1334,
											"end": 1492,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1334,
											"end": 1492,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1334,
											"end": 1492,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1334,
											"end": 1492,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1334,
											"end": 1492,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "76"
										},
										{
											"begin": 1334,
											"end": 1492,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1334,
											"end": 1492,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1334,
											"end": 1492,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "35"
										},
										{
											"begin": 1334,
											"end": 1492,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1334,
											"end": 1492,
											"name": "tag",
											"source": 3,
											"value": "76"
										},
										{
											"begin": 1334,
											"end": 1492,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1334,
											"end": 1492,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "77"
										},
										{
											"begin": 1334,
											"end": 1492,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1334,
											"end": 1492,
											"name": "tag",
											"source": 3,
											"value": "75"
										},
										{
											"begin": 1334,
											"end": 1492,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1334,
											"end": 1492,
											"name": "STOP",
											"source": 3
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "tag",
											"source": 5,
											"value": "16"
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "78"
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "79"
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "70"
										},
										{
											"begin": 2821,
											"end": 2975,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "tag",
											"source": 5,
											"value": "79"
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 2821,
											"end": 2975,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "tag",
											"source": 5,
											"value": "78"
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "81"
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "42"
										},
										{
											"begin": 2821,
											"end": 2975,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "tag",
											"source": 5,
											"value": "81"
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 1113,
											"end": 1172,
											"name": "tag",
											"source": 20,
											"value": "17"
										},
										{
											"begin": 1113,
											"end": 1172,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1113,
											"end": 1172,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "82"
										},
										{
											"begin": 1113,
											"end": 1172,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "83"
										},
										{
											"begin": 1113,
											"end": 1172,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1113,
											"end": 1172,
											"name": "tag",
											"source": 20,
											"value": "82"
										},
										{
											"begin": 1113,
											"end": 1172,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1113,
											"end": 1172,
											"name": "STOP",
											"source": 20
										},
										{
											"begin": 5173,
											"end": 6076,
											"name": "tag",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 5173,
											"end": 6076,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 6076,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 5173,
											"end": 6076,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "85"
										},
										{
											"begin": 5173,
											"end": 6076,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 6076,
											"name": "tag",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 5173,
											"end": 6076,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 6076,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5173,
											"end": 6076,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 6076,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "86"
										},
										{
											"begin": 5173,
											"end": 6076,
											"name": "SWAP8",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 6076,
											"name": "SWAP7",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 6076,
											"name": "SWAP6",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 6076,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 6076,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 6076,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 6076,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 6076,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 6076,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "87"
										},
										{
											"begin": 5173,
											"end": 6076,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 6076,
											"name": "tag",
											"source": 9,
											"value": "86"
										},
										{
											"begin": 5173,
											"end": 6076,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 6076,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5173,
											"end": 6076,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 6076,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 6076,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 6076,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 6076,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 6076,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "tag",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "88"
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "89"
										},
										{
											"begin": 2441,
											"end": 2585,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "tag",
											"source": 0,
											"value": "88"
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 2441,
											"end": 2585,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "tag",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "tag",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "93"
										},
										{
											"begin": 3268,
											"end": 3416,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "tag",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 3268,
											"end": 3416,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "tag",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "tag",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "95"
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "96"
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 4767,
											"end": 4945,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "tag",
											"source": 2,
											"value": "96"
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 4767,
											"end": 4945,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "tag",
											"source": 2,
											"value": "95"
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "98"
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 4767,
											"end": 4945,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "tag",
											"source": 2,
											"value": "98"
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 848,
											"end": 1107,
											"name": "tag",
											"source": 20,
											"value": "22"
										},
										{
											"begin": 848,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 848,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "99"
										},
										{
											"begin": 848,
											"end": 1107,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 848,
											"end": 1107,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 848,
											"end": 1107,
											"name": "CALLDATASIZE",
											"source": 20
										},
										{
											"begin": 848,
											"end": 1107,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 848,
											"end": 1107,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 848,
											"end": 1107,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 848,
											"end": 1107,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 848,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "100"
										},
										{
											"begin": 848,
											"end": 1107,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 848,
											"end": 1107,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 848,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "70"
										},
										{
											"begin": 848,
											"end": 1107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 848,
											"end": 1107,
											"name": "tag",
											"source": 20,
											"value": "100"
										},
										{
											"begin": 848,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 848,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "101"
										},
										{
											"begin": 848,
											"end": 1107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 848,
											"end": 1107,
											"name": "tag",
											"source": 20,
											"value": "99"
										},
										{
											"begin": 848,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 848,
											"end": 1107,
											"name": "STOP",
											"source": 20
										},
										{
											"begin": 2095,
											"end": 2767,
											"name": "tag",
											"source": 5,
											"value": "23"
										},
										{
											"begin": 2095,
											"end": 2767,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2095,
											"end": 2767,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "102"
										},
										{
											"begin": 2095,
											"end": 2767,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2095,
											"end": 2767,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2095,
											"end": 2767,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 2095,
											"end": 2767,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2095,
											"end": 2767,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2095,
											"end": 2767,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2095,
											"end": 2767,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2095,
											"end": 2767,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "103"
										},
										{
											"begin": 2095,
											"end": 2767,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2095,
											"end": 2767,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2095,
											"end": 2767,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "104"
										},
										{
											"begin": 2095,
											"end": 2767,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2095,
											"end": 2767,
											"name": "tag",
											"source": 5,
											"value": "103"
										},
										{
											"begin": 2095,
											"end": 2767,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2095,
											"end": 2767,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "105"
										},
										{
											"begin": 2095,
											"end": 2767,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2095,
											"end": 2767,
											"name": "tag",
											"source": 5,
											"value": "102"
										},
										{
											"begin": 2095,
											"end": 2767,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2095,
											"end": 2767,
											"name": "STOP",
											"source": 5
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "tag",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "106"
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "107"
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "108"
										},
										{
											"begin": 5003,
											"end": 5198,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "tag",
											"source": 2,
											"value": "107"
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "109"
										},
										{
											"begin": 5003,
											"end": 5198,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "tag",
											"source": 2,
											"value": "106"
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "110"
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 5003,
											"end": 5198,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "tag",
											"source": 2,
											"value": "110"
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "tag",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "70"
										},
										{
											"begin": 3405,
											"end": 3620,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "tag",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 3405,
											"end": 3620,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "tag",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "tag",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3056,
											"end": 3069,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 3081,
											"end": 3103,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3106,
											"end": 3124,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "115"
										},
										{
											"begin": 3106,
											"end": 3122,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 3106,
											"end": 3124,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3106,
											"end": 3124,
											"name": "tag",
											"source": 2,
											"value": "115"
										},
										{
											"begin": 3106,
											"end": 3124,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3081,
											"end": 3124,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3081,
											"end": 3124,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3141,
											"end": 3142,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3141,
											"end": 3148,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 3141,
											"end": 3148,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "117"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "118"
										},
										{
											"begin": 3134,
											"end": 3148,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "tag",
											"source": 2,
											"value": "117"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "119"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "118"
										},
										{
											"begin": 3134,
											"end": 3148,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "tag",
											"source": 2,
											"value": "119"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "120"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "121"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "120"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "tag",
											"source": 2,
											"value": "121"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "tag",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "tag",
											"source": 2,
											"value": "120"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3011,
											"end": 3155,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "tag",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5578,
											"end": 5582,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5594,
											"end": 5607,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5610,
											"end": 5622,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "124"
										},
										{
											"begin": 5610,
											"end": 5620,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "125"
										},
										{
											"begin": 5610,
											"end": 5622,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5610,
											"end": 5622,
											"name": "tag",
											"source": 2,
											"value": "124"
										},
										{
											"begin": 5610,
											"end": 5622,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5594,
											"end": 5622,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5594,
											"end": 5622,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5632,
											"end": 5663,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "126"
										},
										{
											"begin": 5641,
											"end": 5646,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5648,
											"end": 5655,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5657,
											"end": 5662,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5632,
											"end": 5640,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "127"
										},
										{
											"begin": 5632,
											"end": 5663,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5632,
											"end": 5663,
											"name": "tag",
											"source": 2,
											"value": "126"
										},
										{
											"begin": 5632,
											"end": 5663,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5680,
											"end": 5684,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5673,
											"end": 5684,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5684,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5684,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5505,
											"end": 5691,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "tag",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4243,
											"end": 4250,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4262,
											"end": 4284,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4287,
											"end": 4305,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "129"
										},
										{
											"begin": 4287,
											"end": 4303,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 4287,
											"end": 4305,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4287,
											"end": 4305,
											"name": "tag",
											"source": 2,
											"value": "129"
										},
										{
											"begin": 4287,
											"end": 4305,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4262,
											"end": 4305,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4262,
											"end": 4305,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4322,
											"end": 4323,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4322,
											"end": 4336,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 4322,
											"end": 4336,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4322,
											"end": 4336,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 4315,
											"end": 4336,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4315,
											"end": 4336,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4315,
											"end": 4336,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4191,
											"end": 4343,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "tag",
											"source": 2,
											"value": "46"
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6338,
											"end": 6342,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6354,
											"end": 6369,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6372,
											"end": 6384,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "131"
										},
										{
											"begin": 6372,
											"end": 6382,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "125"
										},
										{
											"begin": 6372,
											"end": 6384,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6372,
											"end": 6384,
											"name": "tag",
											"source": 2,
											"value": "131"
										},
										{
											"begin": 6372,
											"end": 6384,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6354,
											"end": 6384,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6354,
											"end": 6384,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6394,
											"end": 6431,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "132"
										},
										{
											"begin": 6410,
											"end": 6414,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6416,
											"end": 6423,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6425,
											"end": 6430,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6394,
											"end": 6409,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "133"
										},
										{
											"begin": 6394,
											"end": 6431,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6394,
											"end": 6431,
											"name": "tag",
											"source": 2,
											"value": "132"
										},
										{
											"begin": 6394,
											"end": 6431,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6441,
											"end": 6467,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "134"
										},
										{
											"begin": 6451,
											"end": 6455,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6457,
											"end": 6459,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6461,
											"end": 6466,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6441,
											"end": 6450,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "135"
										},
										{
											"begin": 6441,
											"end": 6467,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6441,
											"end": 6467,
											"name": "tag",
											"source": 2,
											"value": "134"
										},
										{
											"begin": 6441,
											"end": 6467,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6484,
											"end": 6488,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 6477,
											"end": 6488,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6477,
											"end": 6488,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6477,
											"end": 6488,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6251,
											"end": 6495,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "tag",
											"source": 2,
											"value": "49"
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4098,
											"end": 4103,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4122,
											"end": 4124,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 4115,
											"end": 4124,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4115,
											"end": 4124,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4049,
											"end": 4131,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3082,
											"end": 3194,
											"name": "tag",
											"source": 5,
											"value": "53"
										},
										{
											"begin": 3082,
											"end": 3194,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3141,
											"end": 3148,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3167,
											"end": 3187,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "138"
										},
										{
											"begin": 3167,
											"end": 3185,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "139"
										},
										{
											"begin": 3167,
											"end": 3187,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3167,
											"end": 3187,
											"name": "tag",
											"source": 5,
											"value": "138"
										},
										{
											"begin": 3167,
											"end": 3187,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3160,
											"end": 3187,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3160,
											"end": 3187,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3082,
											"end": 3194,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3082,
											"end": 3194,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1178,
											"end": 1241,
											"name": "tag",
											"source": 20,
											"value": "57"
										},
										{
											"begin": 1178,
											"end": 1241,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "141"
										},
										{
											"begin": 2334,
											"end": 2345,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 2334,
											"end": 2347,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "tag",
											"source": 0,
											"value": "141"
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1224,
											"end": 1234,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "144"
										},
										{
											"begin": 1224,
											"end": 1232,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "145"
										},
										{
											"begin": 1224,
											"end": 1234,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1224,
											"end": 1234,
											"modifierDepth": 1,
											"name": "tag",
											"source": 20,
											"value": "144"
										},
										{
											"begin": 1224,
											"end": 1234,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1178,
											"end": 1241,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1247,
											"end": 1340,
											"name": "tag",
											"source": 20,
											"value": "60"
										},
										{
											"begin": 1247,
											"end": 1340,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "147"
										},
										{
											"begin": 2334,
											"end": 2345,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 2334,
											"end": 2347,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "tag",
											"source": 0,
											"value": "147"
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1316,
											"end": 1333,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "149"
										},
										{
											"begin": 1322,
											"end": 1324,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1326,
											"end": 1332,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1316,
											"end": 1321,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "150"
										},
										{
											"begin": 1316,
											"end": 1333,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1316,
											"end": 1333,
											"modifierDepth": 1,
											"name": "tag",
											"source": 20,
											"value": "149"
										},
										{
											"begin": 1316,
											"end": 1333,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1247,
											"end": 1340,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1247,
											"end": 1340,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1247,
											"end": 1340,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 931,
											"end": 1018,
											"name": "tag",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 931,
											"end": 1018,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 985,
											"end": 1011,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "152"
										},
										{
											"begin": 991,
											"end": 1003,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "153"
										},
										{
											"begin": 991,
											"end": 1001,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "125"
										},
										{
											"begin": 991,
											"end": 1003,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 991,
											"end": 1003,
											"name": "tag",
											"source": 3,
											"value": "153"
										},
										{
											"begin": 991,
											"end": 1003,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1005,
											"end": 1010,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 985,
											"end": 990,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "154"
										},
										{
											"begin": 985,
											"end": 1011,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 985,
											"end": 1011,
											"name": "tag",
											"source": 3,
											"value": "152"
										},
										{
											"begin": 985,
											"end": 1011,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 931,
											"end": 1018,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 931,
											"end": 1018,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "tag",
											"source": 8,
											"value": "66"
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2739,
											"end": 2743,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2755,
											"end": 2780,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2783,
											"end": 2804,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "156"
										},
										{
											"begin": 2783,
											"end": 2802,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "157"
										},
										{
											"begin": 2783,
											"end": 2804,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2783,
											"end": 2804,
											"name": "tag",
											"source": 8,
											"value": "156"
										},
										{
											"begin": 2783,
											"end": 2804,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2755,
											"end": 2804,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2755,
											"end": 2804,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2821,
											"end": 2822,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2821,
											"end": 2830,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2821,
											"end": 2830,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2821,
											"end": 2830,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2821,
											"end": 2830,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2821,
											"end": 2830,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 2821,
											"end": 2830,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2821,
											"end": 2830,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 2821,
											"end": 2830,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 2821,
											"end": 2830,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2821,
											"end": 2830,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 2821,
											"end": 2830,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 2821,
											"end": 2830,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2814,
											"end": 2830,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2814,
											"end": 2830,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2814,
											"end": 2830,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2692,
											"end": 2837,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "tag",
											"source": 2,
											"value": "71"
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4466,
											"end": 4473,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4485,
											"end": 4507,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4510,
											"end": 4528,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "159"
										},
										{
											"begin": 4510,
											"end": 4526,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 4510,
											"end": 4528,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4510,
											"end": 4528,
											"name": "tag",
											"source": 2,
											"value": "159"
										},
										{
											"begin": 4510,
											"end": 4528,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4485,
											"end": 4528,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4485,
											"end": 4528,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4545,
											"end": 4546,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4545,
											"end": 4556,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4545,
											"end": 4556,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4557,
											"end": 4564,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 4538,
											"end": 4565,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4538,
											"end": 4565,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4538,
											"end": 4565,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4401,
											"end": 4572,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "tag",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "161"
										},
										{
											"begin": 2334,
											"end": 2345,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 2334,
											"end": 2347,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "tag",
											"source": 0,
											"value": "161"
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3219,
											"end": 3249,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "163"
										},
										{
											"begin": 3246,
											"end": 3247,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3219,
											"end": 3237,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "164"
										},
										{
											"begin": 3219,
											"end": 3249,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3219,
											"end": 3249,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "163"
										},
										{
											"begin": 3219,
											"end": 3249,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3155,
											"end": 3256,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1334,
											"end": 1492,
											"name": "tag",
											"source": 3,
											"value": "77"
										},
										{
											"begin": 1334,
											"end": 1492,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1409,
											"end": 1454,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "166"
										},
										{
											"begin": 1425,
											"end": 1432,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1434,
											"end": 1446,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "167"
										},
										{
											"begin": 1434,
											"end": 1444,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "125"
										},
										{
											"begin": 1434,
											"end": 1446,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1434,
											"end": 1446,
											"name": "tag",
											"source": 3,
											"value": "167"
										},
										{
											"begin": 1434,
											"end": 1446,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1448,
											"end": 1453,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1409,
											"end": 1424,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "133"
										},
										{
											"begin": 1409,
											"end": 1454,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1409,
											"end": 1454,
											"name": "tag",
											"source": 3,
											"value": "166"
										},
										{
											"begin": 1409,
											"end": 1454,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1464,
											"end": 1485,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "168"
										},
										{
											"begin": 1470,
											"end": 1477,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1479,
											"end": 1484,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1464,
											"end": 1469,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "154"
										},
										{
											"begin": 1464,
											"end": 1485,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1464,
											"end": 1485,
											"name": "tag",
											"source": 3,
											"value": "168"
										},
										{
											"begin": 1464,
											"end": 1485,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1334,
											"end": 1492,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1334,
											"end": 1492,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1334,
											"end": 1492,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "tag",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2923,
											"end": 2930,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2949,
											"end": 2968,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "170"
										},
										{
											"begin": 2962,
											"end": 2967,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2949,
											"end": 2961,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "171"
										},
										{
											"begin": 2949,
											"end": 2968,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2949,
											"end": 2968,
											"name": "tag",
											"source": 5,
											"value": "170"
										},
										{
											"begin": 2949,
											"end": 2968,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2942,
											"end": 2968,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2942,
											"end": 2968,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2821,
											"end": 2975,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2821,
											"end": 2975,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1113,
											"end": 1172,
											"name": "tag",
											"source": 20,
											"value": "83"
										},
										{
											"begin": 1113,
											"end": 1172,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "173"
										},
										{
											"begin": 2334,
											"end": 2345,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 2334,
											"end": 2347,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "tag",
											"source": 0,
											"value": "173"
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1165,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "175"
										},
										{
											"begin": 1157,
											"end": 1163,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "176"
										},
										{
											"begin": 1157,
											"end": 1165,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1157,
											"end": 1165,
											"modifierDepth": 1,
											"name": "tag",
											"source": 20,
											"value": "175"
										},
										{
											"begin": 1157,
											"end": 1165,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1113,
											"end": 1172,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 5173,
											"end": 6076,
											"name": "tag",
											"source": 9,
											"value": "85"
										},
										{
											"begin": 5173,
											"end": 6076,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5271,
											"end": 5284,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5298,
											"end": 5316,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 5330,
											"end": 5351,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5365,
											"end": 5380,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5394,
											"end": 5419,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5433,
											"end": 5445,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5459,
											"end": 5486,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 5511,
											"end": 5534,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5537,
											"end": 5556,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "178"
										},
										{
											"begin": 5537,
											"end": 5554,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "179"
										},
										{
											"begin": 5537,
											"end": 5556,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5537,
											"end": 5556,
											"name": "tag",
											"source": 9,
											"value": "178"
										},
										{
											"begin": 5537,
											"end": 5556,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5511,
											"end": 5556,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5511,
											"end": 5556,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5794,
											"end": 5795,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5777,
											"end": 5795,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5777,
											"end": 5795,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 5777,
											"end": 5778,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5777,
											"end": 5790,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5777,
											"end": 5790,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5777,
											"end": 5790,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 5777,
											"end": 5795,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 5777,
											"end": 5820,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5777,
											"end": 5820,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 5777,
											"end": 5820,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "180"
										},
										{
											"begin": 5777,
											"end": 5820,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 5777,
											"end": 5820,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5819,
											"end": 5820,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5799,
											"end": 5820,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5799,
											"end": 5820,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 5799,
											"end": 5800,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5799,
											"end": 5815,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 5799,
											"end": 5815,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5799,
											"end": 5815,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 5799,
											"end": 5820,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 5777,
											"end": 5820,
											"name": "tag",
											"source": 9,
											"value": "180"
										},
										{
											"begin": 5777,
											"end": 5820,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5769,
											"end": 5846,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "181"
										},
										{
											"begin": 5769,
											"end": 5846,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 5769,
											"end": 5846,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5769,
											"end": 5846,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 5769,
											"end": 5846,
											"name": "PUSH",
											"source": 9,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5769,
											"end": 5846,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5769,
											"end": 5846,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5769,
											"end": 5846,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 5769,
											"end": 5846,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5769,
											"end": 5846,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "182"
										},
										{
											"begin": 5769,
											"end": 5846,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5769,
											"end": 5846,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "183"
										},
										{
											"begin": 5769,
											"end": 5846,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5769,
											"end": 5846,
											"name": "tag",
											"source": 9,
											"value": "182"
										},
										{
											"begin": 5769,
											"end": 5846,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5769,
											"end": 5846,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5769,
											"end": 5846,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 5769,
											"end": 5846,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5769,
											"end": 5846,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5769,
											"end": 5846,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 5769,
											"end": 5846,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5769,
											"end": 5846,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 5769,
											"end": 5846,
											"name": "tag",
											"source": 9,
											"value": "181"
										},
										{
											"begin": 5769,
											"end": 5846,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5908,
											"end": 5921,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "184"
										},
										{
											"begin": 5908,
											"end": 5919,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "185"
										},
										{
											"begin": 5908,
											"end": 5921,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5908,
											"end": 5921,
											"name": "tag",
											"source": 9,
											"value": "184"
										},
										{
											"begin": 5908,
											"end": 5921,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5935,
											"end": 5951,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "186"
										},
										{
											"begin": 5935,
											"end": 5949,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "187"
										},
										{
											"begin": 5935,
											"end": 5951,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5935,
											"end": 5951,
											"name": "tag",
											"source": 9,
											"value": "186"
										},
										{
											"begin": 5935,
											"end": 5951,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5965,
											"end": 5978,
											"name": "CHAINID",
											"source": 9
										},
										{
											"begin": 6000,
											"end": 6004,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 6027,
											"end": 6028,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6019,
											"end": 6029,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6019,
											"end": 6029,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 6057,
											"end": 6058,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "188"
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "189"
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "190"
										},
										{
											"begin": 6043,
											"end": 6059,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "tag",
											"source": 9,
											"value": "189"
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "tag",
											"source": 9,
											"value": "188"
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "191"
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "CALLDATACOPY",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "tag",
											"source": 9,
											"value": "191"
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6043,
											"end": 6059,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5857,
											"end": 6069,
											"name": "PUSH",
											"source": 9,
											"value": "F00000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5857,
											"end": 6069,
											"name": "SWAP6",
											"source": 9
										},
										{
											"begin": 5857,
											"end": 6069,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 5857,
											"end": 6069,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 5857,
											"end": 6069,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 5857,
											"end": 6069,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5857,
											"end": 6069,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5857,
											"end": 6069,
											"name": "SWAP8",
											"source": 9
										},
										{
											"begin": 5857,
											"end": 6069,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5857,
											"end": 6069,
											"name": "SWAP8",
											"source": 9
										},
										{
											"begin": 5857,
											"end": 6069,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5857,
											"end": 6069,
											"name": "SWAP8",
											"source": 9
										},
										{
											"begin": 5857,
											"end": 6069,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5857,
											"end": 6069,
											"name": "SWAP8",
											"source": 9
										},
										{
											"begin": 5857,
											"end": 6069,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5857,
											"end": 6069,
											"name": "SWAP8",
											"source": 9
										},
										{
											"begin": 5857,
											"end": 6069,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5857,
											"end": 6069,
											"name": "SWAP8",
											"source": 9
										},
										{
											"begin": 5857,
											"end": 6069,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5857,
											"end": 6069,
											"name": "SWAP8",
											"source": 9
										},
										{
											"begin": 5857,
											"end": 6069,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5857,
											"end": 6069,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 6076,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 6076,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 6076,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 6076,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 6076,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 6076,
											"name": "SWAP6",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 6076,
											"name": "SWAP7",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 6076,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "tag",
											"source": 0,
											"value": "89"
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2487,
											"end": 2494,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2506,
											"end": 2530,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2533,
											"end": 2553,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "193"
										},
										{
											"begin": 2533,
											"end": 2551,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "194"
										},
										{
											"begin": 2533,
											"end": 2553,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2533,
											"end": 2553,
											"name": "tag",
											"source": 0,
											"value": "193"
										},
										{
											"begin": 2533,
											"end": 2553,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2553,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2553,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2570,
											"end": 2571,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2570,
											"end": 2578,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2570,
											"end": 2578,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2570,
											"end": 2578,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2570,
											"end": 2578,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2570,
											"end": 2578,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2570,
											"end": 2578,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2570,
											"end": 2578,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2570,
											"end": 2578,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2570,
											"end": 2578,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2570,
											"end": 2578,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2570,
											"end": 2578,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2570,
											"end": 2578,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2563,
											"end": 2578,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2563,
											"end": 2578,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2563,
											"end": 2578,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2585,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "tag",
											"source": 2,
											"value": "93"
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3315,
											"end": 3328,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 3340,
											"end": 3362,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3365,
											"end": 3383,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "196"
										},
										{
											"begin": 3365,
											"end": 3381,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 3365,
											"end": 3383,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3365,
											"end": 3383,
											"name": "tag",
											"source": 2,
											"value": "196"
										},
										{
											"begin": 3365,
											"end": 3383,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3340,
											"end": 3383,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3340,
											"end": 3383,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3400,
											"end": 3401,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3400,
											"end": 3409,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3400,
											"end": 3409,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "197"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "118"
										},
										{
											"begin": 3393,
											"end": 3409,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "tag",
											"source": 2,
											"value": "197"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "198"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "118"
										},
										{
											"begin": 3393,
											"end": 3409,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "tag",
											"source": 2,
											"value": "198"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "199"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "200"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "199"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "tag",
											"source": 2,
											"value": "200"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "tag",
											"source": 2,
											"value": "201"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "201"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "tag",
											"source": 2,
											"value": "199"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3268,
											"end": 3416,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "tag",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4836,
											"end": 4840,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4852,
											"end": 4865,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4868,
											"end": 4880,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "203"
										},
										{
											"begin": 4868,
											"end": 4878,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "125"
										},
										{
											"begin": 4868,
											"end": 4880,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4868,
											"end": 4880,
											"name": "tag",
											"source": 2,
											"value": "203"
										},
										{
											"begin": 4868,
											"end": 4880,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4852,
											"end": 4880,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4852,
											"end": 4880,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4890,
											"end": 4917,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "204"
										},
										{
											"begin": 4900,
											"end": 4905,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4907,
											"end": 4909,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4911,
											"end": 4916,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4890,
											"end": 4899,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "135"
										},
										{
											"begin": 4890,
											"end": 4917,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4890,
											"end": 4917,
											"name": "tag",
											"source": 2,
											"value": "204"
										},
										{
											"begin": 4890,
											"end": 4917,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4934,
											"end": 4938,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 4927,
											"end": 4938,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4927,
											"end": 4938,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4927,
											"end": 4938,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4767,
											"end": 4945,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 848,
											"end": 1107,
											"name": "tag",
											"source": 20,
											"value": "101"
										},
										{
											"begin": 848,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4158,
											"end": 4188,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4191,
											"end": 4217,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "206"
										},
										{
											"begin": 4191,
											"end": 4215,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "207"
										},
										{
											"begin": 4191,
											"end": 4217,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4191,
											"end": 4217,
											"name": "tag",
											"source": 1,
											"value": "206"
										},
										{
											"begin": 4191,
											"end": 4217,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4158,
											"end": 4217,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4158,
											"end": 4217,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4279,
											"end": 4298,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4302,
											"end": 4303,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "PUSH",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4301,
											"end": 4317,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4279,
											"end": 4317,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4279,
											"end": 4317,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4327,
											"end": 4345,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4348,
											"end": 4349,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4327,
											"end": 4362,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4327,
											"end": 4362,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4706,
											"end": 4723,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4741,
											"end": 4742,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4737,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4742,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4726,
											"end": 4742,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4742,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4760,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4760,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4760,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "208"
										},
										{
											"begin": 4726,
											"end": 4760,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4760,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4746,
											"end": 4760,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4760,
											"name": "tag",
											"source": 1,
											"value": "208"
										},
										{
											"begin": 4726,
											"end": 4760,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4706,
											"end": 4760,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4706,
											"end": 4760,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4770,
											"end": 4787,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4805,
											"end": 4806,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 4790,
											"end": 4801,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 4790,
											"end": 4840,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4790,
											"end": 4840,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4790,
											"end": 4840,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "209"
										},
										{
											"begin": 4790,
											"end": 4840,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4790,
											"end": 4840,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4839,
											"end": 4840,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4818,
											"end": 4822,
											"name": "ADDRESS",
											"source": 1
										},
										{
											"begin": 4810,
											"end": 4835,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4810,
											"end": 4835,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4810,
											"end": 4835,
											"name": "EXTCODESIZE",
											"source": 1
										},
										{
											"begin": 4810,
											"end": 4840,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 4790,
											"end": 4840,
											"name": "tag",
											"source": 1,
											"value": "209"
										},
										{
											"begin": 4790,
											"end": 4840,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4770,
											"end": 4840,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4770,
											"end": 4840,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4856,
											"end": 4868,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4855,
											"end": 4868,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4855,
											"end": 4885,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4855,
											"end": 4885,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4855,
											"end": 4885,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "210"
										},
										{
											"begin": 4855,
											"end": 4885,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4855,
											"end": 4885,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4873,
											"end": 4885,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4872,
											"end": 4885,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4855,
											"end": 4885,
											"name": "tag",
											"source": 1,
											"value": "210"
										},
										{
											"begin": 4855,
											"end": 4885,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4851,
											"end": 4942,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4851,
											"end": 4942,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "211"
										},
										{
											"begin": 4851,
											"end": 4942,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "PUSH",
											"source": 1,
											"value": "F92EE8A900000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 4851,
											"end": 4942,
											"name": "tag",
											"source": 1,
											"value": "211"
										},
										{
											"begin": 4851,
											"end": 4942,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4968,
											"end": 4969,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 4951,
											"end": 4952,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 4951,
											"end": 4965,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4951,
											"end": 4965,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4951,
											"end": 4965,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4983,
											"end": 4997,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 4979,
											"end": 5046,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4979,
											"end": 5046,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "212"
										},
										{
											"begin": 4979,
											"end": 5046,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5031,
											"end": 5035,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 5013,
											"end": 5014,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5028,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5013,
											"end": 5028,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5028,
											"name": "PUSH",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4979,
											"end": 5046,
											"name": "tag",
											"source": 1,
											"value": "212"
										},
										{
											"begin": 4979,
											"end": 5046,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 919,
											"end": 955,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "214"
										},
										{
											"begin": 919,
											"end": 955,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 919,
											"end": 955,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 919,
											"end": 955,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 919,
											"end": 955,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 919,
											"end": 955,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 919,
											"end": 955,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 919,
											"end": 955,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 919,
											"end": 955,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 919,
											"end": 955,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 20,
											"value": "B"
										},
										{
											"begin": 919,
											"end": 955,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 919,
											"end": 955,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 919,
											"end": 955,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 919,
											"end": 955,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 919,
											"end": 955,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 20,
											"value": "3432544F4B454E495A4552000000000000000000000000000000000000000000"
										},
										{
											"begin": 919,
											"end": 955,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 919,
											"end": 955,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 919,
											"end": 955,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 919,
											"end": 955,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 919,
											"end": 955,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 919,
											"end": 955,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 919,
											"end": 955,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 919,
											"end": 955,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 919,
											"end": 955,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 919,
											"end": 955,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 919,
											"end": 955,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 919,
											"end": 955,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 20,
											"value": "5"
										},
										{
											"begin": 919,
											"end": 955,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 919,
											"end": 955,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 919,
											"end": 955,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 919,
											"end": 955,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 919,
											"end": 955,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 20,
											"value": "3432544F4B000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 919,
											"end": 955,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 919,
											"end": 955,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 919,
											"end": 955,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 919,
											"end": 931,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "215"
										},
										{
											"begin": 919,
											"end": 955,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 919,
											"end": 955,
											"modifierDepth": 1,
											"name": "tag",
											"source": 20,
											"value": "214"
										},
										{
											"begin": 919,
											"end": 955,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 965,
											"end": 987,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "216"
										},
										{
											"begin": 965,
											"end": 985,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "217"
										},
										{
											"begin": 965,
											"end": 987,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 965,
											"end": 987,
											"modifierDepth": 1,
											"name": "tag",
											"source": 20,
											"value": "216"
										},
										{
											"begin": 965,
											"end": 987,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 997,
											"end": 1019,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "218"
										},
										{
											"begin": 997,
											"end": 1017,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "219"
										},
										{
											"begin": 997,
											"end": 1019,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 997,
											"end": 1019,
											"modifierDepth": 1,
											"name": "tag",
											"source": 20,
											"value": "218"
										},
										{
											"begin": 997,
											"end": 1019,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1029,
											"end": 1057,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "220"
										},
										{
											"begin": 1044,
											"end": 1056,
											"modifierDepth": 1,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 1029,
											"end": 1043,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "221"
										},
										{
											"begin": 1029,
											"end": 1057,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1029,
											"end": 1057,
											"modifierDepth": 1,
											"name": "tag",
											"source": 20,
											"value": "220"
										},
										{
											"begin": 1029,
											"end": 1057,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1067,
											"end": 1100,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "222"
										},
										{
											"begin": 1067,
											"end": 1100,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 1067,
											"end": 1100,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 1067,
											"end": 1100,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1067,
											"end": 1100,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 1067,
											"end": 1100,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1067,
											"end": 1100,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 1067,
											"end": 1100,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1067,
											"end": 1100,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1067,
											"end": 1100,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 20,
											"value": "B"
										},
										{
											"begin": 1067,
											"end": 1100,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1067,
											"end": 1100,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1067,
											"end": 1100,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 1067,
											"end": 1100,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1067,
											"end": 1100,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 20,
											"value": "3432544F4B454E495A4552000000000000000000000000000000000000000000"
										},
										{
											"begin": 1067,
											"end": 1100,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1067,
											"end": 1100,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1067,
											"end": 1100,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1067,
											"end": 1085,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "223"
										},
										{
											"begin": 1067,
											"end": 1100,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1067,
											"end": 1100,
											"modifierDepth": 1,
											"name": "tag",
											"source": 20,
											"value": "222"
										},
										{
											"begin": 1067,
											"end": 1100,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5070,
											"end": 5084,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5066,
											"end": 5167,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5066,
											"end": 5167,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "224"
										},
										{
											"begin": 5066,
											"end": 5167,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5118,
											"end": 5123,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5100,
											"end": 5101,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5115,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5100,
											"end": 5115,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5115,
											"name": "PUSH",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "PUSH",
											"source": 1,
											"value": "C7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2"
										},
										{
											"begin": 5154,
											"end": 5155,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "225"
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "226"
										},
										{
											"begin": 5142,
											"end": 5156,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "tag",
											"source": 1,
											"value": "225"
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "LOG1",
											"source": 1
										},
										{
											"begin": 5066,
											"end": 5167,
											"name": "tag",
											"source": 1,
											"value": "224"
										},
										{
											"begin": 5066,
											"end": 5167,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4092,
											"end": 5173,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4092,
											"end": 5173,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4092,
											"end": 5173,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4092,
											"end": 5173,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4092,
											"end": 5173,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 848,
											"end": 1107,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 848,
											"end": 1107,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2095,
											"end": 2767,
											"name": "tag",
											"source": 5,
											"value": "105"
										},
										{
											"begin": 2095,
											"end": 2767,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2316,
											"end": 2324,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 2298,
											"end": 2313,
											"name": "TIMESTAMP",
											"source": 5
										},
										{
											"begin": 2298,
											"end": 2324,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 2294,
											"end": 2391,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 2294,
											"end": 2391,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "228"
										},
										{
											"begin": 2294,
											"end": 2391,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2371,
											"end": 2379,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 2347,
											"end": 2380,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2347,
											"end": 2380,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2347,
											"end": 2380,
											"name": "PUSH",
											"source": 5,
											"value": "6279130200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2347,
											"end": 2380,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2347,
											"end": 2380,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2347,
											"end": 2380,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2347,
											"end": 2380,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2347,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "229"
										},
										{
											"begin": 2347,
											"end": 2380,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2347,
											"end": 2380,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2347,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "42"
										},
										{
											"begin": 2347,
											"end": 2380,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2347,
											"end": 2380,
											"name": "tag",
											"source": 5,
											"value": "229"
										},
										{
											"begin": 2347,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2347,
											"end": 2380,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2347,
											"end": 2380,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2347,
											"end": 2380,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2347,
											"end": 2380,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2347,
											"end": 2380,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2347,
											"end": 2380,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2347,
											"end": 2380,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 2294,
											"end": 2391,
											"name": "tag",
											"source": 5,
											"value": "228"
										},
										{
											"begin": 2294,
											"end": 2391,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2401,
											"end": 2419,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1277,
											"end": 1372,
											"name": "PUSH",
											"source": 5,
											"value": "6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9"
										},
										{
											"begin": 2460,
											"end": 2465,
											"name": "DUP9",
											"source": 5
										},
										{
											"begin": 2467,
											"end": 2474,
											"name": "DUP9",
											"source": 5
										},
										{
											"begin": 2476,
											"end": 2481,
											"name": "DUP9",
											"source": 5
										},
										{
											"begin": 2483,
											"end": 2499,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "230"
										},
										{
											"begin": 2493,
											"end": 2498,
											"name": "DUP13",
											"source": 5
										},
										{
											"begin": 2483,
											"end": 2492,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "231"
										},
										{
											"begin": 2483,
											"end": 2499,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2483,
											"end": 2499,
											"name": "tag",
											"source": 5,
											"value": "230"
										},
										{
											"begin": 2483,
											"end": 2499,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2501,
											"end": 2509,
											"name": "DUP10",
											"source": 5
										},
										{
											"begin": 2432,
											"end": 2510,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2432,
											"end": 2510,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2432,
											"end": 2510,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2432,
											"end": 2510,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2432,
											"end": 2510,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "232"
										},
										{
											"begin": 2432,
											"end": 2510,
											"name": "SWAP7",
											"source": 5
										},
										{
											"begin": 2432,
											"end": 2510,
											"name": "SWAP6",
											"source": 5
										},
										{
											"begin": 2432,
											"end": 2510,
											"name": "SWAP5",
											"source": 5
										},
										{
											"begin": 2432,
											"end": 2510,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 2432,
											"end": 2510,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 2432,
											"end": 2510,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2432,
											"end": 2510,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2432,
											"end": 2510,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "233"
										},
										{
											"begin": 2432,
											"end": 2510,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2432,
											"end": 2510,
											"name": "tag",
											"source": 5,
											"value": "232"
										},
										{
											"begin": 2432,
											"end": 2510,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2432,
											"end": 2510,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2432,
											"end": 2510,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2432,
											"end": 2510,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2432,
											"end": 2510,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2432,
											"end": 2510,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 2432,
											"end": 2510,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2432,
											"end": 2510,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2432,
											"end": 2510,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2432,
											"end": 2510,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2432,
											"end": 2510,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2432,
											"end": 2510,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2432,
											"end": 2510,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2422,
											"end": 2511,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2422,
											"end": 2511,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2422,
											"end": 2511,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2422,
											"end": 2511,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2422,
											"end": 2511,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2422,
											"end": 2511,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 2401,
											"end": 2511,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2401,
											"end": 2511,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2522,
											"end": 2534,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2537,
											"end": 2565,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "234"
										},
										{
											"begin": 2554,
											"end": 2564,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2537,
											"end": 2553,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "235"
										},
										{
											"begin": 2537,
											"end": 2565,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2537,
											"end": 2565,
											"name": "tag",
											"source": 5,
											"value": "234"
										},
										{
											"begin": 2537,
											"end": 2565,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2522,
											"end": 2565,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2522,
											"end": 2565,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2576,
											"end": 2590,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2593,
											"end": 2621,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "236"
										},
										{
											"begin": 2607,
											"end": 2611,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2613,
											"end": 2614,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 2616,
											"end": 2617,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 2619,
											"end": 2620,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 2593,
											"end": 2606,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "237"
										},
										{
											"begin": 2593,
											"end": 2621,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2593,
											"end": 2621,
											"name": "tag",
											"source": 5,
											"value": "236"
										},
										{
											"begin": 2593,
											"end": 2621,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2576,
											"end": 2621,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2576,
											"end": 2621,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2645,
											"end": 2650,
											"name": "DUP10",
											"source": 5
										},
										{
											"begin": 2635,
											"end": 2650,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2635,
											"end": 2650,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2635,
											"end": 2641,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2635,
											"end": 2650,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2635,
											"end": 2650,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2635,
											"end": 2650,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 2631,
											"end": 2719,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "238"
										},
										{
											"begin": 2631,
											"end": 2719,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2694,
											"end": 2700,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2702,
											"end": 2707,
											"name": "DUP11",
											"source": 5
										},
										{
											"begin": 2673,
											"end": 2708,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2673,
											"end": 2708,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2673,
											"end": 2708,
											"name": "PUSH",
											"source": 5,
											"value": "4B800E4600000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2673,
											"end": 2708,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2673,
											"end": 2708,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2673,
											"end": 2708,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2673,
											"end": 2708,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2673,
											"end": 2708,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "239"
										},
										{
											"begin": 2673,
											"end": 2708,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 2673,
											"end": 2708,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2673,
											"end": 2708,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2673,
											"end": 2708,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "240"
										},
										{
											"begin": 2673,
											"end": 2708,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2673,
											"end": 2708,
											"name": "tag",
											"source": 5,
											"value": "239"
										},
										{
											"begin": 2673,
											"end": 2708,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2673,
											"end": 2708,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2673,
											"end": 2708,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2673,
											"end": 2708,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2673,
											"end": 2708,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2673,
											"end": 2708,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2673,
											"end": 2708,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2673,
											"end": 2708,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 2631,
											"end": 2719,
											"name": "tag",
											"source": 5,
											"value": "238"
										},
										{
											"begin": 2631,
											"end": 2719,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2729,
											"end": 2760,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "241"
										},
										{
											"begin": 2738,
											"end": 2743,
											"name": "DUP11",
											"source": 5
										},
										{
											"begin": 2745,
											"end": 2752,
											"name": "DUP11",
											"source": 5
										},
										{
											"begin": 2754,
											"end": 2759,
											"name": "DUP11",
											"source": 5
										},
										{
											"begin": 2729,
											"end": 2737,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "127"
										},
										{
											"begin": 2729,
											"end": 2760,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2729,
											"end": 2760,
											"name": "tag",
											"source": 5,
											"value": "241"
										},
										{
											"begin": 2729,
											"end": 2760,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2284,
											"end": 2767,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2284,
											"end": 2767,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2284,
											"end": 2767,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2095,
											"end": 2767,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2095,
											"end": 2767,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2095,
											"end": 2767,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2095,
											"end": 2767,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2095,
											"end": 2767,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2095,
											"end": 2767,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2095,
											"end": 2767,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2095,
											"end": 2767,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "tag",
											"source": 2,
											"value": "109"
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5083,
											"end": 5090,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5102,
											"end": 5124,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5127,
											"end": 5145,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "243"
										},
										{
											"begin": 5127,
											"end": 5143,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 5127,
											"end": 5145,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5127,
											"end": 5145,
											"name": "tag",
											"source": 2,
											"value": "243"
										},
										{
											"begin": 5127,
											"end": 5145,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5102,
											"end": 5145,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5102,
											"end": 5145,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5162,
											"end": 5163,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5162,
											"end": 5175,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5162,
											"end": 5175,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5176,
											"end": 5181,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5183,
											"end": 5190,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 5155,
											"end": 5191,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5155,
											"end": 5191,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5155,
											"end": 5191,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5003,
											"end": 5198,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "tag",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "245"
										},
										{
											"begin": 2334,
											"end": 2345,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 2334,
											"end": 2347,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "tag",
											"source": 0,
											"value": "245"
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3509,
											"end": 3510,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3489,
											"end": 3511,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3489,
											"end": 3511,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3489,
											"end": 3497,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3489,
											"end": 3511,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3489,
											"end": 3511,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3489,
											"end": 3511,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3485,
											"end": 3576,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "247"
										},
										{
											"begin": 3485,
											"end": 3576,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3562,
											"end": 3563,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "1E4FBDF700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "248"
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 3534,
											"end": 3565,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "248"
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 3485,
											"end": 3576,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "247"
										},
										{
											"begin": 3485,
											"end": 3576,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3585,
											"end": 3613,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "249"
										},
										{
											"begin": 3604,
											"end": 3612,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3585,
											"end": 3603,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "164"
										},
										{
											"begin": 3585,
											"end": 3613,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3585,
											"end": 3613,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "249"
										},
										{
											"begin": 3585,
											"end": 3613,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3405,
											"end": 3620,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2242,
											"end": 2395,
											"name": "tag",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 2242,
											"end": 2395,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2292,
											"end": 2314,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2359,
											"end": 2379,
											"name": "PUSH",
											"source": 2,
											"value": "52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE00"
										},
										{
											"begin": 2349,
											"end": 2379,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2349,
											"end": 2379,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2242,
											"end": 2395,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2242,
											"end": 2395,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 887,
											"end": 983,
											"name": "tag",
											"source": 6,
											"value": "125"
										},
										{
											"begin": 887,
											"end": 983,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 940,
											"end": 947,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 966,
											"end": 976,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 959,
											"end": 976,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 959,
											"end": 976,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 887,
											"end": 983,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 887,
											"end": 983,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 10264,
											"end": 10392,
											"name": "tag",
											"source": 2,
											"value": "127"
										},
										{
											"begin": 10264,
											"end": 10392,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10348,
											"end": 10385,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "253"
										},
										{
											"begin": 10357,
											"end": 10362,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 10364,
											"end": 10371,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 10373,
											"end": 10378,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 10380,
											"end": 10384,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 10348,
											"end": 10356,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "254"
										},
										{
											"begin": 10348,
											"end": 10385,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 10348,
											"end": 10385,
											"name": "tag",
											"source": 2,
											"value": "253"
										},
										{
											"begin": 10348,
											"end": 10385,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10264,
											"end": 10392,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10264,
											"end": 10392,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10264,
											"end": 10392,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10264,
											"end": 10392,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11993,
											"end": 12470,
											"name": "tag",
											"source": 2,
											"value": "133"
										},
										{
											"begin": 11993,
											"end": 12470,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12092,
											"end": 12116,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 12119,
											"end": 12144,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "256"
										},
										{
											"begin": 12129,
											"end": 12134,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12136,
											"end": 12143,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12119,
											"end": 12128,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "109"
										},
										{
											"begin": 12119,
											"end": 12144,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 12119,
											"end": 12144,
											"name": "tag",
											"source": 2,
											"value": "256"
										},
										{
											"begin": 12119,
											"end": 12144,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12092,
											"end": 12144,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12092,
											"end": 12144,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12178,
											"end": 12195,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12158,
											"end": 12174,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12158,
											"end": 12195,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 12154,
											"end": 12464,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "257"
										},
										{
											"begin": 12154,
											"end": 12464,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 12234,
											"end": 12239,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12215,
											"end": 12231,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12215,
											"end": 12239,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 12211,
											"end": 12341,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 12211,
											"end": 12341,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "258"
										},
										{
											"begin": 12211,
											"end": 12341,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 12293,
											"end": 12300,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12302,
											"end": 12318,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12320,
											"end": 12325,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "PUSH",
											"source": 2,
											"value": "FB8F41B200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "259"
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "260"
										},
										{
											"begin": 12266,
											"end": 12326,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "tag",
											"source": 2,
											"value": "259"
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 12211,
											"end": 12341,
											"name": "tag",
											"source": 2,
											"value": "258"
										},
										{
											"begin": 12211,
											"end": 12341,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12382,
											"end": 12439,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "261"
										},
										{
											"begin": 12391,
											"end": 12396,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12398,
											"end": 12405,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12426,
											"end": 12431,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12407,
											"end": 12423,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12407,
											"end": 12431,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 12433,
											"end": 12438,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 12382,
											"end": 12390,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "254"
										},
										{
											"begin": 12382,
											"end": 12439,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 12382,
											"end": 12439,
											"name": "tag",
											"source": 2,
											"value": "261"
										},
										{
											"begin": 12382,
											"end": 12439,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12154,
											"end": 12464,
											"name": "tag",
											"source": 2,
											"value": "257"
										},
										{
											"begin": 12154,
											"end": 12464,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12082,
											"end": 12470,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11993,
											"end": 12470,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11993,
											"end": 12470,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11993,
											"end": 12470,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11993,
											"end": 12470,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6868,
											"end": 7168,
											"name": "tag",
											"source": 2,
											"value": "135"
										},
										{
											"begin": 6868,
											"end": 7168,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6967,
											"end": 6968,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6951,
											"end": 6969,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6951,
											"end": 6969,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6951,
											"end": 6955,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6951,
											"end": 6969,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6951,
											"end": 6969,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6951,
											"end": 6969,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6947,
											"end": 7033,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "263"
										},
										{
											"begin": 6947,
											"end": 7033,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7019,
											"end": 7020,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "PUSH",
											"source": 2,
											"value": "96C6FD1E00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "264"
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 6992,
											"end": 7022,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "tag",
											"source": 2,
											"value": "264"
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6947,
											"end": 7033,
											"name": "tag",
											"source": 2,
											"value": "263"
										},
										{
											"begin": 6947,
											"end": 7033,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7060,
											"end": 7061,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7046,
											"end": 7062,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7046,
											"end": 7062,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7046,
											"end": 7048,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7046,
											"end": 7062,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7046,
											"end": 7062,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7046,
											"end": 7062,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7042,
											"end": 7128,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "265"
										},
										{
											"begin": 7042,
											"end": 7128,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7114,
											"end": 7115,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "PUSH",
											"source": 2,
											"value": "EC442F0500000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "266"
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 7085,
											"end": 7117,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "tag",
											"source": 2,
											"value": "266"
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 7042,
											"end": 7128,
											"name": "tag",
											"source": 2,
											"value": "265"
										},
										{
											"begin": 7042,
											"end": 7128,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7137,
											"end": 7161,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "267"
										},
										{
											"begin": 7145,
											"end": 7149,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7151,
											"end": 7153,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7155,
											"end": 7160,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7137,
											"end": 7144,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "268"
										},
										{
											"begin": 7137,
											"end": 7161,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7137,
											"end": 7161,
											"name": "tag",
											"source": 2,
											"value": "267"
										},
										{
											"begin": 7137,
											"end": 7161,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6868,
											"end": 7168,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6868,
											"end": 7168,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6868,
											"end": 7168,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6868,
											"end": 7168,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4015,
											"end": 4124,
											"name": "tag",
											"source": 9,
											"value": "139"
										},
										{
											"begin": 4015,
											"end": 4124,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4068,
											"end": 4075,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4094,
											"end": 4117,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "270"
										},
										{
											"begin": 4094,
											"end": 4115,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "271"
										},
										{
											"begin": 4094,
											"end": 4117,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4094,
											"end": 4117,
											"name": "tag",
											"source": 9,
											"value": "270"
										},
										{
											"begin": 4094,
											"end": 4117,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4087,
											"end": 4117,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4087,
											"end": 4117,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4015,
											"end": 4124,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4015,
											"end": 4124,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2658,
											"end": 2820,
											"name": "tag",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 2658,
											"end": 2820,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2728,
											"end": 2740,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "273"
										},
										{
											"begin": 2728,
											"end": 2738,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 2728,
											"end": 2740,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2728,
											"end": 2740,
											"name": "tag",
											"source": 0,
											"value": "273"
										},
										{
											"begin": 2728,
											"end": 2740,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2717,
											"end": 2740,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2717,
											"end": 2740,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2717,
											"end": 2724,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "274"
										},
										{
											"begin": 2717,
											"end": 2722,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "89"
										},
										{
											"begin": 2717,
											"end": 2724,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2717,
											"end": 2724,
											"name": "tag",
											"source": 0,
											"value": "274"
										},
										{
											"begin": 2717,
											"end": 2724,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2717,
											"end": 2740,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2717,
											"end": 2740,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2717,
											"end": 2740,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2713,
											"end": 2814,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "275"
										},
										{
											"begin": 2713,
											"end": 2814,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2790,
											"end": 2802,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "276"
										},
										{
											"begin": 2790,
											"end": 2800,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 2790,
											"end": 2802,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2790,
											"end": 2802,
											"name": "tag",
											"source": 0,
											"value": "276"
										},
										{
											"begin": 2790,
											"end": 2802,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "PUSH",
											"source": 0,
											"value": "118CDAA700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "277"
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 2763,
											"end": 2803,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "tag",
											"source": 0,
											"value": "277"
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2713,
											"end": 2814,
											"name": "tag",
											"source": 0,
											"value": "275"
										},
										{
											"begin": 2713,
											"end": 2814,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2658,
											"end": 2820,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3674,
											"end": 3852,
											"name": "tag",
											"source": 8,
											"value": "145"
										},
										{
											"begin": 3674,
											"end": 3852,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2563,
											"end": 2579,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "279"
										},
										{
											"begin": 2563,
											"end": 2577,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "280"
										},
										{
											"begin": 2563,
											"end": 2579,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2563,
											"end": 2579,
											"name": "tag",
											"source": 8,
											"value": "279"
										},
										{
											"begin": 2563,
											"end": 2579,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3732,
											"end": 3757,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3760,
											"end": 3781,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "282"
										},
										{
											"begin": 3760,
											"end": 3779,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "157"
										},
										{
											"begin": 3760,
											"end": 3781,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3760,
											"end": 3781,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "282"
										},
										{
											"begin": 3760,
											"end": 3781,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3732,
											"end": 3781,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3732,
											"end": 3781,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3803,
											"end": 3808,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3791,
											"end": 3792,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3791,
											"end": 3800,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3791,
											"end": 3800,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3791,
											"end": 3800,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3791,
											"end": 3808,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 3791,
											"end": 3808,
											"modifierDepth": 1,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 3791,
											"end": 3808,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3791,
											"end": 3808,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 3791,
											"end": 3808,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3791,
											"end": 3808,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 3791,
											"end": 3808,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3791,
											"end": 3808,
											"modifierDepth": 1,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 3791,
											"end": 3808,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3791,
											"end": 3808,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3791,
											"end": 3808,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3791,
											"end": 3808,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3791,
											"end": 3808,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3791,
											"end": 3808,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3791,
											"end": 3808,
											"modifierDepth": 1,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 3791,
											"end": 3808,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3791,
											"end": 3808,
											"modifierDepth": 1,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 3791,
											"end": 3808,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3823,
											"end": 3845,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA"
										},
										{
											"begin": 3832,
											"end": 3844,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "283"
										},
										{
											"begin": 3832,
											"end": 3842,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "125"
										},
										{
											"begin": 3832,
											"end": 3844,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3832,
											"end": 3844,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "283"
										},
										{
											"begin": 3832,
											"end": 3844,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3823,
											"end": 3845,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3823,
											"end": 3845,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3823,
											"end": 3845,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "284"
										},
										{
											"begin": 3823,
											"end": 3845,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3823,
											"end": 3845,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3823,
											"end": 3845,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "91"
										},
										{
											"begin": 3823,
											"end": 3845,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3823,
											"end": 3845,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "284"
										},
										{
											"begin": 3823,
											"end": 3845,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3823,
											"end": 3845,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3823,
											"end": 3845,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3823,
											"end": 3845,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3823,
											"end": 3845,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3823,
											"end": 3845,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3823,
											"end": 3845,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3823,
											"end": 3845,
											"modifierDepth": 1,
											"name": "LOG1",
											"source": 8
										},
										{
											"begin": 3722,
											"end": 3852,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3674,
											"end": 3852,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8996,
											"end": 9204,
											"name": "tag",
											"source": 2,
											"value": "150"
										},
										{
											"begin": 8996,
											"end": 9204,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9085,
											"end": 9086,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9066,
											"end": 9087,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9066,
											"end": 9087,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9066,
											"end": 9073,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9066,
											"end": 9087,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9066,
											"end": 9087,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9066,
											"end": 9087,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 9062,
											"end": 9153,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "286"
										},
										{
											"begin": 9062,
											"end": 9153,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 9139,
											"end": 9140,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "PUSH",
											"source": 2,
											"value": "EC442F0500000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "287"
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 9110,
											"end": 9142,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "tag",
											"source": 2,
											"value": "287"
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 9062,
											"end": 9153,
											"name": "tag",
											"source": 2,
											"value": "286"
										},
										{
											"begin": 9062,
											"end": 9153,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9162,
											"end": 9197,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "288"
										},
										{
											"begin": 9178,
											"end": 9179,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9182,
											"end": 9189,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9191,
											"end": 9196,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9162,
											"end": 9169,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "268"
										},
										{
											"begin": 9162,
											"end": 9197,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9162,
											"end": 9197,
											"name": "tag",
											"source": 2,
											"value": "288"
										},
										{
											"begin": 9162,
											"end": 9197,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8996,
											"end": 9204,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8996,
											"end": 9204,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8996,
											"end": 9204,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9522,
											"end": 9728,
											"name": "tag",
											"source": 2,
											"value": "154"
										},
										{
											"begin": 9522,
											"end": 9728,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9611,
											"end": 9612,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9592,
											"end": 9613,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9592,
											"end": 9613,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9592,
											"end": 9599,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9592,
											"end": 9613,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9592,
											"end": 9613,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9592,
											"end": 9613,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 9588,
											"end": 9677,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "290"
										},
										{
											"begin": 9588,
											"end": 9677,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 9663,
											"end": 9664,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9636,
											"end": 9666,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9636,
											"end": 9666,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9636,
											"end": 9666,
											"name": "PUSH",
											"source": 2,
											"value": "96C6FD1E00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9636,
											"end": 9666,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9636,
											"end": 9666,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9636,
											"end": 9666,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 9636,
											"end": 9666,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9636,
											"end": 9666,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "291"
										},
										{
											"begin": 9636,
											"end": 9666,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9636,
											"end": 9666,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9636,
											"end": 9666,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 9636,
											"end": 9666,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9636,
											"end": 9666,
											"name": "tag",
											"source": 2,
											"value": "291"
										},
										{
											"begin": 9636,
											"end": 9666,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9636,
											"end": 9666,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9636,
											"end": 9666,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9636,
											"end": 9666,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9636,
											"end": 9666,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9636,
											"end": 9666,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 9636,
											"end": 9666,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9636,
											"end": 9666,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 9588,
											"end": 9677,
											"name": "tag",
											"source": 2,
											"value": "290"
										},
										{
											"begin": 9588,
											"end": 9677,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9686,
											"end": 9721,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "292"
										},
										{
											"begin": 9694,
											"end": 9701,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9711,
											"end": 9712,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9715,
											"end": 9720,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9686,
											"end": 9693,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "268"
										},
										{
											"begin": 9686,
											"end": 9721,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9686,
											"end": 9721,
											"name": "tag",
											"source": 2,
											"value": "292"
										},
										{
											"begin": 9686,
											"end": 9721,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9522,
											"end": 9728,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9522,
											"end": 9728,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9522,
											"end": 9728,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1147,
											"end": 1309,
											"name": "tag",
											"source": 8,
											"value": "157"
										},
										{
											"begin": 1147,
											"end": 1309,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1200,
											"end": 1225,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1270,
											"end": 1293,
											"name": "PUSH",
											"source": 8,
											"value": "CD5ED15C6E187E77E9AEE88184C21F4F2182AB5827CB3B7E07FBEDCD63F03300"
										},
										{
											"begin": 1260,
											"end": 1293,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1260,
											"end": 1293,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1147,
											"end": 1309,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1147,
											"end": 1309,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3774,
											"end": 4022,
											"name": "tag",
											"source": 0,
											"value": "164"
										},
										{
											"begin": 3774,
											"end": 4022,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3847,
											"end": 3871,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3874,
											"end": 3894,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "295"
										},
										{
											"begin": 3874,
											"end": 3892,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "194"
										},
										{
											"begin": 3874,
											"end": 3894,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3874,
											"end": 3894,
											"name": "tag",
											"source": 0,
											"value": "295"
										},
										{
											"begin": 3874,
											"end": 3894,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3847,
											"end": 3894,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3847,
											"end": 3894,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3904,
											"end": 3920,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3923,
											"end": 3924,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3904,
											"end": 3931,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3904,
											"end": 3931,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3952,
											"end": 3960,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3942,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3949,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3941,
											"end": 3949,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3949,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4006,
											"end": 4014,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3996,
											"end": 4004,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 3837,
											"end": 4022,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3837,
											"end": 4022,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3774,
											"end": 4022,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3774,
											"end": 4022,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1259,
											"end": 1423,
											"name": "tag",
											"source": 7,
											"value": "171"
										},
										{
											"begin": 1259,
											"end": 1423,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1319,
											"end": 1326,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1338,
											"end": 1361,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1364,
											"end": 1383,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "297"
										},
										{
											"begin": 1364,
											"end": 1381,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "298"
										},
										{
											"begin": 1364,
											"end": 1383,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1364,
											"end": 1383,
											"name": "tag",
											"source": 7,
											"value": "297"
										},
										{
											"begin": 1364,
											"end": 1383,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1338,
											"end": 1383,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1338,
											"end": 1383,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1400,
											"end": 1401,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1400,
											"end": 1409,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1400,
											"end": 1409,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1400,
											"end": 1416,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1410,
											"end": 1415,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1400,
											"end": 1416,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1400,
											"end": 1416,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1400,
											"end": 1416,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1400,
											"end": 1416,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1400,
											"end": 1416,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1400,
											"end": 1416,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1400,
											"end": 1416,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1400,
											"end": 1416,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1400,
											"end": 1416,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1400,
											"end": 1416,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1400,
											"end": 1416,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1400,
											"end": 1416,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1400,
											"end": 1416,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1400,
											"end": 1416,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1400,
											"end": 1416,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 1400,
											"end": 1416,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1393,
											"end": 1416,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1393,
											"end": 1416,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1393,
											"end": 1416,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1259,
											"end": 1423,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1259,
											"end": 1423,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1259,
											"end": 1423,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1259,
											"end": 1423,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3366,
											"end": 3542,
											"name": "tag",
											"source": 8,
											"value": "176"
										},
										{
											"begin": 3366,
											"end": 3542,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2316,
											"end": 2335,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "300"
										},
										{
											"begin": 2316,
											"end": 2333,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "301"
										},
										{
											"begin": 2316,
											"end": 2335,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2316,
											"end": 2335,
											"name": "tag",
											"source": 8,
											"value": "300"
										},
										{
											"begin": 2316,
											"end": 2335,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3425,
											"end": 3450,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3453,
											"end": 3474,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "303"
										},
										{
											"begin": 3453,
											"end": 3472,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "157"
										},
										{
											"begin": 3453,
											"end": 3474,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3453,
											"end": 3474,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "303"
										},
										{
											"begin": 3453,
											"end": 3474,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3425,
											"end": 3474,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3425,
											"end": 3474,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3496,
											"end": 3500,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 3484,
											"end": 3485,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3484,
											"end": 3493,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3484,
											"end": 3493,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3484,
											"end": 3493,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3484,
											"end": 3500,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 3484,
											"end": 3500,
											"modifierDepth": 1,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 3484,
											"end": 3500,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3484,
											"end": 3500,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 3484,
											"end": 3500,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3484,
											"end": 3500,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 3484,
											"end": 3500,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3484,
											"end": 3500,
											"modifierDepth": 1,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 3484,
											"end": 3500,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3484,
											"end": 3500,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3484,
											"end": 3500,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3484,
											"end": 3500,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3484,
											"end": 3500,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3484,
											"end": 3500,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3484,
											"end": 3500,
											"modifierDepth": 1,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 3484,
											"end": 3500,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3484,
											"end": 3500,
											"modifierDepth": 1,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 3484,
											"end": 3500,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3515,
											"end": 3535,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258"
										},
										{
											"begin": 3522,
											"end": 3534,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "304"
										},
										{
											"begin": 3522,
											"end": 3532,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "125"
										},
										{
											"begin": 3522,
											"end": 3534,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3522,
											"end": 3534,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "304"
										},
										{
											"begin": 3522,
											"end": 3534,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3515,
											"end": 3535,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3515,
											"end": 3535,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3515,
											"end": 3535,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "305"
										},
										{
											"begin": 3515,
											"end": 3535,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3515,
											"end": 3535,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3515,
											"end": 3535,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "91"
										},
										{
											"begin": 3515,
											"end": 3535,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3515,
											"end": 3535,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "305"
										},
										{
											"begin": 3515,
											"end": 3535,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3515,
											"end": 3535,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3515,
											"end": 3535,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3515,
											"end": 3535,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3515,
											"end": 3535,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3515,
											"end": 3535,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3515,
											"end": 3535,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3515,
											"end": 3535,
											"modifierDepth": 1,
											"name": "LOG1",
											"source": 8
										},
										{
											"begin": 3415,
											"end": 3542,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3366,
											"end": 3542,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2720,
											"end": 2876,
											"name": "tag",
											"source": 9,
											"value": "179"
										},
										{
											"begin": 2720,
											"end": 2876,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2771,
											"end": 2794,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2839,
											"end": 2860,
											"name": "PUSH",
											"source": 9,
											"value": "A16A46D94261C7517CC8FF89F61C0CE93598E3C849801011DEE649A6A557D100"
										},
										{
											"begin": 2829,
											"end": 2860,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2829,
											"end": 2860,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2720,
											"end": 2876,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2720,
											"end": 2876,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6300,
											"end": 6455,
											"name": "tag",
											"source": 9,
											"value": "185"
										},
										{
											"begin": 6300,
											"end": 6455,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6354,
											"end": 6367,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 6379,
											"end": 6402,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6405,
											"end": 6424,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "308"
										},
										{
											"begin": 6405,
											"end": 6422,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "179"
										},
										{
											"begin": 6405,
											"end": 6424,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6405,
											"end": 6424,
											"name": "tag",
											"source": 9,
											"value": "308"
										},
										{
											"begin": 6405,
											"end": 6424,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6379,
											"end": 6424,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6379,
											"end": 6424,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6441,
											"end": 6442,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6441,
											"end": 6448,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 6441,
											"end": 6448,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "309"
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 6434,
											"end": 6448,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "tag",
											"source": 9,
											"value": "309"
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "310"
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 6434,
											"end": 6448,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "tag",
											"source": 9,
											"value": "310"
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "311"
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "312"
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "311"
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "tag",
											"source": 9,
											"value": "312"
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "tag",
											"source": 9,
											"value": "313"
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "313"
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "tag",
											"source": 9,
											"value": "311"
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6434,
											"end": 6448,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6300,
											"end": 6455,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6300,
											"end": 6455,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6682,
											"end": 6843,
											"name": "tag",
											"source": 9,
											"value": "187"
										},
										{
											"begin": 6682,
											"end": 6843,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6739,
											"end": 6752,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 6764,
											"end": 6787,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6790,
											"end": 6809,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "315"
										},
										{
											"begin": 6790,
											"end": 6807,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "179"
										},
										{
											"begin": 6790,
											"end": 6809,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6790,
											"end": 6809,
											"name": "tag",
											"source": 9,
											"value": "315"
										},
										{
											"begin": 6790,
											"end": 6809,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6764,
											"end": 6809,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6764,
											"end": 6809,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6826,
											"end": 6827,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6826,
											"end": 6836,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 6826,
											"end": 6836,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "316"
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 6819,
											"end": 6836,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "tag",
											"source": 9,
											"value": "316"
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "317"
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 6819,
											"end": 6836,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "tag",
											"source": 9,
											"value": "317"
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "318"
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "319"
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "318"
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "tag",
											"source": 9,
											"value": "319"
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "tag",
											"source": 9,
											"value": "320"
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "320"
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "tag",
											"source": 9,
											"value": "318"
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6682,
											"end": 6843,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6682,
											"end": 6843,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1351,
											"name": "tag",
											"source": 0,
											"value": "194"
										},
										{
											"begin": 1192,
											"end": 1351,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1244,
											"end": 1268,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1313,
											"end": 1335,
											"name": "PUSH",
											"source": 0,
											"value": "9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300"
										},
										{
											"begin": 1303,
											"end": 1335,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1303,
											"end": 1335,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1192,
											"end": 1351,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1192,
											"end": 1351,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8737,
											"end": 8907,
											"name": "tag",
											"source": 1,
											"value": "207"
										},
										{
											"begin": 8737,
											"end": 8907,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8795,
											"end": 8825,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8870,
											"end": 8891,
											"name": "PUSH",
											"source": 1,
											"value": "F0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00"
										},
										{
											"begin": 8860,
											"end": 8891,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8860,
											"end": 8891,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 8737,
											"end": 8907,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8737,
											"end": 8907,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2577,
											"end": 2724,
											"name": "tag",
											"source": 2,
											"value": "215"
										},
										{
											"begin": 2577,
											"end": 2724,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "324"
										},
										{
											"begin": 6931,
											"end": 6949,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "325"
										},
										{
											"begin": 6931,
											"end": 6951,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "tag",
											"source": 1,
											"value": "324"
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2679,
											"end": 2717,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "327"
										},
										{
											"begin": 2702,
											"end": 2707,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2709,
											"end": 2716,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2679,
											"end": 2701,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "328"
										},
										{
											"begin": 2679,
											"end": 2717,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2679,
											"end": 2717,
											"modifierDepth": 1,
											"name": "tag",
											"source": 2,
											"value": "327"
										},
										{
											"begin": 2679,
											"end": 2717,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2577,
											"end": 2724,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2577,
											"end": 2724,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2577,
											"end": 2724,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 666,
											"end": 731,
											"name": "tag",
											"source": 3,
											"value": "217"
										},
										{
											"begin": 666,
											"end": 731,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "330"
										},
										{
											"begin": 6931,
											"end": 6949,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "325"
										},
										{
											"begin": 6931,
											"end": 6951,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "tag",
											"source": 1,
											"value": "330"
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 666,
											"end": 731,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1148,
											"end": 1250,
											"name": "tag",
											"source": 4,
											"value": "219"
										},
										{
											"begin": 1148,
											"end": 1250,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "333"
										},
										{
											"begin": 6931,
											"end": 6949,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "325"
										},
										{
											"begin": 6931,
											"end": 6951,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "tag",
											"source": 1,
											"value": "333"
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1216,
											"end": 1243,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "335"
										},
										{
											"begin": 1216,
											"end": 1241,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "336"
										},
										{
											"begin": 1216,
											"end": 1243,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1216,
											"end": 1243,
											"modifierDepth": 1,
											"name": "tag",
											"source": 4,
											"value": "335"
										},
										{
											"begin": 1216,
											"end": 1243,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1148,
											"end": 1250,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1847,
											"end": 1974,
											"name": "tag",
											"source": 0,
											"value": "221"
										},
										{
											"begin": 1847,
											"end": 1974,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "338"
										},
										{
											"begin": 6931,
											"end": 6949,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "325"
										},
										{
											"begin": 6931,
											"end": 6951,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "tag",
											"source": 1,
											"value": "338"
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1929,
											"end": 1967,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "340"
										},
										{
											"begin": 1954,
											"end": 1966,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 1953,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "341"
										},
										{
											"begin": 1929,
											"end": 1967,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 1967,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "340"
										},
										{
											"begin": 1929,
											"end": 1967,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1847,
											"end": 1974,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1847,
											"end": 1974,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1829,
											"end": 1954,
											"name": "tag",
											"source": 5,
											"value": "223"
										},
										{
											"begin": 1829,
											"end": 1954,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "343"
										},
										{
											"begin": 6931,
											"end": 6949,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "325"
										},
										{
											"begin": 6931,
											"end": 6951,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "tag",
											"source": 1,
											"value": "343"
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1913,
											"end": 1947,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "345"
										},
										{
											"begin": 1937,
											"end": 1941,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1913,
											"end": 1947,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1913,
											"end": 1947,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1913,
											"end": 1947,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1913,
											"end": 1947,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1913,
											"end": 1947,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1913,
											"end": 1947,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1913,
											"end": 1947,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1913,
											"end": 1947,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1913,
											"end": 1947,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1913,
											"end": 1947,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1913,
											"end": 1947,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1913,
											"end": 1947,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1913,
											"end": 1947,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1913,
											"end": 1947,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 5,
											"value": "3100000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1913,
											"end": 1947,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1913,
											"end": 1947,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1913,
											"end": 1947,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1913,
											"end": 1936,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "346"
										},
										{
											"begin": 1913,
											"end": 1947,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1913,
											"end": 1947,
											"modifierDepth": 1,
											"name": "tag",
											"source": 5,
											"value": "345"
										},
										{
											"begin": 1913,
											"end": 1947,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1829,
											"end": 1954,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1829,
											"end": 1954,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1537,
											"end": 1989,
											"name": "tag",
											"source": 7,
											"value": "231"
										},
										{
											"begin": 1537,
											"end": 1989,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1597,
											"end": 1604,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1616,
											"end": 1639,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1642,
											"end": 1661,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "348"
										},
										{
											"begin": 1642,
											"end": 1659,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "298"
										},
										{
											"begin": 1642,
											"end": 1661,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1642,
											"end": 1661,
											"name": "tag",
											"source": 7,
											"value": "348"
										},
										{
											"begin": 1642,
											"end": 1661,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1616,
											"end": 1661,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1616,
											"end": 1661,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1954,
											"end": 1955,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1954,
											"end": 1963,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1954,
											"end": 1963,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1954,
											"end": 1970,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1964,
											"end": 1969,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1954,
											"end": 1970,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1954,
											"end": 1970,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1954,
											"end": 1970,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1954,
											"end": 1970,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1954,
											"end": 1970,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1954,
											"end": 1970,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1954,
											"end": 1970,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1954,
											"end": 1970,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1954,
											"end": 1970,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1954,
											"end": 1970,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1954,
											"end": 1970,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1954,
											"end": 1970,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1954,
											"end": 1970,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1954,
											"end": 1970,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1954,
											"end": 1970,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 1954,
											"end": 1970,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1954,
											"end": 1972,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1954,
											"end": 1972,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1954,
											"end": 1972,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1954,
											"end": 1972,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1954,
											"end": 1972,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1954,
											"end": 1972,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1954,
											"end": 1972,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 1954,
											"end": 1972,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1954,
											"end": 1972,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1954,
											"end": 1972,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1954,
											"end": 1972,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1954,
											"end": 1972,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 1947,
											"end": 1972,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1947,
											"end": 1972,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1947,
											"end": 1972,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1537,
											"end": 1989,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1537,
											"end": 1989,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1537,
											"end": 1989,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1537,
											"end": 1989,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4946,
											"end": 5122,
											"name": "tag",
											"source": 9,
											"value": "235"
										},
										{
											"begin": 4946,
											"end": 5122,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5023,
											"end": 5030,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5049,
											"end": 5115,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "350"
										},
										{
											"begin": 5082,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "351"
										},
										{
											"begin": 5082,
											"end": 5100,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "139"
										},
										{
											"begin": 5082,
											"end": 5102,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5082,
											"end": 5102,
											"name": "tag",
											"source": 9,
											"value": "351"
										},
										{
											"begin": 5082,
											"end": 5102,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5104,
											"end": 5114,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5049,
											"end": 5081,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "352"
										},
										{
											"begin": 5049,
											"end": 5115,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5049,
											"end": 5115,
											"name": "tag",
											"source": 9,
											"value": "350"
										},
										{
											"begin": 5049,
											"end": 5115,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5042,
											"end": 5115,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5042,
											"end": 5115,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4946,
											"end": 5122,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4946,
											"end": 5122,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4946,
											"end": 5122,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4946,
											"end": 5122,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6803,
											"end": 7063,
											"name": "tag",
											"source": 16,
											"value": "237"
										},
										{
											"begin": 6803,
											"end": 7063,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 6888,
											"end": 6895,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6908,
											"end": 6925,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 6927,
											"end": 6945,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6947,
											"end": 6963,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 6967,
											"end": 6992,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "354"
										},
										{
											"begin": 6978,
											"end": 6982,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 6984,
											"end": 6985,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 6987,
											"end": 6988,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 6990,
											"end": 6991,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 6967,
											"end": 6977,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "355"
										},
										{
											"begin": 6967,
											"end": 6992,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 6967,
											"end": 6992,
											"name": "tag",
											"source": 16,
											"value": "354"
										},
										{
											"begin": 6967,
											"end": 6992,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 6907,
											"end": 6992,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 6907,
											"end": 6992,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6907,
											"end": 6992,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 6907,
											"end": 6992,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6907,
											"end": 6992,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 6907,
											"end": 6992,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 7002,
											"end": 7030,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "356"
										},
										{
											"begin": 7014,
											"end": 7019,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 7021,
											"end": 7029,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 7002,
											"end": 7013,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "357"
										},
										{
											"begin": 7002,
											"end": 7030,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7002,
											"end": 7030,
											"name": "tag",
											"source": 16,
											"value": "356"
										},
										{
											"begin": 7002,
											"end": 7030,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7047,
											"end": 7056,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 7040,
											"end": 7056,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 7040,
											"end": 7056,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 7040,
											"end": 7056,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 7040,
											"end": 7056,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 7040,
											"end": 7056,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6803,
											"end": 7063,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 6803,
											"end": 7063,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 6803,
											"end": 7063,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6803,
											"end": 7063,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6803,
											"end": 7063,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6803,
											"end": 7063,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6803,
											"end": 7063,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 11224,
											"end": 11711,
											"name": "tag",
											"source": 2,
											"value": "254"
										},
										{
											"begin": 11224,
											"end": 11711,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11332,
											"end": 11354,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11357,
											"end": 11375,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "359"
										},
										{
											"begin": 11357,
											"end": 11373,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 11357,
											"end": 11375,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11357,
											"end": 11375,
											"name": "tag",
											"source": 2,
											"value": "359"
										},
										{
											"begin": 11357,
											"end": 11375,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11332,
											"end": 11375,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11332,
											"end": 11375,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11406,
											"end": 11407,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11389,
											"end": 11408,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11389,
											"end": 11408,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11389,
											"end": 11394,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 11389,
											"end": 11408,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11389,
											"end": 11408,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11389,
											"end": 11408,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 11385,
											"end": 11474,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "360"
										},
										{
											"begin": 11385,
											"end": 11474,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11460,
											"end": 11461,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "PUSH",
											"source": 2,
											"value": "E602DF0500000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "361"
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 11431,
											"end": 11463,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "tag",
											"source": 2,
											"value": "361"
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 11385,
											"end": 11474,
											"name": "tag",
											"source": 2,
											"value": "360"
										},
										{
											"begin": 11385,
											"end": 11474,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11506,
											"end": 11507,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11487,
											"end": 11508,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11487,
											"end": 11508,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11487,
											"end": 11494,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11487,
											"end": 11508,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11487,
											"end": 11508,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11487,
											"end": 11508,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 11483,
											"end": 11573,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "362"
										},
										{
											"begin": 11483,
											"end": 11573,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11559,
											"end": 11560,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "PUSH",
											"source": 2,
											"value": "94280D6200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "363"
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 11531,
											"end": 11562,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "tag",
											"source": 2,
											"value": "363"
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 11483,
											"end": 11573,
											"name": "tag",
											"source": 2,
											"value": "362"
										},
										{
											"begin": 11483,
											"end": 11573,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11614,
											"end": 11619,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11582,
											"end": 11583,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11582,
											"end": 11595,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 11582,
											"end": 11595,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11596,
											"end": 11601,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11603,
											"end": 11610,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 11582,
											"end": 11619,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11582,
											"end": 11619,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11582,
											"end": 11619,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 11582,
											"end": 11619,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11633,
											"end": 11642,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11629,
											"end": 11705,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11629,
											"end": 11705,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "364"
										},
										{
											"begin": 11629,
											"end": 11705,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11679,
											"end": 11686,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11672,
											"end": 11677,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "PUSH",
											"source": 2,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 11688,
											"end": 11693,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "365"
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 11663,
											"end": 11694,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "tag",
											"source": 2,
											"value": "365"
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 11629,
											"end": 11705,
											"name": "tag",
											"source": 2,
											"value": "364"
										},
										{
											"begin": 11629,
											"end": 11705,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11322,
											"end": 11711,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11224,
											"end": 11711,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11224,
											"end": 11711,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11224,
											"end": 11711,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11224,
											"end": 11711,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11224,
											"end": 11711,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1414,
											"end": 1601,
											"name": "tag",
											"source": 20,
											"value": "268"
										},
										{
											"begin": 1414,
											"end": 1601,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1594,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "367"
										},
										{
											"begin": 1578,
											"end": 1582,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 1584,
											"end": 1586,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 1588,
											"end": 1593,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1577,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "368"
										},
										{
											"begin": 1564,
											"end": 1594,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1594,
											"name": "tag",
											"source": 20,
											"value": "367"
										},
										{
											"begin": 1564,
											"end": 1594,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1414,
											"end": 1601,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1414,
											"end": 1601,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1414,
											"end": 1601,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1414,
											"end": 1601,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 4130,
											"end": 4321,
											"name": "tag",
											"source": 9,
											"value": "271"
										},
										{
											"begin": 4130,
											"end": 4321,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4185,
											"end": 4192,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2073,
											"end": 2168,
											"name": "PUSH",
											"source": 9,
											"value": "8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F"
										},
										{
											"begin": 4243,
											"end": 4260,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "370"
										},
										{
											"begin": 4243,
											"end": 4258,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "371"
										},
										{
											"begin": 4243,
											"end": 4260,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4243,
											"end": 4260,
											"name": "tag",
											"source": 9,
											"value": "370"
										},
										{
											"begin": 4243,
											"end": 4260,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4262,
											"end": 4282,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "372"
										},
										{
											"begin": 4262,
											"end": 4280,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "373"
										},
										{
											"begin": 4262,
											"end": 4282,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4262,
											"end": 4282,
											"name": "tag",
											"source": 9,
											"value": "372"
										},
										{
											"begin": 4262,
											"end": 4282,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4284,
											"end": 4297,
											"name": "CHAINID",
											"source": 9
										},
										{
											"begin": 4307,
											"end": 4311,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 4221,
											"end": 4313,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4221,
											"end": 4313,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 4221,
											"end": 4313,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4221,
											"end": 4313,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4221,
											"end": 4313,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "374"
										},
										{
											"begin": 4221,
											"end": 4313,
											"name": "SWAP6",
											"source": 9
										},
										{
											"begin": 4221,
											"end": 4313,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 4221,
											"end": 4313,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 4221,
											"end": 4313,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 4221,
											"end": 4313,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4221,
											"end": 4313,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4221,
											"end": 4313,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "375"
										},
										{
											"begin": 4221,
											"end": 4313,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4221,
											"end": 4313,
											"name": "tag",
											"source": 9,
											"value": "374"
										},
										{
											"begin": 4221,
											"end": 4313,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4221,
											"end": 4313,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4221,
											"end": 4313,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 4221,
											"end": 4313,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4221,
											"end": 4313,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4221,
											"end": 4313,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4221,
											"end": 4313,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 4221,
											"end": 4313,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 4221,
											"end": 4313,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4221,
											"end": 4313,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4221,
											"end": 4313,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4221,
											"end": 4313,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4221,
											"end": 4313,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4211,
											"end": 4314,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4211,
											"end": 4314,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 4211,
											"end": 4314,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4211,
											"end": 4314,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4211,
											"end": 4314,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4211,
											"end": 4314,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 4204,
											"end": 4314,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4204,
											"end": 4314,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4130,
											"end": 4321,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4130,
											"end": 4321,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3105,
											"end": 3231,
											"name": "tag",
											"source": 8,
											"value": "280"
										},
										{
											"begin": 3105,
											"end": 3231,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3168,
											"end": 3176,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "377"
										},
										{
											"begin": 3168,
											"end": 3174,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "66"
										},
										{
											"begin": 3168,
											"end": 3176,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3168,
											"end": 3176,
											"name": "tag",
											"source": 8,
											"value": "377"
										},
										{
											"begin": 3168,
											"end": 3176,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3163,
											"end": 3225,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "378"
										},
										{
											"begin": 3163,
											"end": 3225,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3199,
											"end": 3214,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3199,
											"end": 3214,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3199,
											"end": 3214,
											"name": "PUSH",
											"source": 8,
											"value": "8DFC202B00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3199,
											"end": 3214,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3199,
											"end": 3214,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3199,
											"end": 3214,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 3199,
											"end": 3214,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3199,
											"end": 3214,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3199,
											"end": 3214,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3199,
											"end": 3214,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3199,
											"end": 3214,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3199,
											"end": 3214,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3199,
											"end": 3214,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3199,
											"end": 3214,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 3163,
											"end": 3225,
											"name": "tag",
											"source": 8,
											"value": "378"
										},
										{
											"begin": 3163,
											"end": 3225,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3105,
											"end": 3231,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 886,
											"end": 1042,
											"name": "tag",
											"source": 7,
											"value": "298"
										},
										{
											"begin": 886,
											"end": 1042,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 937,
											"end": 960,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1005,
											"end": 1026,
											"name": "PUSH",
											"source": 7,
											"value": "5AB42CED628888259C08AC98DB1EB0CF702FC1501344311D8B100CD1BFE4BB00"
										},
										{
											"begin": 995,
											"end": 1026,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 995,
											"end": 1026,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 886,
											"end": 1042,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 886,
											"end": 1042,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2905,
											"end": 3033,
											"name": "tag",
											"source": 8,
											"value": "301"
										},
										{
											"begin": 2905,
											"end": 3033,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2970,
											"end": 2978,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "381"
										},
										{
											"begin": 2970,
											"end": 2976,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "66"
										},
										{
											"begin": 2970,
											"end": 2978,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2970,
											"end": 2978,
											"name": "tag",
											"source": 8,
											"value": "381"
										},
										{
											"begin": 2970,
											"end": 2978,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2966,
											"end": 3027,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2966,
											"end": 3027,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "382"
										},
										{
											"begin": 2966,
											"end": 3027,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3001,
											"end": 3016,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3001,
											"end": 3016,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3001,
											"end": 3016,
											"name": "PUSH",
											"source": 8,
											"value": "D93C066500000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3001,
											"end": 3016,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3001,
											"end": 3016,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3001,
											"end": 3016,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 3001,
											"end": 3016,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3001,
											"end": 3016,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3001,
											"end": 3016,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3001,
											"end": 3016,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3001,
											"end": 3016,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3001,
											"end": 3016,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3001,
											"end": 3016,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3001,
											"end": 3016,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2966,
											"end": 3027,
											"name": "tag",
											"source": 8,
											"value": "382"
										},
										{
											"begin": 2966,
											"end": 3027,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2905,
											"end": 3033,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7084,
											"end": 7225,
											"name": "tag",
											"source": 1,
											"value": "325"
										},
										{
											"begin": 7084,
											"end": 7225,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7151,
											"end": 7168,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "384"
										},
										{
											"begin": 7151,
											"end": 7166,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "385"
										},
										{
											"begin": 7151,
											"end": 7168,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 7151,
											"end": 7168,
											"name": "tag",
											"source": 1,
											"value": "384"
										},
										{
											"begin": 7151,
											"end": 7168,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7146,
											"end": 7219,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "386"
										},
										{
											"begin": 7146,
											"end": 7219,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "PUSH",
											"source": 1,
											"value": "D7E6BCF800000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 7146,
											"end": 7219,
											"name": "tag",
											"source": 1,
											"value": "386"
										},
										{
											"begin": 7146,
											"end": 7219,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7084,
											"end": 7225,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2730,
											"end": 2946,
											"name": "tag",
											"source": 2,
											"value": "328"
										},
										{
											"begin": 2730,
											"end": 2946,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "388"
										},
										{
											"begin": 6931,
											"end": 6949,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "325"
										},
										{
											"begin": 6931,
											"end": 6951,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "tag",
											"source": 1,
											"value": "388"
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2842,
											"end": 2864,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2867,
											"end": 2885,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "390"
										},
										{
											"begin": 2867,
											"end": 2883,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 2867,
											"end": 2885,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2867,
											"end": 2885,
											"modifierDepth": 1,
											"name": "tag",
											"source": 2,
											"value": "390"
										},
										{
											"begin": 2867,
											"end": 2885,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2842,
											"end": 2885,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2842,
											"end": 2885,
											"modifierDepth": 1,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2905,
											"end": 2910,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2895,
											"end": 2896,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2895,
											"end": 2902,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 2895,
											"end": 2902,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2895,
											"end": 2910,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2895,
											"end": 2910,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2895,
											"end": 2910,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "391"
										},
										{
											"begin": 2895,
											"end": 2910,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2895,
											"end": 2910,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2895,
											"end": 2910,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "392"
										},
										{
											"begin": 2895,
											"end": 2910,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2895,
											"end": 2910,
											"modifierDepth": 1,
											"name": "tag",
											"source": 2,
											"value": "391"
										},
										{
											"begin": 2895,
											"end": 2910,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2895,
											"end": 2910,
											"modifierDepth": 1,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2932,
											"end": 2939,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2920,
											"end": 2921,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2920,
											"end": 2929,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2920,
											"end": 2929,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2920,
											"end": 2939,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2920,
											"end": 2939,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2920,
											"end": 2939,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "393"
										},
										{
											"begin": 2920,
											"end": 2939,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2920,
											"end": 2939,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2920,
											"end": 2939,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "392"
										},
										{
											"begin": 2920,
											"end": 2939,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2920,
											"end": 2939,
											"modifierDepth": 1,
											"name": "tag",
											"source": 2,
											"value": "393"
										},
										{
											"begin": 2920,
											"end": 2939,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2920,
											"end": 2939,
											"modifierDepth": 1,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2832,
											"end": 2946,
											"modifierDepth": 1,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2730,
											"end": 2946,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2730,
											"end": 2946,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2730,
											"end": 2946,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1939,
											"end": 2095,
											"name": "tag",
											"source": 8,
											"value": "336"
										},
										{
											"begin": 1939,
											"end": 2095,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "395"
										},
										{
											"begin": 6931,
											"end": 6949,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "325"
										},
										{
											"begin": 6931,
											"end": 6951,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "tag",
											"source": 1,
											"value": "395"
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2012,
											"end": 2037,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2040,
											"end": 2061,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "397"
										},
										{
											"begin": 2040,
											"end": 2059,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "157"
										},
										{
											"begin": 2040,
											"end": 2061,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2040,
											"end": 2061,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "397"
										},
										{
											"begin": 2040,
											"end": 2061,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2012,
											"end": 2061,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2012,
											"end": 2061,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2083,
											"end": 2088,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2071,
											"end": 2072,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2071,
											"end": 2080,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2071,
											"end": 2080,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2071,
											"end": 2080,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2071,
											"end": 2088,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 2071,
											"end": 2088,
											"modifierDepth": 1,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 2071,
											"end": 2088,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2071,
											"end": 2088,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 2071,
											"end": 2088,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2071,
											"end": 2088,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 2071,
											"end": 2088,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 2071,
											"end": 2088,
											"modifierDepth": 1,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 2071,
											"end": 2088,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2071,
											"end": 2088,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2071,
											"end": 2088,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2071,
											"end": 2088,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2071,
											"end": 2088,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2071,
											"end": 2088,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 2071,
											"end": 2088,
											"modifierDepth": 1,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 2071,
											"end": 2088,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2071,
											"end": 2088,
											"modifierDepth": 1,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 2071,
											"end": 2088,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2002,
											"end": 2095,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1939,
											"end": 2095,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1980,
											"end": 2215,
											"name": "tag",
											"source": 0,
											"value": "341"
										},
										{
											"begin": 1980,
											"end": 2215,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "399"
										},
										{
											"begin": 6931,
											"end": 6949,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "325"
										},
										{
											"begin": 6931,
											"end": 6951,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "tag",
											"source": 1,
											"value": "399"
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2100,
											"end": 2101,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2076,
											"end": 2102,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2076,
											"end": 2102,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2076,
											"end": 2088,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2076,
											"end": 2102,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2076,
											"end": 2102,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2076,
											"end": 2102,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2072,
											"end": 2167,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "401"
										},
										{
											"begin": 2072,
											"end": 2167,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2153,
											"end": 2154,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "1E4FBDF700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "402"
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 2125,
											"end": 2156,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "402"
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2072,
											"end": 2167,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "401"
										},
										{
											"begin": 2072,
											"end": 2167,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2176,
											"end": 2208,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "403"
										},
										{
											"begin": 2195,
											"end": 2207,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2176,
											"end": 2194,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "164"
										},
										{
											"begin": 2176,
											"end": 2208,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2176,
											"end": 2208,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "403"
										},
										{
											"begin": 2176,
											"end": 2208,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1980,
											"end": 2215,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1980,
											"end": 2215,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3599,
											"end": 3929,
											"name": "tag",
											"source": 9,
											"value": "346"
										},
										{
											"begin": 3599,
											"end": 3929,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "405"
										},
										{
											"begin": 6931,
											"end": 6949,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "325"
										},
										{
											"begin": 6931,
											"end": 6951,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "tag",
											"source": 1,
											"value": "405"
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3711,
											"end": 3734,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3737,
											"end": 3756,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "407"
										},
										{
											"begin": 3737,
											"end": 3754,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "179"
										},
										{
											"begin": 3737,
											"end": 3756,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3737,
											"end": 3756,
											"modifierDepth": 1,
											"name": "tag",
											"source": 9,
											"value": "407"
										},
										{
											"begin": 3737,
											"end": 3756,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3711,
											"end": 3756,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3711,
											"end": 3756,
											"modifierDepth": 1,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3776,
											"end": 3780,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3766,
											"end": 3767,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3766,
											"end": 3773,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 3766,
											"end": 3773,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3766,
											"end": 3780,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3766,
											"end": 3780,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3766,
											"end": 3780,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "408"
										},
										{
											"begin": 3766,
											"end": 3780,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3766,
											"end": 3780,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3766,
											"end": 3780,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "392"
										},
										{
											"begin": 3766,
											"end": 3780,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3766,
											"end": 3780,
											"modifierDepth": 1,
											"name": "tag",
											"source": 9,
											"value": "408"
										},
										{
											"begin": 3766,
											"end": 3780,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3766,
											"end": 3780,
											"modifierDepth": 1,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3803,
											"end": 3810,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3790,
											"end": 3791,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3790,
											"end": 3800,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 3790,
											"end": 3800,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3790,
											"end": 3810,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3790,
											"end": 3810,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3790,
											"end": 3810,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "409"
										},
										{
											"begin": 3790,
											"end": 3810,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3790,
											"end": 3810,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3790,
											"end": 3810,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "392"
										},
										{
											"begin": 3790,
											"end": 3810,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3790,
											"end": 3810,
											"modifierDepth": 1,
											"name": "tag",
											"source": 9,
											"value": "409"
										},
										{
											"begin": 3790,
											"end": 3810,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3790,
											"end": 3810,
											"modifierDepth": 1,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3891,
											"end": 3892,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3875,
											"end": 3892,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3875,
											"end": 3892,
											"modifierDepth": 1,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 3875,
											"end": 3876,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3875,
											"end": 3888,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3875,
											"end": 3888,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3875,
											"end": 3892,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3875,
											"end": 3892,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3875,
											"end": 3892,
											"modifierDepth": 1,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 3875,
											"end": 3892,
											"modifierDepth": 1,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3921,
											"end": 3922,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3902,
											"end": 3922,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3902,
											"end": 3922,
											"modifierDepth": 1,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 3902,
											"end": 3903,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3902,
											"end": 3918,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 3902,
											"end": 3918,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3902,
											"end": 3922,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3902,
											"end": 3922,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3902,
											"end": 3922,
											"modifierDepth": 1,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 3902,
											"end": 3922,
											"modifierDepth": 1,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3701,
											"end": 3929,
											"modifierDepth": 1,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3599,
											"end": 3929,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3599,
											"end": 3929,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3599,
											"end": 3929,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3353,
											"end": 3754,
											"name": "tag",
											"source": 17,
											"value": "352"
										},
										{
											"begin": 3353,
											"end": 3754,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3446,
											"end": 3460,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 3555,
											"end": 3559,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 3549,
											"end": 3560,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 3585,
											"end": 3595,
											"name": "PUSH",
											"source": 17,
											"value": "1901000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3580,
											"end": 3583,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 3573,
											"end": 3596,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 3632,
											"end": 3647,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 3625,
											"end": 3629,
											"name": "PUSH",
											"source": 17,
											"value": "2"
										},
										{
											"begin": 3620,
											"end": 3623,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 3616,
											"end": 3630,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 3609,
											"end": 3648,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 3684,
											"end": 3694,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 3677,
											"end": 3681,
											"name": "PUSH",
											"source": 17,
											"value": "22"
										},
										{
											"begin": 3672,
											"end": 3675,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 3668,
											"end": 3682,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 3661,
											"end": 3695,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 3733,
											"end": 3737,
											"name": "PUSH",
											"source": 17,
											"value": "42"
										},
										{
											"begin": 3728,
											"end": 3731,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 3718,
											"end": 3738,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": 3708,
											"end": 3738,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 3708,
											"end": 3738,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3524,
											"end": 3748,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3353,
											"end": 3754,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 3353,
											"end": 3754,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 3353,
											"end": 3754,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3353,
											"end": 3754,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3353,
											"end": 3754,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "tag",
											"source": 16,
											"value": "355"
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5266,
											"end": 5273,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 5275,
											"end": 5287,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 5289,
											"end": 5296,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6199,
											"end": 6265,
											"name": "PUSH",
											"source": 16,
											"value": "7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
										},
										{
											"begin": 6194,
											"end": 6195,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 6186,
											"end": 6196,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6186,
											"end": 6196,
											"name": "SHR",
											"source": 16
										},
										{
											"begin": 6186,
											"end": 6265,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 6182,
											"end": 6346,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 6182,
											"end": 6346,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "412"
										},
										{
											"begin": 6182,
											"end": 6346,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 6297,
											"end": 6298,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6301,
											"end": 6331,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 6333,
											"end": 6334,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 6281,
											"end": 6335,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 6281,
											"end": 6335,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6281,
											"end": 6335,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 6281,
											"end": 6335,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6281,
											"end": 6335,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 6281,
											"end": 6335,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6281,
											"end": 6335,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "411"
										},
										{
											"begin": 6281,
											"end": 6335,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 6182,
											"end": 6346,
											"name": "tag",
											"source": 16,
											"value": "412"
										},
										{
											"begin": 6182,
											"end": 6346,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 6440,
											"end": 6454,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 6467,
											"end": 6471,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 6473,
											"end": 6474,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 6476,
											"end": 6477,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 6479,
											"end": 6480,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "413"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "414"
										},
										{
											"begin": 6457,
											"end": 6481,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "tag",
											"source": 16,
											"value": "413"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "GAS",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "STATICCALL",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "416"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "RETURNDATACOPY",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "tag",
											"source": 16,
											"value": "416"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 6440,
											"end": 6481,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 6440,
											"end": 6481,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6513,
											"end": 6514,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6495,
											"end": 6515,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6495,
											"end": 6515,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 6495,
											"end": 6501,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 6495,
											"end": 6515,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6495,
											"end": 6515,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 6495,
											"end": 6515,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 6491,
											"end": 6604,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "417"
										},
										{
											"begin": 6491,
											"end": 6604,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 6547,
											"end": 6548,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6551,
											"end": 6580,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 6590,
											"end": 6591,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6582,
											"end": 6592,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 6582,
											"end": 6592,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 6531,
											"end": 6593,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 6531,
											"end": 6593,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6531,
											"end": 6593,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 6531,
											"end": 6593,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6531,
											"end": 6593,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 6531,
											"end": 6593,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6531,
											"end": 6593,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6531,
											"end": 6593,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "411"
										},
										{
											"begin": 6531,
											"end": 6593,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 6491,
											"end": 6604,
											"name": "tag",
											"source": 16,
											"value": "417"
										},
										{
											"begin": 6491,
											"end": 6604,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 6622,
											"end": 6628,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 6630,
											"end": 6650,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6660,
											"end": 6661,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 6652,
											"end": 6662,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6652,
											"end": 6662,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 6614,
											"end": 6663,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 6614,
											"end": 6663,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6614,
											"end": 6663,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 6614,
											"end": 6663,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6614,
											"end": 6663,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 6614,
											"end": 6663,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6614,
											"end": 6663,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "tag",
											"source": 16,
											"value": "411"
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5140,
											"end": 6670,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7196,
											"end": 7728,
											"name": "tag",
											"source": 16,
											"value": "357"
										},
										{
											"begin": 7196,
											"end": 7728,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7291,
											"end": 7311,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "419"
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "420"
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "421"
										},
										{
											"begin": 7282,
											"end": 7311,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "tag",
											"source": 16,
											"value": "420"
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "tag",
											"source": 16,
											"value": "419"
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7282,
											"end": 7287,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "422"
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "423"
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "421"
										},
										{
											"begin": 7282,
											"end": 7311,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "tag",
											"source": 16,
											"value": "423"
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "tag",
											"source": 16,
											"value": "422"
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 7278,
											"end": 7722,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 7327,
											"end": 7334,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "418"
										},
										{
											"begin": 7278,
											"end": 7722,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 7387,
											"end": 7416,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "426"
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "427"
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "421"
										},
										{
											"begin": 7378,
											"end": 7416,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "tag",
											"source": 16,
											"value": "427"
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "tag",
											"source": 16,
											"value": "426"
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7378,
											"end": 7383,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "428"
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "429"
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "421"
										},
										{
											"begin": 7378,
											"end": 7416,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "tag",
											"source": 16,
											"value": "429"
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "tag",
											"source": 16,
											"value": "428"
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 7374,
											"end": 7722,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "430"
										},
										{
											"begin": 7374,
											"end": 7722,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "PUSH",
											"source": 16,
											"value": "F645EEDF00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 7374,
											"end": 7722,
											"name": "tag",
											"source": 16,
											"value": "430"
										},
										{
											"begin": 7374,
											"end": 7722,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7492,
											"end": 7527,
											"name": "PUSH",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "432"
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "433"
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "421"
										},
										{
											"begin": 7483,
											"end": 7527,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "tag",
											"source": 16,
											"value": "433"
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "tag",
											"source": 16,
											"value": "432"
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7483,
											"end": 7488,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "434"
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "435"
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "421"
										},
										{
											"begin": 7483,
											"end": 7527,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "tag",
											"source": 16,
											"value": "435"
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "tag",
											"source": 16,
											"value": "434"
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 7479,
											"end": 7722,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "436"
										},
										{
											"begin": 7479,
											"end": 7722,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 7586,
											"end": 7594,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 7578,
											"end": 7595,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 7578,
											"end": 7595,
											"name": "SHR",
											"source": 16
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "PUSH",
											"source": 16,
											"value": "FCE698F700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "437"
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "42"
										},
										{
											"begin": 7550,
											"end": 7596,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "tag",
											"source": 16,
											"value": "437"
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 7479,
											"end": 7722,
											"name": "tag",
											"source": 16,
											"value": "436"
										},
										{
											"begin": 7479,
											"end": 7722,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7626,
											"end": 7656,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "439"
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "440"
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "421"
										},
										{
											"begin": 7617,
											"end": 7656,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "tag",
											"source": 16,
											"value": "440"
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "tag",
											"source": 16,
											"value": "439"
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7617,
											"end": 7622,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "441"
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "442"
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "421"
										},
										{
											"begin": 7617,
											"end": 7656,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "tag",
											"source": 16,
											"value": "442"
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "tag",
											"source": 16,
											"value": "441"
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 7613,
											"end": 7722,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "443"
										},
										{
											"begin": 7613,
											"end": 7722,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 7702,
											"end": 7710,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "PUSH",
											"source": 16,
											"value": "D78BCE0C00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "444"
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "55"
										},
										{
											"begin": 7679,
											"end": 7711,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "tag",
											"source": 16,
											"value": "444"
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 7613,
											"end": 7722,
											"name": "tag",
											"source": 16,
											"value": "443"
										},
										{
											"begin": 7613,
											"end": 7722,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7196,
											"end": 7728,
											"name": "tag",
											"source": 16,
											"value": "418"
										},
										{
											"begin": 7196,
											"end": 7728,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7196,
											"end": 7728,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 7196,
											"end": 7728,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 7196,
											"end": 7728,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 1462,
											"end": 1607,
											"name": "tag",
											"source": 4,
											"value": "368"
										},
										{
											"begin": 1462,
											"end": 1607,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2316,
											"end": 2335,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "446"
										},
										{
											"begin": 2316,
											"end": 2333,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "301"
										},
										{
											"begin": 2316,
											"end": 2335,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2316,
											"end": 2335,
											"name": "tag",
											"source": 8,
											"value": "446"
										},
										{
											"begin": 2316,
											"end": 2335,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1570,
											"end": 1600,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "448"
										},
										{
											"begin": 1584,
											"end": 1588,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1590,
											"end": 1592,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1594,
											"end": 1599,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1570,
											"end": 1583,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "449"
										},
										{
											"begin": 1570,
											"end": 1600,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1570,
											"end": 1600,
											"modifierDepth": 1,
											"name": "tag",
											"source": 4,
											"value": "448"
										},
										{
											"begin": 1570,
											"end": 1600,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1462,
											"end": 1607,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1462,
											"end": 1607,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1462,
											"end": 1607,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1462,
											"end": 1607,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 7058,
											"end": 7745,
											"name": "tag",
											"source": 9,
											"value": "371"
										},
										{
											"begin": 7058,
											"end": 7745,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7108,
											"end": 7115,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7127,
											"end": 7150,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7153,
											"end": 7172,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "451"
										},
										{
											"begin": 7153,
											"end": 7170,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "179"
										},
										{
											"begin": 7153,
											"end": 7172,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7153,
											"end": 7172,
											"name": "tag",
											"source": 9,
											"value": "451"
										},
										{
											"begin": 7153,
											"end": 7172,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7127,
											"end": 7172,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7127,
											"end": 7172,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7182,
											"end": 7200,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7203,
											"end": 7216,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "452"
										},
										{
											"begin": 7203,
											"end": 7214,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "185"
										},
										{
											"begin": 7203,
											"end": 7216,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7203,
											"end": 7216,
											"name": "tag",
											"source": 9,
											"value": "452"
										},
										{
											"begin": 7203,
											"end": 7216,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7182,
											"end": 7216,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7182,
											"end": 7216,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7251,
											"end": 7252,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7236,
											"end": 7240,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7230,
											"end": 7248,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 7230,
											"end": 7252,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 7226,
											"end": 7739,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 7226,
											"end": 7739,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "453"
										},
										{
											"begin": 7226,
											"end": 7739,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 7291,
											"end": 7295,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7275,
											"end": 7297,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7275,
											"end": 7297,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 7275,
											"end": 7297,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7275,
											"end": 7297,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7275,
											"end": 7297,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7275,
											"end": 7297,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 7268,
											"end": 7297,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 7268,
											"end": 7297,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7268,
											"end": 7297,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7268,
											"end": 7297,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7268,
											"end": 7297,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "450"
										},
										{
											"begin": 7268,
											"end": 7297,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7226,
											"end": 7739,
											"name": "tag",
											"source": 9,
											"value": "453"
										},
										{
											"begin": 7226,
											"end": 7739,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7551,
											"end": 7569,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7572,
											"end": 7573,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7572,
											"end": 7585,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7572,
											"end": 7585,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7572,
											"end": 7585,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 7551,
											"end": 7585,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7551,
											"end": 7585,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7617,
											"end": 7618,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7603,
											"end": 7618,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7603,
											"end": 7618,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 7603,
											"end": 7613,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7603,
											"end": 7618,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 7599,
											"end": 7729,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "455"
										},
										{
											"begin": 7599,
											"end": 7729,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 7645,
											"end": 7655,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7638,
											"end": 7655,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 7638,
											"end": 7655,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7638,
											"end": 7655,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7638,
											"end": 7655,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7638,
											"end": 7655,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7638,
											"end": 7655,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "450"
										},
										{
											"begin": 7638,
											"end": 7655,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7599,
											"end": 7729,
											"name": "tag",
											"source": 9,
											"value": "455"
										},
										{
											"begin": 7599,
											"end": 7729,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7701,
											"end": 7714,
											"name": "PUSH",
											"source": 9,
											"value": "C5D2460186F7233C927E7DB2DCC703C0E500B653CA82273B7BFAD8045D85A470"
										},
										{
											"begin": 7694,
											"end": 7714,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 7694,
											"end": 7714,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7694,
											"end": 7714,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7694,
											"end": 7714,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7694,
											"end": 7714,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7058,
											"end": 7745,
											"name": "tag",
											"source": 9,
											"value": "450"
										},
										{
											"begin": 7058,
											"end": 7745,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7058,
											"end": 7745,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7058,
											"end": 7745,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7966,
											"end": 8689,
											"name": "tag",
											"source": 9,
											"value": "373"
										},
										{
											"begin": 7966,
											"end": 8689,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8019,
											"end": 8026,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8038,
											"end": 8061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8064,
											"end": 8083,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "458"
										},
										{
											"begin": 8064,
											"end": 8081,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "179"
										},
										{
											"begin": 8064,
											"end": 8083,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 8064,
											"end": 8083,
											"name": "tag",
											"source": 9,
											"value": "458"
										},
										{
											"begin": 8064,
											"end": 8083,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8038,
											"end": 8083,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8038,
											"end": 8083,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8093,
											"end": 8114,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8117,
											"end": 8133,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "459"
										},
										{
											"begin": 8117,
											"end": 8131,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "187"
										},
										{
											"begin": 8117,
											"end": 8133,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 8117,
											"end": 8133,
											"name": "tag",
											"source": 9,
											"value": "459"
										},
										{
											"begin": 8117,
											"end": 8133,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8093,
											"end": 8133,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8093,
											"end": 8133,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8171,
											"end": 8172,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8153,
											"end": 8160,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8147,
											"end": 8168,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 8147,
											"end": 8172,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 8143,
											"end": 8683,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 8143,
											"end": 8683,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "460"
										},
										{
											"begin": 8143,
											"end": 8683,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 8211,
											"end": 8218,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8195,
											"end": 8220,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8195,
											"end": 8220,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 8195,
											"end": 8220,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8195,
											"end": 8220,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 8195,
											"end": 8220,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8195,
											"end": 8220,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 8188,
											"end": 8220,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 8188,
											"end": 8220,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8188,
											"end": 8220,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8188,
											"end": 8220,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8188,
											"end": 8220,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "457"
										},
										{
											"begin": 8188,
											"end": 8220,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 8143,
											"end": 8683,
											"name": "tag",
											"source": 9,
											"value": "460"
										},
										{
											"begin": 8143,
											"end": 8683,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8483,
											"end": 8504,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8507,
											"end": 8508,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8507,
											"end": 8523,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 8507,
											"end": 8523,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8507,
											"end": 8523,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 8483,
											"end": 8523,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8483,
											"end": 8523,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8558,
											"end": 8559,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8541,
											"end": 8559,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8541,
											"end": 8559,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 8541,
											"end": 8554,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8541,
											"end": 8559,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 8537,
											"end": 8673,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "462"
										},
										{
											"begin": 8537,
											"end": 8673,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 8586,
											"end": 8599,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8579,
											"end": 8599,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 8579,
											"end": 8599,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8579,
											"end": 8599,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8579,
											"end": 8599,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8579,
											"end": 8599,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8579,
											"end": 8599,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "457"
										},
										{
											"begin": 8579,
											"end": 8599,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 8537,
											"end": 8673,
											"name": "tag",
											"source": 9,
											"value": "462"
										},
										{
											"begin": 8537,
											"end": 8673,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8645,
											"end": 8658,
											"name": "PUSH",
											"source": 9,
											"value": "C5D2460186F7233C927E7DB2DCC703C0E500B653CA82273B7BFAD8045D85A470"
										},
										{
											"begin": 8638,
											"end": 8658,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 8638,
											"end": 8658,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8638,
											"end": 8658,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8638,
											"end": 8658,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8638,
											"end": 8658,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7966,
											"end": 8689,
											"name": "tag",
											"source": 9,
											"value": "457"
										},
										{
											"begin": 7966,
											"end": 8689,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7966,
											"end": 8689,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7966,
											"end": 8689,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 8487,
											"end": 8607,
											"name": "tag",
											"source": 1,
											"value": "385"
										},
										{
											"begin": 8487,
											"end": 8607,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8537,
											"end": 8541,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8560,
											"end": 8586,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "465"
										},
										{
											"begin": 8560,
											"end": 8584,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "207"
										},
										{
											"begin": 8560,
											"end": 8586,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 8560,
											"end": 8586,
											"name": "tag",
											"source": 1,
											"value": "465"
										},
										{
											"begin": 8560,
											"end": 8586,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "PUSH",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 8553,
											"end": 8600,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8553,
											"end": 8600,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 8487,
											"end": 8607,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8487,
											"end": 8607,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 7483,
											"end": 8653,
											"name": "tag",
											"source": 2,
											"value": "449"
										},
										{
											"begin": 7483,
											"end": 8653,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7568,
											"end": 7590,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7593,
											"end": 7611,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "467"
										},
										{
											"begin": 7593,
											"end": 7609,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 7593,
											"end": 7611,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7593,
											"end": 7611,
											"name": "tag",
											"source": 2,
											"value": "467"
										},
										{
											"begin": 7593,
											"end": 7611,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7568,
											"end": 7611,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7568,
											"end": 7611,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7641,
											"end": 7642,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7625,
											"end": 7643,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7625,
											"end": 7643,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7625,
											"end": 7629,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 7625,
											"end": 7643,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7625,
											"end": 7643,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7625,
											"end": 7643,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7621,
											"end": 8167,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "468"
										},
										{
											"begin": 7621,
											"end": 8167,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7779,
											"end": 7784,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7761,
											"end": 7762,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7761,
											"end": 7775,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 7761,
											"end": 7775,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7761,
											"end": 7775,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "469"
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "470"
										},
										{
											"begin": 7761,
											"end": 7784,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "tag",
											"source": 2,
											"value": "469"
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7621,
											"end": 8167,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "471"
										},
										{
											"begin": 7621,
											"end": 8167,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7621,
											"end": 8167,
											"name": "tag",
											"source": 2,
											"value": "468"
										},
										{
											"begin": 7621,
											"end": 8167,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7815,
											"end": 7834,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7837,
											"end": 7838,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7837,
											"end": 7848,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7837,
											"end": 7848,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7849,
											"end": 7853,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7815,
											"end": 7854,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7815,
											"end": 7854,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7886,
											"end": 7891,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7872,
											"end": 7883,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7872,
											"end": 7891,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 7868,
											"end": 7983,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7868,
											"end": 7983,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "472"
										},
										{
											"begin": 7868,
											"end": 7983,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7943,
											"end": 7947,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 7949,
											"end": 7960,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7962,
											"end": 7967,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "PUSH",
											"source": 2,
											"value": "E450D38C00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "473"
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "260"
										},
										{
											"begin": 7918,
											"end": 7968,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "tag",
											"source": 2,
											"value": "473"
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 7868,
											"end": 7983,
											"name": "tag",
											"source": 2,
											"value": "472"
										},
										{
											"begin": 7868,
											"end": 7983,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8137,
											"end": 8142,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8123,
											"end": 8134,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8123,
											"end": 8142,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 8103,
											"end": 8104,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8103,
											"end": 8114,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8103,
											"end": 8114,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8115,
											"end": 8119,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 8103,
											"end": 8142,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8103,
											"end": 8142,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8103,
											"end": 8142,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 8103,
											"end": 8142,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7801,
											"end": 8167,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7621,
											"end": 8167,
											"name": "tag",
											"source": 2,
											"value": "471"
										},
										{
											"begin": 7621,
											"end": 8167,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8195,
											"end": 8196,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8181,
											"end": 8197,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8181,
											"end": 8197,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8181,
											"end": 8183,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8181,
											"end": 8197,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8181,
											"end": 8197,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8181,
											"end": 8197,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 8177,
											"end": 8606,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "474"
										},
										{
											"begin": 8177,
											"end": 8606,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8362,
											"end": 8367,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8344,
											"end": 8345,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8344,
											"end": 8358,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 8344,
											"end": 8358,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8344,
											"end": 8358,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8344,
											"end": 8367,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8344,
											"end": 8367,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8344,
											"end": 8367,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8344,
											"end": 8367,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 8344,
											"end": 8367,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 8344,
											"end": 8367,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8344,
											"end": 8367,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8344,
											"end": 8367,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8344,
											"end": 8367,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8344,
											"end": 8367,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 8344,
											"end": 8367,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8177,
											"end": 8606,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "475"
										},
										{
											"begin": 8177,
											"end": 8606,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 8177,
											"end": 8606,
											"name": "tag",
											"source": 2,
											"value": "474"
										},
										{
											"begin": 8177,
											"end": 8606,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8576,
											"end": 8581,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8557,
											"end": 8558,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8557,
											"end": 8568,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8557,
											"end": 8568,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8569,
											"end": 8571,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8557,
											"end": 8581,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8557,
											"end": 8581,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8557,
											"end": 8581,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8557,
											"end": 8581,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8557,
											"end": 8581,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 8557,
											"end": 8581,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8557,
											"end": 8581,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8557,
											"end": 8581,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8557,
											"end": 8581,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8557,
											"end": 8581,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 8557,
											"end": 8581,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8177,
											"end": 8606,
											"name": "tag",
											"source": 2,
											"value": "475"
										},
										{
											"begin": 8177,
											"end": 8606,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8636,
											"end": 8638,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8630,
											"end": 8634,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "PUSH",
											"source": 2,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 8640,
											"end": 8645,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "476"
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 8621,
											"end": 8646,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "tag",
											"source": 2,
											"value": "476"
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 7558,
											"end": 8653,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7483,
											"end": 8653,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7483,
											"end": 8653,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7483,
											"end": 8653,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7483,
											"end": 8653,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7,
											"end": 106,
											"name": "tag",
											"source": 21,
											"value": "477"
										},
										{
											"begin": 7,
											"end": 106,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 59,
											"end": 65,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 93,
											"end": 98,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 87,
											"end": 99,
											"name": "MLOAD",
											"source": 21
										},
										{
											"begin": 77,
											"end": 99,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 77,
											"end": 99,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7,
											"end": 106,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 7,
											"end": 106,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 7,
											"end": 106,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7,
											"end": 106,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 112,
											"end": 281,
											"name": "tag",
											"source": 21,
											"value": "478"
										},
										{
											"begin": 112,
											"end": 281,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 196,
											"end": 207,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 230,
											"end": 236,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 225,
											"end": 228,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 218,
											"end": 237,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 270,
											"end": 274,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 265,
											"end": 268,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 261,
											"end": 275,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 246,
											"end": 275,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 246,
											"end": 275,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 112,
											"end": 281,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 112,
											"end": 281,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 112,
											"end": 281,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 112,
											"end": 281,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 112,
											"end": 281,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 287,
											"end": 533,
											"name": "tag",
											"source": 21,
											"value": "479"
										},
										{
											"begin": 287,
											"end": 533,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 368,
											"end": 369,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 378,
											"end": 491,
											"name": "tag",
											"source": 21,
											"value": "540"
										},
										{
											"begin": 378,
											"end": 491,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 392,
											"end": 398,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 389,
											"end": 390,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 386,
											"end": 399,
											"name": "LT",
											"source": 21
										},
										{
											"begin": 378,
											"end": 491,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 378,
											"end": 491,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "542"
										},
										{
											"begin": 378,
											"end": 491,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 477,
											"end": 478,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 472,
											"end": 475,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 468,
											"end": 479,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 462,
											"end": 480,
											"name": "MLOAD",
											"source": 21
										},
										{
											"begin": 458,
											"end": 459,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 453,
											"end": 456,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 449,
											"end": 460,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 442,
											"end": 481,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 414,
											"end": 416,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 411,
											"end": 412,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 407,
											"end": 417,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 402,
											"end": 417,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 402,
											"end": 417,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 378,
											"end": 491,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "540"
										},
										{
											"begin": 378,
											"end": 491,
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 378,
											"end": 491,
											"name": "tag",
											"source": 21,
											"value": "542"
										},
										{
											"begin": 378,
											"end": 491,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 525,
											"end": 526,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 516,
											"end": 522,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 511,
											"end": 514,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 507,
											"end": 523,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 500,
											"end": 527,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 349,
											"end": 533,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 287,
											"end": 533,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 287,
											"end": 533,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 287,
											"end": 533,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 287,
											"end": 533,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 539,
											"end": 641,
											"name": "tag",
											"source": 21,
											"value": "480"
										},
										{
											"begin": 539,
											"end": 641,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 580,
											"end": 586,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 631,
											"end": 633,
											"name": "PUSH",
											"source": 21,
											"value": "1F"
										},
										{
											"begin": 627,
											"end": 634,
											"name": "NOT",
											"source": 21
										},
										{
											"begin": 622,
											"end": 624,
											"name": "PUSH",
											"source": 21,
											"value": "1F"
										},
										{
											"begin": 615,
											"end": 620,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 611,
											"end": 625,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 607,
											"end": 635,
											"name": "AND",
											"source": 21
										},
										{
											"begin": 597,
											"end": 635,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 597,
											"end": 635,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 539,
											"end": 641,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 539,
											"end": 641,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 539,
											"end": 641,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 539,
											"end": 641,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 647,
											"end": 1024,
											"name": "tag",
											"source": 21,
											"value": "481"
										},
										{
											"begin": 647,
											"end": 1024,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 735,
											"end": 738,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 763,
											"end": 802,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "545"
										},
										{
											"begin": 796,
											"end": 801,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 763,
											"end": 802,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "477"
										},
										{
											"begin": 763,
											"end": 802,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 763,
											"end": 802,
											"name": "tag",
											"source": 21,
											"value": "545"
										},
										{
											"begin": 763,
											"end": 802,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 818,
											"end": 889,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "546"
										},
										{
											"begin": 882,
											"end": 888,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 877,
											"end": 880,
											"name": "DUP6",
											"source": 21
										},
										{
											"begin": 818,
											"end": 889,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "478"
										},
										{
											"begin": 818,
											"end": 889,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 818,
											"end": 889,
											"name": "tag",
											"source": 21,
											"value": "546"
										},
										{
											"begin": 818,
											"end": 889,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 811,
											"end": 889,
											"name": "SWAP4",
											"source": 21
										},
										{
											"begin": 811,
											"end": 889,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 898,
											"end": 963,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "547"
										},
										{
											"begin": 956,
											"end": 962,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 951,
											"end": 954,
											"name": "DUP6",
											"source": 21
										},
										{
											"begin": 944,
											"end": 948,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 937,
											"end": 942,
											"name": "DUP7",
											"source": 21
										},
										{
											"begin": 933,
											"end": 949,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 898,
											"end": 963,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "479"
										},
										{
											"begin": 898,
											"end": 963,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 898,
											"end": 963,
											"name": "tag",
											"source": 21,
											"value": "547"
										},
										{
											"begin": 898,
											"end": 963,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 988,
											"end": 1017,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "548"
										},
										{
											"begin": 1010,
											"end": 1016,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 988,
											"end": 1017,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "480"
										},
										{
											"begin": 988,
											"end": 1017,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 988,
											"end": 1017,
											"name": "tag",
											"source": 21,
											"value": "548"
										},
										{
											"begin": 988,
											"end": 1017,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 983,
											"end": 986,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 979,
											"end": 1018,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 972,
											"end": 1018,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 972,
											"end": 1018,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 739,
											"end": 1024,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 647,
											"end": 1024,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 647,
											"end": 1024,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 647,
											"end": 1024,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 647,
											"end": 1024,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 647,
											"end": 1024,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 1030,
											"end": 1343,
											"name": "tag",
											"source": 21,
											"value": "32"
										},
										{
											"begin": 1030,
											"end": 1343,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1143,
											"end": 1147,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 1181,
											"end": 1183,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 1170,
											"end": 1179,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 1166,
											"end": 1184,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 1158,
											"end": 1184,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 1158,
											"end": 1184,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1230,
											"end": 1239,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 1224,
											"end": 1228,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 1220,
											"end": 1240,
											"name": "SUB",
											"source": 21
										},
										{
											"begin": 1216,
											"end": 1217,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 1205,
											"end": 1214,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 1201,
											"end": 1218,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 1194,
											"end": 1241,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 1258,
											"end": 1336,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "550"
										},
										{
											"begin": 1331,
											"end": 1335,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 1322,
											"end": 1328,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 1258,
											"end": 1336,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "481"
										},
										{
											"begin": 1258,
											"end": 1336,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 1258,
											"end": 1336,
											"name": "tag",
											"source": 21,
											"value": "550"
										},
										{
											"begin": 1258,
											"end": 1336,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1250,
											"end": 1336,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 1250,
											"end": 1336,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1030,
											"end": 1343,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 1030,
											"end": 1343,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 1030,
											"end": 1343,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1030,
											"end": 1343,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1030,
											"end": 1343,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 1430,
											"end": 1547,
											"name": "tag",
											"source": 21,
											"value": "483"
										},
										{
											"begin": 1430,
											"end": 1547,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1539,
											"end": 1540,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 1536,
											"end": 1537,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 1529,
											"end": 1541,
											"name": "REVERT",
											"source": 21
										},
										{
											"begin": 1676,
											"end": 1802,
											"name": "tag",
											"source": 21,
											"value": "485"
										},
										{
											"begin": 1676,
											"end": 1802,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1713,
											"end": 1720,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 1753,
											"end": 1795,
											"name": "PUSH",
											"source": 21,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1746,
											"end": 1751,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 1742,
											"end": 1796,
											"name": "AND",
											"source": 21
										},
										{
											"begin": 1731,
											"end": 1796,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 1731,
											"end": 1796,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1676,
											"end": 1802,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 1676,
											"end": 1802,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 1676,
											"end": 1802,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1676,
											"end": 1802,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 1808,
											"end": 1904,
											"name": "tag",
											"source": 21,
											"value": "486"
										},
										{
											"begin": 1808,
											"end": 1904,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1845,
											"end": 1852,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 1874,
											"end": 1898,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "556"
										},
										{
											"begin": 1892,
											"end": 1897,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 1874,
											"end": 1898,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "485"
										},
										{
											"begin": 1874,
											"end": 1898,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 1874,
											"end": 1898,
											"name": "tag",
											"source": 21,
											"value": "556"
										},
										{
											"begin": 1874,
											"end": 1898,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1863,
											"end": 1898,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 1863,
											"end": 1898,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1808,
											"end": 1904,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 1808,
											"end": 1904,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 1808,
											"end": 1904,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1808,
											"end": 1904,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 1910,
											"end": 2032,
											"name": "tag",
											"source": 21,
											"value": "487"
										},
										{
											"begin": 1910,
											"end": 2032,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1983,
											"end": 2007,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "558"
										},
										{
											"begin": 2001,
											"end": 2006,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 1983,
											"end": 2007,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "486"
										},
										{
											"begin": 1983,
											"end": 2007,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 1983,
											"end": 2007,
											"name": "tag",
											"source": 21,
											"value": "558"
										},
										{
											"begin": 1983,
											"end": 2007,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1976,
											"end": 1981,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 1973,
											"end": 2008,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 1963,
											"end": 2026,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "559"
										},
										{
											"begin": 1963,
											"end": 2026,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 2022,
											"end": 2023,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 2019,
											"end": 2020,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 2012,
											"end": 2024,
											"name": "REVERT",
											"source": 21
										},
										{
											"begin": 1963,
											"end": 2026,
											"name": "tag",
											"source": 21,
											"value": "559"
										},
										{
											"begin": 1963,
											"end": 2026,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1910,
											"end": 2032,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1910,
											"end": 2032,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 2038,
											"end": 2177,
											"name": "tag",
											"source": 21,
											"value": "488"
										},
										{
											"begin": 2038,
											"end": 2177,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2084,
											"end": 2089,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 2122,
											"end": 2128,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 2109,
											"end": 2129,
											"name": "CALLDATALOAD",
											"source": 21
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 2138,
											"end": 2171,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "561"
										},
										{
											"begin": 2165,
											"end": 2170,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 2138,
											"end": 2171,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "487"
										},
										{
											"begin": 2138,
											"end": 2171,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 2138,
											"end": 2171,
											"name": "tag",
											"source": 21,
											"value": "561"
										},
										{
											"begin": 2138,
											"end": 2171,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2038,
											"end": 2177,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 2038,
											"end": 2177,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 2038,
											"end": 2177,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 2038,
											"end": 2177,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 2038,
											"end": 2177,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 2183,
											"end": 2260,
											"name": "tag",
											"source": 21,
											"value": "489"
										},
										{
											"begin": 2183,
											"end": 2260,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2220,
											"end": 2227,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 2249,
											"end": 2254,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 2238,
											"end": 2254,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 2238,
											"end": 2254,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 2183,
											"end": 2260,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 2183,
											"end": 2260,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 2183,
											"end": 2260,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 2183,
											"end": 2260,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 2266,
											"end": 2388,
											"name": "tag",
											"source": 21,
											"value": "490"
										},
										{
											"begin": 2266,
											"end": 2388,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2339,
											"end": 2363,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "564"
										},
										{
											"begin": 2357,
											"end": 2362,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 2339,
											"end": 2363,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "489"
										},
										{
											"begin": 2339,
											"end": 2363,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 2339,
											"end": 2363,
											"name": "tag",
											"source": 21,
											"value": "564"
										},
										{
											"begin": 2339,
											"end": 2363,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2332,
											"end": 2337,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 2329,
											"end": 2364,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 2319,
											"end": 2382,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "565"
										},
										{
											"begin": 2319,
											"end": 2382,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 2378,
											"end": 2379,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 2375,
											"end": 2376,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 2368,
											"end": 2380,
											"name": "REVERT",
											"source": 21
										},
										{
											"begin": 2319,
											"end": 2382,
											"name": "tag",
											"source": 21,
											"value": "565"
										},
										{
											"begin": 2319,
											"end": 2382,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2266,
											"end": 2388,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 2266,
											"end": 2388,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 2394,
											"end": 2533,
											"name": "tag",
											"source": 21,
											"value": "491"
										},
										{
											"begin": 2394,
											"end": 2533,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2440,
											"end": 2445,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 2478,
											"end": 2484,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 2465,
											"end": 2485,
											"name": "CALLDATALOAD",
											"source": 21
										},
										{
											"begin": 2456,
											"end": 2485,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 2456,
											"end": 2485,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 2494,
											"end": 2527,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "567"
										},
										{
											"begin": 2521,
											"end": 2526,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 2494,
											"end": 2527,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "490"
										},
										{
											"begin": 2494,
											"end": 2527,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 2494,
											"end": 2527,
											"name": "tag",
											"source": 21,
											"value": "567"
										},
										{
											"begin": 2494,
											"end": 2527,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2394,
											"end": 2533,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 2394,
											"end": 2533,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 2394,
											"end": 2533,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 2394,
											"end": 2533,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 2394,
											"end": 2533,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 2539,
											"end": 3013,
											"name": "tag",
											"source": 21,
											"value": "35"
										},
										{
											"begin": 2539,
											"end": 3013,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2607,
											"end": 2613,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 2615,
											"end": 2621,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 2664,
											"end": 2666,
											"name": "PUSH",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 2652,
											"end": 2661,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 2643,
											"end": 2650,
											"name": "DUP6",
											"source": 21
										},
										{
											"begin": 2639,
											"end": 2662,
											"name": "SUB",
											"source": 21
										},
										{
											"begin": 2635,
											"end": 2667,
											"name": "SLT",
											"source": 21
										},
										{
											"begin": 2632,
											"end": 2751,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 2632,
											"end": 2751,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "569"
										},
										{
											"begin": 2632,
											"end": 2751,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 2670,
											"end": 2749,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "570"
										},
										{
											"begin": 2670,
											"end": 2749,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "483"
										},
										{
											"begin": 2670,
											"end": 2749,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 2670,
											"end": 2749,
											"name": "tag",
											"source": 21,
											"value": "570"
										},
										{
											"begin": 2670,
											"end": 2749,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2632,
											"end": 2751,
											"name": "tag",
											"source": 21,
											"value": "569"
										},
										{
											"begin": 2632,
											"end": 2751,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2790,
											"end": 2791,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 2815,
											"end": 2868,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "571"
										},
										{
											"begin": 2860,
											"end": 2867,
											"name": "DUP6",
											"source": 21
										},
										{
											"begin": 2851,
											"end": 2857,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 2840,
											"end": 2849,
											"name": "DUP7",
											"source": 21
										},
										{
											"begin": 2836,
											"end": 2858,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 2815,
											"end": 2868,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "488"
										},
										{
											"begin": 2815,
											"end": 2868,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 2815,
											"end": 2868,
											"name": "tag",
											"source": 21,
											"value": "571"
										},
										{
											"begin": 2815,
											"end": 2868,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2805,
											"end": 2868,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 2805,
											"end": 2868,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 2761,
											"end": 2878,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 2917,
											"end": 2919,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 2943,
											"end": 2996,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "572"
										},
										{
											"begin": 2988,
											"end": 2995,
											"name": "DUP6",
											"source": 21
										},
										{
											"begin": 2979,
											"end": 2985,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 2968,
											"end": 2977,
											"name": "DUP7",
											"source": 21
										},
										{
											"begin": 2964,
											"end": 2986,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 2943,
											"end": 2996,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "491"
										},
										{
											"begin": 2943,
											"end": 2996,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 2943,
											"end": 2996,
											"name": "tag",
											"source": 21,
											"value": "572"
										},
										{
											"begin": 2943,
											"end": 2996,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2933,
											"end": 2996,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 2933,
											"end": 2996,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 2888,
											"end": 3006,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 2539,
											"end": 3013,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 2539,
											"end": 3013,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 2539,
											"end": 3013,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 2539,
											"end": 3013,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 2539,
											"end": 3013,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 2539,
											"end": 3013,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 3019,
											"end": 3109,
											"name": "tag",
											"source": 21,
											"value": "492"
										},
										{
											"begin": 3019,
											"end": 3109,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 3053,
											"end": 3060,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 3096,
											"end": 3101,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 3089,
											"end": 3102,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 3082,
											"end": 3103,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 3071,
											"end": 3103,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 3071,
											"end": 3103,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 3019,
											"end": 3109,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 3019,
											"end": 3109,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 3019,
											"end": 3109,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 3019,
											"end": 3109,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 3115,
											"end": 3224,
											"name": "tag",
											"source": 21,
											"value": "493"
										},
										{
											"begin": 3115,
											"end": 3224,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 3196,
											"end": 3217,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "575"
										},
										{
											"begin": 3211,
											"end": 3216,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 3196,
											"end": 3217,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "492"
										},
										{
											"begin": 3196,
											"end": 3217,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 3196,
											"end": 3217,
											"name": "tag",
											"source": 21,
											"value": "575"
										},
										{
											"begin": 3196,
											"end": 3217,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 3191,
											"end": 3194,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 3184,
											"end": 3218,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 3115,
											"end": 3224,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 3115,
											"end": 3224,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 3115,
											"end": 3224,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 3230,
											"end": 3440,
											"name": "tag",
											"source": 21,
											"value": "38"
										},
										{
											"begin": 3230,
											"end": 3440,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 3317,
											"end": 3321,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 3355,
											"end": 3357,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 3344,
											"end": 3353,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 3340,
											"end": 3358,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 3332,
											"end": 3358,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 3332,
											"end": 3358,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 3368,
											"end": 3433,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "577"
										},
										{
											"begin": 3430,
											"end": 3431,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 3419,
											"end": 3428,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 3415,
											"end": 3432,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 3406,
											"end": 3412,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 3368,
											"end": 3433,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "493"
										},
										{
											"begin": 3368,
											"end": 3433,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 3368,
											"end": 3433,
											"name": "tag",
											"source": 21,
											"value": "577"
										},
										{
											"begin": 3368,
											"end": 3433,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 3230,
											"end": 3440,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 3230,
											"end": 3440,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 3230,
											"end": 3440,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 3230,
											"end": 3440,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 3230,
											"end": 3440,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 3446,
											"end": 3564,
											"name": "tag",
											"source": 21,
											"value": "494"
										},
										{
											"begin": 3446,
											"end": 3564,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 3533,
											"end": 3557,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "579"
										},
										{
											"begin": 3551,
											"end": 3556,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 3533,
											"end": 3557,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "489"
										},
										{
											"begin": 3533,
											"end": 3557,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 3533,
											"end": 3557,
											"name": "tag",
											"source": 21,
											"value": "579"
										},
										{
											"begin": 3533,
											"end": 3557,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 3528,
											"end": 3531,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 3521,
											"end": 3558,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 3446,
											"end": 3564,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 3446,
											"end": 3564,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 3446,
											"end": 3564,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 3570,
											"end": 3792,
											"name": "tag",
											"source": 21,
											"value": "42"
										},
										{
											"begin": 3570,
											"end": 3792,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 3663,
											"end": 3667,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 3701,
											"end": 3703,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 3690,
											"end": 3699,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 3686,
											"end": 3704,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 3678,
											"end": 3704,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 3678,
											"end": 3704,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 3714,
											"end": 3785,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "581"
										},
										{
											"begin": 3782,
											"end": 3783,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 3771,
											"end": 3780,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 3767,
											"end": 3784,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 3758,
											"end": 3764,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 3714,
											"end": 3785,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "494"
										},
										{
											"begin": 3714,
											"end": 3785,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 3714,
											"end": 3785,
											"name": "tag",
											"source": 21,
											"value": "581"
										},
										{
											"begin": 3714,
											"end": 3785,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 3570,
											"end": 3792,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 3570,
											"end": 3792,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 3570,
											"end": 3792,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 3570,
											"end": 3792,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 3570,
											"end": 3792,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 3798,
											"end": 4417,
											"name": "tag",
											"source": 21,
											"value": "45"
										},
										{
											"begin": 3798,
											"end": 4417,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 3875,
											"end": 3881,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 3883,
											"end": 3889,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 3891,
											"end": 3897,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 3940,
											"end": 3942,
											"name": "PUSH",
											"source": 21,
											"value": "60"
										},
										{
											"begin": 3928,
											"end": 3937,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 3919,
											"end": 3926,
											"name": "DUP7",
											"source": 21
										},
										{
											"begin": 3915,
											"end": 3938,
											"name": "SUB",
											"source": 21
										},
										{
											"begin": 3911,
											"end": 3943,
											"name": "SLT",
											"source": 21
										},
										{
											"begin": 3908,
											"end": 4027,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 3908,
											"end": 4027,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "583"
										},
										{
											"begin": 3908,
											"end": 4027,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 3946,
											"end": 4025,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "584"
										},
										{
											"begin": 3946,
											"end": 4025,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "483"
										},
										{
											"begin": 3946,
											"end": 4025,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 3946,
											"end": 4025,
											"name": "tag",
											"source": 21,
											"value": "584"
										},
										{
											"begin": 3946,
											"end": 4025,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 3908,
											"end": 4027,
											"name": "tag",
											"source": 21,
											"value": "583"
										},
										{
											"begin": 3908,
											"end": 4027,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 4066,
											"end": 4067,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 4091,
											"end": 4144,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "585"
										},
										{
											"begin": 4136,
											"end": 4143,
											"name": "DUP7",
											"source": 21
										},
										{
											"begin": 4127,
											"end": 4133,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 4116,
											"end": 4125,
											"name": "DUP8",
											"source": 21
										},
										{
											"begin": 4112,
											"end": 4134,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 4091,
											"end": 4144,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "488"
										},
										{
											"begin": 4091,
											"end": 4144,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 4091,
											"end": 4144,
											"name": "tag",
											"source": 21,
											"value": "585"
										},
										{
											"begin": 4091,
											"end": 4144,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 4081,
											"end": 4144,
											"name": "SWAP4",
											"source": 21
										},
										{
											"begin": 4081,
											"end": 4144,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 4037,
											"end": 4154,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 4193,
											"end": 4195,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 4219,
											"end": 4272,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "586"
										},
										{
											"begin": 4264,
											"end": 4271,
											"name": "DUP7",
											"source": 21
										},
										{
											"begin": 4255,
											"end": 4261,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 4244,
											"end": 4253,
											"name": "DUP8",
											"source": 21
										},
										{
											"begin": 4240,
											"end": 4262,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 4219,
											"end": 4272,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "488"
										},
										{
											"begin": 4219,
											"end": 4272,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 4219,
											"end": 4272,
											"name": "tag",
											"source": 21,
											"value": "586"
										},
										{
											"begin": 4219,
											"end": 4272,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 4209,
											"end": 4272,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 4209,
											"end": 4272,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 4164,
											"end": 4282,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 4321,
											"end": 4323,
											"name": "PUSH",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 4347,
											"end": 4400,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "587"
										},
										{
											"begin": 4392,
											"end": 4399,
											"name": "DUP7",
											"source": 21
										},
										{
											"begin": 4383,
											"end": 4389,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 4372,
											"end": 4381,
											"name": "DUP8",
											"source": 21
										},
										{
											"begin": 4368,
											"end": 4390,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 4347,
											"end": 4400,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "491"
										},
										{
											"begin": 4347,
											"end": 4400,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 4347,
											"end": 4400,
											"name": "tag",
											"source": 21,
											"value": "587"
										},
										{
											"begin": 4347,
											"end": 4400,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 4337,
											"end": 4400,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 4337,
											"end": 4400,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 4292,
											"end": 4410,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 3798,
											"end": 4417,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 3798,
											"end": 4417,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 3798,
											"end": 4417,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 3798,
											"end": 4417,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 3798,
											"end": 4417,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 3798,
											"end": 4417,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 4423,
											"end": 4509,
											"name": "tag",
											"source": 21,
											"value": "495"
										},
										{
											"begin": 4423,
											"end": 4509,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 4458,
											"end": 4465,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 4498,
											"end": 4502,
											"name": "PUSH",
											"source": 21,
											"value": "FF"
										},
										{
											"begin": 4491,
											"end": 4496,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 4487,
											"end": 4503,
											"name": "AND",
											"source": 21
										},
										{
											"begin": 4476,
											"end": 4503,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 4476,
											"end": 4503,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 4423,
											"end": 4509,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 4423,
											"end": 4509,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 4423,
											"end": 4509,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 4423,
											"end": 4509,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 4515,
											"end": 4627,
											"name": "tag",
											"source": 21,
											"value": "496"
										},
										{
											"begin": 4515,
											"end": 4627,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 4598,
											"end": 4620,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "590"
										},
										{
											"begin": 4614,
											"end": 4619,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 4598,
											"end": 4620,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "495"
										},
										{
											"begin": 4598,
											"end": 4620,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 4598,
											"end": 4620,
											"name": "tag",
											"source": 21,
											"value": "590"
										},
										{
											"begin": 4598,
											"end": 4620,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 4593,
											"end": 4596,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 4586,
											"end": 4621,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 4515,
											"end": 4627,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 4515,
											"end": 4627,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 4515,
											"end": 4627,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 4633,
											"end": 4847,
											"name": "tag",
											"source": 21,
											"value": "51"
										},
										{
											"begin": 4633,
											"end": 4847,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 4722,
											"end": 4726,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 4760,
											"end": 4762,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 4749,
											"end": 4758,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 4745,
											"end": 4763,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 4737,
											"end": 4763,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 4737,
											"end": 4763,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 4773,
											"end": 4840,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "592"
										},
										{
											"begin": 4837,
											"end": 4838,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 4826,
											"end": 4835,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 4822,
											"end": 4839,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 4813,
											"end": 4819,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 4773,
											"end": 4840,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "496"
										},
										{
											"begin": 4773,
											"end": 4840,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 4773,
											"end": 4840,
											"name": "tag",
											"source": 21,
											"value": "592"
										},
										{
											"begin": 4773,
											"end": 4840,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 4633,
											"end": 4847,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 4633,
											"end": 4847,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 4633,
											"end": 4847,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 4633,
											"end": 4847,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 4633,
											"end": 4847,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 4853,
											"end": 4930,
											"name": "tag",
											"source": 21,
											"value": "497"
										},
										{
											"begin": 4853,
											"end": 4930,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 4890,
											"end": 4897,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 4919,
											"end": 4924,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 4908,
											"end": 4924,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 4908,
											"end": 4924,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 4853,
											"end": 4930,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 4853,
											"end": 4930,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 4853,
											"end": 4930,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 4853,
											"end": 4930,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 4936,
											"end": 5054,
											"name": "tag",
											"source": 21,
											"value": "498"
										},
										{
											"begin": 4936,
											"end": 5054,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 5023,
											"end": 5047,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "595"
										},
										{
											"begin": 5041,
											"end": 5046,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 5023,
											"end": 5047,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "497"
										},
										{
											"begin": 5023,
											"end": 5047,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 5023,
											"end": 5047,
											"name": "tag",
											"source": 21,
											"value": "595"
										},
										{
											"begin": 5023,
											"end": 5047,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 5018,
											"end": 5021,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 5011,
											"end": 5048,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 4936,
											"end": 5054,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 4936,
											"end": 5054,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 4936,
											"end": 5054,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 5060,
											"end": 5282,
											"name": "tag",
											"source": 21,
											"value": "55"
										},
										{
											"begin": 5060,
											"end": 5282,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 5153,
											"end": 5157,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 5191,
											"end": 5193,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 5180,
											"end": 5189,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 5176,
											"end": 5194,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 5168,
											"end": 5194,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 5168,
											"end": 5194,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 5204,
											"end": 5275,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "597"
										},
										{
											"begin": 5272,
											"end": 5273,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 5261,
											"end": 5270,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 5257,
											"end": 5274,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 5248,
											"end": 5254,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 5204,
											"end": 5275,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "498"
										},
										{
											"begin": 5204,
											"end": 5275,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 5204,
											"end": 5275,
											"name": "tag",
											"source": 21,
											"value": "597"
										},
										{
											"begin": 5204,
											"end": 5275,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 5060,
											"end": 5282,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 5060,
											"end": 5282,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 5060,
											"end": 5282,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 5060,
											"end": 5282,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 5060,
											"end": 5282,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 5288,
											"end": 5617,
											"name": "tag",
											"source": 21,
											"value": "63"
										},
										{
											"begin": 5288,
											"end": 5617,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 5347,
											"end": 5353,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 5396,
											"end": 5398,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 5384,
											"end": 5393,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 5375,
											"end": 5382,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 5371,
											"end": 5394,
											"name": "SUB",
											"source": 21
										},
										{
											"begin": 5367,
											"end": 5399,
											"name": "SLT",
											"source": 21
										},
										{
											"begin": 5364,
											"end": 5483,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 5364,
											"end": 5483,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "599"
										},
										{
											"begin": 5364,
											"end": 5483,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 5402,
											"end": 5481,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "600"
										},
										{
											"begin": 5402,
											"end": 5481,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "483"
										},
										{
											"begin": 5402,
											"end": 5481,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 5402,
											"end": 5481,
											"name": "tag",
											"source": 21,
											"value": "600"
										},
										{
											"begin": 5402,
											"end": 5481,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 5364,
											"end": 5483,
											"name": "tag",
											"source": 21,
											"value": "599"
										},
										{
											"begin": 5364,
											"end": 5483,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 5522,
											"end": 5523,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 5547,
											"end": 5600,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "601"
										},
										{
											"begin": 5592,
											"end": 5599,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 5583,
											"end": 5589,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 5572,
											"end": 5581,
											"name": "DUP6",
											"source": 21
										},
										{
											"begin": 5568,
											"end": 5590,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 5547,
											"end": 5600,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "491"
										},
										{
											"begin": 5547,
											"end": 5600,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 5547,
											"end": 5600,
											"name": "tag",
											"source": 21,
											"value": "601"
										},
										{
											"begin": 5547,
											"end": 5600,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 5537,
											"end": 5600,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 5537,
											"end": 5600,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 5493,
											"end": 5610,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 5288,
											"end": 5617,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 5288,
											"end": 5617,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 5288,
											"end": 5617,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 5288,
											"end": 5617,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 5288,
											"end": 5617,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 5623,
											"end": 5952,
											"name": "tag",
											"source": 21,
											"value": "70"
										},
										{
											"begin": 5623,
											"end": 5952,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 5682,
											"end": 5688,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 5731,
											"end": 5733,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 5719,
											"end": 5728,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 5710,
											"end": 5717,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 5706,
											"end": 5729,
											"name": "SUB",
											"source": 21
										},
										{
											"begin": 5702,
											"end": 5734,
											"name": "SLT",
											"source": 21
										},
										{
											"begin": 5699,
											"end": 5818,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 5699,
											"end": 5818,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "603"
										},
										{
											"begin": 5699,
											"end": 5818,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 5737,
											"end": 5816,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "604"
										},
										{
											"begin": 5737,
											"end": 5816,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "483"
										},
										{
											"begin": 5737,
											"end": 5816,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 5737,
											"end": 5816,
											"name": "tag",
											"source": 21,
											"value": "604"
										},
										{
											"begin": 5737,
											"end": 5816,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 5699,
											"end": 5818,
											"name": "tag",
											"source": 21,
											"value": "603"
										},
										{
											"begin": 5699,
											"end": 5818,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 5857,
											"end": 5858,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 5882,
											"end": 5935,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "605"
										},
										{
											"begin": 5927,
											"end": 5934,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 5918,
											"end": 5924,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 5907,
											"end": 5916,
											"name": "DUP6",
											"source": 21
										},
										{
											"begin": 5903,
											"end": 5925,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 5882,
											"end": 5935,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "488"
										},
										{
											"begin": 5882,
											"end": 5935,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 5882,
											"end": 5935,
											"name": "tag",
											"source": 21,
											"value": "605"
										},
										{
											"begin": 5882,
											"end": 5935,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 5872,
											"end": 5935,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 5872,
											"end": 5935,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 5828,
											"end": 5945,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 5623,
											"end": 5952,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 5623,
											"end": 5952,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 5623,
											"end": 5952,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 5623,
											"end": 5952,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 5623,
											"end": 5952,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 5958,
											"end": 6107,
											"name": "tag",
											"source": 21,
											"value": "499"
										},
										{
											"begin": 5958,
											"end": 6107,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 5994,
											"end": 6001,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 6034,
											"end": 6100,
											"name": "PUSH",
											"source": 21,
											"value": "FF00000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6027,
											"end": 6032,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 6023,
											"end": 6101,
											"name": "AND",
											"source": 21
										},
										{
											"begin": 6012,
											"end": 6101,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 6012,
											"end": 6101,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 5958,
											"end": 6107,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 5958,
											"end": 6107,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 5958,
											"end": 6107,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 5958,
											"end": 6107,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 6113,
											"end": 6228,
											"name": "tag",
											"source": 21,
											"value": "500"
										},
										{
											"begin": 6113,
											"end": 6228,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 6198,
											"end": 6221,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "608"
										},
										{
											"begin": 6215,
											"end": 6220,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 6198,
											"end": 6221,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "499"
										},
										{
											"begin": 6198,
											"end": 6221,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 6198,
											"end": 6221,
											"name": "tag",
											"source": 21,
											"value": "608"
										},
										{
											"begin": 6198,
											"end": 6221,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 6193,
											"end": 6196,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 6186,
											"end": 6222,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 6113,
											"end": 6228,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 6113,
											"end": 6228,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 6113,
											"end": 6228,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 6234,
											"end": 6352,
											"name": "tag",
											"source": 21,
											"value": "501"
										},
										{
											"begin": 6234,
											"end": 6352,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 6321,
											"end": 6345,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "610"
										},
										{
											"begin": 6339,
											"end": 6344,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 6321,
											"end": 6345,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "486"
										},
										{
											"begin": 6321,
											"end": 6345,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 6321,
											"end": 6345,
											"name": "tag",
											"source": 21,
											"value": "610"
										},
										{
											"begin": 6321,
											"end": 6345,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 6316,
											"end": 6319,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 6309,
											"end": 6346,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 6234,
											"end": 6352,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 6234,
											"end": 6352,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 6234,
											"end": 6352,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 6358,
											"end": 6472,
											"name": "tag",
											"source": 21,
											"value": "502"
										},
										{
											"begin": 6358,
											"end": 6472,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 6425,
											"end": 6431,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 6459,
											"end": 6464,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 6453,
											"end": 6465,
											"name": "MLOAD",
											"source": 21
										},
										{
											"begin": 6443,
											"end": 6465,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 6443,
											"end": 6465,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 6358,
											"end": 6472,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 6358,
											"end": 6472,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 6358,
											"end": 6472,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 6358,
											"end": 6472,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 6478,
											"end": 6662,
											"name": "tag",
											"source": 21,
											"value": "503"
										},
										{
											"begin": 6478,
											"end": 6662,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 6577,
											"end": 6588,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 6611,
											"end": 6617,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 6606,
											"end": 6609,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 6599,
											"end": 6618,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 6651,
											"end": 6655,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 6646,
											"end": 6649,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 6642,
											"end": 6656,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 6627,
											"end": 6656,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 6627,
											"end": 6656,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 6478,
											"end": 6662,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 6478,
											"end": 6662,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 6478,
											"end": 6662,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 6478,
											"end": 6662,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 6478,
											"end": 6662,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 6668,
											"end": 6800,
											"name": "tag",
											"source": 21,
											"value": "504"
										},
										{
											"begin": 6668,
											"end": 6800,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 6735,
											"end": 6739,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 6758,
											"end": 6761,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 6750,
											"end": 6761,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 6750,
											"end": 6761,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 6788,
											"end": 6792,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 6783,
											"end": 6786,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 6779,
											"end": 6793,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 6771,
											"end": 6793,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 6771,
											"end": 6793,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 6668,
											"end": 6800,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 6668,
											"end": 6800,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 6668,
											"end": 6800,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 6668,
											"end": 6800,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 6806,
											"end": 6914,
											"name": "tag",
											"source": 21,
											"value": "505"
										},
										{
											"begin": 6806,
											"end": 6914,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 6883,
											"end": 6907,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "615"
										},
										{
											"begin": 6901,
											"end": 6906,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 6883,
											"end": 6907,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "489"
										},
										{
											"begin": 6883,
											"end": 6907,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 6883,
											"end": 6907,
											"name": "tag",
											"source": 21,
											"value": "615"
										},
										{
											"begin": 6883,
											"end": 6907,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 6878,
											"end": 6881,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 6871,
											"end": 6908,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 6806,
											"end": 6914,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 6806,
											"end": 6914,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 6806,
											"end": 6914,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 6920,
											"end": 7099,
											"name": "tag",
											"source": 21,
											"value": "506"
										},
										{
											"begin": 6920,
											"end": 7099,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 6989,
											"end": 6999,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 7010,
											"end": 7056,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "617"
										},
										{
											"begin": 7052,
											"end": 7055,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 7044,
											"end": 7050,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 7010,
											"end": 7056,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "505"
										},
										{
											"begin": 7010,
											"end": 7056,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 7010,
											"end": 7056,
											"name": "tag",
											"source": 21,
											"value": "617"
										},
										{
											"begin": 7010,
											"end": 7056,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 7088,
											"end": 7092,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 7083,
											"end": 7086,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 7079,
											"end": 7093,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 7065,
											"end": 7093,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 7065,
											"end": 7093,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 6920,
											"end": 7099,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 6920,
											"end": 7099,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 6920,
											"end": 7099,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 6920,
											"end": 7099,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 6920,
											"end": 7099,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 7105,
											"end": 7218,
											"name": "tag",
											"source": 21,
											"value": "507"
										},
										{
											"begin": 7105,
											"end": 7218,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 7175,
											"end": 7179,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 7207,
											"end": 7211,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 7202,
											"end": 7205,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 7198,
											"end": 7212,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 7190,
											"end": 7212,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 7190,
											"end": 7212,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7105,
											"end": 7218,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 7105,
											"end": 7218,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 7105,
											"end": 7218,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7105,
											"end": 7218,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 7254,
											"end": 7986,
											"name": "tag",
											"source": 21,
											"value": "508"
										},
										{
											"begin": 7254,
											"end": 7986,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 7373,
											"end": 7376,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 7402,
											"end": 7456,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "620"
										},
										{
											"begin": 7450,
											"end": 7455,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 7402,
											"end": 7456,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "502"
										},
										{
											"begin": 7402,
											"end": 7456,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 7402,
											"end": 7456,
											"name": "tag",
											"source": 21,
											"value": "620"
										},
										{
											"begin": 7402,
											"end": 7456,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 7472,
											"end": 7558,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "621"
										},
										{
											"begin": 7551,
											"end": 7557,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 7546,
											"end": 7549,
											"name": "DUP6",
											"source": 21
										},
										{
											"begin": 7472,
											"end": 7558,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "503"
										},
										{
											"begin": 7472,
											"end": 7558,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 7472,
											"end": 7558,
											"name": "tag",
											"source": 21,
											"value": "621"
										},
										{
											"begin": 7472,
											"end": 7558,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 7465,
											"end": 7558,
											"name": "SWAP4",
											"source": 21
										},
										{
											"begin": 7465,
											"end": 7558,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7582,
											"end": 7638,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "622"
										},
										{
											"begin": 7632,
											"end": 7637,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 7582,
											"end": 7638,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "504"
										},
										{
											"begin": 7582,
											"end": 7638,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 7582,
											"end": 7638,
											"name": "tag",
											"source": 21,
											"value": "622"
										},
										{
											"begin": 7582,
											"end": 7638,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 7661,
											"end": 7668,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 7692,
											"end": 7693,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 7677,
											"end": 7961,
											"name": "tag",
											"source": 21,
											"value": "623"
										},
										{
											"begin": 7677,
											"end": 7961,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 7702,
											"end": 7708,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 7699,
											"end": 7700,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 7696,
											"end": 7709,
											"name": "LT",
											"source": 21
										},
										{
											"begin": 7677,
											"end": 7961,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 7677,
											"end": 7961,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "625"
										},
										{
											"begin": 7677,
											"end": 7961,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 7778,
											"end": 7784,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 7772,
											"end": 7785,
											"name": "MLOAD",
											"source": 21
										},
										{
											"begin": 7805,
											"end": 7868,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "626"
										},
										{
											"begin": 7864,
											"end": 7867,
											"name": "DUP9",
											"source": 21
										},
										{
											"begin": 7849,
											"end": 7862,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 7805,
											"end": 7868,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "506"
										},
										{
											"begin": 7805,
											"end": 7868,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 7805,
											"end": 7868,
											"name": "tag",
											"source": 21,
											"value": "626"
										},
										{
											"begin": 7805,
											"end": 7868,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 7798,
											"end": 7868,
											"name": "SWAP8",
											"source": 21
										},
										{
											"begin": 7798,
											"end": 7868,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7891,
											"end": 7951,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "627"
										},
										{
											"begin": 7944,
											"end": 7950,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 7891,
											"end": 7951,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "507"
										},
										{
											"begin": 7891,
											"end": 7951,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 7891,
											"end": 7951,
											"name": "tag",
											"source": 21,
											"value": "627"
										},
										{
											"begin": 7891,
											"end": 7951,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 7881,
											"end": 7951,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 7881,
											"end": 7951,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7737,
											"end": 7961,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7724,
											"end": 7725,
											"name": "PUSH",
											"source": 21,
											"value": "1"
										},
										{
											"begin": 7721,
											"end": 7722,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 7717,
											"end": 7726,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 7712,
											"end": 7726,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 7712,
											"end": 7726,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7677,
											"end": 7961,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "623"
										},
										{
											"begin": 7677,
											"end": 7961,
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 7677,
											"end": 7961,
											"name": "tag",
											"source": 21,
											"value": "625"
										},
										{
											"begin": 7677,
											"end": 7961,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 7681,
											"end": 7695,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7977,
											"end": 7980,
											"name": "DUP6",
											"source": 21
										},
										{
											"begin": 7970,
											"end": 7980,
											"name": "SWAP4",
											"source": 21
										},
										{
											"begin": 7970,
											"end": 7980,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7378,
											"end": 7986,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7378,
											"end": 7986,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7378,
											"end": 7986,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7254,
											"end": 7986,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 7254,
											"end": 7986,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 7254,
											"end": 7986,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7254,
											"end": 7986,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7254,
											"end": 7986,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 7992,
											"end": 9207,
											"name": "tag",
											"source": 21,
											"value": "87"
										},
										{
											"begin": 7992,
											"end": 9207,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 8341,
											"end": 8345,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 8379,
											"end": 8382,
											"name": "PUSH",
											"source": 21,
											"value": "E0"
										},
										{
											"begin": 8368,
											"end": 8377,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 8364,
											"end": 8383,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 8356,
											"end": 8383,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 8356,
											"end": 8383,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 8393,
											"end": 8462,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "629"
										},
										{
											"begin": 8459,
											"end": 8460,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 8448,
											"end": 8457,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 8444,
											"end": 8461,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 8435,
											"end": 8441,
											"name": "DUP11",
											"source": 21
										},
										{
											"begin": 8393,
											"end": 8462,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "500"
										},
										{
											"begin": 8393,
											"end": 8462,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 8393,
											"end": 8462,
											"name": "tag",
											"source": 21,
											"value": "629"
										},
										{
											"begin": 8393,
											"end": 8462,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 8509,
											"end": 8518,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 8503,
											"end": 8507,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 8499,
											"end": 8519,
											"name": "SUB",
											"source": 21
										},
										{
											"begin": 8494,
											"end": 8496,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 8483,
											"end": 8492,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 8479,
											"end": 8497,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 8472,
											"end": 8520,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 8537,
											"end": 8615,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "630"
										},
										{
											"begin": 8610,
											"end": 8614,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 8601,
											"end": 8607,
											"name": "DUP10",
											"source": 21
										},
										{
											"begin": 8537,
											"end": 8615,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "481"
										},
										{
											"begin": 8537,
											"end": 8615,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 8537,
											"end": 8615,
											"name": "tag",
											"source": 21,
											"value": "630"
										},
										{
											"begin": 8537,
											"end": 8615,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 8529,
											"end": 8615,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 8529,
											"end": 8615,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 8662,
											"end": 8671,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 8656,
											"end": 8660,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 8652,
											"end": 8672,
											"name": "SUB",
											"source": 21
										},
										{
											"begin": 8647,
											"end": 8649,
											"name": "PUSH",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 8636,
											"end": 8645,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 8632,
											"end": 8650,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 8625,
											"end": 8673,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 8690,
											"end": 8768,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "631"
										},
										{
											"begin": 8763,
											"end": 8767,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 8754,
											"end": 8760,
											"name": "DUP9",
											"source": 21
										},
										{
											"begin": 8690,
											"end": 8768,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "481"
										},
										{
											"begin": 8690,
											"end": 8768,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 8690,
											"end": 8768,
											"name": "tag",
											"source": 21,
											"value": "631"
										},
										{
											"begin": 8690,
											"end": 8768,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 8682,
											"end": 8768,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 8682,
											"end": 8768,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 8778,
											"end": 8850,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "632"
										},
										{
											"begin": 8846,
											"end": 8848,
											"name": "PUSH",
											"source": 21,
											"value": "60"
										},
										{
											"begin": 8835,
											"end": 8844,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 8831,
											"end": 8849,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 8822,
											"end": 8828,
											"name": "DUP8",
											"source": 21
										},
										{
											"begin": 8778,
											"end": 8850,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "494"
										},
										{
											"begin": 8778,
											"end": 8850,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 8778,
											"end": 8850,
											"name": "tag",
											"source": 21,
											"value": "632"
										},
										{
											"begin": 8778,
											"end": 8850,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 8860,
											"end": 8933,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "633"
										},
										{
											"begin": 8928,
											"end": 8931,
											"name": "PUSH",
											"source": 21,
											"value": "80"
										},
										{
											"begin": 8917,
											"end": 8926,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 8913,
											"end": 8932,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 8904,
											"end": 8910,
											"name": "DUP7",
											"source": 21
										},
										{
											"begin": 8860,
											"end": 8933,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "501"
										},
										{
											"begin": 8860,
											"end": 8933,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 8860,
											"end": 8933,
											"name": "tag",
											"source": 21,
											"value": "633"
										},
										{
											"begin": 8860,
											"end": 8933,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 8943,
											"end": 9016,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "634"
										},
										{
											"begin": 9011,
											"end": 9014,
											"name": "PUSH",
											"source": 21,
											"value": "A0"
										},
										{
											"begin": 9000,
											"end": 9009,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 8996,
											"end": 9015,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 8987,
											"end": 8993,
											"name": "DUP6",
											"source": 21
										},
										{
											"begin": 8943,
											"end": 9016,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "498"
										},
										{
											"begin": 8943,
											"end": 9016,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 8943,
											"end": 9016,
											"name": "tag",
											"source": 21,
											"value": "634"
										},
										{
											"begin": 8943,
											"end": 9016,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 9064,
											"end": 9073,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 9058,
											"end": 9062,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 9054,
											"end": 9074,
											"name": "SUB",
											"source": 21
										},
										{
											"begin": 9048,
											"end": 9051,
											"name": "PUSH",
											"source": 21,
											"value": "C0"
										},
										{
											"begin": 9037,
											"end": 9046,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 9033,
											"end": 9052,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 9026,
											"end": 9075,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 9092,
											"end": 9200,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "635"
										},
										{
											"begin": 9195,
											"end": 9199,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 9186,
											"end": 9192,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 9092,
											"end": 9200,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "508"
										},
										{
											"begin": 9092,
											"end": 9200,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 9092,
											"end": 9200,
											"name": "tag",
											"source": 21,
											"value": "635"
										},
										{
											"begin": 9092,
											"end": 9200,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 9084,
											"end": 9200,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 9084,
											"end": 9200,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7992,
											"end": 9207,
											"name": "SWAP9",
											"source": 21
										},
										{
											"begin": 7992,
											"end": 9207,
											"name": "SWAP8",
											"source": 21
										},
										{
											"begin": 7992,
											"end": 9207,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7992,
											"end": 9207,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7992,
											"end": 9207,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7992,
											"end": 9207,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7992,
											"end": 9207,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7992,
											"end": 9207,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7992,
											"end": 9207,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7992,
											"end": 9207,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7992,
											"end": 9207,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 9213,
											"end": 9435,
											"name": "tag",
											"source": 21,
											"value": "91"
										},
										{
											"begin": 9213,
											"end": 9435,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 9306,
											"end": 9310,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 9344,
											"end": 9346,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 9333,
											"end": 9342,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 9329,
											"end": 9347,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 9321,
											"end": 9347,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 9321,
											"end": 9347,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 9357,
											"end": 9428,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "637"
										},
										{
											"begin": 9425,
											"end": 9426,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 9414,
											"end": 9423,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 9410,
											"end": 9427,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 9401,
											"end": 9407,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 9357,
											"end": 9428,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "501"
										},
										{
											"begin": 9357,
											"end": 9428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 9357,
											"end": 9428,
											"name": "tag",
											"source": 21,
											"value": "637"
										},
										{
											"begin": 9357,
											"end": 9428,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 9213,
											"end": 9435,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 9213,
											"end": 9435,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 9213,
											"end": 9435,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 9213,
											"end": 9435,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 9213,
											"end": 9435,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 9441,
											"end": 9559,
											"name": "tag",
											"source": 21,
											"value": "509"
										},
										{
											"begin": 9441,
											"end": 9559,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 9512,
											"end": 9534,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "639"
										},
										{
											"begin": 9528,
											"end": 9533,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 9512,
											"end": 9534,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "495"
										},
										{
											"begin": 9512,
											"end": 9534,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 9512,
											"end": 9534,
											"name": "tag",
											"source": 21,
											"value": "639"
										},
										{
											"begin": 9512,
											"end": 9534,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 9505,
											"end": 9510,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 9502,
											"end": 9535,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 9492,
											"end": 9553,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "640"
										},
										{
											"begin": 9492,
											"end": 9553,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 9549,
											"end": 9550,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 9546,
											"end": 9547,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 9539,
											"end": 9551,
											"name": "REVERT",
											"source": 21
										},
										{
											"begin": 9492,
											"end": 9553,
											"name": "tag",
											"source": 21,
											"value": "640"
										},
										{
											"begin": 9492,
											"end": 9553,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 9441,
											"end": 9559,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 9441,
											"end": 9559,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 9565,
											"end": 9700,
											"name": "tag",
											"source": 21,
											"value": "510"
										},
										{
											"begin": 9565,
											"end": 9700,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 9609,
											"end": 9614,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 9647,
											"end": 9653,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 9634,
											"end": 9654,
											"name": "CALLDATALOAD",
											"source": 21
										},
										{
											"begin": 9625,
											"end": 9654,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 9625,
											"end": 9654,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 9663,
											"end": 9694,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "642"
										},
										{
											"begin": 9688,
											"end": 9693,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 9663,
											"end": 9694,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "509"
										},
										{
											"begin": 9663,
											"end": 9694,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 9663,
											"end": 9694,
											"name": "tag",
											"source": 21,
											"value": "642"
										},
										{
											"begin": 9663,
											"end": 9694,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 9565,
											"end": 9700,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 9565,
											"end": 9700,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 9565,
											"end": 9700,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 9565,
											"end": 9700,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 9565,
											"end": 9700,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 9706,
											"end": 9828,
											"name": "tag",
											"source": 21,
											"value": "511"
										},
										{
											"begin": 9706,
											"end": 9828,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 9779,
											"end": 9803,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "644"
										},
										{
											"begin": 9797,
											"end": 9802,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 9779,
											"end": 9803,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "497"
										},
										{
											"begin": 9779,
											"end": 9803,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 9779,
											"end": 9803,
											"name": "tag",
											"source": 21,
											"value": "644"
										},
										{
											"begin": 9779,
											"end": 9803,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 9772,
											"end": 9777,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 9769,
											"end": 9804,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 9759,
											"end": 9822,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "645"
										},
										{
											"begin": 9759,
											"end": 9822,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 9818,
											"end": 9819,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 9815,
											"end": 9816,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 9808,
											"end": 9820,
											"name": "REVERT",
											"source": 21
										},
										{
											"begin": 9759,
											"end": 9822,
											"name": "tag",
											"source": 21,
											"value": "645"
										},
										{
											"begin": 9759,
											"end": 9822,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 9706,
											"end": 9828,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 9706,
											"end": 9828,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 9834,
											"end": 9973,
											"name": "tag",
											"source": 21,
											"value": "512"
										},
										{
											"begin": 9834,
											"end": 9973,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 9880,
											"end": 9885,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 9918,
											"end": 9924,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 9905,
											"end": 9925,
											"name": "CALLDATALOAD",
											"source": 21
										},
										{
											"begin": 9896,
											"end": 9925,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 9896,
											"end": 9925,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 9934,
											"end": 9967,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "647"
										},
										{
											"begin": 9961,
											"end": 9966,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 9934,
											"end": 9967,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "511"
										},
										{
											"begin": 9934,
											"end": 9967,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 9934,
											"end": 9967,
											"name": "tag",
											"source": 21,
											"value": "647"
										},
										{
											"begin": 9934,
											"end": 9967,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 9834,
											"end": 9973,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 9834,
											"end": 9973,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 9834,
											"end": 9973,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 9834,
											"end": 9973,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 9834,
											"end": 9973,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 9979,
											"end": 11178,
											"name": "tag",
											"source": 21,
											"value": "104"
										},
										{
											"begin": 9979,
											"end": 11178,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 10090,
											"end": 10096,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 10098,
											"end": 10104,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 10106,
											"end": 10112,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 10114,
											"end": 10120,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 10122,
											"end": 10128,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 10130,
											"end": 10136,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 10138,
											"end": 10144,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 10187,
											"end": 10190,
											"name": "PUSH",
											"source": 21,
											"value": "E0"
										},
										{
											"begin": 10175,
											"end": 10184,
											"name": "DUP9",
											"source": 21
										},
										{
											"begin": 10166,
											"end": 10173,
											"name": "DUP11",
											"source": 21
										},
										{
											"begin": 10162,
											"end": 10185,
											"name": "SUB",
											"source": 21
										},
										{
											"begin": 10158,
											"end": 10191,
											"name": "SLT",
											"source": 21
										},
										{
											"begin": 10155,
											"end": 10275,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 10155,
											"end": 10275,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "649"
										},
										{
											"begin": 10155,
											"end": 10275,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 10194,
											"end": 10273,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "650"
										},
										{
											"begin": 10194,
											"end": 10273,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "483"
										},
										{
											"begin": 10194,
											"end": 10273,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 10194,
											"end": 10273,
											"name": "tag",
											"source": 21,
											"value": "650"
										},
										{
											"begin": 10194,
											"end": 10273,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 10155,
											"end": 10275,
											"name": "tag",
											"source": 21,
											"value": "649"
										},
										{
											"begin": 10155,
											"end": 10275,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 10314,
											"end": 10315,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 10339,
											"end": 10392,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "651"
										},
										{
											"begin": 10384,
											"end": 10391,
											"name": "DUP11",
											"source": 21
										},
										{
											"begin": 10375,
											"end": 10381,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 10364,
											"end": 10373,
											"name": "DUP12",
											"source": 21
										},
										{
											"begin": 10360,
											"end": 10382,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 10339,
											"end": 10392,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "488"
										},
										{
											"begin": 10339,
											"end": 10392,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 10339,
											"end": 10392,
											"name": "tag",
											"source": 21,
											"value": "651"
										},
										{
											"begin": 10339,
											"end": 10392,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 10329,
											"end": 10392,
											"name": "SWAP8",
											"source": 21
										},
										{
											"begin": 10329,
											"end": 10392,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 10285,
											"end": 10402,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 10441,
											"end": 10443,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 10467,
											"end": 10520,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "652"
										},
										{
											"begin": 10512,
											"end": 10519,
											"name": "DUP11",
											"source": 21
										},
										{
											"begin": 10503,
											"end": 10509,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 10492,
											"end": 10501,
											"name": "DUP12",
											"source": 21
										},
										{
											"begin": 10488,
											"end": 10510,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 10467,
											"end": 10520,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "488"
										},
										{
											"begin": 10467,
											"end": 10520,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 10467,
											"end": 10520,
											"name": "tag",
											"source": 21,
											"value": "652"
										},
										{
											"begin": 10467,
											"end": 10520,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 10457,
											"end": 10520,
											"name": "SWAP7",
											"source": 21
										},
										{
											"begin": 10457,
											"end": 10520,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 10412,
											"end": 10530,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 10569,
											"end": 10571,
											"name": "PUSH",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 10595,
											"end": 10648,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "653"
										},
										{
											"begin": 10640,
											"end": 10647,
											"name": "DUP11",
											"source": 21
										},
										{
											"begin": 10631,
											"end": 10637,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 10620,
											"end": 10629,
											"name": "DUP12",
											"source": 21
										},
										{
											"begin": 10616,
											"end": 10638,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 10595,
											"end": 10648,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "491"
										},
										{
											"begin": 10595,
											"end": 10648,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 10595,
											"end": 10648,
											"name": "tag",
											"source": 21,
											"value": "653"
										},
										{
											"begin": 10595,
											"end": 10648,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 10585,
											"end": 10648,
											"name": "SWAP6",
											"source": 21
										},
										{
											"begin": 10585,
											"end": 10648,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 10540,
											"end": 10658,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 10697,
											"end": 10699,
											"name": "PUSH",
											"source": 21,
											"value": "60"
										},
										{
											"begin": 10723,
											"end": 10776,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "654"
										},
										{
											"begin": 10768,
											"end": 10775,
											"name": "DUP11",
											"source": 21
										},
										{
											"begin": 10759,
											"end": 10765,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 10748,
											"end": 10757,
											"name": "DUP12",
											"source": 21
										},
										{
											"begin": 10744,
											"end": 10766,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 10723,
											"end": 10776,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "491"
										},
										{
											"begin": 10723,
											"end": 10776,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 10723,
											"end": 10776,
											"name": "tag",
											"source": 21,
											"value": "654"
										},
										{
											"begin": 10723,
											"end": 10776,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 10713,
											"end": 10776,
											"name": "SWAP5",
											"source": 21
										},
										{
											"begin": 10713,
											"end": 10776,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 10668,
											"end": 10786,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 10825,
											"end": 10828,
											"name": "PUSH",
											"source": 21,
											"value": "80"
										},
										{
											"begin": 10852,
											"end": 10903,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "655"
										},
										{
											"begin": 10895,
											"end": 10902,
											"name": "DUP11",
											"source": 21
										},
										{
											"begin": 10886,
											"end": 10892,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 10875,
											"end": 10884,
											"name": "DUP12",
											"source": 21
										},
										{
											"begin": 10871,
											"end": 10893,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 10852,
											"end": 10903,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "510"
										},
										{
											"begin": 10852,
											"end": 10903,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 10852,
											"end": 10903,
											"name": "tag",
											"source": 21,
											"value": "655"
										},
										{
											"begin": 10852,
											"end": 10903,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 10842,
											"end": 10903,
											"name": "SWAP4",
											"source": 21
										},
										{
											"begin": 10842,
											"end": 10903,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 10796,
											"end": 10913,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 10952,
											"end": 10955,
											"name": "PUSH",
											"source": 21,
											"value": "A0"
										},
										{
											"begin": 10979,
											"end": 11032,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "656"
										},
										{
											"begin": 11024,
											"end": 11031,
											"name": "DUP11",
											"source": 21
										},
										{
											"begin": 11015,
											"end": 11021,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 11004,
											"end": 11013,
											"name": "DUP12",
											"source": 21
										},
										{
											"begin": 11000,
											"end": 11022,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 10979,
											"end": 11032,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "512"
										},
										{
											"begin": 10979,
											"end": 11032,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 10979,
											"end": 11032,
											"name": "tag",
											"source": 21,
											"value": "656"
										},
										{
											"begin": 10979,
											"end": 11032,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 10969,
											"end": 11032,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 10969,
											"end": 11032,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 10923,
											"end": 11042,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 11081,
											"end": 11084,
											"name": "PUSH",
											"source": 21,
											"value": "C0"
										},
										{
											"begin": 11108,
											"end": 11161,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "657"
										},
										{
											"begin": 11153,
											"end": 11160,
											"name": "DUP11",
											"source": 21
										},
										{
											"begin": 11144,
											"end": 11150,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 11133,
											"end": 11142,
											"name": "DUP12",
											"source": 21
										},
										{
											"begin": 11129,
											"end": 11151,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 11108,
											"end": 11161,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "512"
										},
										{
											"begin": 11108,
											"end": 11161,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 11108,
											"end": 11161,
											"name": "tag",
											"source": 21,
											"value": "657"
										},
										{
											"begin": 11108,
											"end": 11161,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 11098,
											"end": 11161,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 11098,
											"end": 11161,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 11052,
											"end": 11171,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 9979,
											"end": 11178,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 9979,
											"end": 11178,
											"name": "SWAP6",
											"source": 21
										},
										{
											"begin": 9979,
											"end": 11178,
											"name": "SWAP9",
											"source": 21
										},
										{
											"begin": 9979,
											"end": 11178,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 9979,
											"end": 11178,
											"name": "SWAP5",
											"source": 21
										},
										{
											"begin": 9979,
											"end": 11178,
											"name": "SWAP8",
											"source": 21
										},
										{
											"begin": 9979,
											"end": 11178,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 9979,
											"end": 11178,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 9979,
											"end": 11178,
											"name": "SWAP6",
											"source": 21
										},
										{
											"begin": 9979,
											"end": 11178,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 9979,
											"end": 11178,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 11184,
											"end": 11658,
											"name": "tag",
											"source": 21,
											"value": "108"
										},
										{
											"begin": 11184,
											"end": 11658,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 11252,
											"end": 11258,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 11260,
											"end": 11266,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 11309,
											"end": 11311,
											"name": "PUSH",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 11297,
											"end": 11306,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 11288,
											"end": 11295,
											"name": "DUP6",
											"source": 21
										},
										{
											"begin": 11284,
											"end": 11307,
											"name": "SUB",
											"source": 21
										},
										{
											"begin": 11280,
											"end": 11312,
											"name": "SLT",
											"source": 21
										},
										{
											"begin": 11277,
											"end": 11396,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 11277,
											"end": 11396,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "659"
										},
										{
											"begin": 11277,
											"end": 11396,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 11315,
											"end": 11394,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "660"
										},
										{
											"begin": 11315,
											"end": 11394,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "483"
										},
										{
											"begin": 11315,
											"end": 11394,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 11315,
											"end": 11394,
											"name": "tag",
											"source": 21,
											"value": "660"
										},
										{
											"begin": 11315,
											"end": 11394,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 11277,
											"end": 11396,
											"name": "tag",
											"source": 21,
											"value": "659"
										},
										{
											"begin": 11277,
											"end": 11396,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 11435,
											"end": 11436,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 11460,
											"end": 11513,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "661"
										},
										{
											"begin": 11505,
											"end": 11512,
											"name": "DUP6",
											"source": 21
										},
										{
											"begin": 11496,
											"end": 11502,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 11485,
											"end": 11494,
											"name": "DUP7",
											"source": 21
										},
										{
											"begin": 11481,
											"end": 11503,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 11460,
											"end": 11513,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "488"
										},
										{
											"begin": 11460,
											"end": 11513,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 11460,
											"end": 11513,
											"name": "tag",
											"source": 21,
											"value": "661"
										},
										{
											"begin": 11460,
											"end": 11513,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 11450,
											"end": 11513,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 11450,
											"end": 11513,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 11406,
											"end": 11523,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 11562,
											"end": 11564,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 11588,
											"end": 11641,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "662"
										},
										{
											"begin": 11633,
											"end": 11640,
											"name": "DUP6",
											"source": 21
										},
										{
											"begin": 11624,
											"end": 11630,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 11613,
											"end": 11622,
											"name": "DUP7",
											"source": 21
										},
										{
											"begin": 11609,
											"end": 11631,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 11588,
											"end": 11641,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "488"
										},
										{
											"begin": 11588,
											"end": 11641,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 11588,
											"end": 11641,
											"name": "tag",
											"source": 21,
											"value": "662"
										},
										{
											"begin": 11588,
											"end": 11641,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 11578,
											"end": 11641,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 11578,
											"end": 11641,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 11533,
											"end": 11651,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 11184,
											"end": 11658,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 11184,
											"end": 11658,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 11184,
											"end": 11658,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 11184,
											"end": 11658,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 11184,
											"end": 11658,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 11184,
											"end": 11658,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 11664,
											"end": 11844,
											"name": "tag",
											"source": 21,
											"value": "513"
										},
										{
											"begin": 11664,
											"end": 11844,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 11712,
											"end": 11789,
											"name": "PUSH",
											"source": 21,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11709,
											"end": 11710,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 11702,
											"end": 11790,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 11809,
											"end": 11813,
											"name": "PUSH",
											"source": 21,
											"value": "22"
										},
										{
											"begin": 11806,
											"end": 11807,
											"name": "PUSH",
											"source": 21,
											"value": "4"
										},
										{
											"begin": 11799,
											"end": 11814,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 11833,
											"end": 11837,
											"name": "PUSH",
											"source": 21,
											"value": "24"
										},
										{
											"begin": 11830,
											"end": 11831,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 11823,
											"end": 11838,
											"name": "REVERT",
											"source": 21
										},
										{
											"begin": 11850,
											"end": 12170,
											"name": "tag",
											"source": 21,
											"value": "118"
										},
										{
											"begin": 11850,
											"end": 12170,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 11894,
											"end": 11900,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 11931,
											"end": 11932,
											"name": "PUSH",
											"source": 21,
											"value": "2"
										},
										{
											"begin": 11925,
											"end": 11929,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 11921,
											"end": 11933,
											"name": "DIV",
											"source": 21
										},
										{
											"begin": 11911,
											"end": 11933,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 11911,
											"end": 11933,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 11978,
											"end": 11979,
											"name": "PUSH",
											"source": 21,
											"value": "1"
										},
										{
											"begin": 11972,
											"end": 11976,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 11968,
											"end": 11980,
											"name": "AND",
											"source": 21
										},
										{
											"begin": 11999,
											"end": 12017,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 11989,
											"end": 12070,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "665"
										},
										{
											"begin": 11989,
											"end": 12070,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 12055,
											"end": 12059,
											"name": "PUSH",
											"source": 21,
											"value": "7F"
										},
										{
											"begin": 12047,
											"end": 12053,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 12043,
											"end": 12060,
											"name": "AND",
											"source": 21
										},
										{
											"begin": 12033,
											"end": 12060,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 12033,
											"end": 12060,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 11989,
											"end": 12070,
											"name": "tag",
											"source": 21,
											"value": "665"
										},
										{
											"begin": 11989,
											"end": 12070,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 12117,
											"end": 12119,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 12109,
											"end": 12115,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 12106,
											"end": 12120,
											"name": "LT",
											"source": 21
										},
										{
											"begin": 12086,
											"end": 12104,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 12083,
											"end": 12121,
											"name": "SUB",
											"source": 21
										},
										{
											"begin": 12080,
											"end": 12164,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "666"
										},
										{
											"begin": 12080,
											"end": 12164,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 12136,
											"end": 12154,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "667"
										},
										{
											"begin": 12136,
											"end": 12154,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "513"
										},
										{
											"begin": 12136,
											"end": 12154,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 12136,
											"end": 12154,
											"name": "tag",
											"source": 21,
											"value": "667"
										},
										{
											"begin": 12136,
											"end": 12154,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 12080,
											"end": 12164,
											"name": "tag",
											"source": 21,
											"value": "666"
										},
										{
											"begin": 12080,
											"end": 12164,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 11901,
											"end": 12170,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 11850,
											"end": 12170,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 11850,
											"end": 12170,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 11850,
											"end": 12170,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 11850,
											"end": 12170,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 12176,
											"end": 12347,
											"name": "tag",
											"source": 21,
											"value": "514"
										},
										{
											"begin": 12176,
											"end": 12347,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 12316,
											"end": 12339,
											"name": "PUSH",
											"source": 21,
											"value": "4549503731323A20556E696E697469616C697A65640000000000000000000000"
										},
										{
											"begin": 12312,
											"end": 12313,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 12304,
											"end": 12310,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 12300,
											"end": 12314,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 12293,
											"end": 12340,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 12176,
											"end": 12347,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 12176,
											"end": 12347,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 12353,
											"end": 12719,
											"name": "tag",
											"source": 21,
											"value": "515"
										},
										{
											"begin": 12353,
											"end": 12719,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 12495,
											"end": 12498,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 12516,
											"end": 12583,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "670"
										},
										{
											"begin": 12580,
											"end": 12582,
											"name": "PUSH",
											"source": 21,
											"value": "15"
										},
										{
											"begin": 12575,
											"end": 12578,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 12516,
											"end": 12583,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "478"
										},
										{
											"begin": 12516,
											"end": 12583,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 12516,
											"end": 12583,
											"name": "tag",
											"source": 21,
											"value": "670"
										},
										{
											"begin": 12516,
											"end": 12583,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 12509,
											"end": 12583,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 12509,
											"end": 12583,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 12592,
											"end": 12685,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "671"
										},
										{
											"begin": 12681,
											"end": 12684,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 12592,
											"end": 12685,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "514"
										},
										{
											"begin": 12592,
											"end": 12685,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 12592,
											"end": 12685,
											"name": "tag",
											"source": 21,
											"value": "671"
										},
										{
											"begin": 12592,
											"end": 12685,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 12710,
											"end": 12712,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 12705,
											"end": 12708,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 12701,
											"end": 12713,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 12694,
											"end": 12713,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 12694,
											"end": 12713,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 12353,
											"end": 12719,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 12353,
											"end": 12719,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 12353,
											"end": 12719,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 12353,
											"end": 12719,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 12725,
											"end": 13144,
											"name": "tag",
											"source": 21,
											"value": "183"
										},
										{
											"begin": 12725,
											"end": 13144,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 12891,
											"end": 12895,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 12929,
											"end": 12931,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 12918,
											"end": 12927,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 12914,
											"end": 12932,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 12906,
											"end": 12932,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 12906,
											"end": 12932,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 12978,
											"end": 12987,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 12972,
											"end": 12976,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 12968,
											"end": 12988,
											"name": "SUB",
											"source": 21
										},
										{
											"begin": 12964,
											"end": 12965,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 12953,
											"end": 12962,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 12949,
											"end": 12966,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 12942,
											"end": 12989,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 13006,
											"end": 13137,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "673"
										},
										{
											"begin": 13132,
											"end": 13136,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 13006,
											"end": 13137,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "515"
										},
										{
											"begin": 13006,
											"end": 13137,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 13006,
											"end": 13137,
											"name": "tag",
											"source": 21,
											"value": "673"
										},
										{
											"begin": 13006,
											"end": 13137,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 12998,
											"end": 13137,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 12998,
											"end": 13137,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 12725,
											"end": 13144,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 12725,
											"end": 13144,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 12725,
											"end": 13144,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 12725,
											"end": 13144,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 13150,
											"end": 13330,
											"name": "tag",
											"source": 21,
											"value": "190"
										},
										{
											"begin": 13150,
											"end": 13330,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 13198,
											"end": 13275,
											"name": "PUSH",
											"source": 21,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 13195,
											"end": 13196,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 13188,
											"end": 13276,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 13295,
											"end": 13299,
											"name": "PUSH",
											"source": 21,
											"value": "41"
										},
										{
											"begin": 13292,
											"end": 13293,
											"name": "PUSH",
											"source": 21,
											"value": "4"
										},
										{
											"begin": 13285,
											"end": 13300,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 13319,
											"end": 13323,
											"name": "PUSH",
											"source": 21,
											"value": "24"
										},
										{
											"begin": 13316,
											"end": 13317,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 13309,
											"end": 13324,
											"name": "REVERT",
											"source": 21
										},
										{
											"begin": 13336,
											"end": 13421,
											"name": "tag",
											"source": 21,
											"value": "516"
										},
										{
											"begin": 13336,
											"end": 13421,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 13381,
											"end": 13388,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 13410,
											"end": 13415,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 13399,
											"end": 13415,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 13399,
											"end": 13415,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 13336,
											"end": 13421,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 13336,
											"end": 13421,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 13336,
											"end": 13421,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 13336,
											"end": 13421,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 13427,
											"end": 13528,
											"name": "tag",
											"source": 21,
											"value": "517"
										},
										{
											"begin": 13427,
											"end": 13528,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 13463,
											"end": 13470,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 13503,
											"end": 13521,
											"name": "PUSH",
											"source": 21,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13496,
											"end": 13501,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 13492,
											"end": 13522,
											"name": "AND",
											"source": 21
										},
										{
											"begin": 13481,
											"end": 13522,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 13481,
											"end": 13522,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 13427,
											"end": 13528,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 13427,
											"end": 13528,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 13427,
											"end": 13528,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 13427,
											"end": 13528,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 13534,
											"end": 13594,
											"name": "tag",
											"source": 21,
											"value": "518"
										},
										{
											"begin": 13534,
											"end": 13594,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 13562,
											"end": 13565,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 13583,
											"end": 13588,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 13576,
											"end": 13588,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 13576,
											"end": 13588,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 13534,
											"end": 13594,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 13534,
											"end": 13594,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 13534,
											"end": 13594,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 13534,
											"end": 13594,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 13600,
											"end": 13756,
											"name": "tag",
											"source": 21,
											"value": "519"
										},
										{
											"begin": 13600,
											"end": 13756,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 13657,
											"end": 13666,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 13690,
											"end": 13750,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "679"
										},
										{
											"begin": 13707,
											"end": 13749,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "680"
										},
										{
											"begin": 13716,
											"end": 13748,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "681"
										},
										{
											"begin": 13742,
											"end": 13747,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 13716,
											"end": 13748,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "516"
										},
										{
											"begin": 13716,
											"end": 13748,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 13716,
											"end": 13748,
											"name": "tag",
											"source": 21,
											"value": "681"
										},
										{
											"begin": 13716,
											"end": 13748,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 13707,
											"end": 13749,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "518"
										},
										{
											"begin": 13707,
											"end": 13749,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 13707,
											"end": 13749,
											"name": "tag",
											"source": 21,
											"value": "680"
										},
										{
											"begin": 13707,
											"end": 13749,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 13690,
											"end": 13750,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "517"
										},
										{
											"begin": 13690,
											"end": 13750,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 13690,
											"end": 13750,
											"name": "tag",
											"source": 21,
											"value": "679"
										},
										{
											"begin": 13690,
											"end": 13750,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 13677,
											"end": 13750,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 13677,
											"end": 13750,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 13600,
											"end": 13756,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 13600,
											"end": 13756,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 13600,
											"end": 13756,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 13600,
											"end": 13756,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 13762,
											"end": 13907,
											"name": "tag",
											"source": 21,
											"value": "520"
										},
										{
											"begin": 13762,
											"end": 13907,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 13856,
											"end": 13900,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "683"
										},
										{
											"begin": 13894,
											"end": 13899,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 13856,
											"end": 13900,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "519"
										},
										{
											"begin": 13856,
											"end": 13900,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 13856,
											"end": 13900,
											"name": "tag",
											"source": 21,
											"value": "683"
										},
										{
											"begin": 13856,
											"end": 13900,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 13851,
											"end": 13854,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 13844,
											"end": 13901,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 13762,
											"end": 13907,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 13762,
											"end": 13907,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 13762,
											"end": 13907,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 13913,
											"end": 14149,
											"name": "tag",
											"source": 21,
											"value": "226"
										},
										{
											"begin": 13913,
											"end": 14149,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 14013,
											"end": 14017,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 14051,
											"end": 14053,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 14040,
											"end": 14049,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 14036,
											"end": 14054,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 14028,
											"end": 14054,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 14028,
											"end": 14054,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 14064,
											"end": 14142,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "685"
										},
										{
											"begin": 14139,
											"end": 14140,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 14128,
											"end": 14137,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 14124,
											"end": 14141,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 14115,
											"end": 14121,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 14064,
											"end": 14142,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "520"
										},
										{
											"begin": 14064,
											"end": 14142,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 14064,
											"end": 14142,
											"name": "tag",
											"source": 21,
											"value": "685"
										},
										{
											"begin": 14064,
											"end": 14142,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 13913,
											"end": 14149,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 13913,
											"end": 14149,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 13913,
											"end": 14149,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 13913,
											"end": 14149,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 13913,
											"end": 14149,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 14155,
											"end": 14930,
											"name": "tag",
											"source": 21,
											"value": "233"
										},
										{
											"begin": 14155,
											"end": 14930,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 14388,
											"end": 14392,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 14426,
											"end": 14429,
											"name": "PUSH",
											"source": 21,
											"value": "C0"
										},
										{
											"begin": 14415,
											"end": 14424,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 14411,
											"end": 14430,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 14403,
											"end": 14430,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 14403,
											"end": 14430,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 14440,
											"end": 14511,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "687"
										},
										{
											"begin": 14508,
											"end": 14509,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 14497,
											"end": 14506,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 14493,
											"end": 14510,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 14484,
											"end": 14490,
											"name": "DUP10",
											"source": 21
										},
										{
											"begin": 14440,
											"end": 14511,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "498"
										},
										{
											"begin": 14440,
											"end": 14511,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 14440,
											"end": 14511,
											"name": "tag",
											"source": 21,
											"value": "687"
										},
										{
											"begin": 14440,
											"end": 14511,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 14521,
											"end": 14593,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "688"
										},
										{
											"begin": 14589,
											"end": 14591,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 14578,
											"end": 14587,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 14574,
											"end": 14592,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 14565,
											"end": 14571,
											"name": "DUP9",
											"source": 21
										},
										{
											"begin": 14521,
											"end": 14593,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "501"
										},
										{
											"begin": 14521,
											"end": 14593,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 14521,
											"end": 14593,
											"name": "tag",
											"source": 21,
											"value": "688"
										},
										{
											"begin": 14521,
											"end": 14593,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 14603,
											"end": 14675,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "689"
										},
										{
											"begin": 14671,
											"end": 14673,
											"name": "PUSH",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 14660,
											"end": 14669,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 14656,
											"end": 14674,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 14647,
											"end": 14653,
											"name": "DUP8",
											"source": 21
										},
										{
											"begin": 14603,
											"end": 14675,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "501"
										},
										{
											"begin": 14603,
											"end": 14675,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 14603,
											"end": 14675,
											"name": "tag",
											"source": 21,
											"value": "689"
										},
										{
											"begin": 14603,
											"end": 14675,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 14685,
											"end": 14757,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "690"
										},
										{
											"begin": 14753,
											"end": 14755,
											"name": "PUSH",
											"source": 21,
											"value": "60"
										},
										{
											"begin": 14742,
											"end": 14751,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 14738,
											"end": 14756,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 14729,
											"end": 14735,
											"name": "DUP7",
											"source": 21
										},
										{
											"begin": 14685,
											"end": 14757,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "494"
										},
										{
											"begin": 14685,
											"end": 14757,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 14685,
											"end": 14757,
											"name": "tag",
											"source": 21,
											"value": "690"
										},
										{
											"begin": 14685,
											"end": 14757,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 14767,
											"end": 14840,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "691"
										},
										{
											"begin": 14835,
											"end": 14838,
											"name": "PUSH",
											"source": 21,
											"value": "80"
										},
										{
											"begin": 14824,
											"end": 14833,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 14820,
											"end": 14839,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 14811,
											"end": 14817,
											"name": "DUP6",
											"source": 21
										},
										{
											"begin": 14767,
											"end": 14840,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "494"
										},
										{
											"begin": 14767,
											"end": 14840,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 14767,
											"end": 14840,
											"name": "tag",
											"source": 21,
											"value": "691"
										},
										{
											"begin": 14767,
											"end": 14840,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 14850,
											"end": 14923,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "692"
										},
										{
											"begin": 14918,
											"end": 14921,
											"name": "PUSH",
											"source": 21,
											"value": "A0"
										},
										{
											"begin": 14907,
											"end": 14916,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 14903,
											"end": 14922,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 14894,
											"end": 14900,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 14850,
											"end": 14923,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "494"
										},
										{
											"begin": 14850,
											"end": 14923,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 14850,
											"end": 14923,
											"name": "tag",
											"source": 21,
											"value": "692"
										},
										{
											"begin": 14850,
											"end": 14923,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 14155,
											"end": 14930,
											"name": "SWAP8",
											"source": 21
										},
										{
											"begin": 14155,
											"end": 14930,
											"name": "SWAP7",
											"source": 21
										},
										{
											"begin": 14155,
											"end": 14930,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 14155,
											"end": 14930,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 14155,
											"end": 14930,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 14155,
											"end": 14930,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 14155,
											"end": 14930,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 14155,
											"end": 14930,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 14155,
											"end": 14930,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 14155,
											"end": 14930,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 14936,
											"end": 15268,
											"name": "tag",
											"source": 21,
											"value": "240"
										},
										{
											"begin": 14936,
											"end": 15268,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 15057,
											"end": 15061,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 15095,
											"end": 15097,
											"name": "PUSH",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 15084,
											"end": 15093,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 15080,
											"end": 15098,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 15072,
											"end": 15098,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 15072,
											"end": 15098,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 15108,
											"end": 15179,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "694"
										},
										{
											"begin": 15176,
											"end": 15177,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 15165,
											"end": 15174,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 15161,
											"end": 15178,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 15152,
											"end": 15158,
											"name": "DUP6",
											"source": 21
										},
										{
											"begin": 15108,
											"end": 15179,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "501"
										},
										{
											"begin": 15108,
											"end": 15179,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 15108,
											"end": 15179,
											"name": "tag",
											"source": 21,
											"value": "694"
										},
										{
											"begin": 15108,
											"end": 15179,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 15189,
											"end": 15261,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "695"
										},
										{
											"begin": 15257,
											"end": 15259,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 15246,
											"end": 15255,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 15242,
											"end": 15260,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 15233,
											"end": 15239,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 15189,
											"end": 15261,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "501"
										},
										{
											"begin": 15189,
											"end": 15261,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 15189,
											"end": 15261,
											"name": "tag",
											"source": 21,
											"value": "695"
										},
										{
											"begin": 15189,
											"end": 15261,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 14936,
											"end": 15268,
											"name": "SWAP4",
											"source": 21
										},
										{
											"begin": 14936,
											"end": 15268,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 14936,
											"end": 15268,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 14936,
											"end": 15268,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 14936,
											"end": 15268,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 14936,
											"end": 15268,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 15274,
											"end": 15716,
											"name": "tag",
											"source": 21,
											"value": "260"
										},
										{
											"begin": 15274,
											"end": 15716,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 15423,
											"end": 15427,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 15461,
											"end": 15463,
											"name": "PUSH",
											"source": 21,
											"value": "60"
										},
										{
											"begin": 15450,
											"end": 15459,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 15446,
											"end": 15464,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 15438,
											"end": 15464,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 15438,
											"end": 15464,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 15474,
											"end": 15545,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "697"
										},
										{
											"begin": 15542,
											"end": 15543,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 15531,
											"end": 15540,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 15527,
											"end": 15544,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 15518,
											"end": 15524,
											"name": "DUP7",
											"source": 21
										},
										{
											"begin": 15474,
											"end": 15545,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "501"
										},
										{
											"begin": 15474,
											"end": 15545,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 15474,
											"end": 15545,
											"name": "tag",
											"source": 21,
											"value": "697"
										},
										{
											"begin": 15474,
											"end": 15545,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 15555,
											"end": 15627,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "698"
										},
										{
											"begin": 15623,
											"end": 15625,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 15612,
											"end": 15621,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 15608,
											"end": 15626,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 15599,
											"end": 15605,
											"name": "DUP6",
											"source": 21
										},
										{
											"begin": 15555,
											"end": 15627,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "494"
										},
										{
											"begin": 15555,
											"end": 15627,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 15555,
											"end": 15627,
											"name": "tag",
											"source": 21,
											"value": "698"
										},
										{
											"begin": 15555,
											"end": 15627,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 15637,
											"end": 15709,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "699"
										},
										{
											"begin": 15705,
											"end": 15707,
											"name": "PUSH",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 15694,
											"end": 15703,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 15690,
											"end": 15708,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 15681,
											"end": 15687,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 15637,
											"end": 15709,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "494"
										},
										{
											"begin": 15637,
											"end": 15709,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 15637,
											"end": 15709,
											"name": "tag",
											"source": 21,
											"value": "699"
										},
										{
											"begin": 15637,
											"end": 15709,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 15274,
											"end": 15716,
											"name": "SWAP5",
											"source": 21
										},
										{
											"begin": 15274,
											"end": 15716,
											"name": "SWAP4",
											"source": 21
										},
										{
											"begin": 15274,
											"end": 15716,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 15274,
											"end": 15716,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 15274,
											"end": 15716,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 15274,
											"end": 15716,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 15274,
											"end": 15716,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 15722,
											"end": 16386,
											"name": "tag",
											"source": 21,
											"value": "375"
										},
										{
											"begin": 15722,
											"end": 16386,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 15927,
											"end": 15931,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 15965,
											"end": 15968,
											"name": "PUSH",
											"source": 21,
											"value": "A0"
										},
										{
											"begin": 15954,
											"end": 15963,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 15950,
											"end": 15969,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 15942,
											"end": 15969,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 15942,
											"end": 15969,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 15979,
											"end": 16050,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "701"
										},
										{
											"begin": 16047,
											"end": 16048,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 16036,
											"end": 16045,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 16032,
											"end": 16049,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 16023,
											"end": 16029,
											"name": "DUP9",
											"source": 21
										},
										{
											"begin": 15979,
											"end": 16050,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "498"
										},
										{
											"begin": 15979,
											"end": 16050,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 15979,
											"end": 16050,
											"name": "tag",
											"source": 21,
											"value": "701"
										},
										{
											"begin": 15979,
											"end": 16050,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 16060,
											"end": 16132,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "702"
										},
										{
											"begin": 16128,
											"end": 16130,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 16117,
											"end": 16126,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 16113,
											"end": 16131,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 16104,
											"end": 16110,
											"name": "DUP8",
											"source": 21
										},
										{
											"begin": 16060,
											"end": 16132,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "498"
										},
										{
											"begin": 16060,
											"end": 16132,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 16060,
											"end": 16132,
											"name": "tag",
											"source": 21,
											"value": "702"
										},
										{
											"begin": 16060,
											"end": 16132,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 16142,
											"end": 16214,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "703"
										},
										{
											"begin": 16210,
											"end": 16212,
											"name": "PUSH",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 16199,
											"end": 16208,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 16195,
											"end": 16213,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 16186,
											"end": 16192,
											"name": "DUP7",
											"source": 21
										},
										{
											"begin": 16142,
											"end": 16214,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "498"
										},
										{
											"begin": 16142,
											"end": 16214,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 16142,
											"end": 16214,
											"name": "tag",
											"source": 21,
											"value": "703"
										},
										{
											"begin": 16142,
											"end": 16214,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 16224,
											"end": 16296,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "704"
										},
										{
											"begin": 16292,
											"end": 16294,
											"name": "PUSH",
											"source": 21,
											"value": "60"
										},
										{
											"begin": 16281,
											"end": 16290,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 16277,
											"end": 16295,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 16268,
											"end": 16274,
											"name": "DUP6",
											"source": 21
										},
										{
											"begin": 16224,
											"end": 16296,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "494"
										},
										{
											"begin": 16224,
											"end": 16296,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 16224,
											"end": 16296,
											"name": "tag",
											"source": 21,
											"value": "704"
										},
										{
											"begin": 16224,
											"end": 16296,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 16306,
											"end": 16379,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "705"
										},
										{
											"begin": 16374,
											"end": 16377,
											"name": "PUSH",
											"source": 21,
											"value": "80"
										},
										{
											"begin": 16363,
											"end": 16372,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 16359,
											"end": 16378,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 16350,
											"end": 16356,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 16306,
											"end": 16379,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "501"
										},
										{
											"begin": 16306,
											"end": 16379,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 16306,
											"end": 16379,
											"name": "tag",
											"source": 21,
											"value": "705"
										},
										{
											"begin": 16306,
											"end": 16379,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 15722,
											"end": 16386,
											"name": "SWAP7",
											"source": 21
										},
										{
											"begin": 15722,
											"end": 16386,
											"name": "SWAP6",
											"source": 21
										},
										{
											"begin": 15722,
											"end": 16386,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 15722,
											"end": 16386,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 15722,
											"end": 16386,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 15722,
											"end": 16386,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 15722,
											"end": 16386,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 15722,
											"end": 16386,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 15722,
											"end": 16386,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 16392,
											"end": 16533,
											"name": "tag",
											"source": 21,
											"value": "521"
										},
										{
											"begin": 16392,
											"end": 16533,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 16441,
											"end": 16445,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 16464,
											"end": 16467,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 16456,
											"end": 16467,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 16456,
											"end": 16467,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 16487,
											"end": 16490,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 16484,
											"end": 16485,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 16477,
											"end": 16491,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 16521,
											"end": 16525,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 16518,
											"end": 16519,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 16508,
											"end": 16526,
											"name": "KECCAK256",
											"source": 21
										},
										{
											"begin": 16500,
											"end": 16526,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 16500,
											"end": 16526,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 16392,
											"end": 16533,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 16392,
											"end": 16533,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 16392,
											"end": 16533,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 16392,
											"end": 16533,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 16539,
											"end": 16632,
											"name": "tag",
											"source": 21,
											"value": "522"
										},
										{
											"begin": 16539,
											"end": 16632,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 16576,
											"end": 16582,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 16623,
											"end": 16625,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 16618,
											"end": 16620,
											"name": "PUSH",
											"source": 21,
											"value": "1F"
										},
										{
											"begin": 16611,
											"end": 16616,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 16607,
											"end": 16621,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 16603,
											"end": 16626,
											"name": "DIV",
											"source": 21
										},
										{
											"begin": 16593,
											"end": 16626,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 16593,
											"end": 16626,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 16539,
											"end": 16632,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 16539,
											"end": 16632,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 16539,
											"end": 16632,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 16539,
											"end": 16632,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 16638,
											"end": 16745,
											"name": "tag",
											"source": 21,
											"value": "523"
										},
										{
											"begin": 16638,
											"end": 16745,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 16682,
											"end": 16690,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 16732,
											"end": 16737,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 16726,
											"end": 16730,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 16722,
											"end": 16738,
											"name": "SHL",
											"source": 21
										},
										{
											"begin": 16701,
											"end": 16738,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 16701,
											"end": 16738,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 16638,
											"end": 16745,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 16638,
											"end": 16745,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 16638,
											"end": 16745,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 16638,
											"end": 16745,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 16638,
											"end": 16745,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 16751,
											"end": 17144,
											"name": "tag",
											"source": 21,
											"value": "524"
										},
										{
											"begin": 16751,
											"end": 17144,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 16820,
											"end": 16826,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 16870,
											"end": 16871,
											"name": "PUSH",
											"source": 21,
											"value": "8"
										},
										{
											"begin": 16858,
											"end": 16868,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 16854,
											"end": 16872,
											"name": "MUL",
											"source": 21
										},
										{
											"begin": 16893,
											"end": 16990,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "710"
										},
										{
											"begin": 16923,
											"end": 16989,
											"name": "PUSH",
											"source": 21,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 16912,
											"end": 16921,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 16893,
											"end": 16990,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "523"
										},
										{
											"begin": 16893,
											"end": 16990,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 16893,
											"end": 16990,
											"name": "tag",
											"source": 21,
											"value": "710"
										},
										{
											"begin": 16893,
											"end": 16990,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 17011,
											"end": 17050,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "711"
										},
										{
											"begin": 17041,
											"end": 17049,
											"name": "DUP7",
											"source": 21
										},
										{
											"begin": 17030,
											"end": 17039,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 17011,
											"end": 17050,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "523"
										},
										{
											"begin": 17011,
											"end": 17050,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 17011,
											"end": 17050,
											"name": "tag",
											"source": 21,
											"value": "711"
										},
										{
											"begin": 17011,
											"end": 17050,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 16999,
											"end": 17050,
											"name": "SWAP6",
											"source": 21
										},
										{
											"begin": 16999,
											"end": 17050,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 17083,
											"end": 17087,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 17079,
											"end": 17088,
											"name": "NOT",
											"source": 21
										},
										{
											"begin": 17072,
											"end": 17077,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 17068,
											"end": 17089,
											"name": "AND",
											"source": 21
										},
										{
											"begin": 17059,
											"end": 17089,
											"name": "SWAP4",
											"source": 21
										},
										{
											"begin": 17059,
											"end": 17089,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 17132,
											"end": 17136,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 17122,
											"end": 17130,
											"name": "DUP7",
											"source": 21
										},
										{
											"begin": 17118,
											"end": 17137,
											"name": "AND",
											"source": 21
										},
										{
											"begin": 17111,
											"end": 17116,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 17108,
											"end": 17138,
											"name": "OR",
											"source": 21
										},
										{
											"begin": 17098,
											"end": 17138,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 17098,
											"end": 17138,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 16827,
											"end": 17144,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 16827,
											"end": 17144,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 16751,
											"end": 17144,
											"name": "SWAP4",
											"source": 21
										},
										{
											"begin": 16751,
											"end": 17144,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 16751,
											"end": 17144,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 16751,
											"end": 17144,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 16751,
											"end": 17144,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 16751,
											"end": 17144,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 17150,
											"end": 17292,
											"name": "tag",
											"source": 21,
											"value": "525"
										},
										{
											"begin": 17150,
											"end": 17292,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 17200,
											"end": 17209,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 17233,
											"end": 17286,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "713"
										},
										{
											"begin": 17251,
											"end": 17285,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "714"
										},
										{
											"begin": 17260,
											"end": 17284,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "715"
										},
										{
											"begin": 17278,
											"end": 17283,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 17260,
											"end": 17284,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "489"
										},
										{
											"begin": 17260,
											"end": 17284,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 17260,
											"end": 17284,
											"name": "tag",
											"source": 21,
											"value": "715"
										},
										{
											"begin": 17260,
											"end": 17284,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 17251,
											"end": 17285,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "518"
										},
										{
											"begin": 17251,
											"end": 17285,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 17251,
											"end": 17285,
											"name": "tag",
											"source": 21,
											"value": "714"
										},
										{
											"begin": 17251,
											"end": 17285,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 17233,
											"end": 17286,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "489"
										},
										{
											"begin": 17233,
											"end": 17286,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 17233,
											"end": 17286,
											"name": "tag",
											"source": 21,
											"value": "713"
										},
										{
											"begin": 17233,
											"end": 17286,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 17220,
											"end": 17286,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 17220,
											"end": 17286,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 17150,
											"end": 17292,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 17150,
											"end": 17292,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 17150,
											"end": 17292,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 17150,
											"end": 17292,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 17298,
											"end": 17373,
											"name": "tag",
											"source": 21,
											"value": "526"
										},
										{
											"begin": 17298,
											"end": 17373,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 17341,
											"end": 17344,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 17362,
											"end": 17367,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 17355,
											"end": 17367,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 17355,
											"end": 17367,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 17298,
											"end": 17373,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 17298,
											"end": 17373,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 17298,
											"end": 17373,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 17298,
											"end": 17373,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 17379,
											"end": 17648,
											"name": "tag",
											"source": 21,
											"value": "527"
										},
										{
											"begin": 17379,
											"end": 17648,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 17489,
											"end": 17528,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "718"
										},
										{
											"begin": 17520,
											"end": 17527,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 17489,
											"end": 17528,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "525"
										},
										{
											"begin": 17489,
											"end": 17528,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 17489,
											"end": 17528,
											"name": "tag",
											"source": 21,
											"value": "718"
										},
										{
											"begin": 17489,
											"end": 17528,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 17550,
											"end": 17641,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "719"
										},
										{
											"begin": 17599,
											"end": 17640,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "720"
										},
										{
											"begin": 17623,
											"end": 17639,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 17599,
											"end": 17640,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "526"
										},
										{
											"begin": 17599,
											"end": 17640,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 17599,
											"end": 17640,
											"name": "tag",
											"source": 21,
											"value": "720"
										},
										{
											"begin": 17599,
											"end": 17640,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 17591,
											"end": 17597,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 17584,
											"end": 17588,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 17578,
											"end": 17589,
											"name": "SLOAD",
											"source": 21
										},
										{
											"begin": 17550,
											"end": 17641,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "524"
										},
										{
											"begin": 17550,
											"end": 17641,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 17550,
											"end": 17641,
											"name": "tag",
											"source": 21,
											"value": "719"
										},
										{
											"begin": 17550,
											"end": 17641,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 17544,
											"end": 17548,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 17537,
											"end": 17642,
											"name": "SSTORE",
											"source": 21
										},
										{
											"begin": 17455,
											"end": 17648,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 17379,
											"end": 17648,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 17379,
											"end": 17648,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 17379,
											"end": 17648,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 17379,
											"end": 17648,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 17654,
											"end": 17727,
											"name": "tag",
											"source": 21,
											"value": "528"
										},
										{
											"begin": 17654,
											"end": 17727,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 17699,
											"end": 17702,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 17654,
											"end": 17727,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 17654,
											"end": 17727,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 17733,
											"end": 17922,
											"name": "tag",
											"source": 21,
											"value": "529"
										},
										{
											"begin": 17733,
											"end": 17922,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 17810,
											"end": 17842,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "723"
										},
										{
											"begin": 17810,
											"end": 17842,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "528"
										},
										{
											"begin": 17810,
											"end": 17842,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 17810,
											"end": 17842,
											"name": "tag",
											"source": 21,
											"value": "723"
										},
										{
											"begin": 17810,
											"end": 17842,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 17851,
											"end": 17916,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "724"
										},
										{
											"begin": 17909,
											"end": 17915,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 17901,
											"end": 17907,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 17895,
											"end": 17899,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 17851,
											"end": 17916,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "527"
										},
										{
											"begin": 17851,
											"end": 17916,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 17851,
											"end": 17916,
											"name": "tag",
											"source": 21,
											"value": "724"
										},
										{
											"begin": 17851,
											"end": 17916,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 17786,
											"end": 17922,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 17733,
											"end": 17922,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 17733,
											"end": 17922,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 17733,
											"end": 17922,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 17928,
											"end": 18114,
											"name": "tag",
											"source": 21,
											"value": "530"
										},
										{
											"begin": 17928,
											"end": 18114,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 17988,
											"end": 18108,
											"name": "tag",
											"source": 21,
											"value": "726"
										},
										{
											"begin": 17988,
											"end": 18108,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 18005,
											"end": 18008,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 17998,
											"end": 18003,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 17995,
											"end": 18009,
											"name": "LT",
											"source": 21
										},
										{
											"begin": 17988,
											"end": 18108,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 17988,
											"end": 18108,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "728"
										},
										{
											"begin": 17988,
											"end": 18108,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 18059,
											"end": 18098,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "729"
										},
										{
											"begin": 18096,
											"end": 18097,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 18089,
											"end": 18094,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 18059,
											"end": 18098,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "529"
										},
										{
											"begin": 18059,
											"end": 18098,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 18059,
											"end": 18098,
											"name": "tag",
											"source": 21,
											"value": "729"
										},
										{
											"begin": 18059,
											"end": 18098,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 18032,
											"end": 18033,
											"name": "PUSH",
											"source": 21,
											"value": "1"
										},
										{
											"begin": 18025,
											"end": 18030,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 18021,
											"end": 18034,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 18012,
											"end": 18034,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 18012,
											"end": 18034,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 17988,
											"end": 18108,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "726"
										},
										{
											"begin": 17988,
											"end": 18108,
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 17988,
											"end": 18108,
											"name": "tag",
											"source": 21,
											"value": "728"
										},
										{
											"begin": 17988,
											"end": 18108,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 17928,
											"end": 18114,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 17928,
											"end": 18114,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 17928,
											"end": 18114,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 18120,
											"end": 18663,
											"name": "tag",
											"source": 21,
											"value": "531"
										},
										{
											"begin": 18120,
											"end": 18663,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 18221,
											"end": 18223,
											"name": "PUSH",
											"source": 21,
											"value": "1F"
										},
										{
											"begin": 18216,
											"end": 18219,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 18213,
											"end": 18224,
											"name": "GT",
											"source": 21
										},
										{
											"begin": 18210,
											"end": 18656,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 18210,
											"end": 18656,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "731"
										},
										{
											"begin": 18210,
											"end": 18656,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 18255,
											"end": 18293,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "732"
										},
										{
											"begin": 18287,
											"end": 18292,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 18255,
											"end": 18293,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "521"
										},
										{
											"begin": 18255,
											"end": 18293,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 18255,
											"end": 18293,
											"name": "tag",
											"source": 21,
											"value": "732"
										},
										{
											"begin": 18255,
											"end": 18293,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 18339,
											"end": 18368,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "733"
										},
										{
											"begin": 18357,
											"end": 18367,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 18339,
											"end": 18368,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "522"
										},
										{
											"begin": 18339,
											"end": 18368,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 18339,
											"end": 18368,
											"name": "tag",
											"source": 21,
											"value": "733"
										},
										{
											"begin": 18339,
											"end": 18368,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 18329,
											"end": 18337,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 18325,
											"end": 18369,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 18522,
											"end": 18524,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 18510,
											"end": 18520,
											"name": "DUP6",
											"source": 21
										},
										{
											"begin": 18507,
											"end": 18525,
											"name": "LT",
											"source": 21
										},
										{
											"begin": 18504,
											"end": 18553,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 18504,
											"end": 18553,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "734"
										},
										{
											"begin": 18504,
											"end": 18553,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 18543,
											"end": 18551,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 18528,
											"end": 18551,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 18528,
											"end": 18551,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 18504,
											"end": 18553,
											"name": "tag",
											"source": 21,
											"value": "734"
										},
										{
											"begin": 18504,
											"end": 18553,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 18566,
											"end": 18646,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "735"
										},
										{
											"begin": 18622,
											"end": 18644,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "736"
										},
										{
											"begin": 18640,
											"end": 18643,
											"name": "DUP6",
											"source": 21
										},
										{
											"begin": 18622,
											"end": 18644,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "522"
										},
										{
											"begin": 18622,
											"end": 18644,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 18622,
											"end": 18644,
											"name": "tag",
											"source": 21,
											"value": "736"
										},
										{
											"begin": 18622,
											"end": 18644,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 18612,
											"end": 18620,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 18608,
											"end": 18645,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 18595,
											"end": 18606,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 18566,
											"end": 18646,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "530"
										},
										{
											"begin": 18566,
											"end": 18646,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 18566,
											"end": 18646,
											"name": "tag",
											"source": 21,
											"value": "735"
										},
										{
											"begin": 18566,
											"end": 18646,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 18225,
											"end": 18656,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 18225,
											"end": 18656,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 18210,
											"end": 18656,
											"name": "tag",
											"source": 21,
											"value": "731"
										},
										{
											"begin": 18210,
											"end": 18656,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 18120,
											"end": 18663,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 18120,
											"end": 18663,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 18120,
											"end": 18663,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 18120,
											"end": 18663,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 18669,
											"end": 18786,
											"name": "tag",
											"source": 21,
											"value": "532"
										},
										{
											"begin": 18669,
											"end": 18786,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 18723,
											"end": 18731,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 18773,
											"end": 18778,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 18767,
											"end": 18771,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 18763,
											"end": 18779,
											"name": "SHR",
											"source": 21
										},
										{
											"begin": 18742,
											"end": 18779,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 18742,
											"end": 18779,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 18669,
											"end": 18786,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 18669,
											"end": 18786,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 18669,
											"end": 18786,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 18669,
											"end": 18786,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 18669,
											"end": 18786,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 18792,
											"end": 18961,
											"name": "tag",
											"source": 21,
											"value": "533"
										},
										{
											"begin": 18792,
											"end": 18961,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 18836,
											"end": 18842,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 18869,
											"end": 18920,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "739"
										},
										{
											"begin": 18917,
											"end": 18918,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 18913,
											"end": 18919,
											"name": "NOT",
											"source": 21
										},
										{
											"begin": 18905,
											"end": 18910,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 18902,
											"end": 18903,
											"name": "PUSH",
											"source": 21,
											"value": "8"
										},
										{
											"begin": 18898,
											"end": 18911,
											"name": "MUL",
											"source": 21
										},
										{
											"begin": 18869,
											"end": 18920,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "532"
										},
										{
											"begin": 18869,
											"end": 18920,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 18869,
											"end": 18920,
											"name": "tag",
											"source": 21,
											"value": "739"
										},
										{
											"begin": 18869,
											"end": 18920,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 18865,
											"end": 18921,
											"name": "NOT",
											"source": 21
										},
										{
											"begin": 18950,
											"end": 18954,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 18944,
											"end": 18948,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 18940,
											"end": 18955,
											"name": "AND",
											"source": 21
										},
										{
											"begin": 18930,
											"end": 18955,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 18930,
											"end": 18955,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 18843,
											"end": 18961,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 18792,
											"end": 18961,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 18792,
											"end": 18961,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 18792,
											"end": 18961,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 18792,
											"end": 18961,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 18792,
											"end": 18961,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 18966,
											"end": 19261,
											"name": "tag",
											"source": 21,
											"value": "534"
										},
										{
											"begin": 18966,
											"end": 19261,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 19042,
											"end": 19046,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 19188,
											"end": 19217,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "741"
										},
										{
											"begin": 19213,
											"end": 19216,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 19207,
											"end": 19211,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 19188,
											"end": 19217,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "533"
										},
										{
											"begin": 19188,
											"end": 19217,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 19188,
											"end": 19217,
											"name": "tag",
											"source": 21,
											"value": "741"
										},
										{
											"begin": 19188,
											"end": 19217,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 19180,
											"end": 19217,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 19180,
											"end": 19217,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 19250,
											"end": 19253,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 19247,
											"end": 19248,
											"name": "PUSH",
											"source": 21,
											"value": "2"
										},
										{
											"begin": 19243,
											"end": 19254,
											"name": "MUL",
											"source": 21
										},
										{
											"begin": 19237,
											"end": 19241,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 19234,
											"end": 19255,
											"name": "OR",
											"source": 21
										},
										{
											"begin": 19226,
											"end": 19255,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 19226,
											"end": 19255,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 18966,
											"end": 19261,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 18966,
											"end": 19261,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 18966,
											"end": 19261,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 18966,
											"end": 19261,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 18966,
											"end": 19261,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 19266,
											"end": 20661,
											"name": "tag",
											"source": 21,
											"value": "392"
										},
										{
											"begin": 19266,
											"end": 20661,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 19383,
											"end": 19420,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "743"
										},
										{
											"begin": 19416,
											"end": 19419,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 19383,
											"end": 19420,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "477"
										},
										{
											"begin": 19383,
											"end": 19420,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 19383,
											"end": 19420,
											"name": "tag",
											"source": 21,
											"value": "743"
										},
										{
											"begin": 19383,
											"end": 19420,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 19485,
											"end": 19503,
											"name": "PUSH",
											"source": 21,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 19477,
											"end": 19483,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 19474,
											"end": 19504,
											"name": "GT",
											"source": 21
										},
										{
											"begin": 19471,
											"end": 19527,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 19471,
											"end": 19527,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "744"
										},
										{
											"begin": 19471,
											"end": 19527,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 19507,
											"end": 19525,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "745"
										},
										{
											"begin": 19507,
											"end": 19525,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "190"
										},
										{
											"begin": 19507,
											"end": 19525,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 19507,
											"end": 19525,
											"name": "tag",
											"source": 21,
											"value": "745"
										},
										{
											"begin": 19507,
											"end": 19525,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 19471,
											"end": 19527,
											"name": "tag",
											"source": 21,
											"value": "744"
										},
										{
											"begin": 19471,
											"end": 19527,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 19551,
											"end": 19589,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "746"
										},
										{
											"begin": 19583,
											"end": 19587,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 19577,
											"end": 19588,
											"name": "SLOAD",
											"source": 21
										},
										{
											"begin": 19551,
											"end": 19589,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "118"
										},
										{
											"begin": 19551,
											"end": 19589,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 19551,
											"end": 19589,
											"name": "tag",
											"source": 21,
											"value": "746"
										},
										{
											"begin": 19551,
											"end": 19589,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 19636,
											"end": 19703,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "747"
										},
										{
											"begin": 19696,
											"end": 19702,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 19688,
											"end": 19694,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 19682,
											"end": 19686,
											"name": "DUP6",
											"source": 21
										},
										{
											"begin": 19636,
											"end": 19703,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "531"
										},
										{
											"begin": 19636,
											"end": 19703,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 19636,
											"end": 19703,
											"name": "tag",
											"source": 21,
											"value": "747"
										},
										{
											"begin": 19636,
											"end": 19703,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 19730,
											"end": 19731,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 19754,
											"end": 19758,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 19741,
											"end": 19758,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 19741,
											"end": 19758,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 19786,
											"end": 19788,
											"name": "PUSH",
											"source": 21,
											"value": "1F"
										},
										{
											"begin": 19778,
											"end": 19784,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 19775,
											"end": 19789,
											"name": "GT",
											"source": 21
										},
										{
											"begin": 19803,
											"end": 19804,
											"name": "PUSH",
											"source": 21,
											"value": "1"
										},
										{
											"begin": 19798,
											"end": 20416,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 19798,
											"end": 20416,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 19798,
											"end": 20416,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "749"
										},
										{
											"begin": 19798,
											"end": 20416,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 20460,
											"end": 20461,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 20477,
											"end": 20483,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 20474,
											"end": 20551,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 20474,
											"end": 20551,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "750"
										},
										{
											"begin": 20474,
											"end": 20551,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 20526,
											"end": 20535,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 20521,
											"end": 20524,
											"name": "DUP8",
											"source": 21
										},
										{
											"begin": 20517,
											"end": 20536,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 20511,
											"end": 20537,
											"name": "MLOAD",
											"source": 21
										},
										{
											"begin": 20502,
											"end": 20537,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 20502,
											"end": 20537,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 20474,
											"end": 20551,
											"name": "tag",
											"source": 21,
											"value": "750"
										},
										{
											"begin": 20474,
											"end": 20551,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 20577,
											"end": 20644,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "751"
										},
										{
											"begin": 20637,
											"end": 20643,
											"name": "DUP6",
											"source": 21
										},
										{
											"begin": 20630,
											"end": 20635,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 20577,
											"end": 20644,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "534"
										},
										{
											"begin": 20577,
											"end": 20644,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 20577,
											"end": 20644,
											"name": "tag",
											"source": 21,
											"value": "751"
										},
										{
											"begin": 20577,
											"end": 20644,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 20571,
											"end": 20575,
											"name": "DUP7",
											"source": 21
										},
										{
											"begin": 20564,
											"end": 20645,
											"name": "SSTORE",
											"source": 21
										},
										{
											"begin": 20433,
											"end": 20655,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 19768,
											"end": 20655,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "748"
										},
										{
											"begin": 19768,
											"end": 20655,
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 19798,
											"end": 20416,
											"name": "tag",
											"source": 21,
											"value": "749"
										},
										{
											"begin": 19798,
											"end": 20416,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 19850,
											"end": 19854,
											"name": "PUSH",
											"source": 21,
											"value": "1F"
										},
										{
											"begin": 19846,
											"end": 19855,
											"name": "NOT",
											"source": 21
										},
										{
											"begin": 19838,
											"end": 19844,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 19834,
											"end": 19856,
											"name": "AND",
											"source": 21
										},
										{
											"begin": 19884,
											"end": 19921,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "752"
										},
										{
											"begin": 19916,
											"end": 19920,
											"name": "DUP7",
											"source": 21
										},
										{
											"begin": 19884,
											"end": 19921,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "521"
										},
										{
											"begin": 19884,
											"end": 19921,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 19884,
											"end": 19921,
											"name": "tag",
											"source": 21,
											"value": "752"
										},
										{
											"begin": 19884,
											"end": 19921,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 19943,
											"end": 19944,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 19957,
											"end": 20165,
											"name": "tag",
											"source": 21,
											"value": "753"
										},
										{
											"begin": 19957,
											"end": 20165,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 19971,
											"end": 19978,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 19968,
											"end": 19969,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 19965,
											"end": 19979,
											"name": "LT",
											"source": 21
										},
										{
											"begin": 19957,
											"end": 20165,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 19957,
											"end": 20165,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "755"
										},
										{
											"begin": 19957,
											"end": 20165,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 20050,
											"end": 20059,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 20045,
											"end": 20048,
											"name": "DUP10",
											"source": 21
										},
										{
											"begin": 20041,
											"end": 20060,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 20035,
											"end": 20061,
											"name": "MLOAD",
											"source": 21
										},
										{
											"begin": 20027,
											"end": 20033,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 20020,
											"end": 20062,
											"name": "SSTORE",
											"source": 21
										},
										{
											"begin": 20101,
											"end": 20102,
											"name": "PUSH",
											"source": 21,
											"value": "1"
										},
										{
											"begin": 20093,
											"end": 20099,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 20089,
											"end": 20103,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 20079,
											"end": 20103,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 20079,
											"end": 20103,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 20148,
											"end": 20150,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 20137,
											"end": 20146,
											"name": "DUP6",
											"source": 21
										},
										{
											"begin": 20133,
											"end": 20151,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 20120,
											"end": 20151,
											"name": "SWAP5",
											"source": 21
										},
										{
											"begin": 20120,
											"end": 20151,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 19994,
											"end": 19998,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 19991,
											"end": 19992,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 19987,
											"end": 19999,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 19982,
											"end": 19999,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 19982,
											"end": 19999,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 19957,
											"end": 20165,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "753"
										},
										{
											"begin": 19957,
											"end": 20165,
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 19957,
											"end": 20165,
											"name": "tag",
											"source": 21,
											"value": "755"
										},
										{
											"begin": 19957,
											"end": 20165,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 20193,
											"end": 20199,
											"name": "DUP7",
											"source": 21
										},
										{
											"begin": 20184,
											"end": 20191,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 20181,
											"end": 20200,
											"name": "LT",
											"source": 21
										},
										{
											"begin": 20178,
											"end": 20357,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 20178,
											"end": 20357,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "756"
										},
										{
											"begin": 20178,
											"end": 20357,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 20251,
											"end": 20260,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 20246,
											"end": 20249,
											"name": "DUP10",
											"source": 21
										},
										{
											"begin": 20242,
											"end": 20261,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 20236,
											"end": 20262,
											"name": "MLOAD",
											"source": 21
										},
										{
											"begin": 20294,
											"end": 20342,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "757"
										},
										{
											"begin": 20336,
											"end": 20340,
											"name": "PUSH",
											"source": 21,
											"value": "1F"
										},
										{
											"begin": 20328,
											"end": 20334,
											"name": "DUP10",
											"source": 21
										},
										{
											"begin": 20324,
											"end": 20341,
											"name": "AND",
											"source": 21
										},
										{
											"begin": 20313,
											"end": 20322,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 20294,
											"end": 20342,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "533"
										},
										{
											"begin": 20294,
											"end": 20342,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 20294,
											"end": 20342,
											"name": "tag",
											"source": 21,
											"value": "757"
										},
										{
											"begin": 20294,
											"end": 20342,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 20286,
											"end": 20292,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 20279,
											"end": 20343,
											"name": "SSTORE",
											"source": 21
										},
										{
											"begin": 20201,
											"end": 20357,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 20178,
											"end": 20357,
											"name": "tag",
											"source": 21,
											"value": "756"
										},
										{
											"begin": 20178,
											"end": 20357,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 20403,
											"end": 20404,
											"name": "PUSH",
											"source": 21,
											"value": "1"
										},
										{
											"begin": 20399,
											"end": 20400,
											"name": "PUSH",
											"source": 21,
											"value": "2"
										},
										{
											"begin": 20391,
											"end": 20397,
											"name": "DUP9",
											"source": 21
										},
										{
											"begin": 20387,
											"end": 20401,
											"name": "MUL",
											"source": 21
										},
										{
											"begin": 20383,
											"end": 20405,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 20377,
											"end": 20381,
											"name": "DUP9",
											"source": 21
										},
										{
											"begin": 20370,
											"end": 20406,
											"name": "SSTORE",
											"source": 21
										},
										{
											"begin": 19805,
											"end": 20416,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 19805,
											"end": 20416,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 19805,
											"end": 20416,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 19768,
											"end": 20655,
											"name": "tag",
											"source": 21,
											"value": "748"
										},
										{
											"begin": 19768,
											"end": 20655,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 19768,
											"end": 20655,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 19358,
											"end": 20661,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 19358,
											"end": 20661,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 19358,
											"end": 20661,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 19266,
											"end": 20661,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 19266,
											"end": 20661,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 19266,
											"end": 20661,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 20667,
											"end": 21212,
											"name": "tag",
											"source": 21,
											"value": "414"
										},
										{
											"begin": 20667,
											"end": 21212,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 20840,
											"end": 20844,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 20878,
											"end": 20881,
											"name": "PUSH",
											"source": 21,
											"value": "80"
										},
										{
											"begin": 20867,
											"end": 20876,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 20863,
											"end": 20882,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 20855,
											"end": 20882,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 20855,
											"end": 20882,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 20892,
											"end": 20963,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "759"
										},
										{
											"begin": 20960,
											"end": 20961,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 20949,
											"end": 20958,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 20945,
											"end": 20962,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 20936,
											"end": 20942,
											"name": "DUP8",
											"source": 21
										},
										{
											"begin": 20892,
											"end": 20963,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "498"
										},
										{
											"begin": 20892,
											"end": 20963,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 20892,
											"end": 20963,
											"name": "tag",
											"source": 21,
											"value": "759"
										},
										{
											"begin": 20892,
											"end": 20963,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 20973,
											"end": 21041,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "760"
										},
										{
											"begin": 21037,
											"end": 21039,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 21026,
											"end": 21035,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 21022,
											"end": 21040,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 21013,
											"end": 21019,
											"name": "DUP7",
											"source": 21
										},
										{
											"begin": 20973,
											"end": 21041,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "496"
										},
										{
											"begin": 20973,
											"end": 21041,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 20973,
											"end": 21041,
											"name": "tag",
											"source": 21,
											"value": "760"
										},
										{
											"begin": 20973,
											"end": 21041,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 21051,
											"end": 21123,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "761"
										},
										{
											"begin": 21119,
											"end": 21121,
											"name": "PUSH",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 21108,
											"end": 21117,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 21104,
											"end": 21122,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 21095,
											"end": 21101,
											"name": "DUP6",
											"source": 21
										},
										{
											"begin": 21051,
											"end": 21123,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "498"
										},
										{
											"begin": 21051,
											"end": 21123,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 21051,
											"end": 21123,
											"name": "tag",
											"source": 21,
											"value": "761"
										},
										{
											"begin": 21051,
											"end": 21123,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 21133,
											"end": 21205,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "762"
										},
										{
											"begin": 21201,
											"end": 21203,
											"name": "PUSH",
											"source": 21,
											"value": "60"
										},
										{
											"begin": 21190,
											"end": 21199,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 21186,
											"end": 21204,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 21177,
											"end": 21183,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 21133,
											"end": 21205,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "498"
										},
										{
											"begin": 21133,
											"end": 21205,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 21133,
											"end": 21205,
											"name": "tag",
											"source": 21,
											"value": "762"
										},
										{
											"begin": 21133,
											"end": 21205,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 20667,
											"end": 21212,
											"name": "SWAP6",
											"source": 21
										},
										{
											"begin": 20667,
											"end": 21212,
											"name": "SWAP5",
											"source": 21
										},
										{
											"begin": 20667,
											"end": 21212,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 20667,
											"end": 21212,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 20667,
											"end": 21212,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 20667,
											"end": 21212,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 20667,
											"end": 21212,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 20667,
											"end": 21212,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 21218,
											"end": 21398,
											"name": "tag",
											"source": 21,
											"value": "421"
										},
										{
											"begin": 21218,
											"end": 21398,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 21266,
											"end": 21343,
											"name": "PUSH",
											"source": 21,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 21263,
											"end": 21264,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 21256,
											"end": 21344,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 21363,
											"end": 21367,
											"name": "PUSH",
											"source": 21,
											"value": "21"
										},
										{
											"begin": 21360,
											"end": 21361,
											"name": "PUSH",
											"source": 21,
											"value": "4"
										},
										{
											"begin": 21353,
											"end": 21368,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 21387,
											"end": 21391,
											"name": "PUSH",
											"source": 21,
											"value": "24"
										},
										{
											"begin": 21384,
											"end": 21385,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 21377,
											"end": 21392,
											"name": "REVERT",
											"source": 21
										},
										{
											"begin": 21404,
											"end": 21584,
											"name": "tag",
											"source": 21,
											"value": "535"
										},
										{
											"begin": 21404,
											"end": 21584,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 21452,
											"end": 21529,
											"name": "PUSH",
											"source": 21,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 21449,
											"end": 21450,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 21442,
											"end": 21530,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 21549,
											"end": 21553,
											"name": "PUSH",
											"source": 21,
											"value": "11"
										},
										{
											"begin": 21546,
											"end": 21547,
											"name": "PUSH",
											"source": 21,
											"value": "4"
										},
										{
											"begin": 21539,
											"end": 21554,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 21573,
											"end": 21577,
											"name": "PUSH",
											"source": 21,
											"value": "24"
										},
										{
											"begin": 21570,
											"end": 21571,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 21563,
											"end": 21578,
											"name": "REVERT",
											"source": 21
										},
										{
											"begin": 21590,
											"end": 21781,
											"name": "tag",
											"source": 21,
											"value": "470"
										},
										{
											"begin": 21590,
											"end": 21781,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 21630,
											"end": 21633,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 21649,
											"end": 21669,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "766"
										},
										{
											"begin": 21667,
											"end": 21668,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 21649,
											"end": 21669,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "489"
										},
										{
											"begin": 21649,
											"end": 21669,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 21649,
											"end": 21669,
											"name": "tag",
											"source": 21,
											"value": "766"
										},
										{
											"begin": 21649,
											"end": 21669,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 21644,
											"end": 21669,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 21644,
											"end": 21669,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 21683,
											"end": 21703,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "767"
										},
										{
											"begin": 21701,
											"end": 21702,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 21683,
											"end": 21703,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "489"
										},
										{
											"begin": 21683,
											"end": 21703,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 21683,
											"end": 21703,
											"name": "tag",
											"source": 21,
											"value": "767"
										},
										{
											"begin": 21683,
											"end": 21703,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 21678,
											"end": 21703,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 21678,
											"end": 21703,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 21726,
											"end": 21727,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 21723,
											"end": 21724,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 21719,
											"end": 21728,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 21712,
											"end": 21728,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 21712,
											"end": 21728,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 21747,
											"end": 21750,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 21744,
											"end": 21745,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 21741,
											"end": 21751,
											"name": "GT",
											"source": 21
										},
										{
											"begin": 21738,
											"end": 21774,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 21738,
											"end": 21774,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "768"
										},
										{
											"begin": 21738,
											"end": 21774,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 21754,
											"end": 21772,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "769"
										},
										{
											"begin": 21754,
											"end": 21772,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "535"
										},
										{
											"begin": 21754,
											"end": 21772,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 21754,
											"end": 21772,
											"name": "tag",
											"source": 21,
											"value": "769"
										},
										{
											"begin": 21754,
											"end": 21772,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 21738,
											"end": 21774,
											"name": "tag",
											"source": 21,
											"value": "768"
										},
										{
											"begin": 21738,
											"end": 21774,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 21590,
											"end": 21781,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 21590,
											"end": 21781,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 21590,
											"end": 21781,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 21590,
											"end": 21781,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 21590,
											"end": 21781,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/MyToken.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"burnFrom(address,uint256)": "79cc6790",
							"decimals()": "313ce567",
							"eip712Domain()": "84b0196e",
							"initialize(address)": "c4d66de8",
							"mint(address,uint256)": "40c10f19",
							"name()": "06fdde03",
							"nonces(address)": "7ecebe00",
							"owner()": "8da5cb5b",
							"pause()": "8456cb59",
							"paused()": "5c975abb",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
							"renounceOwnership()": "715018a6",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"transferOwnership(address)": "f2fde38b",
							"unpause()": "3f4ba83a"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC2612ExpiredSignature(uint256)\":[{\"details\":\"Permit deadline has expired.\"}],\"ERC2612InvalidSigner(address,address)\":[{\"details\":\"Mismatched signature.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`.\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MyToken.sol\":\"MyToken\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9706d43a0124053d9880f6e31a59f31bc0a6a3dc1acd66ce0a16e1111658c5f6\",\"dweb:/ipfs/QmUFmfowzkRwGtDu36cXV9SPTBHJ3n7dG9xQiK5B28jTf2\"]},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609\",\"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0x9a1766b1921bf91b3e61eb53c7a6e70725254befd4bdcbbcd3af40bd9f66856f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://29bf2fa41a172086a665c9738377b93655aa4b1ffda9fe839c8bdf646f185040\",\"dweb:/ipfs/QmeB21qDuo8WPQSrqXJbQmWHKsdeocGNSUWLhCwniVejrt\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"keccak256\":\"0xe74dd150d031e8ecf9755893a2aae02dec954158140424f11c28ff689a48492f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://554e0934aecff6725e10d4aeb2e70ff214384b68782b1ba9f9322a0d16105a2f\",\"dweb:/ipfs/QmVvmHc7xPftEkWvJRNAqv7mXihKLEAVXpiebG7RT5rhMW\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol\":{\"keccak256\":\"0xf31761e4cd0b20c33a04e8cfa21d3b40f0a18dd26f66f97686f87668ab5ba8f3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8be0ae676c129bb8ee94e32f075f5d017b257c09e02f3ed6c830ec5b9ca6e666\",\"dweb:/ipfs/QmeaPYo4t3XaAK8bbxkjTT3bTKQZHUXVadjysSfz5cuUbX\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":{\"keccak256\":\"0x8a97653aeba40e9f0c2e8df1a1379b29b927b6dc3534040c668e71ad9ae89d88\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e529c294c9d634eb68a1e4aeb66eb8381de5a08ccd2c0bfeebd48a6b28fcff7\",\"dweb:/ipfs/QmWCezuxfZb68nM3Hs6XzQNNiW7VJsymU4sajy2DW1CKbp\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]},\"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":{\"keccak256\":\"0x778f4a1546a1c6c726ecc8e2348a2789690fb8f26e12bd9d89537669167b79a4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://851d3dfe724e918ff0a064b206e1ef46b27ab0df2aa2c8af976973a22ef59827\",\"dweb:/ipfs/Qmd4wb7zX8ueYhMVBy5PJjfsANK3Ra3pKPN7qQkNsdwGHn\"]},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://85ad36d5cc7e190e1ee6c94b24659bc3a31396c4c36b6ffa6a509e10661f8007\",\"dweb:/ipfs/QmPFyc4zMh2zo6YWZt25gjm3YdR2hg6wGETaWw256fMmJJ\"]},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"keccak256\":\"0x85462422a22578744581e012e9aa0a391958cb360288b0b63f29bf0431d70327\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2bc529e2b9b28da5d26da451058250d85afcaa3c5083ee273ac68fa6bf956b78\",\"dweb:/ipfs/Qmd3Aq59ztmoVmHigsaR4YjkXWKERVpjfQ4a2PHk7Ke6Rx\"]},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c\",\"dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF\"]},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ceacff44c0fdc81e48e0e0b1db87a2076d3c1fb497341de077bf1da9f6b406c\",\"dweb:/ipfs/QmRUo1muMRAewxrKQ7TkXUtknyRoR57AyEkoPpiuZQ8FzX\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]},\"contracts/MyToken.sol\":{\"keccak256\":\"0x8d9862baacb285a33b609ea56273e19823301d89b5518262b091053e33298b42\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5b212d756dfa4cb7f039b032a6c7283491b598e77b565e2e517062b1b2c797be\",\"dweb:/ipfs/Qma11NagGtuimR7xQHPmdxuXy4QSp8VzUkCvYeJB1ttvpF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							1395
						],
						"Initializable": [
							448
						],
						"OwnableUpgradeable": [
							194
						]
					},
					"id": 195,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "102:24:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
							"file": "../utils/ContextUpgradeable.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 195,
							"sourceUnit": 1396,
							"src": "128:67:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2,
										"name": "ContextUpgradeable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1395,
										"src": "136:18:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 5,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 195,
							"sourceUnit": 449,
							"src": "196:63:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 4,
										"name": "Initializable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 448,
										"src": "204:13:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 7,
										"name": "Initializable",
										"nameLocations": [
											"789:13:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 448,
										"src": "789:13:0"
									},
									"id": 8,
									"nodeType": "InheritanceSpecifier",
									"src": "789:13:0"
								},
								{
									"baseName": {
										"id": 9,
										"name": "ContextUpgradeable",
										"nameLocations": [
											"804:18:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1395,
										"src": "804:18:0"
									},
									"id": 10,
									"nodeType": "InheritanceSpecifier",
									"src": "804:18:0"
								}
							],
							"canonicalName": "OwnableUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 6,
								"nodeType": "StructuredDocumentation",
								"src": "261:487:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 194,
							"linearizedBaseContracts": [
								194,
								1395,
								448
							],
							"name": "OwnableUpgradeable",
							"nameLocation": "767:18:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "OwnableUpgradeable.OwnableStorage",
									"documentation": {
										"id": 11,
										"nodeType": "StructuredDocumentation",
										"src": "829:65:0",
										"text": "@custom:storage-location erc7201:openzeppelin.storage.Ownable"
									},
									"id": 14,
									"members": [
										{
											"constant": false,
											"id": 13,
											"mutability": "mutable",
											"name": "_owner",
											"nameLocation": "939:6:0",
											"nodeType": "VariableDeclaration",
											"scope": 14,
											"src": "931:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 12,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "931:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "OwnableStorage",
									"nameLocation": "906:14:0",
									"nodeType": "StructDefinition",
									"scope": 194,
									"src": "899:53:0",
									"visibility": "public"
								},
								{
									"constant": true,
									"id": 17,
									"mutability": "constant",
									"name": "OwnableStorageLocation",
									"nameLocation": "1094:22:0",
									"nodeType": "VariableDeclaration",
									"scope": 194,
									"src": "1069:116:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 15,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1069:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307839303136643039643732643430666461653266643863656163366236323334633737303632313466643339633163643165363039613035323863313939333030",
										"id": 16,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1119:66:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_65173360639460082030725920392146925864023520599682862633725751242436743107328_by_1",
											"typeString": "int_const 6517...(69 digits omitted)...7328"
										},
										"value": "0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 24,
										"nodeType": "Block",
										"src": "1270:81:0",
										"statements": [
											{
												"AST": {
													"nativeSrc": "1289:56:0",
													"nodeType": "YulBlock",
													"src": "1289:56:0",
													"statements": [
														{
															"nativeSrc": "1303:32:0",
															"nodeType": "YulAssignment",
															"src": "1303:32:0",
															"value": {
																"name": "OwnableStorageLocation",
																"nativeSrc": "1313:22:0",
																"nodeType": "YulIdentifier",
																"src": "1313:22:0"
															},
															"variableNames": [
																{
																	"name": "$.slot",
																	"nativeSrc": "1303:6:0",
																	"nodeType": "YulIdentifier",
																	"src": "1303:6:0"
																}
															]
														}
													]
												},
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 21,
														"isOffset": false,
														"isSlot": true,
														"src": "1303:6:0",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 17,
														"isOffset": false,
														"isSlot": false,
														"src": "1313:22:0",
														"valueSize": 1
													}
												],
												"id": 23,
												"nodeType": "InlineAssembly",
												"src": "1280:65:0"
											}
										]
									},
									"id": 25,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getOwnableStorage",
									"nameLocation": "1201:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 18,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1219:2:0"
									},
									"returnParameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 21,
												"mutability": "mutable",
												"name": "$",
												"nameLocation": "1267:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 25,
												"src": "1244:24:0",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_OwnableStorage_$14_storage_ptr",
													"typeString": "struct OwnableUpgradeable.OwnableStorage"
												},
												"typeName": {
													"id": 20,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 19,
														"name": "OwnableStorage",
														"nameLocations": [
															"1244:14:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 14,
														"src": "1244:14:0"
													},
													"referencedDeclaration": 14,
													"src": "1244:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_OwnableStorage_$14_storage_ptr",
														"typeString": "struct OwnableUpgradeable.OwnableStorage"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1243:26:0"
									},
									"scope": 194,
									"src": "1192:159:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 26,
										"nodeType": "StructuredDocumentation",
										"src": "1357:85:0",
										"text": " @dev The caller account is not authorized to perform an operation."
									},
									"errorSelector": "118cdaa7",
									"id": 30,
									"name": "OwnableUnauthorizedAccount",
									"nameLocation": "1453:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 28,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1488:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "1480:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 27,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1480:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1479:17:0"
									},
									"src": "1447:50:0"
								},
								{
									"documentation": {
										"id": 31,
										"nodeType": "StructuredDocumentation",
										"src": "1503:82:0",
										"text": " @dev The owner is not a valid owner account. (eg. `address(0)`)"
									},
									"errorSelector": "1e4fbdf7",
									"id": 35,
									"name": "OwnableInvalidOwner",
									"nameLocation": "1596:19:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 33,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1624:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 35,
												"src": "1616:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 32,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1616:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1615:15:0"
									},
									"src": "1590:41:0"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 41,
									"name": "OwnershipTransferred",
									"nameLocation": "1643:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 37,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "1680:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 41,
												"src": "1664:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 36,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1664:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 39,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1711:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 41,
												"src": "1695:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 38,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1695:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1663:57:0"
									},
									"src": "1637:84:0"
								},
								{
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "1919:55:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 50,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 44,
															"src": "1954:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 49,
														"name": "__Ownable_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 81,
														"src": "1929:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 51,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1929:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 52,
												"nodeType": "ExpressionStatement",
												"src": "1929:38:0"
											}
										]
									},
									"documentation": {
										"id": 42,
										"nodeType": "StructuredDocumentation",
										"src": "1727:115:0",
										"text": " @dev Initializes the contract setting the address provided by the deployer as the initial owner."
									},
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 47,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 46,
												"name": "onlyInitializing",
												"nameLocations": [
													"1902:16:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "1902:16:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1902:16:0"
										}
									],
									"name": "__Ownable_init",
									"nameLocation": "1856:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 45,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 44,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "1879:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1871:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 43,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1871:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1870:22:0"
									},
									"returnParameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1919:0:0"
									},
									"scope": 194,
									"src": "1847:127:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 80,
										"nodeType": "Block",
										"src": "2062:153:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 66,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 61,
														"name": "initialOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 56,
														"src": "2076:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 64,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2100:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 63,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2092:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 62,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2092:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 65,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2092:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2076:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 75,
												"nodeType": "IfStatement",
												"src": "2072:95:0",
												"trueBody": {
													"id": 74,
													"nodeType": "Block",
													"src": "2104:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 70,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2153:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 69,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2145:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 68,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2145:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 71,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2145:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 67,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 35,
																	"src": "2125:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 72,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2125:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 73,
															"nodeType": "RevertStatement",
															"src": "2118:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 77,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 56,
															"src": "2195:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 76,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 193,
														"src": "2176:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 78,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2176:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 79,
												"nodeType": "ExpressionStatement",
												"src": "2176:32:0"
											}
										]
									},
									"id": 81,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 59,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 58,
												"name": "onlyInitializing",
												"nameLocations": [
													"2045:16:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "2045:16:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2045:16:0"
										}
									],
									"name": "__Ownable_init_unchained",
									"nameLocation": "1989:24:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 57,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 56,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "2022:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 81,
												"src": "2014:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 55,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2014:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2013:22:0"
									},
									"returnParameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2062:0:0"
									},
									"scope": 194,
									"src": "1980:235:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 88,
										"nodeType": "Block",
										"src": "2324:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 84,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 122,
														"src": "2334:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 85,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2334:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 86,
												"nodeType": "ExpressionStatement",
												"src": "2334:13:0"
											},
											{
												"id": 87,
												"nodeType": "PlaceholderStatement",
												"src": "2357:1:0"
											}
										]
									},
									"documentation": {
										"id": 82,
										"nodeType": "StructuredDocumentation",
										"src": "2221:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 89,
									"name": "onlyOwner",
									"nameLocation": "2312:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 83,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2321:2:0"
									},
									"src": "2303:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 104,
										"nodeType": "Block",
										"src": "2496:89:0",
										"statements": [
											{
												"assignments": [
													97
												],
												"declarations": [
													{
														"constant": false,
														"id": 97,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "2529:1:0",
														"nodeType": "VariableDeclaration",
														"scope": 104,
														"src": "2506:24:0",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_OwnableStorage_$14_storage_ptr",
															"typeString": "struct OwnableUpgradeable.OwnableStorage"
														},
														"typeName": {
															"id": 96,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 95,
																"name": "OwnableStorage",
																"nameLocations": [
																	"2506:14:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 14,
																"src": "2506:14:0"
															},
															"referencedDeclaration": 14,
															"src": "2506:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_OwnableStorage_$14_storage_ptr",
																"typeString": "struct OwnableUpgradeable.OwnableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 100,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 98,
														"name": "_getOwnableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 25,
														"src": "2533:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_OwnableStorage_$14_storage_ptr_$",
															"typeString": "function () pure returns (struct OwnableUpgradeable.OwnableStorage storage pointer)"
														}
													},
													"id": 99,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2533:20:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_OwnableStorage_$14_storage_ptr",
														"typeString": "struct OwnableUpgradeable.OwnableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2506:47:0"
											},
											{
												"expression": {
													"expression": {
														"id": 101,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 97,
														"src": "2570:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_OwnableStorage_$14_storage_ptr",
															"typeString": "struct OwnableUpgradeable.OwnableStorage storage pointer"
														}
													},
													"id": 102,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "2572:6:0",
													"memberName": "_owner",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 13,
													"src": "2570:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 94,
												"id": 103,
												"nodeType": "Return",
												"src": "2563:15:0"
											}
										]
									},
									"documentation": {
										"id": 90,
										"nodeType": "StructuredDocumentation",
										"src": "2371:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 105,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "2450:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 91,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2455:2:0"
									},
									"returnParameters": {
										"id": 94,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 93,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 105,
												"src": "2487:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 92,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2487:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2486:9:0"
									},
									"scope": 194,
									"src": "2441:144:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 121,
										"nodeType": "Block",
										"src": "2703:117:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 113,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 109,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 105,
															"src": "2717:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 110,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2717:7:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 111,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1377,
															"src": "2728:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 112,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2728:12:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2717:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 120,
												"nodeType": "IfStatement",
												"src": "2713:101:0",
												"trueBody": {
													"id": 119,
													"nodeType": "Block",
													"src": "2742:72:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 115,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1377,
																			"src": "2790:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 116,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2790:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 114,
																	"name": "OwnableUnauthorizedAccount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 30,
																	"src": "2763:26:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 117,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2763:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 118,
															"nodeType": "RevertStatement",
															"src": "2756:47:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 106,
										"nodeType": "StructuredDocumentation",
										"src": "2591:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 122,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "2667:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 107,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2678:2:0"
									},
									"returnParameters": {
										"id": 108,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2703:0:0"
									},
									"scope": 194,
									"src": "2658:162:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 135,
										"nodeType": "Block",
										"src": "3209:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 131,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3246:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 130,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3238:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 129,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3238:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 132,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3238:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 128,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 193,
														"src": "3219:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 133,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3219:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 134,
												"nodeType": "ExpressionStatement",
												"src": "3219:30:0"
											}
										]
									},
									"documentation": {
										"id": 123,
										"nodeType": "StructuredDocumentation",
										"src": "2826:324:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 136,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 126,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 125,
												"name": "onlyOwner",
												"nameLocations": [
													"3199:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 89,
												"src": "3199:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "3199:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "3164:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 124,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3181:2:0"
									},
									"returnParameters": {
										"id": 127,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3209:0:0"
									},
									"scope": 194,
									"src": "3155:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 163,
										"nodeType": "Block",
										"src": "3475:145:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 149,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 144,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 139,
														"src": "3489:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 147,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3509:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 146,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3501:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 145,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "3501:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 148,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3501:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3489:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 158,
												"nodeType": "IfStatement",
												"src": "3485:91:0",
												"trueBody": {
													"id": 157,
													"nodeType": "Block",
													"src": "3513:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 153,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3562:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 152,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3554:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 151,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "3554:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 154,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3554:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 150,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 35,
																	"src": "3534:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 155,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3534:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 156,
															"nodeType": "RevertStatement",
															"src": "3527:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 160,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 139,
															"src": "3604:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 159,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 193,
														"src": "3585:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 161,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3585:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 162,
												"nodeType": "ExpressionStatement",
												"src": "3585:28:0"
											}
										]
									},
									"documentation": {
										"id": 137,
										"nodeType": "StructuredDocumentation",
										"src": "3262:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 164,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 142,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 141,
												"name": "onlyOwner",
												"nameLocations": [
													"3465:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 89,
												"src": "3465:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "3465:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "3414:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 140,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 139,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "3440:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 164,
												"src": "3432:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 138,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3432:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3431:18:0"
									},
									"returnParameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3475:0:0"
									},
									"scope": 194,
									"src": "3405:215:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 192,
										"nodeType": "Block",
										"src": "3837:185:0",
										"statements": [
											{
												"assignments": [
													172
												],
												"declarations": [
													{
														"constant": false,
														"id": 172,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "3870:1:0",
														"nodeType": "VariableDeclaration",
														"scope": 192,
														"src": "3847:24:0",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_OwnableStorage_$14_storage_ptr",
															"typeString": "struct OwnableUpgradeable.OwnableStorage"
														},
														"typeName": {
															"id": 171,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 170,
																"name": "OwnableStorage",
																"nameLocations": [
																	"3847:14:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 14,
																"src": "3847:14:0"
															},
															"referencedDeclaration": 14,
															"src": "3847:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_OwnableStorage_$14_storage_ptr",
																"typeString": "struct OwnableUpgradeable.OwnableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 175,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 173,
														"name": "_getOwnableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 25,
														"src": "3874:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_OwnableStorage_$14_storage_ptr_$",
															"typeString": "function () pure returns (struct OwnableUpgradeable.OwnableStorage storage pointer)"
														}
													},
													"id": 174,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3874:20:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_OwnableStorage_$14_storage_ptr",
														"typeString": "struct OwnableUpgradeable.OwnableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3847:47:0"
											},
											{
												"assignments": [
													177
												],
												"declarations": [
													{
														"constant": false,
														"id": 177,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "3912:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 192,
														"src": "3904:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 176,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3904:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 180,
												"initialValue": {
													"expression": {
														"id": 178,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 172,
														"src": "3923:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_OwnableStorage_$14_storage_ptr",
															"typeString": "struct OwnableUpgradeable.OwnableStorage storage pointer"
														}
													},
													"id": 179,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "3925:6:0",
													"memberName": "_owner",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 13,
													"src": "3923:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3904:27:0"
											},
											{
												"expression": {
													"id": 185,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 181,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 172,
															"src": "3941:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_OwnableStorage_$14_storage_ptr",
																"typeString": "struct OwnableUpgradeable.OwnableStorage storage pointer"
															}
														},
														"id": 183,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "3943:6:0",
														"memberName": "_owner",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 13,
														"src": "3941:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 184,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 167,
														"src": "3952:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3941:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 186,
												"nodeType": "ExpressionStatement",
												"src": "3941:19:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 188,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 177,
															"src": "3996:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 189,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 167,
															"src": "4006:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 187,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 41,
														"src": "3975:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 190,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3975:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 191,
												"nodeType": "EmitStatement",
												"src": "3970:45:0"
											}
										]
									},
									"documentation": {
										"id": 165,
										"nodeType": "StructuredDocumentation",
										"src": "3626:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 193,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "3783:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 168,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 167,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "3810:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 193,
												"src": "3802:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 166,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3802:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3801:18:0"
									},
									"returnParameters": {
										"id": 169,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3837:0:0"
									},
									"scope": 194,
									"src": "3774:248:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 195,
							"src": "749:3275:0",
							"usedErrors": [
								30,
								35,
								211,
								214
							],
							"usedEvents": [
								41,
								219
							]
						}
					],
					"src": "102:3923:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
					"exportedSymbols": {
						"Initializable": [
							448
						]
					},
					"id": 449,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 196,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "113:24:1"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Initializable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 197,
								"nodeType": "StructuredDocumentation",
								"src": "139:2209:1",
								"text": " @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="
							},
							"fullyImplemented": true,
							"id": 448,
							"linearizedBaseContracts": [
								448
							],
							"name": "Initializable",
							"nameLocation": "2367:13:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Initializable.InitializableStorage",
									"documentation": {
										"id": 198,
										"nodeType": "StructuredDocumentation",
										"src": "2387:293:1",
										"text": " @dev Storage of the initializable contract.\n It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n when using with upgradeable contracts.\n @custom:storage-location erc7201:openzeppelin.storage.Initializable"
									},
									"id": 205,
									"members": [
										{
											"constant": false,
											"id": 201,
											"mutability": "mutable",
											"name": "_initialized",
											"nameLocation": "2820:12:1",
											"nodeType": "VariableDeclaration",
											"scope": 205,
											"src": "2813:19:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 200,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "2813:6:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 204,
											"mutability": "mutable",
											"name": "_initializing",
											"nameLocation": "2955:13:1",
											"nodeType": "VariableDeclaration",
											"scope": 205,
											"src": "2950:18:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 203,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "2950:4:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "InitializableStorage",
									"nameLocation": "2692:20:1",
									"nodeType": "StructDefinition",
									"scope": 448,
									"src": "2685:290:1",
									"visibility": "public"
								},
								{
									"constant": true,
									"id": 208,
									"mutability": "constant",
									"name": "INITIALIZABLE_STORAGE",
									"nameLocation": "3123:21:1",
									"nodeType": "VariableDeclaration",
									"scope": 448,
									"src": "3098:115:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 206,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "3098:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307866306335376531363834306466303430663135303838646332663831666533393163333932336265633733653233613936363265666339633232396336613030",
										"id": 207,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "3147:66:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_108904022758810753673719992590105913556127789646572562039383141376366747609600_by_1",
											"typeString": "int_const 1089...(70 digits omitted)...9600"
										},
										"value": "0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00"
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 209,
										"nodeType": "StructuredDocumentation",
										"src": "3220:60:1",
										"text": " @dev The contract is already initialized."
									},
									"errorSelector": "f92ee8a9",
									"id": 211,
									"name": "InvalidInitialization",
									"nameLocation": "3291:21:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 210,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3312:2:1"
									},
									"src": "3285:30:1"
								},
								{
									"documentation": {
										"id": 212,
										"nodeType": "StructuredDocumentation",
										"src": "3321:57:1",
										"text": " @dev The contract is not initializing."
									},
									"errorSelector": "d7e6bcf8",
									"id": 214,
									"name": "NotInitializing",
									"nameLocation": "3389:15:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 213,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3404:2:1"
									},
									"src": "3383:24:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 215,
										"nodeType": "StructuredDocumentation",
										"src": "3413:90:1",
										"text": " @dev Triggered when the contract has been initialized or reinitialized."
									},
									"eventSelector": "c7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2",
									"id": 219,
									"name": "Initialized",
									"nameLocation": "3514:11:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 217,
												"indexed": false,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "3533:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "3526:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 216,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "3526:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3525:16:1"
									},
									"src": "3508:34:1"
								},
								{
									"body": {
										"id": 301,
										"nodeType": "Block",
										"src": "4092:1081:1",
										"statements": [
											{
												"assignments": [
													224
												],
												"declarations": [
													{
														"constant": false,
														"id": 224,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "4187:1:1",
														"nodeType": "VariableDeclaration",
														"scope": 301,
														"src": "4158:30:1",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage"
														},
														"typeName": {
															"id": 223,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 222,
																"name": "InitializableStorage",
																"nameLocations": [
																	"4158:20:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 205,
																"src": "4158:20:1"
															},
															"referencedDeclaration": 205,
															"src": "4158:20:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 227,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 225,
														"name": "_getInitializableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 447,
														"src": "4191:24:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$205_storage_ptr_$",
															"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
														}
													},
													"id": 226,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4191:26:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4158:59:1"
											},
											{
												"assignments": [
													229
												],
												"declarations": [
													{
														"constant": false,
														"id": 229,
														"mutability": "mutable",
														"name": "isTopLevelCall",
														"nameLocation": "4284:14:1",
														"nodeType": "VariableDeclaration",
														"scope": 301,
														"src": "4279:19:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 228,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4279:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 233,
												"initialValue": {
													"id": 232,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "4301:16:1",
													"subExpression": {
														"expression": {
															"id": 230,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 224,
															"src": "4302:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 231,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4304:13:1",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 204,
														"src": "4302:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4279:38:1"
											},
											{
												"assignments": [
													235
												],
												"declarations": [
													{
														"constant": false,
														"id": 235,
														"mutability": "mutable",
														"name": "initialized",
														"nameLocation": "4334:11:1",
														"nodeType": "VariableDeclaration",
														"scope": 301,
														"src": "4327:18:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"typeName": {
															"id": 234,
															"name": "uint64",
															"nodeType": "ElementaryTypeName",
															"src": "4327:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 238,
												"initialValue": {
													"expression": {
														"id": 236,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 224,
														"src": "4348:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 237,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "4350:12:1",
													"memberName": "_initialized",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 201,
													"src": "4348:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4327:35:1"
											},
											{
												"assignments": [
													240
												],
												"declarations": [
													{
														"constant": false,
														"id": 240,
														"mutability": "mutable",
														"name": "initialSetup",
														"nameLocation": "4711:12:1",
														"nodeType": "VariableDeclaration",
														"scope": 301,
														"src": "4706:17:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 239,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4706:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 246,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 245,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"id": 243,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 241,
															"name": "initialized",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 235,
															"src": "4726:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 242,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4741:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "4726:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 244,
														"name": "isTopLevelCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 229,
														"src": "4746:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4726:34:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4706:54:1"
											},
											{
												"assignments": [
													248
												],
												"declarations": [
													{
														"constant": false,
														"id": 248,
														"mutability": "mutable",
														"name": "construction",
														"nameLocation": "4775:12:1",
														"nodeType": "VariableDeclaration",
														"scope": 301,
														"src": "4770:17:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 247,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4770:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 261,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 260,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"id": 251,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 249,
															"name": "initialized",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 235,
															"src": "4790:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "31",
															"id": 250,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4805:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "4790:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 259,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 254,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "4818:4:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Initializable_$448",
																				"typeString": "contract Initializable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Initializable_$448",
																				"typeString": "contract Initializable"
																			}
																		],
																		"id": 253,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4810:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 252,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4810:7:1",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 255,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4810:13:1",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 256,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4824:4:1",
																"memberName": "code",
																"nodeType": "MemberAccess",
																"src": "4810:18:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 257,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4829:6:1",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "4810:25:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 258,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4839:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "4810:30:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4790:50:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4770:70:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 266,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 263,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "4855:13:1",
														"subExpression": {
															"id": 262,
															"name": "initialSetup",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 240,
															"src": "4856:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 265,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "4872:13:1",
														"subExpression": {
															"id": 264,
															"name": "construction",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 248,
															"src": "4873:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4855:30:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 271,
												"nodeType": "IfStatement",
												"src": "4851:91:1",
												"trueBody": {
													"id": 270,
													"nodeType": "Block",
													"src": "4887:55:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 267,
																	"name": "InvalidInitialization",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 211,
																	"src": "4908:21:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 268,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4908:23:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 269,
															"nodeType": "RevertStatement",
															"src": "4901:30:1"
														}
													]
												}
											},
											{
												"expression": {
													"id": 276,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 272,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 224,
															"src": "4951:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 274,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "4953:12:1",
														"memberName": "_initialized",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 201,
														"src": "4951:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 275,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4968:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "4951:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"id": 277,
												"nodeType": "ExpressionStatement",
												"src": "4951:18:1"
											},
											{
												"condition": {
													"id": 278,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 229,
													"src": "4983:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 286,
												"nodeType": "IfStatement",
												"src": "4979:67:1",
												"trueBody": {
													"id": 285,
													"nodeType": "Block",
													"src": "4999:47:1",
													"statements": [
														{
															"expression": {
																"id": 283,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 279,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 224,
																		"src": "5013:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																			"typeString": "struct Initializable.InitializableStorage storage pointer"
																		}
																	},
																	"id": 281,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "5015:13:1",
																	"memberName": "_initializing",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 204,
																	"src": "5013:15:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 282,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5031:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "5013:22:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 284,
															"nodeType": "ExpressionStatement",
															"src": "5013:22:1"
														}
													]
												}
											},
											{
												"id": 287,
												"nodeType": "PlaceholderStatement",
												"src": "5055:1:1"
											},
											{
												"condition": {
													"id": 288,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 229,
													"src": "5070:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 300,
												"nodeType": "IfStatement",
												"src": "5066:101:1",
												"trueBody": {
													"id": 299,
													"nodeType": "Block",
													"src": "5086:81:1",
													"statements": [
														{
															"expression": {
																"id": 293,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 289,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 224,
																		"src": "5100:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																			"typeString": "struct Initializable.InitializableStorage storage pointer"
																		}
																	},
																	"id": 291,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "5102:13:1",
																	"memberName": "_initializing",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 204,
																	"src": "5100:15:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 292,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5118:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "5100:23:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 294,
															"nodeType": "ExpressionStatement",
															"src": "5100:23:1"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"hexValue": "31",
																		"id": 296,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5154:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		}
																	],
																	"id": 295,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 219,
																	"src": "5142:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint64_$returns$__$",
																		"typeString": "function (uint64)"
																	}
																},
																"id": 297,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5142:14:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 298,
															"nodeType": "EmitStatement",
															"src": "5137:19:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 220,
										"nodeType": "StructuredDocumentation",
										"src": "3548:516:1",
										"text": " @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n production.\n Emits an {Initialized} event."
									},
									"id": 302,
									"name": "initializer",
									"nameLocation": "4078:11:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 221,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4089:2:1"
									},
									"src": "4069:1104:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 348,
										"nodeType": "Block",
										"src": "6291:392:1",
										"statements": [
											{
												"assignments": [
													309
												],
												"declarations": [
													{
														"constant": false,
														"id": 309,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "6386:1:1",
														"nodeType": "VariableDeclaration",
														"scope": 348,
														"src": "6357:30:1",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage"
														},
														"typeName": {
															"id": 308,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 307,
																"name": "InitializableStorage",
																"nameLocations": [
																	"6357:20:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 205,
																"src": "6357:20:1"
															},
															"referencedDeclaration": 205,
															"src": "6357:20:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 312,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 310,
														"name": "_getInitializableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 447,
														"src": "6390:24:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$205_storage_ptr_$",
															"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
														}
													},
													"id": 311,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6390:26:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6357:59:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 319,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 313,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 309,
															"src": "6431:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 314,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6433:13:1",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 204,
														"src": "6431:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"id": 318,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 315,
																"name": "$",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 309,
																"src": "6450:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																	"typeString": "struct Initializable.InitializableStorage storage pointer"
																}
															},
															"id": 316,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "6452:12:1",
															"memberName": "_initialized",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 201,
															"src": "6450:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">=",
														"rightExpression": {
															"id": 317,
															"name": "version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 305,
															"src": "6468:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"src": "6450:25:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "6431:44:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 324,
												"nodeType": "IfStatement",
												"src": "6427:105:1",
												"trueBody": {
													"id": 323,
													"nodeType": "Block",
													"src": "6477:55:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 320,
																	"name": "InvalidInitialization",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 211,
																	"src": "6498:21:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 321,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6498:23:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 322,
															"nodeType": "RevertStatement",
															"src": "6491:30:1"
														}
													]
												}
											},
											{
												"expression": {
													"id": 329,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 325,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 309,
															"src": "6541:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 327,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6543:12:1",
														"memberName": "_initialized",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 201,
														"src": "6541:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 328,
														"name": "version",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 305,
														"src": "6558:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"src": "6541:24:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"id": 330,
												"nodeType": "ExpressionStatement",
												"src": "6541:24:1"
											},
											{
												"expression": {
													"id": 335,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 331,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 309,
															"src": "6575:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 333,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6577:13:1",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 204,
														"src": "6575:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 334,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6593:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "6575:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 336,
												"nodeType": "ExpressionStatement",
												"src": "6575:22:1"
											},
											{
												"id": 337,
												"nodeType": "PlaceholderStatement",
												"src": "6607:1:1"
											},
											{
												"expression": {
													"id": 342,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 338,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 309,
															"src": "6618:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 340,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6620:13:1",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 204,
														"src": "6618:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 341,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6636:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "6618:23:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 343,
												"nodeType": "ExpressionStatement",
												"src": "6618:23:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 345,
															"name": "version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 305,
															"src": "6668:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														],
														"id": 344,
														"name": "Initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 219,
														"src": "6656:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint64_$returns$__$",
															"typeString": "function (uint64)"
														}
													},
													"id": 346,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6656:20:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 347,
												"nodeType": "EmitStatement",
												"src": "6651:25:1"
											}
										]
									},
									"documentation": {
										"id": 303,
										"nodeType": "StructuredDocumentation",
										"src": "5179:1068:1",
										"text": " @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n Emits an {Initialized} event."
									},
									"id": 349,
									"name": "reinitializer",
									"nameLocation": "6261:13:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 306,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 305,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "6282:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "6275:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 304,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "6275:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6274:16:1"
									},
									"src": "6252:431:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 356,
										"nodeType": "Block",
										"src": "6921:48:1",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 352,
														"name": "_checkInitializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 370,
														"src": "6931:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 353,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6931:20:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 354,
												"nodeType": "ExpressionStatement",
												"src": "6931:20:1"
											},
											{
												"id": 355,
												"nodeType": "PlaceholderStatement",
												"src": "6961:1:1"
											}
										]
									},
									"documentation": {
										"id": 350,
										"nodeType": "StructuredDocumentation",
										"src": "6689:199:1",
										"text": " @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."
									},
									"id": 357,
									"name": "onlyInitializing",
									"nameLocation": "6902:16:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 351,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6918:2:1"
									},
									"src": "6893:76:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 369,
										"nodeType": "Block",
										"src": "7136:89:1",
										"statements": [
											{
												"condition": {
													"id": 363,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "7150:18:1",
													"subExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 361,
															"name": "_isInitializing",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 438,
															"src": "7151:15:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																"typeString": "function () view returns (bool)"
															}
														},
														"id": 362,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7151:17:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 368,
												"nodeType": "IfStatement",
												"src": "7146:73:1",
												"trueBody": {
													"id": 367,
													"nodeType": "Block",
													"src": "7170:49:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 364,
																	"name": "NotInitializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 214,
																	"src": "7191:15:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 365,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7191:17:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 366,
															"nodeType": "RevertStatement",
															"src": "7184:24:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 358,
										"nodeType": "StructuredDocumentation",
										"src": "6975:104:1",
										"text": " @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}."
									},
									"id": 370,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkInitializing",
									"nameLocation": "7093:18:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 359,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7111:2:1"
									},
									"returnParameters": {
										"id": 360,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7136:0:1"
									},
									"scope": 448,
									"src": "7084:141:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 415,
										"nodeType": "Block",
										"src": "7760:373:1",
										"statements": [
											{
												"assignments": [
													376
												],
												"declarations": [
													{
														"constant": false,
														"id": 376,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "7855:1:1",
														"nodeType": "VariableDeclaration",
														"scope": 415,
														"src": "7826:30:1",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage"
														},
														"typeName": {
															"id": 375,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 374,
																"name": "InitializableStorage",
																"nameLocations": [
																	"7826:20:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 205,
																"src": "7826:20:1"
															},
															"referencedDeclaration": 205,
															"src": "7826:20:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 379,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 377,
														"name": "_getInitializableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 447,
														"src": "7859:24:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$205_storage_ptr_$",
															"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
														}
													},
													"id": 378,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7859:26:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7826:59:1"
											},
											{
												"condition": {
													"expression": {
														"id": 380,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 376,
														"src": "7900:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 381,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "7902:13:1",
													"memberName": "_initializing",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 204,
													"src": "7900:15:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 386,
												"nodeType": "IfStatement",
												"src": "7896:76:1",
												"trueBody": {
													"id": 385,
													"nodeType": "Block",
													"src": "7917:55:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 382,
																	"name": "InvalidInitialization",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 211,
																	"src": "7938:21:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 383,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7938:23:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 384,
															"nodeType": "RevertStatement",
															"src": "7931:30:1"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													},
													"id": 394,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 387,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 376,
															"src": "7985:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 388,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7987:12:1",
														"memberName": "_initialized",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 201,
														"src": "7985:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 391,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8008:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 390,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "8008:6:1",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	}
																],
																"id": 389,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "8003:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 392,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8003:12:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint64",
																"typeString": "type(uint64)"
															}
														},
														"id": 393,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "8016:3:1",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "8003:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"src": "7985:34:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 414,
												"nodeType": "IfStatement",
												"src": "7981:146:1",
												"trueBody": {
													"id": 413,
													"nodeType": "Block",
													"src": "8021:106:1",
													"statements": [
														{
															"expression": {
																"id": 403,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 395,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 376,
																		"src": "8035:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																			"typeString": "struct Initializable.InitializableStorage storage pointer"
																		}
																	},
																	"id": 397,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "8037:12:1",
																	"memberName": "_initialized",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 201,
																	"src": "8035:14:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"arguments": [
																			{
																				"id": 400,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "8057:6:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint64_$",
																					"typeString": "type(uint64)"
																				},
																				"typeName": {
																					"id": 399,
																					"name": "uint64",
																					"nodeType": "ElementaryTypeName",
																					"src": "8057:6:1",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_type$_t_uint64_$",
																					"typeString": "type(uint64)"
																				}
																			],
																			"id": 398,
																			"name": "type",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967269,
																			"src": "8052:4:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 401,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8052:12:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_meta_type_t_uint64",
																			"typeString": "type(uint64)"
																		}
																	},
																	"id": 402,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "8065:3:1",
																	"memberName": "max",
																	"nodeType": "MemberAccess",
																	"src": "8052:16:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"src": "8035:33:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"id": 404,
															"nodeType": "ExpressionStatement",
															"src": "8035:33:1"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 408,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "8104:6:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint64_$",
																						"typeString": "type(uint64)"
																					},
																					"typeName": {
																						"id": 407,
																						"name": "uint64",
																						"nodeType": "ElementaryTypeName",
																						"src": "8104:6:1",
																						"typeDescriptions": {}
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_type$_t_uint64_$",
																						"typeString": "type(uint64)"
																					}
																				],
																				"id": 406,
																				"name": "type",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967269,
																				"src": "8099:4:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 409,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8099:12:1",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_meta_type_t_uint64",
																				"typeString": "type(uint64)"
																			}
																		},
																		"id": 410,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "8112:3:1",
																		"memberName": "max",
																		"nodeType": "MemberAccess",
																		"src": "8099:16:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint64",
																			"typeString": "uint64"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint64",
																			"typeString": "uint64"
																		}
																	],
																	"id": 405,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 219,
																	"src": "8087:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint64_$returns$__$",
																		"typeString": "function (uint64)"
																	}
																},
																"id": 411,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8087:29:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 412,
															"nodeType": "EmitStatement",
															"src": "8082:34:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 371,
										"nodeType": "StructuredDocumentation",
										"src": "7231:475:1",
										"text": " @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."
									},
									"id": 416,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_disableInitializers",
									"nameLocation": "7720:20:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 372,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7740:2:1"
									},
									"returnParameters": {
										"id": 373,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7760:0:1"
									},
									"scope": 448,
									"src": "7711:422:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 426,
										"nodeType": "Block",
										"src": "8308:63:1",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 422,
															"name": "_getInitializableStorage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 447,
															"src": "8325:24:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$205_storage_ptr_$",
																"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
															}
														},
														"id": 423,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8325:26:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 424,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "8352:12:1",
													"memberName": "_initialized",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 201,
													"src": "8325:39:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"functionReturnParameters": 421,
												"id": 425,
												"nodeType": "Return",
												"src": "8318:46:1"
											}
										]
									},
									"documentation": {
										"id": 417,
										"nodeType": "StructuredDocumentation",
										"src": "8139:99:1",
										"text": " @dev Returns the highest version that has been initialized. See {reinitializer}."
									},
									"id": 427,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getInitializedVersion",
									"nameLocation": "8252:22:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 418,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8274:2:1"
									},
									"returnParameters": {
										"id": 421,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 420,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 427,
												"src": "8300:6:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 419,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "8300:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8299:8:1"
									},
									"scope": 448,
									"src": "8243:128:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 437,
										"nodeType": "Block",
										"src": "8543:64:1",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 433,
															"name": "_getInitializableStorage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 447,
															"src": "8560:24:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$205_storage_ptr_$",
																"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
															}
														},
														"id": 434,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8560:26:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 435,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "8587:13:1",
													"memberName": "_initializing",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 204,
													"src": "8560:40:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 432,
												"id": 436,
												"nodeType": "Return",
												"src": "8553:47:1"
											}
										]
									},
									"documentation": {
										"id": 428,
										"nodeType": "StructuredDocumentation",
										"src": "8377:105:1",
										"text": " @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."
									},
									"id": 438,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isInitializing",
									"nameLocation": "8496:15:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 429,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8511:2:1"
									},
									"returnParameters": {
										"id": 432,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 431,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 438,
												"src": "8537:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 430,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8537:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8536:6:1"
									},
									"scope": 448,
									"src": "8487:120:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 446,
										"nodeType": "Block",
										"src": "8827:80:1",
										"statements": [
											{
												"AST": {
													"nativeSrc": "8846:55:1",
													"nodeType": "YulBlock",
													"src": "8846:55:1",
													"statements": [
														{
															"nativeSrc": "8860:31:1",
															"nodeType": "YulAssignment",
															"src": "8860:31:1",
															"value": {
																"name": "INITIALIZABLE_STORAGE",
																"nativeSrc": "8870:21:1",
																"nodeType": "YulIdentifier",
																"src": "8870:21:1"
															},
															"variableNames": [
																{
																	"name": "$.slot",
																	"nativeSrc": "8860:6:1",
																	"nodeType": "YulIdentifier",
																	"src": "8860:6:1"
																}
															]
														}
													]
												},
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 443,
														"isOffset": false,
														"isSlot": true,
														"src": "8860:6:1",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 208,
														"isOffset": false,
														"isSlot": false,
														"src": "8870:21:1",
														"valueSize": 1
													}
												],
												"id": 445,
												"nodeType": "InlineAssembly",
												"src": "8837:64:1"
											}
										]
									},
									"documentation": {
										"id": 439,
										"nodeType": "StructuredDocumentation",
										"src": "8613:67:1",
										"text": " @dev Returns a pointer to the storage namespace."
									},
									"id": 447,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getInitializableStorage",
									"nameLocation": "8746:24:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 440,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8770:2:1"
									},
									"returnParameters": {
										"id": 444,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 443,
												"mutability": "mutable",
												"name": "$",
												"nameLocation": "8824:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 447,
												"src": "8795:30:1",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
													"typeString": "struct Initializable.InitializableStorage"
												},
												"typeName": {
													"id": 442,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 441,
														"name": "InitializableStorage",
														"nameLocations": [
															"8795:20:1"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 205,
														"src": "8795:20:1"
													},
													"referencedDeclaration": 205,
													"src": "8795:20:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8794:32:1"
									},
									"scope": 448,
									"src": "8737:170:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 449,
							"src": "2349:6560:1",
							"usedErrors": [
								211,
								214
							],
							"usedEvents": [
								219
							]
						}
					],
					"src": "113:8797:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							1395
						],
						"ERC20Upgradeable": [
							1065
						],
						"IERC20": [
							2266
						],
						"IERC20Errors": [
							2093
						],
						"IERC20Metadata": [
							2292
						],
						"Initializable": [
							448
						]
					},
					"id": 1066,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 450,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "105:24:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 452,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1066,
							"sourceUnit": 2267,
							"src": "131:70:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 451,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2266,
										"src": "139:6:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"id": 454,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1066,
							"sourceUnit": 2293,
							"src": "202:97:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 453,
										"name": "IERC20Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2292,
										"src": "210:14:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
							"file": "../../utils/ContextUpgradeable.sol",
							"id": 456,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1066,
							"sourceUnit": 1396,
							"src": "300:70:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 455,
										"name": "ContextUpgradeable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1395,
										"src": "308:18:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
							"file": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
							"id": 458,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1066,
							"sourceUnit": 2189,
							"src": "371:83:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 457,
										"name": "IERC20Errors",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2093,
										"src": "379:12:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../../proxy/utils/Initializable.sol",
							"id": 460,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1066,
							"sourceUnit": 449,
							"src": "455:66:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 459,
										"name": "Initializable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 448,
										"src": "463:13:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 462,
										"name": "Initializable",
										"nameLocations": [
											"1614:13:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 448,
										"src": "1614:13:2"
									},
									"id": 463,
									"nodeType": "InheritanceSpecifier",
									"src": "1614:13:2"
								},
								{
									"baseName": {
										"id": 464,
										"name": "ContextUpgradeable",
										"nameLocations": [
											"1629:18:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1395,
										"src": "1629:18:2"
									},
									"id": 465,
									"nodeType": "InheritanceSpecifier",
									"src": "1629:18:2"
								},
								{
									"baseName": {
										"id": 466,
										"name": "IERC20",
										"nameLocations": [
											"1649:6:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2266,
										"src": "1649:6:2"
									},
									"id": 467,
									"nodeType": "InheritanceSpecifier",
									"src": "1649:6:2"
								},
								{
									"baseName": {
										"id": 468,
										"name": "IERC20Metadata",
										"nameLocations": [
											"1657:14:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2292,
										"src": "1657:14:2"
									},
									"id": 469,
									"nodeType": "InheritanceSpecifier",
									"src": "1657:14:2"
								},
								{
									"baseName": {
										"id": 470,
										"name": "IERC20Errors",
										"nameLocations": [
											"1673:12:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2093,
										"src": "1673:12:2"
									},
									"id": 471,
									"nodeType": "InheritanceSpecifier",
									"src": "1673:12:2"
								}
							],
							"canonicalName": "ERC20Upgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 461,
								"nodeType": "StructuredDocumentation",
								"src": "523:1052:2",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification."
							},
							"fullyImplemented": true,
							"id": 1065,
							"linearizedBaseContracts": [
								1065,
								2093,
								2292,
								2266,
								1395,
								448
							],
							"name": "ERC20Upgradeable",
							"nameLocation": "1594:16:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "ERC20Upgradeable.ERC20Storage",
									"documentation": {
										"id": 472,
										"nodeType": "StructuredDocumentation",
										"src": "1692:63:2",
										"text": "@custom:storage-location erc7201:openzeppelin.storage.ERC20"
									},
									"id": 489,
									"members": [
										{
											"constant": false,
											"id": 476,
											"mutability": "mutable",
											"name": "_balances",
											"nameLocation": "1826:9:2",
											"nodeType": "VariableDeclaration",
											"scope": 489,
											"src": "1790:45:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"typeName": {
												"id": 475,
												"keyName": "account",
												"keyNameLocation": "1806:7:2",
												"keyType": {
													"id": 473,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1798:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "Mapping",
												"src": "1790:35:2",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
													"typeString": "mapping(address => uint256)"
												},
												"valueName": "",
												"valueNameLocation": "-1:-1:-1",
												"valueType": {
													"id": 474,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1817:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 482,
											"mutability": "mutable",
											"name": "_allowances",
											"nameLocation": "1910:11:2",
											"nodeType": "VariableDeclaration",
											"scope": 489,
											"src": "1846:75:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
												"typeString": "mapping(address => mapping(address => uint256))"
											},
											"typeName": {
												"id": 481,
												"keyName": "account",
												"keyNameLocation": "1862:7:2",
												"keyType": {
													"id": 477,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1854:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "Mapping",
												"src": "1846:63:2",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
													"typeString": "mapping(address => mapping(address => uint256))"
												},
												"valueName": "",
												"valueNameLocation": "-1:-1:-1",
												"valueType": {
													"id": 480,
													"keyName": "spender",
													"keyNameLocation": "1889:7:2",
													"keyType": {
														"id": 478,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "1881:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Mapping",
													"src": "1873:35:2",
													"typeDescriptions": {
														"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
														"typeString": "mapping(address => uint256)"
													},
													"valueName": "",
													"valueNameLocation": "-1:-1:-1",
													"valueType": {
														"id": 479,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "1900:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													}
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 484,
											"mutability": "mutable",
											"name": "_totalSupply",
											"nameLocation": "1940:12:2",
											"nodeType": "VariableDeclaration",
											"scope": 489,
											"src": "1932:20:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 483,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1932:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 486,
											"mutability": "mutable",
											"name": "_name",
											"nameLocation": "1970:5:2",
											"nodeType": "VariableDeclaration",
											"scope": 489,
											"src": "1963:12:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 485,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "1963:6:2",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 488,
											"mutability": "mutable",
											"name": "_symbol",
											"nameLocation": "1992:7:2",
											"nodeType": "VariableDeclaration",
											"scope": 489,
											"src": "1985:14:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 487,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "1985:6:2",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ERC20Storage",
									"nameLocation": "1767:12:2",
									"nodeType": "StructDefinition",
									"scope": 1065,
									"src": "1760:246:2",
									"visibility": "public"
								},
								{
									"constant": true,
									"id": 492,
									"mutability": "constant",
									"name": "ERC20StorageLocation",
									"nameLocation": "2146:20:2",
									"nodeType": "VariableDeclaration",
									"scope": 1065,
									"src": "2121:114:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 490,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2121:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307835326336333234376531663437646231396435636530343630303330633439376630363763613463656266373162613938656561646162653230626163653030",
										"id": 491,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2169:66:2",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_37439836327923360225337895871394760624280537466773280374265222508165906222592_by_1",
											"typeString": "int_const 3743...(69 digits omitted)...2592"
										},
										"value": "0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 499,
										"nodeType": "Block",
										"src": "2316:79:2",
										"statements": [
											{
												"AST": {
													"nativeSrc": "2335:54:2",
													"nodeType": "YulBlock",
													"src": "2335:54:2",
													"statements": [
														{
															"nativeSrc": "2349:30:2",
															"nodeType": "YulAssignment",
															"src": "2349:30:2",
															"value": {
																"name": "ERC20StorageLocation",
																"nativeSrc": "2359:20:2",
																"nodeType": "YulIdentifier",
																"src": "2359:20:2"
															},
															"variableNames": [
																{
																	"name": "$.slot",
																	"nativeSrc": "2349:6:2",
																	"nodeType": "YulIdentifier",
																	"src": "2349:6:2"
																}
															]
														}
													]
												},
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 496,
														"isOffset": false,
														"isSlot": true,
														"src": "2349:6:2",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 492,
														"isOffset": false,
														"isSlot": false,
														"src": "2359:20:2",
														"valueSize": 1
													}
												],
												"id": 498,
												"nodeType": "InlineAssembly",
												"src": "2326:63:2"
											}
										]
									},
									"id": 500,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getERC20Storage",
									"nameLocation": "2251:16:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 493,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2267:2:2"
									},
									"returnParameters": {
										"id": 497,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 496,
												"mutability": "mutable",
												"name": "$",
												"nameLocation": "2313:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 500,
												"src": "2292:22:2",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
													"typeString": "struct ERC20Upgradeable.ERC20Storage"
												},
												"typeName": {
													"id": 495,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 494,
														"name": "ERC20Storage",
														"nameLocations": [
															"2292:12:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 489,
														"src": "2292:12:2"
													},
													"referencedDeclaration": 489,
													"src": "2292:12:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
														"typeString": "struct ERC20Upgradeable.ERC20Storage"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2291:24:2"
									},
									"scope": 1065,
									"src": "2242:153:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 515,
										"nodeType": "Block",
										"src": "2669:55:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 511,
															"name": "name_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 503,
															"src": "2702:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"id": 512,
															"name": "symbol_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 505,
															"src": "2709:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 510,
														"name": "__ERC20_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 544,
														"src": "2679:22:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory,string memory)"
														}
													},
													"id": 513,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2679:38:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 514,
												"nodeType": "ExpressionStatement",
												"src": "2679:38:2"
											}
										]
									},
									"documentation": {
										"id": 501,
										"nodeType": "StructuredDocumentation",
										"src": "2401:171:2",
										"text": " @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 516,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 508,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 507,
												"name": "onlyInitializing",
												"nameLocations": [
													"2652:16:2"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "2652:16:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "2652:16:2"
										}
									],
									"name": "__ERC20_init",
									"nameLocation": "2586:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 506,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 503,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2613:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 516,
												"src": "2599:19:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 502,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2599:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 505,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2634:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 516,
												"src": "2620:21:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 504,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2620:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2598:44:2"
									},
									"returnParameters": {
										"id": 509,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2669:0:2"
									},
									"scope": 1065,
									"src": "2577:147:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 543,
										"nodeType": "Block",
										"src": "2832:114:2",
										"statements": [
											{
												"assignments": [
													527
												],
												"declarations": [
													{
														"constant": false,
														"id": 527,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "2863:1:2",
														"nodeType": "VariableDeclaration",
														"scope": 543,
														"src": "2842:22:2",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage"
														},
														"typeName": {
															"id": 526,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 525,
																"name": "ERC20Storage",
																"nameLocations": [
																	"2842:12:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 489,
																"src": "2842:12:2"
															},
															"referencedDeclaration": 489,
															"src": "2842:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 530,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 528,
														"name": "_getERC20Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 500,
														"src": "2867:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC20Storage_$489_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC20Upgradeable.ERC20Storage storage pointer)"
														}
													},
													"id": 529,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2867:18:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
														"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2842:43:2"
											},
											{
												"expression": {
													"id": 535,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 531,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 527,
															"src": "2895:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
															}
														},
														"id": 533,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "2897:5:2",
														"memberName": "_name",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 486,
														"src": "2895:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 534,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 518,
														"src": "2905:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2895:15:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 536,
												"nodeType": "ExpressionStatement",
												"src": "2895:15:2"
											},
											{
												"expression": {
													"id": 541,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 537,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 527,
															"src": "2920:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
															}
														},
														"id": 539,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "2922:7:2",
														"memberName": "_symbol",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 488,
														"src": "2920:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 540,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 520,
														"src": "2932:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2920:19:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 542,
												"nodeType": "ExpressionStatement",
												"src": "2920:19:2"
											}
										]
									},
									"id": 544,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 523,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 522,
												"name": "onlyInitializing",
												"nameLocations": [
													"2815:16:2"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "2815:16:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "2815:16:2"
										}
									],
									"name": "__ERC20_init_unchained",
									"nameLocation": "2739:22:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 521,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 518,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2776:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 544,
												"src": "2762:19:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 517,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2762:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 520,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2797:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 544,
												"src": "2783:21:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 519,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2783:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2761:44:2"
									},
									"returnParameters": {
										"id": 524,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2832:0:2"
									},
									"scope": 1065,
									"src": "2730:216:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										2279
									],
									"body": {
										"id": 559,
										"nodeType": "Block",
										"src": "3071:84:2",
										"statements": [
											{
												"assignments": [
													552
												],
												"declarations": [
													{
														"constant": false,
														"id": 552,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "3102:1:2",
														"nodeType": "VariableDeclaration",
														"scope": 559,
														"src": "3081:22:2",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage"
														},
														"typeName": {
															"id": 551,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 550,
																"name": "ERC20Storage",
																"nameLocations": [
																	"3081:12:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 489,
																"src": "3081:12:2"
															},
															"referencedDeclaration": 489,
															"src": "3081:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 555,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 553,
														"name": "_getERC20Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 500,
														"src": "3106:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC20Storage_$489_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC20Upgradeable.ERC20Storage storage pointer)"
														}
													},
													"id": 554,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3106:18:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
														"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3081:43:2"
											},
											{
												"expression": {
													"expression": {
														"id": 556,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 552,
														"src": "3141:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
														}
													},
													"id": 557,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "3143:5:2",
													"memberName": "_name",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 486,
													"src": "3141:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 549,
												"id": 558,
												"nodeType": "Return",
												"src": "3134:14:2"
											}
										]
									},
									"documentation": {
										"id": 545,
										"nodeType": "StructuredDocumentation",
										"src": "2952:54:2",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 560,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "3020:4:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 546,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3024:2:2"
									},
									"returnParameters": {
										"id": 549,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 548,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 560,
												"src": "3056:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 547,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3056:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3055:15:2"
									},
									"scope": 1065,
									"src": "3011:144:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2285
									],
									"body": {
										"id": 575,
										"nodeType": "Block",
										"src": "3330:86:2",
										"statements": [
											{
												"assignments": [
													568
												],
												"declarations": [
													{
														"constant": false,
														"id": 568,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "3361:1:2",
														"nodeType": "VariableDeclaration",
														"scope": 575,
														"src": "3340:22:2",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage"
														},
														"typeName": {
															"id": 567,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 566,
																"name": "ERC20Storage",
																"nameLocations": [
																	"3340:12:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 489,
																"src": "3340:12:2"
															},
															"referencedDeclaration": 489,
															"src": "3340:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 571,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 569,
														"name": "_getERC20Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 500,
														"src": "3365:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC20Storage_$489_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC20Upgradeable.ERC20Storage storage pointer)"
														}
													},
													"id": 570,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3365:18:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
														"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3340:43:2"
											},
											{
												"expression": {
													"expression": {
														"id": 572,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 568,
														"src": "3400:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
														}
													},
													"id": 573,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "3402:7:2",
													"memberName": "_symbol",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 488,
													"src": "3400:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 565,
												"id": 574,
												"nodeType": "Return",
												"src": "3393:16:2"
											}
										]
									},
									"documentation": {
										"id": 561,
										"nodeType": "StructuredDocumentation",
										"src": "3161:102:2",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 576,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "3277:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 562,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3283:2:2"
									},
									"returnParameters": {
										"id": 565,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 564,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 576,
												"src": "3315:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 563,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3315:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3314:15:2"
									},
									"scope": 1065,
									"src": "3268:148:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2291
									],
									"body": {
										"id": 584,
										"nodeType": "Block",
										"src": "4105:26:2",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 582,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4122:2:2",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 581,
												"id": 583,
												"nodeType": "Return",
												"src": "4115:9:2"
											}
										]
									},
									"documentation": {
										"id": 577,
										"nodeType": "StructuredDocumentation",
										"src": "3422:622:2",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 585,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "4058:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 578,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4066:2:2"
									},
									"returnParameters": {
										"id": 581,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 580,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 585,
												"src": "4098:5:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 579,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4098:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4097:7:2"
									},
									"scope": 1065,
									"src": "4049:82:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2215
									],
									"body": {
										"id": 600,
										"nodeType": "Block",
										"src": "4252:91:2",
										"statements": [
											{
												"assignments": [
													593
												],
												"declarations": [
													{
														"constant": false,
														"id": 593,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "4283:1:2",
														"nodeType": "VariableDeclaration",
														"scope": 600,
														"src": "4262:22:2",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage"
														},
														"typeName": {
															"id": 592,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 591,
																"name": "ERC20Storage",
																"nameLocations": [
																	"4262:12:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 489,
																"src": "4262:12:2"
															},
															"referencedDeclaration": 489,
															"src": "4262:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 596,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 594,
														"name": "_getERC20Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 500,
														"src": "4287:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC20Storage_$489_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC20Upgradeable.ERC20Storage storage pointer)"
														}
													},
													"id": 595,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4287:18:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
														"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4262:43:2"
											},
											{
												"expression": {
													"expression": {
														"id": 597,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 593,
														"src": "4322:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
														}
													},
													"id": 598,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "4324:12:2",
													"memberName": "_totalSupply",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 484,
													"src": "4322:14:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 590,
												"id": 599,
												"nodeType": "Return",
												"src": "4315:21:2"
											}
										]
									},
									"documentation": {
										"id": 586,
										"nodeType": "StructuredDocumentation",
										"src": "4137:49:2",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 601,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "4200:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 587,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4211:2:2"
									},
									"returnParameters": {
										"id": 590,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 589,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 601,
												"src": "4243:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 588,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4243:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4242:9:2"
									},
									"scope": 1065,
									"src": "4191:152:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2223
									],
									"body": {
										"id": 620,
										"nodeType": "Block",
										"src": "4475:97:2",
										"statements": [
											{
												"assignments": [
													611
												],
												"declarations": [
													{
														"constant": false,
														"id": 611,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "4506:1:2",
														"nodeType": "VariableDeclaration",
														"scope": 620,
														"src": "4485:22:2",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage"
														},
														"typeName": {
															"id": 610,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 609,
																"name": "ERC20Storage",
																"nameLocations": [
																	"4485:12:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 489,
																"src": "4485:12:2"
															},
															"referencedDeclaration": 489,
															"src": "4485:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 614,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 612,
														"name": "_getERC20Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 500,
														"src": "4510:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC20Storage_$489_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC20Upgradeable.ERC20Storage storage pointer)"
														}
													},
													"id": 613,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4510:18:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
														"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4485:43:2"
											},
											{
												"expression": {
													"baseExpression": {
														"expression": {
															"id": 615,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 611,
															"src": "4545:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
															}
														},
														"id": 616,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4547:9:2",
														"memberName": "_balances",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 476,
														"src": "4545:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 618,
													"indexExpression": {
														"id": 617,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 604,
														"src": "4557:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4545:20:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 608,
												"id": 619,
												"nodeType": "Return",
												"src": "4538:27:2"
											}
										]
									},
									"documentation": {
										"id": 602,
										"nodeType": "StructuredDocumentation",
										"src": "4349:47:2",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 621,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "4410:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 605,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 604,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4428:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 621,
												"src": "4420:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 603,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4420:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4419:17:2"
									},
									"returnParameters": {
										"id": 608,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 607,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 621,
												"src": "4466:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 606,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4466:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4465:9:2"
									},
									"scope": 1065,
									"src": "4401:171:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2233
									],
									"body": {
										"id": 644,
										"nodeType": "Block",
										"src": "4842:103:2",
										"statements": [
											{
												"assignments": [
													632
												],
												"declarations": [
													{
														"constant": false,
														"id": 632,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4860:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 644,
														"src": "4852:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 631,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4852:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 635,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 633,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1377,
														"src": "4868:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 634,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4868:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4852:28:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 637,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 632,
															"src": "4900:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 638,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 624,
															"src": "4907:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 639,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 626,
															"src": "4911:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 636,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 772,
														"src": "4890:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 640,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4890:27:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 641,
												"nodeType": "ExpressionStatement",
												"src": "4890:27:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 642,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4934:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 630,
												"id": 643,
												"nodeType": "Return",
												"src": "4927:11:2"
											}
										]
									},
									"documentation": {
										"id": 622,
										"nodeType": "StructuredDocumentation",
										"src": "4578:184:2",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `value`."
									},
									"functionSelector": "a9059cbb",
									"id": 645,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "4776:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 627,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 624,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4793:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 645,
												"src": "4785:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 623,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4785:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 626,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4805:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 645,
												"src": "4797:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 625,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4797:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4784:27:2"
									},
									"returnParameters": {
										"id": 630,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 629,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 645,
												"src": "4836:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 628,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4836:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4835:6:2"
									},
									"scope": 1065,
									"src": "4767:178:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2243
									],
									"body": {
										"id": 668,
										"nodeType": "Block",
										"src": "5092:106:2",
										"statements": [
											{
												"assignments": [
													657
												],
												"declarations": [
													{
														"constant": false,
														"id": 657,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "5123:1:2",
														"nodeType": "VariableDeclaration",
														"scope": 668,
														"src": "5102:22:2",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage"
														},
														"typeName": {
															"id": 656,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 655,
																"name": "ERC20Storage",
																"nameLocations": [
																	"5102:12:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 489,
																"src": "5102:12:2"
															},
															"referencedDeclaration": 489,
															"src": "5102:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 660,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 658,
														"name": "_getERC20Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 500,
														"src": "5127:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC20Storage_$489_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC20Upgradeable.ERC20Storage storage pointer)"
														}
													},
													"id": 659,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5127:18:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
														"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5102:43:2"
											},
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"expression": {
																"id": 661,
																"name": "$",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 657,
																"src": "5162:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
																	"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
																}
															},
															"id": 662,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5164:11:2",
															"memberName": "_allowances",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 482,
															"src": "5162:13:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 664,
														"indexExpression": {
															"id": 663,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 648,
															"src": "5176:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "5162:20:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 666,
													"indexExpression": {
														"id": 665,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 650,
														"src": "5183:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "5162:29:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 654,
												"id": 667,
												"nodeType": "Return",
												"src": "5155:36:2"
											}
										]
									},
									"documentation": {
										"id": 646,
										"nodeType": "StructuredDocumentation",
										"src": "4951:47:2",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 669,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "5012:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 651,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 648,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5030:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 669,
												"src": "5022:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 647,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5022:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 650,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "5045:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 669,
												"src": "5037:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 649,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5037:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5021:32:2"
									},
									"returnParameters": {
										"id": 654,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 653,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 669,
												"src": "5083:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 652,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5083:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5082:9:2"
									},
									"scope": 1065,
									"src": "5003:195:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2253
									],
									"body": {
										"id": 692,
										"nodeType": "Block",
										"src": "5584:107:2",
										"statements": [
											{
												"assignments": [
													680
												],
												"declarations": [
													{
														"constant": false,
														"id": 680,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "5602:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 692,
														"src": "5594:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 679,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5594:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 683,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 681,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1377,
														"src": "5610:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 682,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5610:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5594:28:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 685,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 680,
															"src": "5641:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 686,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 672,
															"src": "5648:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 687,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 674,
															"src": "5657:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 684,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															948,
															1016
														],
														"referencedDeclaration": 948,
														"src": "5632:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 688,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5632:31:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 689,
												"nodeType": "ExpressionStatement",
												"src": "5632:31:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 690,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5680:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 678,
												"id": 691,
												"nodeType": "Return",
												"src": "5673:11:2"
											}
										]
									},
									"documentation": {
										"id": 670,
										"nodeType": "StructuredDocumentation",
										"src": "5204:296:2",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 693,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "5514:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 675,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 672,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "5530:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 693,
												"src": "5522:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 671,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5522:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 674,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5547:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 693,
												"src": "5539:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 673,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5539:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5521:32:2"
									},
									"returnParameters": {
										"id": 678,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 677,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 693,
												"src": "5578:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 676,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5578:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5577:6:2"
									},
									"scope": 1065,
									"src": "5505:186:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2265
									],
									"body": {
										"id": 724,
										"nodeType": "Block",
										"src": "6344:151:2",
										"statements": [
											{
												"assignments": [
													706
												],
												"declarations": [
													{
														"constant": false,
														"id": 706,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "6362:7:2",
														"nodeType": "VariableDeclaration",
														"scope": 724,
														"src": "6354:15:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 705,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6354:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 709,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 707,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1377,
														"src": "6372:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 708,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6372:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6354:30:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 711,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 696,
															"src": "6410:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 712,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 706,
															"src": "6416:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 713,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 700,
															"src": "6425:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 710,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1064,
														"src": "6394:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 714,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6394:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 715,
												"nodeType": "ExpressionStatement",
												"src": "6394:37:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 717,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 696,
															"src": "6451:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 718,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 698,
															"src": "6457:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 719,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 700,
															"src": "6461:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 716,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 772,
														"src": "6441:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 720,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6441:26:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 721,
												"nodeType": "ExpressionStatement",
												"src": "6441:26:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 722,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6484:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 704,
												"id": 723,
												"nodeType": "Return",
												"src": "6477:11:2"
											}
										]
									},
									"documentation": {
										"id": 694,
										"nodeType": "StructuredDocumentation",
										"src": "5697:549:2",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `value`.\n - the caller must have allowance for ``from``'s tokens of at least\n `value`."
									},
									"functionSelector": "23b872dd",
									"id": 725,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "6260:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 701,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 696,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6281:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 725,
												"src": "6273:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 695,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6273:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 698,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6295:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 725,
												"src": "6287:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 697,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6287:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 700,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6307:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 725,
												"src": "6299:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 699,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6299:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6272:41:2"
									},
									"returnParameters": {
										"id": 704,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 703,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 725,
												"src": "6338:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 702,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6338:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6337:6:2"
									},
									"scope": 1065,
									"src": "6251:244:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 771,
										"nodeType": "Block",
										"src": "6937:231:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 740,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 735,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 728,
														"src": "6951:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 738,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6967:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 737,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6959:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 736,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6959:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 739,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6959:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6951:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 749,
												"nodeType": "IfStatement",
												"src": "6947:86:2",
												"trueBody": {
													"id": 748,
													"nodeType": "Block",
													"src": "6971:62:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 744,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7019:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 743,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7011:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 742,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "7011:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 745,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7011:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 741,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2068,
																	"src": "6992:18:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 746,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6992:30:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 747,
															"nodeType": "RevertStatement",
															"src": "6985:37:2"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 755,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 750,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 730,
														"src": "7046:2:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 753,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7060:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 752,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7052:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 751,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7052:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 754,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7052:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7046:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 764,
												"nodeType": "IfStatement",
												"src": "7042:86:2",
												"trueBody": {
													"id": 763,
													"nodeType": "Block",
													"src": "7064:64:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 759,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7114:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 758,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7106:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 757,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "7106:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 760,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7106:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 756,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2073,
																	"src": "7085:20:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 761,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7085:32:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 762,
															"nodeType": "RevertStatement",
															"src": "7078:39:2"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 766,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 728,
															"src": "7145:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 767,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 730,
															"src": "7151:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 768,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 732,
															"src": "7155:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 765,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 864,
														"src": "7137:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 769,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7137:24:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 770,
												"nodeType": "ExpressionStatement",
												"src": "7137:24:2"
											}
										]
									},
									"documentation": {
										"id": 726,
										"nodeType": "StructuredDocumentation",
										"src": "6501:362:2",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 772,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "6877:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 733,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 728,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6895:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 772,
												"src": "6887:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 727,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6887:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 730,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6909:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 772,
												"src": "6901:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 729,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6901:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 732,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6921:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 772,
												"src": "6913:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 731,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6913:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6886:41:2"
									},
									"returnParameters": {
										"id": 734,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6937:0:2"
									},
									"scope": 1065,
									"src": "6868:300:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 863,
										"nodeType": "Block",
										"src": "7558:1095:2",
										"statements": [
											{
												"assignments": [
													784
												],
												"declarations": [
													{
														"constant": false,
														"id": 784,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "7589:1:2",
														"nodeType": "VariableDeclaration",
														"scope": 863,
														"src": "7568:22:2",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage"
														},
														"typeName": {
															"id": 783,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 782,
																"name": "ERC20Storage",
																"nameLocations": [
																	"7568:12:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 489,
																"src": "7568:12:2"
															},
															"referencedDeclaration": 489,
															"src": "7568:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 787,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 785,
														"name": "_getERC20Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 500,
														"src": "7593:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC20Storage_$489_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC20Upgradeable.ERC20Storage storage pointer)"
														}
													},
													"id": 786,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7593:18:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
														"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7568:43:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 793,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 788,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 775,
														"src": "7625:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 791,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7641:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 790,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7633:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 789,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7633:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 792,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7633:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7625:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 830,
													"nodeType": "Block",
													"src": "7801:366:2",
													"statements": [
														{
															"assignments": [
																802
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 802,
																	"mutability": "mutable",
																	"name": "fromBalance",
																	"nameLocation": "7823:11:2",
																	"nodeType": "VariableDeclaration",
																	"scope": 830,
																	"src": "7815:19:2",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 801,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "7815:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 807,
															"initialValue": {
																"baseExpression": {
																	"expression": {
																		"id": 803,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 784,
																		"src": "7837:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
																			"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
																		}
																	},
																	"id": 804,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "7839:9:2",
																	"memberName": "_balances",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 476,
																	"src": "7837:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 806,
																"indexExpression": {
																	"id": 805,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 775,
																	"src": "7849:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "7837:17:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "7815:39:2"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 810,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 808,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 802,
																	"src": "7872:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 809,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 779,
																	"src": "7886:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7872:19:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 818,
															"nodeType": "IfStatement",
															"src": "7868:115:2",
															"trueBody": {
																"id": 817,
																"nodeType": "Block",
																"src": "7893:90:2",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 812,
																					"name": "from",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 775,
																					"src": "7943:4:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 813,
																					"name": "fromBalance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 802,
																					"src": "7949:11:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 814,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 779,
																					"src": "7962:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 811,
																				"name": "ERC20InsufficientBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2063,
																				"src": "7918:24:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																					"typeString": "function (address,uint256,uint256) pure"
																				}
																			},
																			"id": 815,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7918:50:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 816,
																		"nodeType": "RevertStatement",
																		"src": "7911:57:2"
																	}
																]
															}
														},
														{
															"id": 829,
															"nodeType": "UncheckedBlock",
															"src": "7996:161:2",
															"statements": [
																{
																	"expression": {
																		"id": 827,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"expression": {
																					"id": 819,
																					"name": "$",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 784,
																					"src": "8103:1:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
																						"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
																					}
																				},
																				"id": 822,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "8105:9:2",
																				"memberName": "_balances",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 476,
																				"src": "8103:11:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 823,
																			"indexExpression": {
																				"id": 821,
																				"name": "from",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 775,
																				"src": "8115:4:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "8103:17:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 826,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 824,
																				"name": "fromBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 802,
																				"src": "8123:11:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 825,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 779,
																				"src": "8137:5:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "8123:19:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "8103:39:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 828,
																	"nodeType": "ExpressionStatement",
																	"src": "8103:39:2"
																}
															]
														}
													]
												},
												"id": 831,
												"nodeType": "IfStatement",
												"src": "7621:546:2",
												"trueBody": {
													"id": 800,
													"nodeType": "Block",
													"src": "7645:150:2",
													"statements": [
														{
															"expression": {
																"id": 798,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 794,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 784,
																		"src": "7761:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
																			"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
																		}
																	},
																	"id": 796,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "7763:12:2",
																	"memberName": "_totalSupply",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 484,
																	"src": "7761:14:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 797,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 779,
																	"src": "7779:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7761:23:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 799,
															"nodeType": "ExpressionStatement",
															"src": "7761:23:2"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 837,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 832,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 777,
														"src": "8181:2:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 835,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8195:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 834,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "8187:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 833,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "8187:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 836,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8187:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8181:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 855,
													"nodeType": "Block",
													"src": "8398:208:2",
													"statements": [
														{
															"id": 854,
															"nodeType": "UncheckedBlock",
															"src": "8412:184:2",
															"statements": [
																{
																	"expression": {
																		"id": 852,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"expression": {
																					"id": 846,
																					"name": "$",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 784,
																					"src": "8557:1:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
																						"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
																					}
																				},
																				"id": 849,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "8559:9:2",
																				"memberName": "_balances",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 476,
																				"src": "8557:11:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 850,
																			"indexExpression": {
																				"id": 848,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 777,
																				"src": "8569:2:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "8557:15:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"id": 851,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 779,
																			"src": "8576:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "8557:24:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 853,
																	"nodeType": "ExpressionStatement",
																	"src": "8557:24:2"
																}
															]
														}
													]
												},
												"id": 856,
												"nodeType": "IfStatement",
												"src": "8177:429:2",
												"trueBody": {
													"id": 845,
													"nodeType": "Block",
													"src": "8199:193:2",
													"statements": [
														{
															"id": 844,
															"nodeType": "UncheckedBlock",
															"src": "8213:169:2",
															"statements": [
																{
																	"expression": {
																		"id": 842,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"expression": {
																				"id": 838,
																				"name": "$",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 784,
																				"src": "8344:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
																					"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
																				}
																			},
																			"id": 840,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"memberLocation": "8346:12:2",
																			"memberName": "_totalSupply",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 484,
																			"src": "8344:14:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "-=",
																		"rightHandSide": {
																			"id": 841,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 779,
																			"src": "8362:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "8344:23:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 843,
																	"nodeType": "ExpressionStatement",
																	"src": "8344:23:2"
																}
															]
														}
													]
												}
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 858,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 775,
															"src": "8630:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 859,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 777,
															"src": "8636:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 860,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 779,
															"src": "8640:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 857,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2200,
														"src": "8621:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 861,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8621:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 862,
												"nodeType": "EmitStatement",
												"src": "8616:30:2"
											}
										]
									},
									"documentation": {
										"id": 773,
										"nodeType": "StructuredDocumentation",
										"src": "7174:304:2",
										"text": " @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n this function.\n Emits a {Transfer} event."
									},
									"id": 864,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_update",
									"nameLocation": "7492:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 780,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 775,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "7508:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 864,
												"src": "7500:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 774,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7500:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 777,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "7522:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 864,
												"src": "7514:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 776,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7514:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 779,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "7534:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 864,
												"src": "7526:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 778,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7526:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7499:41:2"
									},
									"returnParameters": {
										"id": 781,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7558:0:2"
									},
									"scope": 1065,
									"src": "7483:1170:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 896,
										"nodeType": "Block",
										"src": "9052:152:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 877,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 872,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 867,
														"src": "9066:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 875,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9085:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 874,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "9077:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 873,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "9077:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 876,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9077:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9066:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 886,
												"nodeType": "IfStatement",
												"src": "9062:91:2",
												"trueBody": {
													"id": 885,
													"nodeType": "Block",
													"src": "9089:64:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 881,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "9139:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 880,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "9131:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 879,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "9131:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 882,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9131:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 878,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2073,
																	"src": "9110:20:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 883,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9110:32:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 884,
															"nodeType": "RevertStatement",
															"src": "9103:39:2"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 890,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9178:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 889,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9170:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 888,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9170:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 891,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9170:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 892,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 867,
															"src": "9182:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 893,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 869,
															"src": "9191:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 887,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 864,
														"src": "9162:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 894,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9162:35:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 895,
												"nodeType": "ExpressionStatement",
												"src": "9162:35:2"
											}
										]
									},
									"documentation": {
										"id": 865,
										"nodeType": "StructuredDocumentation",
										"src": "8659:332:2",
										"text": " @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n Relies on the `_update` mechanism\n Emits a {Transfer} event with `from` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 897,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "9005:5:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 870,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 867,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "9019:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 897,
												"src": "9011:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 866,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9011:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 869,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9036:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 897,
												"src": "9028:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 868,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9028:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9010:32:2"
									},
									"returnParameters": {
										"id": 871,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9052:0:2"
									},
									"scope": 1065,
									"src": "8996:208:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 929,
										"nodeType": "Block",
										"src": "9578:150:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 910,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 905,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 900,
														"src": "9592:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 908,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9611:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 907,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "9603:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 906,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "9603:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 909,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9603:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9592:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 919,
												"nodeType": "IfStatement",
												"src": "9588:89:2",
												"trueBody": {
													"id": 918,
													"nodeType": "Block",
													"src": "9615:62:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 914,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "9663:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 913,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "9655:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 912,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "9655:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 915,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9655:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 911,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2068,
																	"src": "9636:18:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 916,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9636:30:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 917,
															"nodeType": "RevertStatement",
															"src": "9629:37:2"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 921,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 900,
															"src": "9694:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 924,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9711:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 923,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9703:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 922,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9703:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 925,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9703:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 926,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 902,
															"src": "9715:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 920,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 864,
														"src": "9686:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 927,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9686:35:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 928,
												"nodeType": "ExpressionStatement",
												"src": "9686:35:2"
											}
										]
									},
									"documentation": {
										"id": 898,
										"nodeType": "StructuredDocumentation",
										"src": "9210:307:2",
										"text": " @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n Relies on the `_update` mechanism.\n Emits a {Transfer} event with `to` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead"
									},
									"id": 930,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "9531:5:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 903,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 900,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "9545:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 930,
												"src": "9537:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 899,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9537:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 902,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9562:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 930,
												"src": "9554:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 901,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9554:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9536:32:2"
									},
									"returnParameters": {
										"id": 904,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9578:0:2"
									},
									"scope": 1065,
									"src": "9522:206:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 947,
										"nodeType": "Block",
										"src": "10338:54:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 941,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 933,
															"src": "10357:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 942,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 935,
															"src": "10364:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 943,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 937,
															"src": "10373:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "74727565",
															"id": 944,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10380:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 940,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															948,
															1016
														],
														"referencedDeclaration": 1016,
														"src": "10348:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
															"typeString": "function (address,address,uint256,bool)"
														}
													},
													"id": 945,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10348:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 946,
												"nodeType": "ExpressionStatement",
												"src": "10348:37:2"
											}
										]
									},
									"documentation": {
										"id": 931,
										"nodeType": "StructuredDocumentation",
										"src": "9734:525:2",
										"text": " @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."
									},
									"id": 948,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "10273:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 938,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 933,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10290:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 948,
												"src": "10282:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 932,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10282:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 935,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10305:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 948,
												"src": "10297:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 934,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10297:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 937,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10322:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 948,
												"src": "10314:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 936,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10314:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10281:47:2"
									},
									"returnParameters": {
										"id": 939,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10338:0:2"
									},
									"scope": 1065,
									"src": "10264:128:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1015,
										"nodeType": "Block",
										"src": "11322:389:2",
										"statements": [
											{
												"assignments": [
													962
												],
												"declarations": [
													{
														"constant": false,
														"id": 962,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "11353:1:2",
														"nodeType": "VariableDeclaration",
														"scope": 1015,
														"src": "11332:22:2",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage"
														},
														"typeName": {
															"id": 961,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 960,
																"name": "ERC20Storage",
																"nameLocations": [
																	"11332:12:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 489,
																"src": "11332:12:2"
															},
															"referencedDeclaration": 489,
															"src": "11332:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 965,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 963,
														"name": "_getERC20Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 500,
														"src": "11357:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC20Storage_$489_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC20Upgradeable.ERC20Storage storage pointer)"
														}
													},
													"id": 964,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11357:18:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
														"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11332:43:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 971,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 966,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 951,
														"src": "11389:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 969,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11406:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 968,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "11398:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 967,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "11398:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 970,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "11398:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "11389:19:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 980,
												"nodeType": "IfStatement",
												"src": "11385:89:2",
												"trueBody": {
													"id": 979,
													"nodeType": "Block",
													"src": "11410:64:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 975,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11460:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 974,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "11452:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 973,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "11452:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 976,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11452:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 972,
																	"name": "ERC20InvalidApprover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2087,
																	"src": "11431:20:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 977,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11431:32:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 978,
															"nodeType": "RevertStatement",
															"src": "11424:39:2"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 986,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 981,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 953,
														"src": "11487:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 984,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11506:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 983,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "11498:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 982,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "11498:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 985,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "11498:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "11487:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 995,
												"nodeType": "IfStatement",
												"src": "11483:90:2",
												"trueBody": {
													"id": 994,
													"nodeType": "Block",
													"src": "11510:63:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 990,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11559:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 989,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "11551:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 988,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "11551:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 991,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11551:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 987,
																	"name": "ERC20InvalidSpender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2092,
																	"src": "11531:19:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 992,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11531:31:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 993,
															"nodeType": "RevertStatement",
															"src": "11524:38:2"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1004,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"expression": {
																	"id": 996,
																	"name": "$",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 962,
																	"src": "11582:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ERC20Storage_$489_storage_ptr",
																		"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
																	}
																},
																"id": 1000,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "11584:11:2",
																"memberName": "_allowances",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 482,
																"src": "11582:13:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 1001,
															"indexExpression": {
																"id": 998,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 951,
																"src": "11596:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "11582:20:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1002,
														"indexExpression": {
															"id": 999,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 953,
															"src": "11603:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11582:29:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1003,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 955,
														"src": "11614:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11582:37:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1005,
												"nodeType": "ExpressionStatement",
												"src": "11582:37:2"
											},
											{
												"condition": {
													"id": 1006,
													"name": "emitEvent",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 957,
													"src": "11633:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1014,
												"nodeType": "IfStatement",
												"src": "11629:76:2",
												"trueBody": {
													"id": 1013,
													"nodeType": "Block",
													"src": "11644:61:2",
													"statements": [
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 1008,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 951,
																		"src": "11672:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1009,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 953,
																		"src": "11679:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1010,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 955,
																		"src": "11688:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1007,
																	"name": "Approval",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2209,
																	"src": "11663:8:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 1011,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11663:31:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1012,
															"nodeType": "EmitStatement",
															"src": "11658:36:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 949,
										"nodeType": "StructuredDocumentation",
										"src": "10398:821:2",
										"text": " @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n `Approval` event during `transferFrom` operations.\n Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n true using the following override:\n ```\n function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     super._approve(owner, spender, value, true);\n }\n ```\n Requirements are the same as {_approve}."
									},
									"id": 1016,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "11233:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 958,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 951,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "11250:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 1016,
												"src": "11242:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 950,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11242:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 953,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "11265:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 1016,
												"src": "11257:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 952,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11257:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 955,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11282:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 1016,
												"src": "11274:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 954,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11274:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 957,
												"mutability": "mutable",
												"name": "emitEvent",
												"nameLocation": "11294:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 1016,
												"src": "11289:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 956,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "11289:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11241:63:2"
									},
									"returnParameters": {
										"id": 959,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11322:0:2"
									},
									"scope": 1065,
									"src": "11224:487:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1063,
										"nodeType": "Block",
										"src": "12082:388:2",
										"statements": [
											{
												"assignments": [
													1027
												],
												"declarations": [
													{
														"constant": false,
														"id": 1027,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "12100:16:2",
														"nodeType": "VariableDeclaration",
														"scope": 1063,
														"src": "12092:24:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1026,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12092:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1032,
												"initialValue": {
													"arguments": [
														{
															"id": 1029,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1019,
															"src": "12129:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1030,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1021,
															"src": "12136:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1028,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 669,
														"src": "12119:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 1031,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12119:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12092:52:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1039,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1033,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1027,
														"src": "12158:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1036,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "12183:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 1035,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "12183:7:2",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 1034,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "12178:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 1037,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12178:13:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 1038,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "12192:3:2",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "12178:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "12158:37:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1062,
												"nodeType": "IfStatement",
												"src": "12154:310:2",
												"trueBody": {
													"id": 1061,
													"nodeType": "Block",
													"src": "12197:267:2",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1042,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1040,
																	"name": "currentAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1027,
																	"src": "12215:16:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 1041,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1023,
																	"src": "12234:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "12215:24:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1050,
															"nodeType": "IfStatement",
															"src": "12211:130:2",
															"trueBody": {
																"id": 1049,
																"nodeType": "Block",
																"src": "12241:100:2",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 1044,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1021,
																					"src": "12293:7:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 1045,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1027,
																					"src": "12302:16:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 1046,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1023,
																					"src": "12320:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 1043,
																				"name": "ERC20InsufficientAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2082,
																				"src": "12266:26:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																					"typeString": "function (address,uint256,uint256) pure"
																				}
																			},
																			"id": 1047,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "12266:60:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1048,
																		"nodeType": "RevertStatement",
																		"src": "12259:67:2"
																	}
																]
															}
														},
														{
															"id": 1060,
															"nodeType": "UncheckedBlock",
															"src": "12354:100:2",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 1052,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1019,
																				"src": "12391:5:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 1053,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1021,
																				"src": "12398:7:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1056,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1054,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1027,
																					"src": "12407:16:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 1055,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1023,
																					"src": "12426:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "12407:24:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"hexValue": "66616c7365",
																				"id": 1057,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "bool",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12433:5:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				},
																				"value": "false"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			],
																			"id": 1051,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				948,
																				1016
																			],
																			"referencedDeclaration": 1016,
																			"src": "12382:8:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
																				"typeString": "function (address,address,uint256,bool)"
																			}
																		},
																		"id": 1058,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "12382:57:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 1059,
																	"nodeType": "ExpressionStatement",
																	"src": "12382:57:2"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1017,
										"nodeType": "StructuredDocumentation",
										"src": "11717:271:2",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `value`.\n Does not update the allowance value in case of infinite allowance.\n Revert if not enough allowance is available.\n Does not emit an {Approval} event."
									},
									"id": 1064,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "12002:15:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1024,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1019,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "12026:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 1064,
												"src": "12018:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1018,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12018:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1021,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "12041:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 1064,
												"src": "12033:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1020,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12033:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1023,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "12058:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 1064,
												"src": "12050:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1022,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12050:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12017:47:2"
									},
									"returnParameters": {
										"id": 1025,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12082:0:2"
									},
									"scope": 1065,
									"src": "11993:477:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1066,
							"src": "1576:10896:2",
							"usedErrors": [
								211,
								214,
								2063,
								2068,
								2073,
								2082,
								2087,
								2092
							],
							"usedEvents": [
								219,
								2200,
								2209
							]
						}
					],
					"src": "105:12368:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							1395
						],
						"ERC20BurnableUpgradeable": [
							1127
						],
						"ERC20Upgradeable": [
							1065
						],
						"Initializable": [
							448
						]
					},
					"id": 1128,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1067,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "124:24:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
							"file": "../ERC20Upgradeable.sol",
							"id": 1069,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1128,
							"sourceUnit": 1066,
							"src": "150:57:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1068,
										"name": "ERC20Upgradeable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1065,
										"src": "158:16:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
							"file": "../../../utils/ContextUpgradeable.sol",
							"id": 1071,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1128,
							"sourceUnit": 1396,
							"src": "208:73:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1070,
										"name": "ContextUpgradeable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1395,
										"src": "216:18:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../../../proxy/utils/Initializable.sol",
							"id": 1073,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1128,
							"sourceUnit": 449,
							"src": "282:69:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1072,
										"name": "Initializable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 448,
										"src": "290:13:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1075,
										"name": "Initializable",
										"nameLocations": [
											"608:13:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 448,
										"src": "608:13:3"
									},
									"id": 1076,
									"nodeType": "InheritanceSpecifier",
									"src": "608:13:3"
								},
								{
									"baseName": {
										"id": 1077,
										"name": "ContextUpgradeable",
										"nameLocations": [
											"623:18:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1395,
										"src": "623:18:3"
									},
									"id": 1078,
									"nodeType": "InheritanceSpecifier",
									"src": "623:18:3"
								},
								{
									"baseName": {
										"id": 1079,
										"name": "ERC20Upgradeable",
										"nameLocations": [
											"643:16:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1065,
										"src": "643:16:3"
									},
									"id": 1080,
									"nodeType": "InheritanceSpecifier",
									"src": "643:16:3"
								}
							],
							"canonicalName": "ERC20BurnableUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1074,
								"nodeType": "StructuredDocumentation",
								"src": "353:208:3",
								"text": " @dev Extension of {ERC20} that allows token holders to destroy both their own\n tokens and those that they have an allowance for, in a way that can be\n recognized off-chain (via event analysis)."
							},
							"fullyImplemented": true,
							"id": 1127,
							"linearizedBaseContracts": [
								1127,
								1065,
								2093,
								2292,
								2266,
								1395,
								448
							],
							"name": "ERC20BurnableUpgradeable",
							"nameLocation": "580:24:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1085,
										"nodeType": "Block",
										"src": "724:7:3",
										"statements": []
									},
									"id": 1086,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1083,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1082,
												"name": "onlyInitializing",
												"nameLocations": [
													"707:16:3"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "707:16:3"
											},
											"nodeType": "ModifierInvocation",
											"src": "707:16:3"
										}
									],
									"name": "__ERC20Burnable_init",
									"nameLocation": "675:20:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1081,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "695:2:3"
									},
									"returnParameters": {
										"id": 1084,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "724:0:3"
									},
									"scope": 1127,
									"src": "666:65:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1091,
										"nodeType": "Block",
										"src": "805:7:3",
										"statements": []
									},
									"id": 1092,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1089,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1088,
												"name": "onlyInitializing",
												"nameLocations": [
													"788:16:3"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "788:16:3"
											},
											"nodeType": "ModifierInvocation",
											"src": "788:16:3"
										}
									],
									"name": "__ERC20Burnable_init_unchained",
									"nameLocation": "746:30:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1087,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "776:2:3"
									},
									"returnParameters": {
										"id": 1090,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "805:0:3"
									},
									"scope": 1127,
									"src": "737:75:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1104,
										"nodeType": "Block",
										"src": "975:43:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1099,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1377,
																"src": "991:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1100,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "991:12:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1101,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1095,
															"src": "1005:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1098,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 930,
														"src": "985:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1102,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "985:26:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1103,
												"nodeType": "ExpressionStatement",
												"src": "985:26:3"
											}
										]
									},
									"documentation": {
										"id": 1093,
										"nodeType": "StructuredDocumentation",
										"src": "817:109:3",
										"text": " @dev Destroys a `value` amount of tokens from the caller.\n See {ERC20-_burn}."
									},
									"functionSelector": "42966c68",
									"id": 1105,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "940:4:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1096,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1095,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "953:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 1105,
												"src": "945:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1094,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "945:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "944:15:3"
									},
									"returnParameters": {
										"id": 1097,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "975:0:3"
									},
									"scope": 1127,
									"src": "931:87:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1125,
										"nodeType": "Block",
										"src": "1399:93:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1114,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1108,
															"src": "1425:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1115,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1377,
																"src": "1434:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1116,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1434:12:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1117,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1110,
															"src": "1448:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1113,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1064,
														"src": "1409:15:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1118,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1409:45:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1119,
												"nodeType": "ExpressionStatement",
												"src": "1409:45:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1121,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1108,
															"src": "1470:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1122,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1110,
															"src": "1479:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1120,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 930,
														"src": "1464:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1123,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1464:21:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1124,
												"nodeType": "ExpressionStatement",
												"src": "1464:21:3"
											}
										]
									},
									"documentation": {
										"id": 1106,
										"nodeType": "StructuredDocumentation",
										"src": "1024:305:3",
										"text": " @dev Destroys a `value` amount of tokens from `account`, deducting from\n the caller's allowance.\n See {ERC20-_burn} and {ERC20-allowance}.\n Requirements:\n - the caller must have allowance for ``accounts``'s tokens of at least\n `value`."
									},
									"functionSelector": "79cc6790",
									"id": 1126,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "burnFrom",
									"nameLocation": "1343:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1111,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1108,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1360:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1126,
												"src": "1352:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1107,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1352:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1110,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1377:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 1126,
												"src": "1369:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1109,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1369:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1351:32:3"
									},
									"returnParameters": {
										"id": 1112,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1399:0:3"
									},
									"scope": 1127,
									"src": "1334:158:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 1128,
							"src": "562:932:3",
							"usedErrors": [
								211,
								214,
								2063,
								2068,
								2073,
								2082,
								2087,
								2092
							],
							"usedEvents": [
								219,
								2200,
								2209
							]
						}
					],
					"src": "124:1371:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol",
					"exportedSymbols": {
						"ERC20PausableUpgradeable": [
							1180
						],
						"ERC20Upgradeable": [
							1065
						],
						"Initializable": [
							448
						],
						"PausableUpgradeable": [
							1682
						]
					},
					"id": 1181,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1129,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "124:24:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
							"file": "../ERC20Upgradeable.sol",
							"id": 1131,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1181,
							"sourceUnit": 1066,
							"src": "150:57:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1130,
										"name": "ERC20Upgradeable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1065,
										"src": "158:16:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol",
							"file": "../../../utils/PausableUpgradeable.sol",
							"id": 1133,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1181,
							"sourceUnit": 1683,
							"src": "208:75:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1132,
										"name": "PausableUpgradeable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1682,
										"src": "216:19:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../../../proxy/utils/Initializable.sol",
							"id": 1135,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1181,
							"sourceUnit": 449,
							"src": "284:69:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1134,
										"name": "Initializable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 448,
										"src": "292:13:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1137,
										"name": "Initializable",
										"nameLocations": [
											"1089:13:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 448,
										"src": "1089:13:4"
									},
									"id": 1138,
									"nodeType": "InheritanceSpecifier",
									"src": "1089:13:4"
								},
								{
									"baseName": {
										"id": 1139,
										"name": "ERC20Upgradeable",
										"nameLocations": [
											"1104:16:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1065,
										"src": "1104:16:4"
									},
									"id": 1140,
									"nodeType": "InheritanceSpecifier",
									"src": "1104:16:4"
								},
								{
									"baseName": {
										"id": 1141,
										"name": "PausableUpgradeable",
										"nameLocations": [
											"1122:19:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1682,
										"src": "1122:19:4"
									},
									"id": 1142,
									"nodeType": "InheritanceSpecifier",
									"src": "1122:19:4"
								}
							],
							"canonicalName": "ERC20PausableUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1136,
								"nodeType": "StructuredDocumentation",
								"src": "355:687:4",
								"text": " @dev ERC20 token with pausable token transfers, minting and burning.\n Useful for scenarios such as preventing trades until the end of an evaluation\n period, or having an emergency switch for freezing all token transfers in the\n event of a large bug.\n IMPORTANT: This contract does not include public pause and unpause functions. In\n addition to inheriting this contract, you must define both functions, invoking the\n {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\n access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\n make the contract pause mechanism of the contract unreachable, and thus unusable."
							},
							"fullyImplemented": true,
							"id": 1180,
							"linearizedBaseContracts": [
								1180,
								1682,
								1065,
								2093,
								2292,
								2266,
								1395,
								448
							],
							"name": "ERC20PausableUpgradeable",
							"nameLocation": "1061:24:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1150,
										"nodeType": "Block",
										"src": "1206:44:4",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1147,
														"name": "__Pausable_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1576,
														"src": "1216:25:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 1148,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1216:27:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1149,
												"nodeType": "ExpressionStatement",
												"src": "1216:27:4"
											}
										]
									},
									"id": 1151,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1145,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1144,
												"name": "onlyInitializing",
												"nameLocations": [
													"1189:16:4"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "1189:16:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "1189:16:4"
										}
									],
									"name": "__ERC20Pausable_init",
									"nameLocation": "1157:20:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1143,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1177:2:4"
									},
									"returnParameters": {
										"id": 1146,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1206:0:4"
									},
									"scope": 1180,
									"src": "1148:102:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1156,
										"nodeType": "Block",
										"src": "1324:7:4",
										"statements": []
									},
									"id": 1157,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1154,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1153,
												"name": "onlyInitializing",
												"nameLocations": [
													"1307:16:4"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "1307:16:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "1307:16:4"
										}
									],
									"name": "__ERC20Pausable_init_unchained",
									"nameLocation": "1265:30:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1152,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1295:2:4"
									},
									"returnParameters": {
										"id": 1155,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1324:0:4"
									},
									"scope": 1180,
									"src": "1256:75:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										864
									],
									"body": {
										"id": 1178,
										"nodeType": "Block",
										"src": "1560:47:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1173,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1160,
															"src": "1584:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1174,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1162,
															"src": "1590:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1175,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1164,
															"src": "1594:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1170,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "1570:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_ERC20PausableUpgradeable_$1180_$",
																"typeString": "type(contract super ERC20PausableUpgradeable)"
															}
														},
														"id": 1172,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1576:7:4",
														"memberName": "_update",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 864,
														"src": "1570:13:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1176,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1570:30:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1177,
												"nodeType": "ExpressionStatement",
												"src": "1570:30:4"
											}
										]
									},
									"documentation": {
										"id": 1158,
										"nodeType": "StructuredDocumentation",
										"src": "1336:121:4",
										"text": " @dev See {ERC20-_update}.\n Requirements:\n - the contract must not be paused."
									},
									"id": 1179,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1168,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1167,
												"name": "whenNotPaused",
												"nameLocations": [
													"1546:13:4"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1584,
												"src": "1546:13:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "1546:13:4"
										}
									],
									"name": "_update",
									"nameLocation": "1471:7:4",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1166,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1537:8:4"
									},
									"parameters": {
										"id": 1165,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1160,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1487:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1179,
												"src": "1479:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1159,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1479:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1162,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1501:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 1179,
												"src": "1493:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1161,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1493:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1164,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1513:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1179,
												"src": "1505:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1163,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1505:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1478:41:4"
									},
									"returnParameters": {
										"id": 1169,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1560:0:4"
									},
									"scope": 1180,
									"src": "1462:145:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1181,
							"src": "1043:566:4",
							"usedErrors": [
								211,
								214,
								1545,
								1548,
								2063,
								2068,
								2073,
								2082,
								2087,
								2092
							],
							"usedEvents": [
								219,
								1537,
								1542,
								2200,
								2209
							]
						}
					],
					"src": "124:1486:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol",
					"exportedSymbols": {
						"ECDSA": [
							2931
						],
						"EIP712Upgradeable": [
							2026
						],
						"ERC20PermitUpgradeable": [
							1349
						],
						"ERC20Upgradeable": [
							1065
						],
						"IERC20Permit": [
							2328
						],
						"Initializable": [
							448
						],
						"NoncesUpgradeable": [
							1506
						]
					},
					"id": 1350,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1182,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "122:24:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
							"file": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
							"id": 1184,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1350,
							"sourceUnit": 2329,
							"src": "148:93:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1183,
										"name": "IERC20Permit",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2328,
										"src": "156:12:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
							"file": "../ERC20Upgradeable.sol",
							"id": 1186,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1350,
							"sourceUnit": 1066,
							"src": "242:57:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1185,
										"name": "ERC20Upgradeable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1065,
										"src": "250:16:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
							"file": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
							"id": 1188,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1350,
							"sourceUnit": 2932,
							"src": "300:75:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1187,
										"name": "ECDSA",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2931,
										"src": "308:5:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol",
							"file": "../../../utils/cryptography/EIP712Upgradeable.sol",
							"id": 1190,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1350,
							"sourceUnit": 2027,
							"src": "376:84:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1189,
										"name": "EIP712Upgradeable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2026,
										"src": "384:17:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol",
							"file": "../../../utils/NoncesUpgradeable.sol",
							"id": 1192,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1350,
							"sourceUnit": 1507,
							"src": "461:71:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1191,
										"name": "NoncesUpgradeable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1506,
										"src": "469:17:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../../../proxy/utils/Initializable.sol",
							"id": 1194,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1350,
							"sourceUnit": 449,
							"src": "533:69:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1193,
										"name": "Initializable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 448,
										"src": "541:13:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1196,
										"name": "Initializable",
										"nameLocations": [
											"1136:13:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 448,
										"src": "1136:13:5"
									},
									"id": 1197,
									"nodeType": "InheritanceSpecifier",
									"src": "1136:13:5"
								},
								{
									"baseName": {
										"id": 1198,
										"name": "ERC20Upgradeable",
										"nameLocations": [
											"1151:16:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1065,
										"src": "1151:16:5"
									},
									"id": 1199,
									"nodeType": "InheritanceSpecifier",
									"src": "1151:16:5"
								},
								{
									"baseName": {
										"id": 1200,
										"name": "IERC20Permit",
										"nameLocations": [
											"1169:12:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2328,
										"src": "1169:12:5"
									},
									"id": 1201,
									"nodeType": "InheritanceSpecifier",
									"src": "1169:12:5"
								},
								{
									"baseName": {
										"id": 1202,
										"name": "EIP712Upgradeable",
										"nameLocations": [
											"1183:17:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2026,
										"src": "1183:17:5"
									},
									"id": 1203,
									"nodeType": "InheritanceSpecifier",
									"src": "1183:17:5"
								},
								{
									"baseName": {
										"id": 1204,
										"name": "NoncesUpgradeable",
										"nameLocations": [
											"1202:17:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1506,
										"src": "1202:17:5"
									},
									"id": 1205,
									"nodeType": "InheritanceSpecifier",
									"src": "1202:17:5"
								}
							],
							"canonicalName": "ERC20PermitUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1195,
								"nodeType": "StructuredDocumentation",
								"src": "604:487:5",
								"text": " @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."
							},
							"fullyImplemented": true,
							"id": 1349,
							"linearizedBaseContracts": [
								1349,
								1506,
								2026,
								2051,
								2328,
								1065,
								2093,
								2292,
								2266,
								1395,
								448
							],
							"name": "ERC20PermitUpgradeable",
							"nameLocation": "1110:22:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1210,
									"mutability": "constant",
									"name": "PERMIT_TYPEHASH",
									"nameLocation": "1251:15:5",
									"nodeType": "VariableDeclaration",
									"scope": 1349,
									"src": "1226:146:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1206,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1226:7:5",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "5065726d69742861646472657373206f776e65722c61646472657373207370656e6465722c75696e743235362076616c75652c75696e74323536206e6f6e63652c75696e7432353620646561646c696e6529",
												"id": 1208,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "1287:84:5",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
													"typeString": "literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""
												},
												"value": "Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
													"typeString": "literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""
												}
											],
											"id": 1207,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "1277:9:5",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 1209,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "1277:95:5",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 1211,
										"nodeType": "StructuredDocumentation",
										"src": "1379:52:5",
										"text": " @dev Permit deadline has expired."
									},
									"errorSelector": "62791302",
									"id": 1215,
									"name": "ERC2612ExpiredSignature",
									"nameLocation": "1442:23:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1214,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1213,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1474:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 1215,
												"src": "1466:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1212,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1466:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1465:18:5"
									},
									"src": "1436:48:5"
								},
								{
									"documentation": {
										"id": 1216,
										"nodeType": "StructuredDocumentation",
										"src": "1490:45:5",
										"text": " @dev Mismatched signature."
									},
									"errorSelector": "4b800e46",
									"id": 1222,
									"name": "ERC2612InvalidSigner",
									"nameLocation": "1546:20:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1221,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1218,
												"mutability": "mutable",
												"name": "signer",
												"nameLocation": "1575:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1222,
												"src": "1567:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1217,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1567:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1220,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1591:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1222,
												"src": "1583:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1219,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1583:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1566:31:5"
									},
									"src": "1540:58:5"
								},
								{
									"body": {
										"id": 1235,
										"nodeType": "Block",
										"src": "1903:51:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1231,
															"name": "name",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1225,
															"src": "1937:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"hexValue": "31",
															"id": 1232,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1943:3:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6",
																"typeString": "literal_string \"1\""
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6",
																"typeString": "literal_string \"1\""
															}
														],
														"id": 1230,
														"name": "__EIP712_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1779,
														"src": "1913:23:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory,string memory)"
														}
													},
													"id": 1233,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1913:34:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1234,
												"nodeType": "ExpressionStatement",
												"src": "1913:34:5"
											}
										]
									},
									"documentation": {
										"id": 1223,
										"nodeType": "StructuredDocumentation",
										"src": "1604:220:5",
										"text": " @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n It's a good idea to use the same `name` that is defined as the ERC20 token name."
									},
									"id": 1236,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1228,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1227,
												"name": "onlyInitializing",
												"nameLocations": [
													"1886:16:5"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "1886:16:5"
											},
											"nodeType": "ModifierInvocation",
											"src": "1886:16:5"
										}
									],
									"name": "__ERC20Permit_init",
									"nameLocation": "1838:18:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1226,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1225,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "1871:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1236,
												"src": "1857:18:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1224,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1857:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1856:20:5"
									},
									"returnParameters": {
										"id": 1229,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1903:0:5"
									},
									"scope": 1349,
									"src": "1829:125:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1243,
										"nodeType": "Block",
										"src": "2039:2:5",
										"statements": []
									},
									"id": 1244,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1241,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1240,
												"name": "onlyInitializing",
												"nameLocations": [
													"2022:16:5"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "2022:16:5"
											},
											"nodeType": "ModifierInvocation",
											"src": "2022:16:5"
										}
									],
									"name": "__ERC20Permit_init_unchained",
									"nameLocation": "1969:28:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1239,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1238,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1244,
												"src": "1998:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1237,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1998:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1997:15:5"
									},
									"returnParameters": {
										"id": 1242,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2039:0:5"
									},
									"scope": 1349,
									"src": "1960:81:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										2313
									],
									"body": {
										"id": 1320,
										"nodeType": "Block",
										"src": "2284:483:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1265,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1262,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "2298:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1263,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2304:9:5",
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "2298:15:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1264,
														"name": "deadline",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1253,
														"src": "2316:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2298:26:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1271,
												"nodeType": "IfStatement",
												"src": "2294:97:5",
												"trueBody": {
													"id": 1270,
													"nodeType": "Block",
													"src": "2326:65:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1267,
																		"name": "deadline",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1253,
																		"src": "2371:8:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1266,
																	"name": "ERC2612ExpiredSignature",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1215,
																	"src": "2347:23:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$returns$__$",
																		"typeString": "function (uint256) pure"
																	}
																},
																"id": 1268,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2347:33:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1269,
															"nodeType": "RevertStatement",
															"src": "2340:40:5"
														}
													]
												}
											},
											{
												"assignments": [
													1273
												],
												"declarations": [
													{
														"constant": false,
														"id": 1273,
														"mutability": "mutable",
														"name": "structHash",
														"nameLocation": "2409:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 1320,
														"src": "2401:18:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1272,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2401:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1287,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1277,
																	"name": "PERMIT_TYPEHASH",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1210,
																	"src": "2443:15:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 1278,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1247,
																	"src": "2460:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1279,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1249,
																	"src": "2467:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1280,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1251,
																	"src": "2476:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 1282,
																			"name": "owner",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1247,
																			"src": "2493:5:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 1281,
																		"name": "_useNonce",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1480,
																		"src": "2483:9:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$",
																			"typeString": "function (address) returns (uint256)"
																		}
																	},
																	"id": 1283,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2483:16:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1284,
																	"name": "deadline",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1253,
																	"src": "2501:8:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1275,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2432:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1276,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2436:6:5",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "2432:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1285,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2432:78:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1274,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2422:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1286,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2422:89:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2401:110:5"
											},
											{
												"assignments": [
													1289
												],
												"declarations": [
													{
														"constant": false,
														"id": 1289,
														"mutability": "mutable",
														"name": "hash",
														"nameLocation": "2530:4:5",
														"nodeType": "VariableDeclaration",
														"scope": 1320,
														"src": "2522:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1288,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2522:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1293,
												"initialValue": {
													"arguments": [
														{
															"id": 1291,
															"name": "structHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1273,
															"src": "2554:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1290,
														"name": "_hashTypedDataV4",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1828,
														"src": "2537:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32) view returns (bytes32)"
														}
													},
													"id": 1292,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2537:28:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2522:43:5"
											},
											{
												"assignments": [
													1295
												],
												"declarations": [
													{
														"constant": false,
														"id": 1295,
														"mutability": "mutable",
														"name": "signer",
														"nameLocation": "2584:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 1320,
														"src": "2576:14:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1294,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2576:7:5",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1303,
												"initialValue": {
													"arguments": [
														{
															"id": 1298,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1289,
															"src": "2607:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1299,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1255,
															"src": "2613:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 1300,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1257,
															"src": "2616:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1301,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1259,
															"src": "2619:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 1296,
															"name": "ECDSA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2931,
															"src": "2593:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ECDSA_$2931_$",
																"typeString": "type(library ECDSA)"
															}
														},
														"id": 1297,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2599:7:5",
														"memberName": "recover",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2881,
														"src": "2593:13:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 1302,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2593:28:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2576:45:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1306,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1304,
														"name": "signer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1295,
														"src": "2635:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1305,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1247,
														"src": "2645:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2635:15:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1313,
												"nodeType": "IfStatement",
												"src": "2631:88:5",
												"trueBody": {
													"id": 1312,
													"nodeType": "Block",
													"src": "2652:67:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1308,
																		"name": "signer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1295,
																		"src": "2694:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1309,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1247,
																		"src": "2702:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1307,
																	"name": "ERC2612InvalidSigner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1222,
																	"src": "2673:20:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_address_$returns$__$",
																		"typeString": "function (address,address) pure"
																	}
																},
																"id": 1310,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2673:35:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1311,
															"nodeType": "RevertStatement",
															"src": "2666:42:5"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1315,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1247,
															"src": "2738:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1316,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1249,
															"src": "2745:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1317,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1251,
															"src": "2754:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1314,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															948,
															1016
														],
														"referencedDeclaration": 948,
														"src": "2729:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1318,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2729:31:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1319,
												"nodeType": "ExpressionStatement",
												"src": "2729:31:5"
											}
										]
									},
									"documentation": {
										"id": 1245,
										"nodeType": "StructuredDocumentation",
										"src": "2047:43:5",
										"text": " @inheritdoc IERC20Permit"
									},
									"functionSelector": "d505accf",
									"id": 1321,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "2104:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1260,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1247,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2128:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1321,
												"src": "2120:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1246,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2120:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1249,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2151:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1321,
												"src": "2143:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1248,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2143:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1251,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2176:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1321,
												"src": "2168:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1250,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2168:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1253,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "2199:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 1321,
												"src": "2191:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1252,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2191:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1255,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "2223:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 1321,
												"src": "2217:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1254,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2217:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1257,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2242:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 1321,
												"src": "2234:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1256,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2234:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1259,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "2261:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 1321,
												"src": "2253:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1258,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2253:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2110:158:5"
									},
									"returnParameters": {
										"id": 1261,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2284:0:5"
									},
									"scope": 1349,
									"src": "2095:672:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1458,
										2321
									],
									"body": {
										"id": 1337,
										"nodeType": "Block",
										"src": "2932:43:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1334,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1324,
															"src": "2962:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 1332,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "2949:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_ERC20PermitUpgradeable_$1349_$",
																"typeString": "type(contract super ERC20PermitUpgradeable)"
															}
														},
														"id": 1333,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2955:6:5",
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1458,
														"src": "2949:12:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 1335,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2949:19:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1331,
												"id": 1336,
												"nodeType": "Return",
												"src": "2942:26:5"
											}
										]
									},
									"documentation": {
										"id": 1322,
										"nodeType": "StructuredDocumentation",
										"src": "2773:43:5",
										"text": " @inheritdoc IERC20Permit"
									},
									"functionSelector": "7ecebe00",
									"id": 1338,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "2830:6:5",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1328,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1326,
												"name": "IERC20Permit",
												"nameLocations": [
													"2881:12:5"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2328,
												"src": "2881:12:5"
											},
											{
												"id": 1327,
												"name": "NoncesUpgradeable",
												"nameLocations": [
													"2895:17:5"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1506,
												"src": "2895:17:5"
											}
										],
										"src": "2872:41:5"
									},
									"parameters": {
										"id": 1325,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1324,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2845:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1338,
												"src": "2837:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1323,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2837:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2836:15:5"
									},
									"returnParameters": {
										"id": 1331,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1330,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1338,
												"src": "2923:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1329,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2923:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2922:9:5"
									},
									"scope": 1349,
									"src": "2821:154:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2327
									],
									"body": {
										"id": 1347,
										"nodeType": "Block",
										"src": "3150:44:5",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1344,
														"name": "_domainSeparatorV4",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1789,
														"src": "3167:18:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
															"typeString": "function () view returns (bytes32)"
														}
													},
													"id": 1345,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3167:20:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1343,
												"id": 1346,
												"nodeType": "Return",
												"src": "3160:27:5"
											}
										]
									},
									"documentation": {
										"id": 1339,
										"nodeType": "StructuredDocumentation",
										"src": "2981:43:5",
										"text": " @inheritdoc IERC20Permit"
									},
									"functionSelector": "3644e515",
									"id": 1348,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "3091:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1340,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3107:2:5"
									},
									"returnParameters": {
										"id": 1343,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1342,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1348,
												"src": "3141:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1341,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3141:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3140:9:5"
									},
									"scope": 1349,
									"src": "3082:112:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								}
							],
							"scope": 1350,
							"src": "1092:2104:5",
							"usedErrors": [
								211,
								214,
								1215,
								1222,
								1409,
								2063,
								2068,
								2073,
								2082,
								2087,
								2092,
								2594,
								2599,
								2604
							],
							"usedEvents": [
								219,
								2031,
								2200,
								2209
							]
						}
					],
					"src": "122:3075:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							1395
						],
						"Initializable": [
							448
						]
					},
					"id": 1396,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1351,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 1353,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1396,
							"sourceUnit": 449,
							"src": "126:63:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1352,
										"name": "Initializable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 448,
										"src": "134:13:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1355,
										"name": "Initializable",
										"nameLocations": [
											"728:13:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 448,
										"src": "728:13:6"
									},
									"id": 1356,
									"nodeType": "InheritanceSpecifier",
									"src": "728:13:6"
								}
							],
							"canonicalName": "ContextUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1354,
								"nodeType": "StructuredDocumentation",
								"src": "191:496:6",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1395,
							"linearizedBaseContracts": [
								1395,
								448
							],
							"name": "ContextUpgradeable",
							"nameLocation": "706:18:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1361,
										"nodeType": "Block",
										"src": "800:7:6",
										"statements": []
									},
									"id": 1362,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1359,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1358,
												"name": "onlyInitializing",
												"nameLocations": [
													"783:16:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "783:16:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "783:16:6"
										}
									],
									"name": "__Context_init",
									"nameLocation": "757:14:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1357,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "771:2:6"
									},
									"returnParameters": {
										"id": 1360,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "800:0:6"
									},
									"scope": 1395,
									"src": "748:59:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1367,
										"nodeType": "Block",
										"src": "875:7:6",
										"statements": []
									},
									"id": 1368,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1365,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1364,
												"name": "onlyInitializing",
												"nameLocations": [
													"858:16:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "858:16:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "858:16:6"
										}
									],
									"name": "__Context_init_unchained",
									"nameLocation": "822:24:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1363,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "846:2:6"
									},
									"returnParameters": {
										"id": 1366,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "875:0:6"
									},
									"scope": 1395,
									"src": "813:69:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1376,
										"nodeType": "Block",
										"src": "949:34:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1373,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "966:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1374,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "970:6:6",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "966:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1372,
												"id": 1375,
												"nodeType": "Return",
												"src": "959:17:6"
											}
										]
									},
									"id": 1377,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "896:10:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1369,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "906:2:6"
									},
									"returnParameters": {
										"id": 1372,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1371,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1377,
												"src": "940:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1370,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "940:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "939:9:6"
									},
									"scope": 1395,
									"src": "887:96:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1385,
										"nodeType": "Block",
										"src": "1056:32:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1382,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "1073:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1383,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "1077:4:6",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "1073:8:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1381,
												"id": 1384,
												"nodeType": "Return",
												"src": "1066:15:6"
											}
										]
									},
									"id": 1386,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "998:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1378,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1006:2:6"
									},
									"returnParameters": {
										"id": 1381,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1380,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1386,
												"src": "1040:14:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1379,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1040:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1039:16:6"
									},
									"scope": 1395,
									"src": "989:99:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1393,
										"nodeType": "Block",
										"src": "1166:25:6",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 1391,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1183:1:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 1390,
												"id": 1392,
												"nodeType": "Return",
												"src": "1176:8:6"
											}
										]
									},
									"id": 1394,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "1103:20:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1387,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1123:2:6"
									},
									"returnParameters": {
										"id": 1390,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1389,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1394,
												"src": "1157:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1388,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1157:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1156:9:6"
									},
									"scope": 1395,
									"src": "1094:97:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1396,
							"src": "688:505:6",
							"usedErrors": [
								211,
								214
							],
							"usedEvents": [
								219
							]
						}
					],
					"src": "101:1093:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol",
					"exportedSymbols": {
						"Initializable": [
							448
						],
						"NoncesUpgradeable": [
							1506
						]
					},
					"id": 1507,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1397,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "99:24:7"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 1399,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1507,
							"sourceUnit": 449,
							"src": "124:63:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1398,
										"name": "Initializable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 448,
										"src": "132:13:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1401,
										"name": "Initializable",
										"nameLocations": [
											"312:13:7"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 448,
										"src": "312:13:7"
									},
									"id": 1402,
									"nodeType": "InheritanceSpecifier",
									"src": "312:13:7"
								}
							],
							"canonicalName": "NoncesUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1400,
								"nodeType": "StructuredDocumentation",
								"src": "189:83:7",
								"text": " @dev Provides tracking nonces for addresses. Nonces will only increment."
							},
							"fullyImplemented": true,
							"id": 1506,
							"linearizedBaseContracts": [
								1506,
								448
							],
							"name": "NoncesUpgradeable",
							"nameLocation": "291:17:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1403,
										"nodeType": "StructuredDocumentation",
										"src": "332:90:7",
										"text": " @dev The nonce used for an `account` is not the expected current nonce."
									},
									"errorSelector": "752d88c0",
									"id": 1409,
									"name": "InvalidAccountNonce",
									"nameLocation": "433:19:7",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1408,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1405,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "461:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1409,
												"src": "453:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1404,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "453:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1407,
												"mutability": "mutable",
												"name": "currentNonce",
												"nameLocation": "478:12:7",
												"nodeType": "VariableDeclaration",
												"scope": 1409,
												"src": "470:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1406,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "470:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "452:39:7"
									},
									"src": "427:65:7"
								},
								{
									"canonicalName": "NoncesUpgradeable.NoncesStorage",
									"documentation": {
										"id": 1410,
										"nodeType": "StructuredDocumentation",
										"src": "498:64:7",
										"text": "@custom:storage-location erc7201:openzeppelin.storage.Nonces"
									},
									"id": 1415,
									"members": [
										{
											"constant": false,
											"id": 1414,
											"mutability": "mutable",
											"name": "_nonces",
											"nameLocation": "634:7:7",
											"nodeType": "VariableDeclaration",
											"scope": 1415,
											"src": "598:43:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"typeName": {
												"id": 1413,
												"keyName": "account",
												"keyNameLocation": "614:7:7",
												"keyType": {
													"id": 1411,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "606:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "Mapping",
												"src": "598:35:7",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
													"typeString": "mapping(address => uint256)"
												},
												"valueName": "",
												"valueNameLocation": "-1:-1:-1",
												"valueType": {
													"id": 1412,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "625:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											},
											"visibility": "internal"
										}
									],
									"name": "NoncesStorage",
									"nameLocation": "574:13:7",
									"nodeType": "StructDefinition",
									"scope": 1506,
									"src": "567:81:7",
									"visibility": "public"
								},
								{
									"constant": true,
									"id": 1418,
									"mutability": "constant",
									"name": "NoncesStorageLocation",
									"nameLocation": "789:21:7",
									"nodeType": "VariableDeclaration",
									"scope": 1506,
									"src": "764:115:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1416,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "764:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307835616234326365643632383838383235396330386163393864623165623063663730326663313530313334343331316438623130306364316266653462623030",
										"id": 1417,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "813:66:7",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_41026498920877473550552694860415970151284396403628511442111957027090812156672_by_1",
											"typeString": "int_const 4102...(69 digits omitted)...6672"
										},
										"value": "0x5ab42ced628888259c08ac98db1eb0cf702fc1501344311d8b100cd1bfe4bb00"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1425,
										"nodeType": "Block",
										"src": "962:80:7",
										"statements": [
											{
												"AST": {
													"nativeSrc": "981:55:7",
													"nodeType": "YulBlock",
													"src": "981:55:7",
													"statements": [
														{
															"nativeSrc": "995:31:7",
															"nodeType": "YulAssignment",
															"src": "995:31:7",
															"value": {
																"name": "NoncesStorageLocation",
																"nativeSrc": "1005:21:7",
																"nodeType": "YulIdentifier",
																"src": "1005:21:7"
															},
															"variableNames": [
																{
																	"name": "$.slot",
																	"nativeSrc": "995:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "995:6:7"
																}
															]
														}
													]
												},
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 1422,
														"isOffset": false,
														"isSlot": true,
														"src": "995:6:7",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1418,
														"isOffset": false,
														"isSlot": false,
														"src": "1005:21:7",
														"valueSize": 1
													}
												],
												"id": 1424,
												"nodeType": "InlineAssembly",
												"src": "972:64:7"
											}
										]
									},
									"id": 1426,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getNoncesStorage",
									"nameLocation": "895:17:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1419,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "912:2:7"
									},
									"returnParameters": {
										"id": 1423,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1422,
												"mutability": "mutable",
												"name": "$",
												"nameLocation": "959:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1426,
												"src": "937:23:7",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_NoncesStorage_$1415_storage_ptr",
													"typeString": "struct NoncesUpgradeable.NoncesStorage"
												},
												"typeName": {
													"id": 1421,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1420,
														"name": "NoncesStorage",
														"nameLocations": [
															"937:13:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1415,
														"src": "937:13:7"
													},
													"referencedDeclaration": 1415,
													"src": "937:13:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_NoncesStorage_$1415_storage_ptr",
														"typeString": "struct NoncesUpgradeable.NoncesStorage"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "936:25:7"
									},
									"scope": 1506,
									"src": "886:156:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1431,
										"nodeType": "Block",
										"src": "1099:7:7",
										"statements": []
									},
									"id": 1432,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1429,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1428,
												"name": "onlyInitializing",
												"nameLocations": [
													"1082:16:7"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "1082:16:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "1082:16:7"
										}
									],
									"name": "__Nonces_init",
									"nameLocation": "1057:13:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1427,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1070:2:7"
									},
									"returnParameters": {
										"id": 1430,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1099:0:7"
									},
									"scope": 1506,
									"src": "1048:58:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1437,
										"nodeType": "Block",
										"src": "1173:7:7",
										"statements": []
									},
									"id": 1438,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1435,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1434,
												"name": "onlyInitializing",
												"nameLocations": [
													"1156:16:7"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "1156:16:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "1156:16:7"
										}
									],
									"name": "__Nonces_init_unchained",
									"nameLocation": "1121:23:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1433,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1144:2:7"
									},
									"returnParameters": {
										"id": 1436,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1173:0:7"
									},
									"scope": 1506,
									"src": "1112:68:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1457,
										"nodeType": "Block",
										"src": "1328:95:7",
										"statements": [
											{
												"assignments": [
													1448
												],
												"declarations": [
													{
														"constant": false,
														"id": 1448,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "1360:1:7",
														"nodeType": "VariableDeclaration",
														"scope": 1457,
														"src": "1338:23:7",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_NoncesStorage_$1415_storage_ptr",
															"typeString": "struct NoncesUpgradeable.NoncesStorage"
														},
														"typeName": {
															"id": 1447,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1446,
																"name": "NoncesStorage",
																"nameLocations": [
																	"1338:13:7"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1415,
																"src": "1338:13:7"
															},
															"referencedDeclaration": 1415,
															"src": "1338:13:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_NoncesStorage_$1415_storage_ptr",
																"typeString": "struct NoncesUpgradeable.NoncesStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1451,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1449,
														"name": "_getNoncesStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1426,
														"src": "1364:17:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_NoncesStorage_$1415_storage_ptr_$",
															"typeString": "function () pure returns (struct NoncesUpgradeable.NoncesStorage storage pointer)"
														}
													},
													"id": 1450,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1364:19:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_NoncesStorage_$1415_storage_ptr",
														"typeString": "struct NoncesUpgradeable.NoncesStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1338:45:7"
											},
											{
												"expression": {
													"baseExpression": {
														"expression": {
															"id": 1452,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1448,
															"src": "1400:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_NoncesStorage_$1415_storage_ptr",
																"typeString": "struct NoncesUpgradeable.NoncesStorage storage pointer"
															}
														},
														"id": 1453,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1402:7:7",
														"memberName": "_nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1414,
														"src": "1400:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1455,
													"indexExpression": {
														"id": 1454,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1441,
														"src": "1410:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "1400:16:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1445,
												"id": 1456,
												"nodeType": "Return",
												"src": "1393:23:7"
											}
										]
									},
									"documentation": {
										"id": 1439,
										"nodeType": "StructuredDocumentation",
										"src": "1185:69:7",
										"text": " @dev Returns the next unused nonce for an address."
									},
									"functionSelector": "7ecebe00",
									"id": 1458,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "1268:6:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1442,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1441,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1283:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1458,
												"src": "1275:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1440,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1275:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1274:15:7"
									},
									"returnParameters": {
										"id": 1445,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1444,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1458,
												"src": "1319:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1443,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1319:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1318:9:7"
									},
									"scope": 1506,
									"src": "1259:164:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1479,
										"nodeType": "Block",
										"src": "1606:383:7",
										"statements": [
											{
												"assignments": [
													1468
												],
												"declarations": [
													{
														"constant": false,
														"id": 1468,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "1638:1:7",
														"nodeType": "VariableDeclaration",
														"scope": 1479,
														"src": "1616:23:7",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_NoncesStorage_$1415_storage_ptr",
															"typeString": "struct NoncesUpgradeable.NoncesStorage"
														},
														"typeName": {
															"id": 1467,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1466,
																"name": "NoncesStorage",
																"nameLocations": [
																	"1616:13:7"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1415,
																"src": "1616:13:7"
															},
															"referencedDeclaration": 1415,
															"src": "1616:13:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_NoncesStorage_$1415_storage_ptr",
																"typeString": "struct NoncesUpgradeable.NoncesStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1471,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1469,
														"name": "_getNoncesStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1426,
														"src": "1642:17:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_NoncesStorage_$1415_storage_ptr_$",
															"typeString": "function () pure returns (struct NoncesUpgradeable.NoncesStorage storage pointer)"
														}
													},
													"id": 1470,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1642:19:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_NoncesStorage_$1415_storage_ptr",
														"typeString": "struct NoncesUpgradeable.NoncesStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1616:45:7"
											},
											{
												"id": 1478,
												"nodeType": "UncheckedBlock",
												"src": "1864:119:7",
												"statements": [
													{
														"expression": {
															"id": 1476,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "++",
															"prefix": false,
															"src": "1954:18:7",
															"subExpression": {
																"baseExpression": {
																	"expression": {
																		"id": 1472,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1468,
																		"src": "1954:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_NoncesStorage_$1415_storage_ptr",
																			"typeString": "struct NoncesUpgradeable.NoncesStorage storage pointer"
																		}
																	},
																	"id": 1473,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1956:7:7",
																	"memberName": "_nonces",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1414,
																	"src": "1954:9:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1475,
																"indexExpression": {
																	"id": 1474,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1461,
																	"src": "1964:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "1954:16:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1465,
														"id": 1477,
														"nodeType": "Return",
														"src": "1947:25:7"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1459,
										"nodeType": "StructuredDocumentation",
										"src": "1429:103:7",
										"text": " @dev Consumes a nonce.\n Returns the current value and increments nonce."
									},
									"id": 1480,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_useNonce",
									"nameLocation": "1546:9:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1462,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1461,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1564:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1480,
												"src": "1556:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1460,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1556:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1555:15:7"
									},
									"returnParameters": {
										"id": 1465,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1464,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1480,
												"src": "1597:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1463,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1597:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1596:9:7"
									},
									"scope": 1506,
									"src": "1537:452:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1504,
										"nodeType": "Block",
										"src": "2173:149:7",
										"statements": [
											{
												"assignments": [
													1489
												],
												"declarations": [
													{
														"constant": false,
														"id": 1489,
														"mutability": "mutable",
														"name": "current",
														"nameLocation": "2191:7:7",
														"nodeType": "VariableDeclaration",
														"scope": 1504,
														"src": "2183:15:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1488,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2183:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1493,
												"initialValue": {
													"arguments": [
														{
															"id": 1491,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1483,
															"src": "2211:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1490,
														"name": "_useNonce",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1480,
														"src": "2201:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) returns (uint256)"
														}
													},
													"id": 1492,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2201:16:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2183:34:7"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1496,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1494,
														"name": "nonce",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1485,
														"src": "2231:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1495,
														"name": "current",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1489,
														"src": "2240:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2231:16:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1503,
												"nodeType": "IfStatement",
												"src": "2227:89:7",
												"trueBody": {
													"id": 1502,
													"nodeType": "Block",
													"src": "2249:67:7",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1498,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1483,
																		"src": "2290:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1499,
																		"name": "current",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1489,
																		"src": "2297:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1497,
																	"name": "InvalidAccountNonce",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1409,
																	"src": "2270:19:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256) pure"
																	}
																},
																"id": 1500,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2270:35:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1501,
															"nodeType": "RevertStatement",
															"src": "2263:42:7"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1481,
										"nodeType": "StructuredDocumentation",
										"src": "1995:100:7",
										"text": " @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`."
									},
									"id": 1505,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_useCheckedNonce",
									"nameLocation": "2109:16:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1486,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1483,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2134:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1505,
												"src": "2126:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1482,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2126:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1485,
												"mutability": "mutable",
												"name": "nonce",
												"nameLocation": "2149:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1505,
												"src": "2141:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1484,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2141:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2125:30:7"
									},
									"returnParameters": {
										"id": 1487,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2173:0:7"
									},
									"scope": 1506,
									"src": "2100:222:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1507,
							"src": "273:2051:7",
							"usedErrors": [
								211,
								214,
								1409
							],
							"usedEvents": [
								219
							]
						}
					],
					"src": "99:2226:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							1395
						],
						"Initializable": [
							448
						],
						"PausableUpgradeable": [
							1682
						]
					},
					"id": 1683,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1508,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "102:24:8"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
							"file": "../utils/ContextUpgradeable.sol",
							"id": 1510,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1683,
							"sourceUnit": 1396,
							"src": "128:67:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1509,
										"name": "ContextUpgradeable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1395,
										"src": "136:18:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 1512,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1683,
							"sourceUnit": 449,
							"src": "196:63:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1511,
										"name": "Initializable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 448,
										"src": "204:13:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1514,
										"name": "Initializable",
										"nameLocations": [
											"742:13:8"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 448,
										"src": "742:13:8"
									},
									"id": 1515,
									"nodeType": "InheritanceSpecifier",
									"src": "742:13:8"
								},
								{
									"baseName": {
										"id": 1516,
										"name": "ContextUpgradeable",
										"nameLocations": [
											"757:18:8"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1395,
										"src": "757:18:8"
									},
									"id": 1517,
									"nodeType": "InheritanceSpecifier",
									"src": "757:18:8"
								}
							],
							"canonicalName": "PausableUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1513,
								"nodeType": "StructuredDocumentation",
								"src": "261:439:8",
								"text": " @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."
							},
							"fullyImplemented": true,
							"id": 1682,
							"linearizedBaseContracts": [
								1682,
								1395,
								448
							],
							"name": "PausableUpgradeable",
							"nameLocation": "719:19:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "PausableUpgradeable.PausableStorage",
									"documentation": {
										"id": 1518,
										"nodeType": "StructuredDocumentation",
										"src": "782:66:8",
										"text": "@custom:storage-location erc7201:openzeppelin.storage.Pausable"
									},
									"id": 1521,
									"members": [
										{
											"constant": false,
											"id": 1520,
											"mutability": "mutable",
											"name": "_paused",
											"nameLocation": "891:7:8",
											"nodeType": "VariableDeclaration",
											"scope": 1521,
											"src": "886:12:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1519,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "886:4:8",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PausableStorage",
									"nameLocation": "860:15:8",
									"nodeType": "StructDefinition",
									"scope": 1682,
									"src": "853:52:8",
									"visibility": "public"
								},
								{
									"constant": true,
									"id": 1524,
									"mutability": "constant",
									"name": "PausableStorageLocation",
									"nameLocation": "1048:23:8",
									"nodeType": "VariableDeclaration",
									"scope": 1682,
									"src": "1023:117:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1522,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1023:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307863643565643135633665313837653737653961656538383138346332316634663231383261623538323763623362376530376662656463643633663033333030",
										"id": 1523,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1074:66:8",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_92891662540554778686986514950364265630913525426840345632122912437671245656832_by_1",
											"typeString": "int_const 9289...(69 digits omitted)...6832"
										},
										"value": "0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1531,
										"nodeType": "Block",
										"src": "1227:82:8",
										"statements": [
											{
												"AST": {
													"nativeSrc": "1246:57:8",
													"nodeType": "YulBlock",
													"src": "1246:57:8",
													"statements": [
														{
															"nativeSrc": "1260:33:8",
															"nodeType": "YulAssignment",
															"src": "1260:33:8",
															"value": {
																"name": "PausableStorageLocation",
																"nativeSrc": "1270:23:8",
																"nodeType": "YulIdentifier",
																"src": "1270:23:8"
															},
															"variableNames": [
																{
																	"name": "$.slot",
																	"nativeSrc": "1260:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "1260:6:8"
																}
															]
														}
													]
												},
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 1528,
														"isOffset": false,
														"isSlot": true,
														"src": "1260:6:8",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1524,
														"isOffset": false,
														"isSlot": false,
														"src": "1270:23:8",
														"valueSize": 1
													}
												],
												"id": 1530,
												"nodeType": "InlineAssembly",
												"src": "1237:66:8"
											}
										]
									},
									"id": 1532,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getPausableStorage",
									"nameLocation": "1156:19:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1525,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1175:2:8"
									},
									"returnParameters": {
										"id": 1529,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1528,
												"mutability": "mutable",
												"name": "$",
												"nameLocation": "1224:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 1532,
												"src": "1200:25:8",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PausableStorage_$1521_storage_ptr",
													"typeString": "struct PausableUpgradeable.PausableStorage"
												},
												"typeName": {
													"id": 1527,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1526,
														"name": "PausableStorage",
														"nameLocations": [
															"1200:15:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1521,
														"src": "1200:15:8"
													},
													"referencedDeclaration": 1521,
													"src": "1200:15:8",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PausableStorage_$1521_storage_ptr",
														"typeString": "struct PausableUpgradeable.PausableStorage"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1199:27:8"
									},
									"scope": 1682,
									"src": "1147:162:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1533,
										"nodeType": "StructuredDocumentation",
										"src": "1315:73:8",
										"text": " @dev Emitted when the pause is triggered by `account`."
									},
									"eventSelector": "62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258",
									"id": 1537,
									"name": "Paused",
									"nameLocation": "1399:6:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1536,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1535,
												"indexed": false,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1414:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1537,
												"src": "1406:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1534,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1406:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1405:17:8"
									},
									"src": "1393:30:8"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1538,
										"nodeType": "StructuredDocumentation",
										"src": "1429:70:8",
										"text": " @dev Emitted when the pause is lifted by `account`."
									},
									"eventSelector": "5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa",
									"id": 1542,
									"name": "Unpaused",
									"nameLocation": "1510:8:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1541,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1540,
												"indexed": false,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1527:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1542,
												"src": "1519:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1539,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1519:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1518:17:8"
									},
									"src": "1504:32:8"
								},
								{
									"documentation": {
										"id": 1543,
										"nodeType": "StructuredDocumentation",
										"src": "1542:76:8",
										"text": " @dev The operation failed because the contract is paused."
									},
									"errorSelector": "d93c0665",
									"id": 1545,
									"name": "EnforcedPause",
									"nameLocation": "1629:13:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1544,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1642:2:8"
									},
									"src": "1623:22:8"
								},
								{
									"documentation": {
										"id": 1546,
										"nodeType": "StructuredDocumentation",
										"src": "1651:80:8",
										"text": " @dev The operation failed because the contract is not paused."
									},
									"errorSelector": "8dfc202b",
									"id": 1548,
									"name": "ExpectedPause",
									"nameLocation": "1742:13:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1547,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1755:2:8"
									},
									"src": "1736:22:8"
								},
								{
									"body": {
										"id": 1557,
										"nodeType": "Block",
										"src": "1889:44:8",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1554,
														"name": "__Pausable_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1576,
														"src": "1899:25:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 1555,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1899:27:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1556,
												"nodeType": "ExpressionStatement",
												"src": "1899:27:8"
											}
										]
									},
									"documentation": {
										"id": 1549,
										"nodeType": "StructuredDocumentation",
										"src": "1764:67:8",
										"text": " @dev Initializes the contract in unpaused state."
									},
									"id": 1558,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1552,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1551,
												"name": "onlyInitializing",
												"nameLocations": [
													"1872:16:8"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "1872:16:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "1872:16:8"
										}
									],
									"name": "__Pausable_init",
									"nameLocation": "1845:15:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1550,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1860:2:8"
									},
									"returnParameters": {
										"id": 1553,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1889:0:8"
									},
									"scope": 1682,
									"src": "1836:97:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1575,
										"nodeType": "Block",
										"src": "2002:93:8",
										"statements": [
											{
												"assignments": [
													1565
												],
												"declarations": [
													{
														"constant": false,
														"id": 1565,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "2036:1:8",
														"nodeType": "VariableDeclaration",
														"scope": 1575,
														"src": "2012:25:8",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_PausableStorage_$1521_storage_ptr",
															"typeString": "struct PausableUpgradeable.PausableStorage"
														},
														"typeName": {
															"id": 1564,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1563,
																"name": "PausableStorage",
																"nameLocations": [
																	"2012:15:8"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1521,
																"src": "2012:15:8"
															},
															"referencedDeclaration": 1521,
															"src": "2012:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PausableStorage_$1521_storage_ptr",
																"typeString": "struct PausableUpgradeable.PausableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1568,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1566,
														"name": "_getPausableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1532,
														"src": "2040:19:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_PausableStorage_$1521_storage_ptr_$",
															"typeString": "function () pure returns (struct PausableUpgradeable.PausableStorage storage pointer)"
														}
													},
													"id": 1567,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2040:21:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PausableStorage_$1521_storage_ptr",
														"typeString": "struct PausableUpgradeable.PausableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2012:49:8"
											},
											{
												"expression": {
													"id": 1573,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1569,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1565,
															"src": "2071:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PausableStorage_$1521_storage_ptr",
																"typeString": "struct PausableUpgradeable.PausableStorage storage pointer"
															}
														},
														"id": 1571,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "2073:7:8",
														"memberName": "_paused",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1520,
														"src": "2071:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 1572,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2083:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "2071:17:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1574,
												"nodeType": "ExpressionStatement",
												"src": "2071:17:8"
											}
										]
									},
									"id": 1576,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1561,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1560,
												"name": "onlyInitializing",
												"nameLocations": [
													"1985:16:8"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "1985:16:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "1985:16:8"
										}
									],
									"name": "__Pausable_init_unchained",
									"nameLocation": "1948:25:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1559,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1973:2:8"
									},
									"returnParameters": {
										"id": 1562,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2002:0:8"
									},
									"scope": 1682,
									"src": "1939:156:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1583,
										"nodeType": "Block",
										"src": "2306:47:8",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1579,
														"name": "_requireNotPaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1620,
														"src": "2316:17:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 1580,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2316:19:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1581,
												"nodeType": "ExpressionStatement",
												"src": "2316:19:8"
											},
											{
												"id": 1582,
												"nodeType": "PlaceholderStatement",
												"src": "2345:1:8"
											}
										]
									},
									"documentation": {
										"id": 1577,
										"nodeType": "StructuredDocumentation",
										"src": "2101:175:8",
										"text": " @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."
									},
									"id": 1584,
									"name": "whenNotPaused",
									"nameLocation": "2290:13:8",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1578,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2303:2:8"
									},
									"src": "2281:72:8",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1591,
										"nodeType": "Block",
										"src": "2553:44:8",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1587,
														"name": "_requirePaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1633,
														"src": "2563:14:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 1588,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2563:16:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1589,
												"nodeType": "ExpressionStatement",
												"src": "2563:16:8"
											},
											{
												"id": 1590,
												"nodeType": "PlaceholderStatement",
												"src": "2589:1:8"
											}
										]
									},
									"documentation": {
										"id": 1585,
										"nodeType": "StructuredDocumentation",
										"src": "2359:167:8",
										"text": " @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."
									},
									"id": 1592,
									"name": "whenPaused",
									"nameLocation": "2540:10:8",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1586,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2550:2:8"
									},
									"src": "2531:66:8",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1607,
										"nodeType": "Block",
										"src": "2745:92:8",
										"statements": [
											{
												"assignments": [
													1600
												],
												"declarations": [
													{
														"constant": false,
														"id": 1600,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "2779:1:8",
														"nodeType": "VariableDeclaration",
														"scope": 1607,
														"src": "2755:25:8",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_PausableStorage_$1521_storage_ptr",
															"typeString": "struct PausableUpgradeable.PausableStorage"
														},
														"typeName": {
															"id": 1599,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1598,
																"name": "PausableStorage",
																"nameLocations": [
																	"2755:15:8"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1521,
																"src": "2755:15:8"
															},
															"referencedDeclaration": 1521,
															"src": "2755:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PausableStorage_$1521_storage_ptr",
																"typeString": "struct PausableUpgradeable.PausableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1603,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1601,
														"name": "_getPausableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1532,
														"src": "2783:19:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_PausableStorage_$1521_storage_ptr_$",
															"typeString": "function () pure returns (struct PausableUpgradeable.PausableStorage storage pointer)"
														}
													},
													"id": 1602,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2783:21:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PausableStorage_$1521_storage_ptr",
														"typeString": "struct PausableUpgradeable.PausableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2755:49:8"
											},
											{
												"expression": {
													"expression": {
														"id": 1604,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1600,
														"src": "2821:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_PausableStorage_$1521_storage_ptr",
															"typeString": "struct PausableUpgradeable.PausableStorage storage pointer"
														}
													},
													"id": 1605,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "2823:7:8",
													"memberName": "_paused",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1520,
													"src": "2821:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1597,
												"id": 1606,
												"nodeType": "Return",
												"src": "2814:16:8"
											}
										]
									},
									"documentation": {
										"id": 1593,
										"nodeType": "StructuredDocumentation",
										"src": "2603:84:8",
										"text": " @dev Returns true if the contract is paused, and false otherwise."
									},
									"functionSelector": "5c975abb",
									"id": 1608,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "paused",
									"nameLocation": "2701:6:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1594,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2707:2:8"
									},
									"returnParameters": {
										"id": 1597,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1596,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1608,
												"src": "2739:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1595,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2739:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2738:6:8"
									},
									"scope": 1682,
									"src": "2692:145:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1619,
										"nodeType": "Block",
										"src": "2956:77:8",
										"statements": [
											{
												"condition": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1612,
														"name": "paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1608,
														"src": "2970:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
															"typeString": "function () view returns (bool)"
														}
													},
													"id": 1613,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2970:8:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1618,
												"nodeType": "IfStatement",
												"src": "2966:61:8",
												"trueBody": {
													"id": 1617,
													"nodeType": "Block",
													"src": "2980:47:8",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1614,
																	"name": "EnforcedPause",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1545,
																	"src": "3001:13:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1615,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3001:15:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1616,
															"nodeType": "RevertStatement",
															"src": "2994:22:8"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1609,
										"nodeType": "StructuredDocumentation",
										"src": "2843:57:8",
										"text": " @dev Throws if the contract is paused."
									},
									"id": 1620,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_requireNotPaused",
									"nameLocation": "2914:17:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1610,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2931:2:8"
									},
									"returnParameters": {
										"id": 1611,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2956:0:8"
									},
									"scope": 1682,
									"src": "2905:128:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1632,
										"nodeType": "Block",
										"src": "3153:78:8",
										"statements": [
											{
												"condition": {
													"id": 1626,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "3167:9:8",
													"subExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1624,
															"name": "paused",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1608,
															"src": "3168:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																"typeString": "function () view returns (bool)"
															}
														},
														"id": 1625,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3168:8:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1631,
												"nodeType": "IfStatement",
												"src": "3163:62:8",
												"trueBody": {
													"id": 1630,
													"nodeType": "Block",
													"src": "3178:47:8",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1627,
																	"name": "ExpectedPause",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1548,
																	"src": "3199:13:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1628,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3199:15:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1629,
															"nodeType": "RevertStatement",
															"src": "3192:22:8"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1621,
										"nodeType": "StructuredDocumentation",
										"src": "3039:61:8",
										"text": " @dev Throws if the contract is not paused."
									},
									"id": 1633,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_requirePaused",
									"nameLocation": "3114:14:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1622,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3128:2:8"
									},
									"returnParameters": {
										"id": 1623,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3153:0:8"
									},
									"scope": 1682,
									"src": "3105:126:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1656,
										"nodeType": "Block",
										"src": "3415:127:8",
										"statements": [
											{
												"assignments": [
													1641
												],
												"declarations": [
													{
														"constant": false,
														"id": 1641,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "3449:1:8",
														"nodeType": "VariableDeclaration",
														"scope": 1656,
														"src": "3425:25:8",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_PausableStorage_$1521_storage_ptr",
															"typeString": "struct PausableUpgradeable.PausableStorage"
														},
														"typeName": {
															"id": 1640,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1639,
																"name": "PausableStorage",
																"nameLocations": [
																	"3425:15:8"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1521,
																"src": "3425:15:8"
															},
															"referencedDeclaration": 1521,
															"src": "3425:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PausableStorage_$1521_storage_ptr",
																"typeString": "struct PausableUpgradeable.PausableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1644,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1642,
														"name": "_getPausableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1532,
														"src": "3453:19:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_PausableStorage_$1521_storage_ptr_$",
															"typeString": "function () pure returns (struct PausableUpgradeable.PausableStorage storage pointer)"
														}
													},
													"id": 1643,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3453:21:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PausableStorage_$1521_storage_ptr",
														"typeString": "struct PausableUpgradeable.PausableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3425:49:8"
											},
											{
												"expression": {
													"id": 1649,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1645,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1641,
															"src": "3484:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PausableStorage_$1521_storage_ptr",
																"typeString": "struct PausableUpgradeable.PausableStorage storage pointer"
															}
														},
														"id": 1647,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "3486:7:8",
														"memberName": "_paused",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1520,
														"src": "3484:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 1648,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3496:4:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "3484:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1650,
												"nodeType": "ExpressionStatement",
												"src": "3484:16:8"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1652,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1377,
																"src": "3522:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1653,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3522:12:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1651,
														"name": "Paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1537,
														"src": "3515:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 1654,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3515:20:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1655,
												"nodeType": "EmitStatement",
												"src": "3510:25:8"
											}
										]
									},
									"documentation": {
										"id": 1634,
										"nodeType": "StructuredDocumentation",
										"src": "3237:124:8",
										"text": " @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."
									},
									"id": 1657,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1637,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1636,
												"name": "whenNotPaused",
												"nameLocations": [
													"3401:13:8"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1584,
												"src": "3401:13:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "3401:13:8"
										}
									],
									"name": "_pause",
									"nameLocation": "3375:6:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1635,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3381:2:8"
									},
									"returnParameters": {
										"id": 1638,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3415:0:8"
									},
									"scope": 1682,
									"src": "3366:176:8",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1680,
										"nodeType": "Block",
										"src": "3722:130:8",
										"statements": [
											{
												"assignments": [
													1665
												],
												"declarations": [
													{
														"constant": false,
														"id": 1665,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "3756:1:8",
														"nodeType": "VariableDeclaration",
														"scope": 1680,
														"src": "3732:25:8",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_PausableStorage_$1521_storage_ptr",
															"typeString": "struct PausableUpgradeable.PausableStorage"
														},
														"typeName": {
															"id": 1664,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1663,
																"name": "PausableStorage",
																"nameLocations": [
																	"3732:15:8"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1521,
																"src": "3732:15:8"
															},
															"referencedDeclaration": 1521,
															"src": "3732:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PausableStorage_$1521_storage_ptr",
																"typeString": "struct PausableUpgradeable.PausableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1668,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1666,
														"name": "_getPausableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1532,
														"src": "3760:19:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_PausableStorage_$1521_storage_ptr_$",
															"typeString": "function () pure returns (struct PausableUpgradeable.PausableStorage storage pointer)"
														}
													},
													"id": 1667,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3760:21:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PausableStorage_$1521_storage_ptr",
														"typeString": "struct PausableUpgradeable.PausableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3732:49:8"
											},
											{
												"expression": {
													"id": 1673,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1669,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1665,
															"src": "3791:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PausableStorage_$1521_storage_ptr",
																"typeString": "struct PausableUpgradeable.PausableStorage storage pointer"
															}
														},
														"id": 1671,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "3793:7:8",
														"memberName": "_paused",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1520,
														"src": "3791:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 1672,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3803:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "3791:17:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1674,
												"nodeType": "ExpressionStatement",
												"src": "3791:17:8"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1676,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1377,
																"src": "3832:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1677,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3832:12:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1675,
														"name": "Unpaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1542,
														"src": "3823:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 1678,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3823:22:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1679,
												"nodeType": "EmitStatement",
												"src": "3818:27:8"
											}
										]
									},
									"documentation": {
										"id": 1658,
										"nodeType": "StructuredDocumentation",
										"src": "3548:121:8",
										"text": " @dev Returns to normal state.\n Requirements:\n - The contract must be paused."
									},
									"id": 1681,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1661,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1660,
												"name": "whenPaused",
												"nameLocations": [
													"3711:10:8"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1592,
												"src": "3711:10:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "3711:10:8"
										}
									],
									"name": "_unpause",
									"nameLocation": "3683:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1659,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3691:2:8"
									},
									"returnParameters": {
										"id": 1662,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3722:0:8"
									},
									"scope": 1682,
									"src": "3674:178:8",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1683,
							"src": "701:3153:8",
							"usedErrors": [
								211,
								214,
								1545,
								1548
							],
							"usedEvents": [
								219,
								1537,
								1542
							]
						}
					],
					"src": "102:3753:8"
				},
				"id": 8
			},
			"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol",
					"exportedSymbols": {
						"EIP712Upgradeable": [
							2026
						],
						"IERC5267": [
							2051
						],
						"Initializable": [
							448
						],
						"MessageHashUtils": [
							3005
						]
					},
					"id": 2027,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1684,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "113:24:9"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
							"file": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
							"id": 1686,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2027,
							"sourceUnit": 3006,
							"src": "139:97:9",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1685,
										"name": "MessageHashUtils",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3005,
										"src": "147:16:9",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/IERC5267.sol",
							"file": "@openzeppelin/contracts/interfaces/IERC5267.sol",
							"id": 1688,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2027,
							"sourceUnit": 2052,
							"src": "237:73:9",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1687,
										"name": "IERC5267",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2051,
										"src": "245:8:9",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../../proxy/utils/Initializable.sol",
							"id": 1690,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2027,
							"sourceUnit": 449,
							"src": "311:66:9",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1689,
										"name": "Initializable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 448,
										"src": "319:13:9",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1692,
										"name": "Initializable",
										"nameLocations": [
											"1998:13:9"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 448,
										"src": "1998:13:9"
									},
									"id": 1693,
									"nodeType": "InheritanceSpecifier",
									"src": "1998:13:9"
								},
								{
									"baseName": {
										"id": 1694,
										"name": "IERC5267",
										"nameLocations": [
											"2013:8:9"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2051,
										"src": "2013:8:9"
									},
									"id": 1695,
									"nodeType": "InheritanceSpecifier",
									"src": "2013:8:9"
								}
							],
							"canonicalName": "EIP712Upgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1691,
								"nodeType": "StructuredDocumentation",
								"src": "379:1579:9",
								"text": " @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n ({_hashTypedDataV4}).\n The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n the chain id to protect against replay attacks on an eventual fork of the chain.\n NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n separator from the immutable values, which is cheaper than accessing a cached version in cold storage."
							},
							"fullyImplemented": true,
							"id": 2026,
							"linearizedBaseContracts": [
								2026,
								2051,
								448
							],
							"name": "EIP712Upgradeable",
							"nameLocation": "1977:17:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1700,
									"mutability": "constant",
									"name": "TYPE_HASH",
									"nameLocation": "2053:9:9",
									"nodeType": "VariableDeclaration",
									"scope": 2026,
									"src": "2028:140:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1696,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2028:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429",
												"id": 1698,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "2083:84:9",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
													"typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
												},
												"value": "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
													"typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
												}
											],
											"id": 1697,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "2073:9:9",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 1699,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "2073:95:9",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"canonicalName": "EIP712Upgradeable.EIP712Storage",
									"documentation": {
										"id": 1701,
										"nodeType": "StructuredDocumentation",
										"src": "2175:64:9",
										"text": "@custom:storage-location erc7201:openzeppelin.storage.EIP712"
									},
									"id": 1712,
									"members": [
										{
											"constant": false,
											"id": 1704,
											"mutability": "mutable",
											"name": "_hashedName",
											"nameLocation": "2332:11:9",
											"nodeType": "VariableDeclaration",
											"scope": 1712,
											"src": "2324:19:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 1703,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "2324:7:9",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1707,
											"mutability": "mutable",
											"name": "_hashedVersion",
											"nameLocation": "2413:14:9",
											"nodeType": "VariableDeclaration",
											"scope": 1712,
											"src": "2405:22:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 1706,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "2405:7:9",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1709,
											"mutability": "mutable",
											"name": "_name",
											"nameLocation": "2445:5:9",
											"nodeType": "VariableDeclaration",
											"scope": 1712,
											"src": "2438:12:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 1708,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "2438:6:9",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1711,
											"mutability": "mutable",
											"name": "_version",
											"nameLocation": "2467:8:9",
											"nodeType": "VariableDeclaration",
											"scope": 1712,
											"src": "2460:15:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 1710,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "2460:6:9",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "EIP712Storage",
									"nameLocation": "2251:13:9",
									"nodeType": "StructDefinition",
									"scope": 2026,
									"src": "2244:238:9",
									"visibility": "public"
								},
								{
									"constant": true,
									"id": 1715,
									"mutability": "constant",
									"name": "EIP712StorageLocation",
									"nameLocation": "2623:21:9",
									"nodeType": "VariableDeclaration",
									"scope": 2026,
									"src": "2598:115:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1713,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2598:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307861313661343664393432363163373531376363386666383966363163306365393335393865336338343938303130313164656536343961366135353764313030",
										"id": 1714,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2647:66:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_73010143390315934406010559831118728393600729754696197287367516085911467577600_by_1",
											"typeString": "int_const 7301...(69 digits omitted)...7600"
										},
										"value": "0xa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d100"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1722,
										"nodeType": "Block",
										"src": "2796:80:9",
										"statements": [
											{
												"AST": {
													"nativeSrc": "2815:55:9",
													"nodeType": "YulBlock",
													"src": "2815:55:9",
													"statements": [
														{
															"nativeSrc": "2829:31:9",
															"nodeType": "YulAssignment",
															"src": "2829:31:9",
															"value": {
																"name": "EIP712StorageLocation",
																"nativeSrc": "2839:21:9",
																"nodeType": "YulIdentifier",
																"src": "2839:21:9"
															},
															"variableNames": [
																{
																	"name": "$.slot",
																	"nativeSrc": "2829:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "2829:6:9"
																}
															]
														}
													]
												},
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 1719,
														"isOffset": false,
														"isSlot": true,
														"src": "2829:6:9",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1715,
														"isOffset": false,
														"isSlot": false,
														"src": "2839:21:9",
														"valueSize": 1
													}
												],
												"id": 1721,
												"nodeType": "InlineAssembly",
												"src": "2806:64:9"
											}
										]
									},
									"id": 1723,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getEIP712Storage",
									"nameLocation": "2729:17:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1716,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2746:2:9"
									},
									"returnParameters": {
										"id": 1720,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1719,
												"mutability": "mutable",
												"name": "$",
												"nameLocation": "2793:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1723,
												"src": "2771:23:9",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_EIP712Storage_$1712_storage_ptr",
													"typeString": "struct EIP712Upgradeable.EIP712Storage"
												},
												"typeName": {
													"id": 1718,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1717,
														"name": "EIP712Storage",
														"nameLocations": [
															"2771:13:9"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1712,
														"src": "2771:13:9"
													},
													"referencedDeclaration": 1712,
													"src": "2771:13:9",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_EIP712Storage_$1712_storage_ptr",
														"typeString": "struct EIP712Upgradeable.EIP712Storage"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2770:25:9"
									},
									"scope": 2026,
									"src": "2720:156:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1738,
										"nodeType": "Block",
										"src": "3538:55:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1734,
															"name": "name",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1726,
															"src": "3572:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"id": 1735,
															"name": "version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1728,
															"src": "3578:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1733,
														"name": "__EIP712_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1779,
														"src": "3548:23:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory,string memory)"
														}
													},
													"id": 1736,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3548:38:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1737,
												"nodeType": "ExpressionStatement",
												"src": "3548:38:9"
											}
										]
									},
									"documentation": {
										"id": 1724,
										"nodeType": "StructuredDocumentation",
										"src": "2882:559:9",
										"text": " @dev Initializes the domain separator and parameter caches.\n The meaning of `name` and `version` is specified in\n https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n - `version`: the current major version of the signing domain.\n NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n contract upgrade]."
									},
									"id": 1739,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1731,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1730,
												"name": "onlyInitializing",
												"nameLocations": [
													"3521:16:9"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "3521:16:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "3521:16:9"
										}
									],
									"name": "__EIP712_init",
									"nameLocation": "3455:13:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1729,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1726,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "3483:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1739,
												"src": "3469:18:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1725,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3469:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1728,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "3503:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1739,
												"src": "3489:21:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1727,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3489:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3468:43:9"
									},
									"returnParameters": {
										"id": 1732,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3538:0:9"
									},
									"scope": 2026,
									"src": "3446:147:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1778,
										"nodeType": "Block",
										"src": "3701:228:9",
										"statements": [
											{
												"assignments": [
													1750
												],
												"declarations": [
													{
														"constant": false,
														"id": 1750,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "3733:1:9",
														"nodeType": "VariableDeclaration",
														"scope": 1778,
														"src": "3711:23:9",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_EIP712Storage_$1712_storage_ptr",
															"typeString": "struct EIP712Upgradeable.EIP712Storage"
														},
														"typeName": {
															"id": 1749,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1748,
																"name": "EIP712Storage",
																"nameLocations": [
																	"3711:13:9"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1712,
																"src": "3711:13:9"
															},
															"referencedDeclaration": 1712,
															"src": "3711:13:9",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_EIP712Storage_$1712_storage_ptr",
																"typeString": "struct EIP712Upgradeable.EIP712Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1753,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1751,
														"name": "_getEIP712Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1723,
														"src": "3737:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_EIP712Storage_$1712_storage_ptr_$",
															"typeString": "function () pure returns (struct EIP712Upgradeable.EIP712Storage storage pointer)"
														}
													},
													"id": 1752,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3737:19:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_EIP712Storage_$1712_storage_ptr",
														"typeString": "struct EIP712Upgradeable.EIP712Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3711:45:9"
											},
											{
												"expression": {
													"id": 1758,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1754,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1750,
															"src": "3766:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_EIP712Storage_$1712_storage_ptr",
																"typeString": "struct EIP712Upgradeable.EIP712Storage storage pointer"
															}
														},
														"id": 1756,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "3768:5:9",
														"memberName": "_name",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1709,
														"src": "3766:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1757,
														"name": "name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1741,
														"src": "3776:4:9",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "3766:14:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 1759,
												"nodeType": "ExpressionStatement",
												"src": "3766:14:9"
											},
											{
												"expression": {
													"id": 1764,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1760,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1750,
															"src": "3790:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_EIP712Storage_$1712_storage_ptr",
																"typeString": "struct EIP712Upgradeable.EIP712Storage storage pointer"
															}
														},
														"id": 1762,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "3792:8:9",
														"memberName": "_version",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1711,
														"src": "3790:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1763,
														"name": "version",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1743,
														"src": "3803:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "3790:20:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 1765,
												"nodeType": "ExpressionStatement",
												"src": "3790:20:9"
											},
											{
												"expression": {
													"id": 1770,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1766,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1750,
															"src": "3875:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_EIP712Storage_$1712_storage_ptr",
																"typeString": "struct EIP712Upgradeable.EIP712Storage storage pointer"
															}
														},
														"id": 1768,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "3877:11:9",
														"memberName": "_hashedName",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1704,
														"src": "3875:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 1769,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3891:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3875:17:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 1771,
												"nodeType": "ExpressionStatement",
												"src": "3875:17:9"
											},
											{
												"expression": {
													"id": 1776,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1772,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1750,
															"src": "3902:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_EIP712Storage_$1712_storage_ptr",
																"typeString": "struct EIP712Upgradeable.EIP712Storage storage pointer"
															}
														},
														"id": 1774,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "3904:14:9",
														"memberName": "_hashedVersion",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1707,
														"src": "3902:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 1775,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3921:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3902:20:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 1777,
												"nodeType": "ExpressionStatement",
												"src": "3902:20:9"
											}
										]
									},
									"id": 1779,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1746,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1745,
												"name": "onlyInitializing",
												"nameLocations": [
													"3684:16:9"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "3684:16:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "3684:16:9"
										}
									],
									"name": "__EIP712_init_unchained",
									"nameLocation": "3608:23:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1744,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1741,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "3646:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1779,
												"src": "3632:18:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1740,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3632:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1743,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "3666:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1779,
												"src": "3652:21:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1742,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3652:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3631:43:9"
									},
									"returnParameters": {
										"id": 1747,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3701:0:9"
									},
									"scope": 2026,
									"src": "3599:330:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1788,
										"nodeType": "Block",
										"src": "4077:47:9",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1785,
														"name": "_buildDomainSeparator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1812,
														"src": "4094:21:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
															"typeString": "function () view returns (bytes32)"
														}
													},
													"id": 1786,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4094:23:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1784,
												"id": 1787,
												"nodeType": "Return",
												"src": "4087:30:9"
											}
										]
									},
									"documentation": {
										"id": 1780,
										"nodeType": "StructuredDocumentation",
										"src": "3935:75:9",
										"text": " @dev Returns the domain separator for the current chain."
									},
									"id": 1789,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_domainSeparatorV4",
									"nameLocation": "4024:18:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1781,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4042:2:9"
									},
									"returnParameters": {
										"id": 1784,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1783,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1789,
												"src": "4068:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1782,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4068:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4067:9:9"
									},
									"scope": 2026,
									"src": "4015:109:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1811,
										"nodeType": "Block",
										"src": "4194:127:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1797,
																	"name": "TYPE_HASH",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1700,
																	"src": "4232:9:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1798,
																		"name": "_EIP712NameHash",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1973,
																		"src": "4243:15:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																			"typeString": "function () view returns (bytes32)"
																		}
																	},
																	"id": 1799,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4243:17:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1800,
																		"name": "_EIP712VersionHash",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2025,
																		"src": "4262:18:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																			"typeString": "function () view returns (bytes32)"
																		}
																	},
																	"id": 1801,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4262:20:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"expression": {
																		"id": 1802,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "4284:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 1803,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "4290:7:9",
																	"memberName": "chainid",
																	"nodeType": "MemberAccess",
																	"src": "4284:13:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 1806,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "4307:4:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_EIP712Upgradeable_$2026",
																				"typeString": "contract EIP712Upgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_EIP712Upgradeable_$2026",
																				"typeString": "contract EIP712Upgradeable"
																			}
																		],
																		"id": 1805,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4299:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1804,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4299:7:9",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1807,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4299:13:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 1795,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "4221:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1796,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "4225:6:9",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "4221:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1808,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4221:92:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1794,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "4211:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1809,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4211:103:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1793,
												"id": 1810,
												"nodeType": "Return",
												"src": "4204:110:9"
											}
										]
									},
									"id": 1812,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_buildDomainSeparator",
									"nameLocation": "4139:21:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1790,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4160:2:9"
									},
									"returnParameters": {
										"id": 1793,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1792,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1812,
												"src": "4185:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1791,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4185:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4184:9:9"
									},
									"scope": 2026,
									"src": "4130:191:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1827,
										"nodeType": "Block",
										"src": "5032:90:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1822,
																"name": "_domainSeparatorV4",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1789,
																"src": "5082:18:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																	"typeString": "function () view returns (bytes32)"
																}
															},
															"id": 1823,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5082:20:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1824,
															"name": "structHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1815,
															"src": "5104:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 1820,
															"name": "MessageHashUtils",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3005,
															"src": "5049:16:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_MessageHashUtils_$3005_$",
																"typeString": "type(library MessageHashUtils)"
															}
														},
														"id": 1821,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5066:15:9",
														"memberName": "toTypedDataHash",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3004,
														"src": "5049:32:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
														}
													},
													"id": 1825,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5049:66:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1819,
												"id": 1826,
												"nodeType": "Return",
												"src": "5042:73:9"
											}
										]
									},
									"documentation": {
										"id": 1813,
										"nodeType": "StructuredDocumentation",
										"src": "4327:614:9",
										"text": " @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n function returns the hash of the fully encoded EIP712 message for this domain.\n This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n ```solidity\n bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     keccak256(\"Mail(address to,string contents)\"),\n     mailTo,\n     keccak256(bytes(mailContents))\n )));\n address signer = ECDSA.recover(digest, signature);\n ```"
									},
									"id": 1828,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_hashTypedDataV4",
									"nameLocation": "4955:16:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1816,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1815,
												"mutability": "mutable",
												"name": "structHash",
												"nameLocation": "4980:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 1828,
												"src": "4972:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1814,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4972:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4971:20:9"
									},
									"returnParameters": {
										"id": 1819,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1818,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1828,
												"src": "5023:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1817,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5023:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5022:9:9"
									},
									"scope": 2026,
									"src": "4946:176:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										2050
									],
									"body": {
										"id": 1888,
										"nodeType": "Block",
										"src": "5501:575:9",
										"statements": [
											{
												"assignments": [
													1849
												],
												"declarations": [
													{
														"constant": false,
														"id": 1849,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "5533:1:9",
														"nodeType": "VariableDeclaration",
														"scope": 1888,
														"src": "5511:23:9",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_EIP712Storage_$1712_storage_ptr",
															"typeString": "struct EIP712Upgradeable.EIP712Storage"
														},
														"typeName": {
															"id": 1848,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1847,
																"name": "EIP712Storage",
																"nameLocations": [
																	"5511:13:9"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1712,
																"src": "5511:13:9"
															},
															"referencedDeclaration": 1712,
															"src": "5511:13:9",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_EIP712Storage_$1712_storage_ptr",
																"typeString": "struct EIP712Upgradeable.EIP712Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1852,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1850,
														"name": "_getEIP712Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1723,
														"src": "5537:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_EIP712Storage_$1712_storage_ptr_$",
															"typeString": "function () pure returns (struct EIP712Upgradeable.EIP712Storage storage pointer)"
														}
													},
													"id": 1851,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5537:19:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_EIP712Storage_$1712_storage_ptr",
														"typeString": "struct EIP712Upgradeable.EIP712Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5511:45:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1862,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"id": 1857,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1854,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1849,
																		"src": "5777:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_EIP712Storage_$1712_storage_ptr",
																			"typeString": "struct EIP712Upgradeable.EIP712Storage storage pointer"
																		}
																	},
																	"id": 1855,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "5779:11:9",
																	"memberName": "_hashedName",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1704,
																	"src": "5777:13:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1856,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5794:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "5777:18:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"id": 1861,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1858,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1849,
																		"src": "5799:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_EIP712Storage_$1712_storage_ptr",
																			"typeString": "struct EIP712Upgradeable.EIP712Storage storage pointer"
																		}
																	},
																	"id": 1859,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "5801:14:9",
																	"memberName": "_hashedVersion",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1707,
																	"src": "5799:16:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1860,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5819:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "5799:21:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "5777:43:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4549503731323a20556e696e697469616c697a6564",
															"id": 1863,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5822:23:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_2e5045ff73280aa8e8acd8c82710f23812497f87f7f576e2220a2ddd0d45eade",
																"typeString": "literal_string \"EIP712: Uninitialized\""
															},
															"value": "EIP712: Uninitialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_2e5045ff73280aa8e8acd8c82710f23812497f87f7f576e2220a2ddd0d45eade",
																"typeString": "literal_string \"EIP712: Uninitialized\""
															}
														],
														"id": 1853,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5769:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1864,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5769:77:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1865,
												"nodeType": "ExpressionStatement",
												"src": "5769:77:9"
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "0f",
															"id": 1866,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "hexString",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5878:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c",
																"typeString": "literal_string hex\"0f\""
															},
															"value": "\u000f"
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1867,
																"name": "_EIP712Name",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1905,
																"src": "5908:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
																	"typeString": "function () view returns (string memory)"
																}
															},
															"id": 1868,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5908:13:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1869,
																"name": "_EIP712Version",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1921,
																"src": "5935:14:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
																	"typeString": "function () view returns (string memory)"
																}
															},
															"id": 1870,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5935:16:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"expression": {
																"id": 1871,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "5965:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 1872,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5971:7:9",
															"memberName": "chainid",
															"nodeType": "MemberAccess",
															"src": "5965:13:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"arguments": [
																{
																	"id": 1875,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "6000:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_EIP712Upgradeable_$2026",
																		"typeString": "contract EIP712Upgradeable"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_EIP712Upgradeable_$2026",
																		"typeString": "contract EIP712Upgradeable"
																	}
																],
																"id": 1874,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5992:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1873,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5992:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1876,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5992:13:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1879,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6027:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1878,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6019:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 1877,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "6019:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1880,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6019:10:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1884,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6057:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1883,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "6043:13:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (uint256[] memory)"
																},
																"typeName": {
																	"baseType": {
																		"id": 1881,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6047:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1882,
																	"nodeType": "ArrayTypeName",
																	"src": "6047:9:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																		"typeString": "uint256[]"
																	}
																}
															},
															"id": 1885,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6043:16:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																"typeString": "uint256[] memory"
															}
														}
													],
													"id": 1886,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "5864:205:9",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_uint256_$_t_address_$_t_bytes32_$_t_array$_t_uint256_$dyn_memory_ptr_$",
														"typeString": "tuple(literal_string hex\"0f\",string memory,string memory,uint256,address,bytes32,uint256[] memory)"
													}
												},
												"functionReturnParameters": 1846,
												"id": 1887,
												"nodeType": "Return",
												"src": "5857:212:9"
											}
										]
									},
									"documentation": {
										"id": 1829,
										"nodeType": "StructuredDocumentation",
										"src": "5128:40:9",
										"text": " @dev See {IERC-5267}."
									},
									"functionSelector": "84b0196e",
									"id": 1889,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "eip712Domain",
									"nameLocation": "5182:12:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1830,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5194:2:9"
									},
									"returnParameters": {
										"id": 1846,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1832,
												"mutability": "mutable",
												"name": "fields",
												"nameLocation": "5278:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1889,
												"src": "5271:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes1",
													"typeString": "bytes1"
												},
												"typeName": {
													"id": 1831,
													"name": "bytes1",
													"nodeType": "ElementaryTypeName",
													"src": "5271:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1834,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "5312:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1889,
												"src": "5298:18:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1833,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5298:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1836,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "5344:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1889,
												"src": "5330:21:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1835,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5330:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1838,
												"mutability": "mutable",
												"name": "chainId",
												"nameLocation": "5373:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1889,
												"src": "5365:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1837,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5365:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1840,
												"mutability": "mutable",
												"name": "verifyingContract",
												"nameLocation": "5402:17:9",
												"nodeType": "VariableDeclaration",
												"scope": 1889,
												"src": "5394:25:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1839,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5394:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1842,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "5441:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1889,
												"src": "5433:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1841,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5433:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1845,
												"mutability": "mutable",
												"name": "extensions",
												"nameLocation": "5476:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 1889,
												"src": "5459:27:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1843,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "5459:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1844,
													"nodeType": "ArrayTypeName",
													"src": "5459:9:9",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5257:239:9"
									},
									"scope": 2026,
									"src": "5173:903:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1904,
										"nodeType": "Block",
										"src": "6369:86:9",
										"statements": [
											{
												"assignments": [
													1897
												],
												"declarations": [
													{
														"constant": false,
														"id": 1897,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "6401:1:9",
														"nodeType": "VariableDeclaration",
														"scope": 1904,
														"src": "6379:23:9",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_EIP712Storage_$1712_storage_ptr",
															"typeString": "struct EIP712Upgradeable.EIP712Storage"
														},
														"typeName": {
															"id": 1896,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1895,
																"name": "EIP712Storage",
																"nameLocations": [
																	"6379:13:9"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1712,
																"src": "6379:13:9"
															},
															"referencedDeclaration": 1712,
															"src": "6379:13:9",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_EIP712Storage_$1712_storage_ptr",
																"typeString": "struct EIP712Upgradeable.EIP712Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1900,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1898,
														"name": "_getEIP712Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1723,
														"src": "6405:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_EIP712Storage_$1712_storage_ptr_$",
															"typeString": "function () pure returns (struct EIP712Upgradeable.EIP712Storage storage pointer)"
														}
													},
													"id": 1899,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6405:19:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_EIP712Storage_$1712_storage_ptr",
														"typeString": "struct EIP712Upgradeable.EIP712Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6379:45:9"
											},
											{
												"expression": {
													"expression": {
														"id": 1901,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1897,
														"src": "6441:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_EIP712Storage_$1712_storage_ptr",
															"typeString": "struct EIP712Upgradeable.EIP712Storage storage pointer"
														}
													},
													"id": 1902,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "6443:5:9",
													"memberName": "_name",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1709,
													"src": "6441:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 1894,
												"id": 1903,
												"nodeType": "Return",
												"src": "6434:14:9"
											}
										]
									},
									"documentation": {
										"id": 1890,
										"nodeType": "StructuredDocumentation",
										"src": "6082:213:9",
										"text": " @dev The name parameter for the EIP712 domain.\n NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n are a concern."
									},
									"id": 1905,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_EIP712Name",
									"nameLocation": "6309:11:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1891,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6320:2:9"
									},
									"returnParameters": {
										"id": 1894,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1893,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1905,
												"src": "6354:13:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1892,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6354:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6353:15:9"
									},
									"scope": 2026,
									"src": "6300:155:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1920,
										"nodeType": "Block",
										"src": "6754:89:9",
										"statements": [
											{
												"assignments": [
													1913
												],
												"declarations": [
													{
														"constant": false,
														"id": 1913,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "6786:1:9",
														"nodeType": "VariableDeclaration",
														"scope": 1920,
														"src": "6764:23:9",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_EIP712Storage_$1712_storage_ptr",
															"typeString": "struct EIP712Upgradeable.EIP712Storage"
														},
														"typeName": {
															"id": 1912,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1911,
																"name": "EIP712Storage",
																"nameLocations": [
																	"6764:13:9"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1712,
																"src": "6764:13:9"
															},
															"referencedDeclaration": 1712,
															"src": "6764:13:9",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_EIP712Storage_$1712_storage_ptr",
																"typeString": "struct EIP712Upgradeable.EIP712Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1916,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1914,
														"name": "_getEIP712Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1723,
														"src": "6790:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_EIP712Storage_$1712_storage_ptr_$",
															"typeString": "function () pure returns (struct EIP712Upgradeable.EIP712Storage storage pointer)"
														}
													},
													"id": 1915,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6790:19:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_EIP712Storage_$1712_storage_ptr",
														"typeString": "struct EIP712Upgradeable.EIP712Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6764:45:9"
											},
											{
												"expression": {
													"expression": {
														"id": 1917,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1913,
														"src": "6826:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_EIP712Storage_$1712_storage_ptr",
															"typeString": "struct EIP712Upgradeable.EIP712Storage storage pointer"
														}
													},
													"id": 1918,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "6828:8:9",
													"memberName": "_version",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1711,
													"src": "6826:10:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 1910,
												"id": 1919,
												"nodeType": "Return",
												"src": "6819:17:9"
											}
										]
									},
									"documentation": {
										"id": 1906,
										"nodeType": "StructuredDocumentation",
										"src": "6461:216:9",
										"text": " @dev The version parameter for the EIP712 domain.\n NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n are a concern."
									},
									"id": 1921,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_EIP712Version",
									"nameLocation": "6691:14:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1907,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6705:2:9"
									},
									"returnParameters": {
										"id": 1910,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1909,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1921,
												"src": "6739:13:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1908,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6739:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6738:15:9"
									},
									"scope": 2026,
									"src": "6682:161:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1972,
										"nodeType": "Block",
										"src": "7117:628:9",
										"statements": [
											{
												"assignments": [
													1929
												],
												"declarations": [
													{
														"constant": false,
														"id": 1929,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "7149:1:9",
														"nodeType": "VariableDeclaration",
														"scope": 1972,
														"src": "7127:23:9",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_EIP712Storage_$1712_storage_ptr",
															"typeString": "struct EIP712Upgradeable.EIP712Storage"
														},
														"typeName": {
															"id": 1928,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1927,
																"name": "EIP712Storage",
																"nameLocations": [
																	"7127:13:9"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1712,
																"src": "7127:13:9"
															},
															"referencedDeclaration": 1712,
															"src": "7127:13:9",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_EIP712Storage_$1712_storage_ptr",
																"typeString": "struct EIP712Upgradeable.EIP712Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1932,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1930,
														"name": "_getEIP712Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1723,
														"src": "7153:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_EIP712Storage_$1712_storage_ptr_$",
															"typeString": "function () pure returns (struct EIP712Upgradeable.EIP712Storage storage pointer)"
														}
													},
													"id": 1931,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7153:19:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_EIP712Storage_$1712_storage_ptr",
														"typeString": "struct EIP712Upgradeable.EIP712Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7127:45:9"
											},
											{
												"assignments": [
													1934
												],
												"declarations": [
													{
														"constant": false,
														"id": 1934,
														"mutability": "mutable",
														"name": "name",
														"nameLocation": "7196:4:9",
														"nodeType": "VariableDeclaration",
														"scope": 1972,
														"src": "7182:18:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string"
														},
														"typeName": {
															"id": 1933,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "7182:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1937,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1935,
														"name": "_EIP712Name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1905,
														"src": "7203:11:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
															"typeString": "function () view returns (string memory)"
														}
													},
													"id": 1936,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7203:13:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7182:34:9"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1944,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1940,
																	"name": "name",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1934,
																	"src": "7236:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 1939,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7230:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																	"typeString": "type(bytes storage pointer)"
																},
																"typeName": {
																	"id": 1938,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "7230:5:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1941,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7230:11:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1942,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7242:6:9",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "7230:18:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1943,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7251:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "7230:22:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1970,
													"nodeType": "Block",
													"src": "7314:425:9",
													"statements": [
														{
															"assignments": [
																1954
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1954,
																	"mutability": "mutable",
																	"name": "hashedName",
																	"nameLocation": "7559:10:9",
																	"nodeType": "VariableDeclaration",
																	"scope": 1970,
																	"src": "7551:18:9",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1953,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "7551:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1957,
															"initialValue": {
																"expression": {
																	"id": 1955,
																	"name": "$",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1929,
																	"src": "7572:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_EIP712Storage_$1712_storage_ptr",
																		"typeString": "struct EIP712Upgradeable.EIP712Storage storage pointer"
																	}
																},
																"id": 1956,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "7574:11:9",
																"memberName": "_hashedName",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1704,
																"src": "7572:13:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "7551:34:9"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"id": 1960,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1958,
																	"name": "hashedName",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1954,
																	"src": "7603:10:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1959,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7617:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7603:15:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 1968,
																"nodeType": "Block",
																"src": "7676:53:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"hexValue": "",
																					"id": 1965,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "7711:2:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																						"typeString": "literal_string \"\""
																					},
																					"value": ""
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																						"typeString": "literal_string \"\""
																					}
																				],
																				"id": 1964,
																				"name": "keccak256",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967288,
																				"src": "7701:9:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																					"typeString": "function (bytes memory) pure returns (bytes32)"
																				}
																			},
																			"id": 1966,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7701:13:9",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"functionReturnParameters": 1926,
																		"id": 1967,
																		"nodeType": "Return",
																		"src": "7694:20:9"
																	}
																]
															},
															"id": 1969,
															"nodeType": "IfStatement",
															"src": "7599:130:9",
															"trueBody": {
																"id": 1963,
																"nodeType": "Block",
																"src": "7620:50:9",
																"statements": [
																	{
																		"expression": {
																			"id": 1961,
																			"name": "hashedName",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1954,
																			"src": "7645:10:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"functionReturnParameters": 1926,
																		"id": 1962,
																		"nodeType": "Return",
																		"src": "7638:17:9"
																	}
																]
															}
														}
													]
												},
												"id": 1971,
												"nodeType": "IfStatement",
												"src": "7226:513:9",
												"trueBody": {
													"id": 1952,
													"nodeType": "Block",
													"src": "7254:54:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1948,
																				"name": "name",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1934,
																				"src": "7291:4:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_string_memory_ptr",
																					"typeString": "string memory"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_string_memory_ptr",
																					"typeString": "string memory"
																				}
																			],
																			"id": 1947,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7285:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																				"typeString": "type(bytes storage pointer)"
																			},
																			"typeName": {
																				"id": 1946,
																				"name": "bytes",
																				"nodeType": "ElementaryTypeName",
																				"src": "7285:5:9",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1949,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7285:11:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 1945,
																	"name": "keccak256",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967288,
																	"src": "7275:9:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																		"typeString": "function (bytes memory) pure returns (bytes32)"
																	}
																},
																"id": 1950,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7275:22:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"functionReturnParameters": 1926,
															"id": 1951,
															"nodeType": "Return",
															"src": "7268:29:9"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1922,
										"nodeType": "StructuredDocumentation",
										"src": "6849:204:9",
										"text": " @dev The hash of the name parameter for the EIP712 domain.\n NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead."
									},
									"id": 1973,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_EIP712NameHash",
									"nameLocation": "7067:15:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1923,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7082:2:9"
									},
									"returnParameters": {
										"id": 1926,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1925,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1973,
												"src": "7108:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1924,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7108:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7107:9:9"
									},
									"scope": 2026,
									"src": "7058:687:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2024,
										"nodeType": "Block",
										"src": "8028:661:9",
										"statements": [
											{
												"assignments": [
													1981
												],
												"declarations": [
													{
														"constant": false,
														"id": 1981,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "8060:1:9",
														"nodeType": "VariableDeclaration",
														"scope": 2024,
														"src": "8038:23:9",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_EIP712Storage_$1712_storage_ptr",
															"typeString": "struct EIP712Upgradeable.EIP712Storage"
														},
														"typeName": {
															"id": 1980,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1979,
																"name": "EIP712Storage",
																"nameLocations": [
																	"8038:13:9"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1712,
																"src": "8038:13:9"
															},
															"referencedDeclaration": 1712,
															"src": "8038:13:9",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_EIP712Storage_$1712_storage_ptr",
																"typeString": "struct EIP712Upgradeable.EIP712Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1984,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1982,
														"name": "_getEIP712Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1723,
														"src": "8064:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_EIP712Storage_$1712_storage_ptr_$",
															"typeString": "function () pure returns (struct EIP712Upgradeable.EIP712Storage storage pointer)"
														}
													},
													"id": 1983,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8064:19:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_EIP712Storage_$1712_storage_ptr",
														"typeString": "struct EIP712Upgradeable.EIP712Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8038:45:9"
											},
											{
												"assignments": [
													1986
												],
												"declarations": [
													{
														"constant": false,
														"id": 1986,
														"mutability": "mutable",
														"name": "version",
														"nameLocation": "8107:7:9",
														"nodeType": "VariableDeclaration",
														"scope": 2024,
														"src": "8093:21:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string"
														},
														"typeName": {
															"id": 1985,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "8093:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1989,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1987,
														"name": "_EIP712Version",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1921,
														"src": "8117:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
															"typeString": "function () view returns (string memory)"
														}
													},
													"id": 1988,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8117:16:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8093:40:9"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1996,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1992,
																	"name": "version",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1986,
																	"src": "8153:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 1991,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8147:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																	"typeString": "type(bytes storage pointer)"
																},
																"typeName": {
																	"id": 1990,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "8147:5:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1993,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8147:14:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1994,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "8162:6:9",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "8147:21:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1995,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8171:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8147:25:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2022,
													"nodeType": "Block",
													"src": "8237:446:9",
													"statements": [
														{
															"assignments": [
																2006
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2006,
																	"mutability": "mutable",
																	"name": "hashedVersion",
																	"nameLocation": "8491:13:9",
																	"nodeType": "VariableDeclaration",
																	"scope": 2022,
																	"src": "8483:21:9",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 2005,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "8483:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2009,
															"initialValue": {
																"expression": {
																	"id": 2007,
																	"name": "$",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1981,
																	"src": "8507:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_EIP712Storage_$1712_storage_ptr",
																		"typeString": "struct EIP712Upgradeable.EIP712Storage storage pointer"
																	}
																},
																"id": 2008,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "8509:14:9",
																"memberName": "_hashedVersion",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1707,
																"src": "8507:16:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "8483:40:9"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"id": 2012,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2010,
																	"name": "hashedVersion",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2006,
																	"src": "8541:13:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 2011,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8558:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "8541:18:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 2020,
																"nodeType": "Block",
																"src": "8620:53:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"hexValue": "",
																					"id": 2017,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "8655:2:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																						"typeString": "literal_string \"\""
																					},
																					"value": ""
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																						"typeString": "literal_string \"\""
																					}
																				],
																				"id": 2016,
																				"name": "keccak256",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967288,
																				"src": "8645:9:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																					"typeString": "function (bytes memory) pure returns (bytes32)"
																				}
																			},
																			"id": 2018,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8645:13:9",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"functionReturnParameters": 1978,
																		"id": 2019,
																		"nodeType": "Return",
																		"src": "8638:20:9"
																	}
																]
															},
															"id": 2021,
															"nodeType": "IfStatement",
															"src": "8537:136:9",
															"trueBody": {
																"id": 2015,
																"nodeType": "Block",
																"src": "8561:53:9",
																"statements": [
																	{
																		"expression": {
																			"id": 2013,
																			"name": "hashedVersion",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2006,
																			"src": "8586:13:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"functionReturnParameters": 1978,
																		"id": 2014,
																		"nodeType": "Return",
																		"src": "8579:20:9"
																	}
																]
															}
														}
													]
												},
												"id": 2023,
												"nodeType": "IfStatement",
												"src": "8143:540:9",
												"trueBody": {
													"id": 2004,
													"nodeType": "Block",
													"src": "8174:57:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 2000,
																				"name": "version",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1986,
																				"src": "8211:7:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_string_memory_ptr",
																					"typeString": "string memory"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_string_memory_ptr",
																					"typeString": "string memory"
																				}
																			],
																			"id": 1999,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "8205:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																				"typeString": "type(bytes storage pointer)"
																			},
																			"typeName": {
																				"id": 1998,
																				"name": "bytes",
																				"nodeType": "ElementaryTypeName",
																				"src": "8205:5:9",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2001,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8205:14:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 1997,
																	"name": "keccak256",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967288,
																	"src": "8195:9:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																		"typeString": "function (bytes memory) pure returns (bytes32)"
																	}
																},
																"id": 2002,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8195:25:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"functionReturnParameters": 1978,
															"id": 2003,
															"nodeType": "Return",
															"src": "8188:32:9"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1974,
										"nodeType": "StructuredDocumentation",
										"src": "7751:210:9",
										"text": " @dev The hash of the version parameter for the EIP712 domain.\n NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead."
									},
									"id": 2025,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_EIP712VersionHash",
									"nameLocation": "7975:18:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1975,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7993:2:9"
									},
									"returnParameters": {
										"id": 1978,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1977,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2025,
												"src": "8019:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1976,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8019:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8018:9:9"
									},
									"scope": 2026,
									"src": "7966:723:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2027,
							"src": "1959:6732:9",
							"usedErrors": [
								211,
								214
							],
							"usedEvents": [
								219,
								2031
							]
						}
					],
					"src": "113:8579:9"
				},
				"id": 9
			},
			"@openzeppelin/contracts/interfaces/IERC5267.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/IERC5267.sol",
					"exportedSymbols": {
						"IERC5267": [
							2051
						]
					},
					"id": 2052,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2028,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "107:24:10"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC5267",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 2051,
							"linearizedBaseContracts": [
								2051
							],
							"name": "IERC5267",
							"nameLocation": "143:8:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 2029,
										"nodeType": "StructuredDocumentation",
										"src": "158:84:10",
										"text": " @dev MAY be emitted to signal that the domain could have changed."
									},
									"eventSelector": "0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31",
									"id": 2031,
									"name": "EIP712DomainChanged",
									"nameLocation": "253:19:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2030,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "272:2:10"
									},
									"src": "247:28:10"
								},
								{
									"documentation": {
										"id": 2032,
										"nodeType": "StructuredDocumentation",
										"src": "281:140:10",
										"text": " @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n signature."
									},
									"functionSelector": "84b0196e",
									"id": 2050,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "eip712Domain",
									"nameLocation": "435:12:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2033,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "447:2:10"
									},
									"returnParameters": {
										"id": 2049,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2035,
												"mutability": "mutable",
												"name": "fields",
												"nameLocation": "517:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 2050,
												"src": "510:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes1",
													"typeString": "bytes1"
												},
												"typeName": {
													"id": 2034,
													"name": "bytes1",
													"nodeType": "ElementaryTypeName",
													"src": "510:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2037,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "551:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 2050,
												"src": "537:18:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2036,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "537:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2039,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "583:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 2050,
												"src": "569:21:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2038,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "569:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2041,
												"mutability": "mutable",
												"name": "chainId",
												"nameLocation": "612:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 2050,
												"src": "604:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2040,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "604:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2043,
												"mutability": "mutable",
												"name": "verifyingContract",
												"nameLocation": "641:17:10",
												"nodeType": "VariableDeclaration",
												"scope": 2050,
												"src": "633:25:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2042,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "633:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2045,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "680:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 2050,
												"src": "672:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2044,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "672:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2048,
												"mutability": "mutable",
												"name": "extensions",
												"nameLocation": "715:10:10",
												"nodeType": "VariableDeclaration",
												"scope": 2050,
												"src": "698:27:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 2046,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "698:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2047,
													"nodeType": "ArrayTypeName",
													"src": "698:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "496:239:10"
									},
									"scope": 2051,
									"src": "426:310:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2052,
							"src": "133:605:10",
							"usedErrors": [],
							"usedEvents": [
								2031
							]
						}
					],
					"src": "107:632:10"
				},
				"id": 10
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
					"exportedSymbols": {
						"IERC1155Errors": [
							2188
						],
						"IERC20Errors": [
							2093
						],
						"IERC721Errors": [
							2141
						]
					},
					"id": 2189,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2053,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "112:24:11"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2054,
								"nodeType": "StructuredDocumentation",
								"src": "138:139:11",
								"text": " @dev Standard ERC20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens."
							},
							"fullyImplemented": true,
							"id": 2093,
							"linearizedBaseContracts": [
								2093
							],
							"name": "IERC20Errors",
							"nameLocation": "288:12:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2055,
										"nodeType": "StructuredDocumentation",
										"src": "307:309:11",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "e450d38c",
									"id": 2063,
									"name": "ERC20InsufficientBalance",
									"nameLocation": "627:24:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2062,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2057,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "660:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 2063,
												"src": "652:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2056,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "652:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2059,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "676:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 2063,
												"src": "668:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2058,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "668:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2061,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "693:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 2063,
												"src": "685:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2060,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "685:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "651:49:11"
									},
									"src": "621:80:11"
								},
								{
									"documentation": {
										"id": 2064,
										"nodeType": "StructuredDocumentation",
										"src": "707:152:11",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "96c6fd1e",
									"id": 2068,
									"name": "ERC20InvalidSender",
									"nameLocation": "870:18:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2067,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2066,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "897:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 2068,
												"src": "889:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2065,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "889:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "888:16:11"
									},
									"src": "864:41:11"
								},
								{
									"documentation": {
										"id": 2069,
										"nodeType": "StructuredDocumentation",
										"src": "911:159:11",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "ec442f05",
									"id": 2073,
									"name": "ERC20InvalidReceiver",
									"nameLocation": "1081:20:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2072,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2071,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1110:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 2073,
												"src": "1102:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2070,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1102:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1101:18:11"
									},
									"src": "1075:45:11"
								},
								{
									"documentation": {
										"id": 2074,
										"nodeType": "StructuredDocumentation",
										"src": "1126:345:11",
										"text": " @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "fb8f41b2",
									"id": 2082,
									"name": "ERC20InsufficientAllowance",
									"nameLocation": "1482:26:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2081,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2076,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1517:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 2082,
												"src": "1509:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2075,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1509:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2078,
												"mutability": "mutable",
												"name": "allowance",
												"nameLocation": "1534:9:11",
												"nodeType": "VariableDeclaration",
												"scope": 2082,
												"src": "1526:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2077,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1526:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2080,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "1553:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 2082,
												"src": "1545:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2079,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1545:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1508:52:11"
									},
									"src": "1476:85:11"
								},
								{
									"documentation": {
										"id": 2083,
										"nodeType": "StructuredDocumentation",
										"src": "1567:174:11",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "e602df05",
									"id": 2087,
									"name": "ERC20InvalidApprover",
									"nameLocation": "1752:20:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2086,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2085,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "1781:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 2087,
												"src": "1773:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2084,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1773:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1772:18:11"
									},
									"src": "1746:45:11"
								},
								{
									"documentation": {
										"id": 2088,
										"nodeType": "StructuredDocumentation",
										"src": "1797:195:11",
										"text": " @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "94280d62",
									"id": 2092,
									"name": "ERC20InvalidSpender",
									"nameLocation": "2003:19:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2091,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2090,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2031:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 2092,
												"src": "2023:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2089,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2023:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2022:17:11"
									},
									"src": "1997:43:11"
								}
							],
							"scope": 2189,
							"src": "278:1764:11",
							"usedErrors": [
								2063,
								2068,
								2073,
								2082,
								2087,
								2092
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2094,
								"nodeType": "StructuredDocumentation",
								"src": "2044:141:11",
								"text": " @dev Standard ERC721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens."
							},
							"fullyImplemented": true,
							"id": 2141,
							"linearizedBaseContracts": [
								2141
							],
							"name": "IERC721Errors",
							"nameLocation": "2196:13:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2095,
										"nodeType": "StructuredDocumentation",
										"src": "2216:219:11",
										"text": " @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "89c62b64",
									"id": 2099,
									"name": "ERC721InvalidOwner",
									"nameLocation": "2446:18:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2098,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2097,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2473:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 2099,
												"src": "2465:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2096,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2465:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2464:15:11"
									},
									"src": "2440:40:11"
								},
								{
									"documentation": {
										"id": 2100,
										"nodeType": "StructuredDocumentation",
										"src": "2486:132:11",
										"text": " @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "7e273289",
									"id": 2104,
									"name": "ERC721NonexistentToken",
									"nameLocation": "2629:22:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2103,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2102,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2660:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 2104,
												"src": "2652:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2101,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2652:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2651:17:11"
									},
									"src": "2623:46:11"
								},
								{
									"documentation": {
										"id": 2105,
										"nodeType": "StructuredDocumentation",
										"src": "2675:289:11",
										"text": " @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "64283d7b",
									"id": 2113,
									"name": "ERC721IncorrectOwner",
									"nameLocation": "2975:20:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2112,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2107,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3004:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 2113,
												"src": "2996:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2106,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2996:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2109,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3020:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 2113,
												"src": "3012:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2108,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3012:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2111,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3037:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 2113,
												"src": "3029:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2110,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3029:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2995:48:11"
									},
									"src": "2969:75:11"
								},
								{
									"documentation": {
										"id": 2114,
										"nodeType": "StructuredDocumentation",
										"src": "3050:152:11",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "73c6ac6e",
									"id": 2118,
									"name": "ERC721InvalidSender",
									"nameLocation": "3213:19:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2117,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2116,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3241:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 2118,
												"src": "3233:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2115,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3233:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3232:16:11"
									},
									"src": "3207:42:11"
								},
								{
									"documentation": {
										"id": 2119,
										"nodeType": "StructuredDocumentation",
										"src": "3255:159:11",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "64a0ae92",
									"id": 2123,
									"name": "ERC721InvalidReceiver",
									"nameLocation": "3425:21:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2122,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2121,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3455:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 2123,
												"src": "3447:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2120,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3447:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3446:18:11"
									},
									"src": "3419:46:11"
								},
								{
									"documentation": {
										"id": 2124,
										"nodeType": "StructuredDocumentation",
										"src": "3471:247:11",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "177e802f",
									"id": 2130,
									"name": "ERC721InsufficientApproval",
									"nameLocation": "3729:26:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2129,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2126,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3764:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 2130,
												"src": "3756:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2125,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3756:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2128,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3782:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 2130,
												"src": "3774:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2127,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3774:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3755:35:11"
									},
									"src": "3723:68:11"
								},
								{
									"documentation": {
										"id": 2131,
										"nodeType": "StructuredDocumentation",
										"src": "3797:174:11",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "a9fbf51f",
									"id": 2135,
									"name": "ERC721InvalidApprover",
									"nameLocation": "3982:21:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2134,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2133,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "4012:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 2135,
												"src": "4004:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2132,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4004:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4003:18:11"
									},
									"src": "3976:46:11"
								},
								{
									"documentation": {
										"id": 2136,
										"nodeType": "StructuredDocumentation",
										"src": "4028:197:11",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "5b08ba18",
									"id": 2140,
									"name": "ERC721InvalidOperator",
									"nameLocation": "4236:21:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2139,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2138,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4266:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 2140,
												"src": "4258:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2137,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4258:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4257:18:11"
									},
									"src": "4230:46:11"
								}
							],
							"scope": 2189,
							"src": "2186:2092:11",
							"usedErrors": [
								2099,
								2104,
								2113,
								2118,
								2123,
								2130,
								2135,
								2140
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC1155Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2142,
								"nodeType": "StructuredDocumentation",
								"src": "4280:143:11",
								"text": " @dev Standard ERC1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens."
							},
							"fullyImplemented": true,
							"id": 2188,
							"linearizedBaseContracts": [
								2188
							],
							"name": "IERC1155Errors",
							"nameLocation": "4434:14:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2143,
										"nodeType": "StructuredDocumentation",
										"src": "4455:361:11",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "03dee4c5",
									"id": 2153,
									"name": "ERC1155InsufficientBalance",
									"nameLocation": "4827:26:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2152,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2145,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "4862:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 2153,
												"src": "4854:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2144,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4854:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2147,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "4878:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 2153,
												"src": "4870:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2146,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4870:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2149,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "4895:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 2153,
												"src": "4887:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2148,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4887:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2151,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4911:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 2153,
												"src": "4903:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2150,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4903:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4853:66:11"
									},
									"src": "4821:99:11"
								},
								{
									"documentation": {
										"id": 2154,
										"nodeType": "StructuredDocumentation",
										"src": "4926:152:11",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "01a83514",
									"id": 2158,
									"name": "ERC1155InvalidSender",
									"nameLocation": "5089:20:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2156,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5118:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 2158,
												"src": "5110:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2155,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5110:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5109:16:11"
									},
									"src": "5083:43:11"
								},
								{
									"documentation": {
										"id": 2159,
										"nodeType": "StructuredDocumentation",
										"src": "5132:159:11",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "57f447ce",
									"id": 2163,
									"name": "ERC1155InvalidReceiver",
									"nameLocation": "5302:22:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2161,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "5333:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 2163,
												"src": "5325:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2160,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5325:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5324:18:11"
									},
									"src": "5296:47:11"
								},
								{
									"documentation": {
										"id": 2164,
										"nodeType": "StructuredDocumentation",
										"src": "5349:256:11",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "e237d922",
									"id": 2170,
									"name": "ERC1155MissingApprovalForAll",
									"nameLocation": "5616:28:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2169,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2166,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "5653:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 2170,
												"src": "5645:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2165,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5645:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2168,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5671:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 2170,
												"src": "5663:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2167,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5663:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5644:33:11"
									},
									"src": "5610:68:11"
								},
								{
									"documentation": {
										"id": 2171,
										"nodeType": "StructuredDocumentation",
										"src": "5684:174:11",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "3e31884e",
									"id": 2175,
									"name": "ERC1155InvalidApprover",
									"nameLocation": "5869:22:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2174,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2173,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "5900:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 2175,
												"src": "5892:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2172,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5892:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5891:18:11"
									},
									"src": "5863:47:11"
								},
								{
									"documentation": {
										"id": 2176,
										"nodeType": "StructuredDocumentation",
										"src": "5916:197:11",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "ced3e100",
									"id": 2180,
									"name": "ERC1155InvalidOperator",
									"nameLocation": "6124:22:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2179,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2178,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "6155:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 2180,
												"src": "6147:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2177,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6147:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6146:18:11"
									},
									"src": "6118:47:11"
								},
								{
									"documentation": {
										"id": 2181,
										"nodeType": "StructuredDocumentation",
										"src": "6171:280:11",
										"text": " @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"
									},
									"errorSelector": "5b059991",
									"id": 2187,
									"name": "ERC1155InvalidArrayLength",
									"nameLocation": "6462:25:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2186,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2183,
												"mutability": "mutable",
												"name": "idsLength",
												"nameLocation": "6496:9:11",
												"nodeType": "VariableDeclaration",
												"scope": 2187,
												"src": "6488:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2182,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6488:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2185,
												"mutability": "mutable",
												"name": "valuesLength",
												"nameLocation": "6515:12:11",
												"nodeType": "VariableDeclaration",
												"scope": 2187,
												"src": "6507:20:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2184,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6507:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6487:41:11"
									},
									"src": "6456:73:11"
								}
							],
							"scope": 2189,
							"src": "4424:2107:11",
							"usedErrors": [
								2153,
								2158,
								2163,
								2170,
								2175,
								2180,
								2187
							],
							"usedEvents": []
						}
					],
					"src": "112:6420:11"
				},
				"id": 11
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							2266
						]
					},
					"id": 2267,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2190,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:12"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2191,
								"nodeType": "StructuredDocumentation",
								"src": "132:70:12",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 2266,
							"linearizedBaseContracts": [
								2266
							],
							"name": "IERC20",
							"nameLocation": "213:6:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 2192,
										"nodeType": "StructuredDocumentation",
										"src": "226:158:12",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 2200,
									"name": "Transfer",
									"nameLocation": "395:8:12",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2194,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "420:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 2200,
												"src": "404:20:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2193,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "404:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2196,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "442:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 2200,
												"src": "426:18:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2195,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "426:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2198,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "454:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2200,
												"src": "446:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2197,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "446:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "403:57:12"
									},
									"src": "389:72:12"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2201,
										"nodeType": "StructuredDocumentation",
										"src": "467:148:12",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 2209,
									"name": "Approval",
									"nameLocation": "626:8:12",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2208,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2203,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "651:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2209,
												"src": "635:21:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2202,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "635:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2205,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "674:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2209,
												"src": "658:23:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2204,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "658:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2207,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "691:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2209,
												"src": "683:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2206,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "683:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "634:63:12"
									},
									"src": "620:78:12"
								},
								{
									"documentation": {
										"id": 2210,
										"nodeType": "StructuredDocumentation",
										"src": "704:65:12",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 2215,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2211,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:12"
									},
									"returnParameters": {
										"id": 2214,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2213,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2215,
												"src": "820:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2212,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:12"
									},
									"scope": 2266,
									"src": "774:55:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2216,
										"nodeType": "StructuredDocumentation",
										"src": "835:71:12",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 2223,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "920:9:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2219,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2218,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "938:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2223,
												"src": "930:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2217,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "930:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "929:17:12"
									},
									"returnParameters": {
										"id": 2222,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2221,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2223,
												"src": "970:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2220,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "970:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "969:9:12"
									},
									"scope": 2266,
									"src": "911:68:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2224,
										"nodeType": "StructuredDocumentation",
										"src": "985:213:12",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 2233,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1212:8:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2229,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2226,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1229:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 2233,
												"src": "1221:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2225,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1221:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2228,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1241:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2233,
												"src": "1233:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2227,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1233:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1220:27:12"
									},
									"returnParameters": {
										"id": 2232,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2231,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2233,
												"src": "1266:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2230,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1266:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1265:6:12"
									},
									"scope": 2266,
									"src": "1203:69:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2234,
										"nodeType": "StructuredDocumentation",
										"src": "1278:264:12",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 2243,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1556:9:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2239,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2236,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1574:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2243,
												"src": "1566:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2235,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1566:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2238,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1589:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2243,
												"src": "1581:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2237,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1581:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1565:32:12"
									},
									"returnParameters": {
										"id": 2242,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2241,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2243,
												"src": "1621:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2240,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1621:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1620:9:12"
									},
									"scope": 2266,
									"src": "1547:83:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2244,
										"nodeType": "StructuredDocumentation",
										"src": "1636:667:12",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 2253,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2317:7:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2249,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2246,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2333:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2253,
												"src": "2325:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2245,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2325:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2248,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2350:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2253,
												"src": "2342:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2247,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2342:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2324:32:12"
									},
									"returnParameters": {
										"id": 2252,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2251,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2253,
												"src": "2375:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2250,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2375:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2374:6:12"
									},
									"scope": 2266,
									"src": "2308:73:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2254,
										"nodeType": "StructuredDocumentation",
										"src": "2387:297:12",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 2265,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2698:12:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2261,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2256,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2719:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 2265,
												"src": "2711:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2255,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2711:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2258,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2733:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 2265,
												"src": "2725:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2257,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2725:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2260,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2745:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2265,
												"src": "2737:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2259,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2737:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2710:41:12"
									},
									"returnParameters": {
										"id": 2264,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2263,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2265,
												"src": "2770:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2262,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2770:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2769:6:12"
									},
									"scope": 2266,
									"src": "2689:87:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2267,
							"src": "203:2575:12",
							"usedErrors": [],
							"usedEvents": [
								2200,
								2209
							]
						}
					],
					"src": "106:2673:12"
				},
				"id": 12
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							2266
						],
						"IERC20Metadata": [
							2292
						]
					},
					"id": 2293,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2268,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "125:24:13"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 2270,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2293,
							"sourceUnit": 2267,
							"src": "151:37:13",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2269,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2266,
										"src": "159:6:13",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 2272,
										"name": "IERC20",
										"nameLocations": [
											"305:6:13"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2266,
										"src": "305:6:13"
									},
									"id": 2273,
									"nodeType": "InheritanceSpecifier",
									"src": "305:6:13"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2271,
								"nodeType": "StructuredDocumentation",
								"src": "190:86:13",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard."
							},
							"fullyImplemented": false,
							"id": 2292,
							"linearizedBaseContracts": [
								2292,
								2266
							],
							"name": "IERC20Metadata",
							"nameLocation": "287:14:13",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2274,
										"nodeType": "StructuredDocumentation",
										"src": "318:54:13",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 2279,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "386:4:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2275,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "390:2:13"
									},
									"returnParameters": {
										"id": 2278,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2277,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2279,
												"src": "416:13:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2276,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "416:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "415:15:13"
									},
									"scope": 2292,
									"src": "377:54:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2280,
										"nodeType": "StructuredDocumentation",
										"src": "437:56:13",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 2285,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "507:6:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2281,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "513:2:13"
									},
									"returnParameters": {
										"id": 2284,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2283,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2285,
												"src": "539:13:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2282,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "539:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "538:15:13"
									},
									"scope": 2292,
									"src": "498:56:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2286,
										"nodeType": "StructuredDocumentation",
										"src": "560:65:13",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 2291,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "639:8:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2287,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "647:2:13"
									},
									"returnParameters": {
										"id": 2290,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2289,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2291,
												"src": "673:5:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2288,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "673:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "672:7:13"
									},
									"scope": 2292,
									"src": "630:50:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2293,
							"src": "277:405:13",
							"usedErrors": [],
							"usedEvents": [
								2200,
								2209
							]
						}
					],
					"src": "125:558:13"
				},
				"id": 13
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							2328
						]
					},
					"id": 2329,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2294,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "123:24:14"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2295,
								"nodeType": "StructuredDocumentation",
								"src": "149:1963:14",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n ==== Security Considerations\n There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n considered as an intention to spend the allowance in any specific way. The second is that because permits have\n built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n generally recommended is:\n ```solidity\n function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n     doThing(..., value);\n }\n function doThing(..., uint256 value) public {\n     token.safeTransferFrom(msg.sender, address(this), value);\n     ...\n }\n ```\n Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n {SafeERC20-safeTransferFrom}).\n Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n contracts should have entry points that don't rely on permit."
							},
							"fullyImplemented": false,
							"id": 2328,
							"linearizedBaseContracts": [
								2328
							],
							"name": "IERC20Permit",
							"nameLocation": "2123:12:14",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2296,
										"nodeType": "StructuredDocumentation",
										"src": "2142:850:14",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section].\n CAUTION: See Security Considerations above."
									},
									"functionSelector": "d505accf",
									"id": 2313,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "3006:6:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2311,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2298,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3030:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 2313,
												"src": "3022:13:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2297,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3022:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2300,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3053:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 2313,
												"src": "3045:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2299,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3045:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2302,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3078:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 2313,
												"src": "3070:13:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2301,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3070:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2304,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "3101:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 2313,
												"src": "3093:16:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2303,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3093:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2306,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "3125:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2313,
												"src": "3119:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2305,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3119:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2308,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3144:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2313,
												"src": "3136:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2307,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3136:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2310,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "3163:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2313,
												"src": "3155:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2309,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3155:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3012:158:14"
									},
									"returnParameters": {
										"id": 2312,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3179:0:14"
									},
									"scope": 2328,
									"src": "2997:183:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2314,
										"nodeType": "StructuredDocumentation",
										"src": "3186:294:14",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 2321,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "3494:6:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2317,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2316,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3509:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 2321,
												"src": "3501:13:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2315,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3501:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3500:15:14"
									},
									"returnParameters": {
										"id": 2320,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2319,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2321,
												"src": "3539:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2318,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3539:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3538:9:14"
									},
									"scope": 2328,
									"src": "3485:63:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2322,
										"nodeType": "StructuredDocumentation",
										"src": "3554:128:14",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 2327,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "3749:16:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2323,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3765:2:14"
									},
									"returnParameters": {
										"id": 2326,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2325,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2327,
												"src": "3791:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2324,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3791:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3790:9:14"
									},
									"scope": 2328,
									"src": "3740:60:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2329,
							"src": "2113:1689:14",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "123:3680:14"
				},
				"id": 14
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
					"exportedSymbols": {
						"Math": [
							4059
						],
						"SignedMath": [
							4164
						],
						"Strings": [
							2583
						]
					},
					"id": 2584,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2330,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:15"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/Math.sol",
							"file": "./math/Math.sol",
							"id": 2332,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2584,
							"sourceUnit": 4060,
							"src": "127:37:15",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2331,
										"name": "Math",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 4059,
										"src": "135:4:15",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/SignedMath.sol",
							"file": "./math/SignedMath.sol",
							"id": 2334,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2584,
							"sourceUnit": 4165,
							"src": "165:49:15",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2333,
										"name": "SignedMath",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 4164,
										"src": "173:10:15",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Strings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2335,
								"nodeType": "StructuredDocumentation",
								"src": "216:34:15",
								"text": " @dev String operations."
							},
							"fullyImplemented": true,
							"id": 2583,
							"linearizedBaseContracts": [
								2583
							],
							"name": "Strings",
							"nameLocation": "259:7:15",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 2338,
									"mutability": "constant",
									"name": "HEX_DIGITS",
									"nameLocation": "298:10:15",
									"nodeType": "VariableDeclaration",
									"scope": 2583,
									"src": "273:56:15",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes16",
										"typeString": "bytes16"
									},
									"typeName": {
										"id": 2336,
										"name": "bytes16",
										"nodeType": "ElementaryTypeName",
										"src": "273:7:15",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes16",
											"typeString": "bytes16"
										}
									},
									"value": {
										"hexValue": "30313233343536373839616263646566",
										"id": 2337,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "311:18:15",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
											"typeString": "literal_string \"0123456789abcdef\""
										},
										"value": "0123456789abcdef"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 2341,
									"mutability": "constant",
									"name": "ADDRESS_LENGTH",
									"nameLocation": "358:14:15",
									"nodeType": "VariableDeclaration",
									"scope": 2583,
									"src": "335:42:15",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 2339,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "335:5:15",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "3230",
										"id": 2340,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "375:2:15",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_20_by_1",
											"typeString": "int_const 20"
										},
										"value": "20"
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 2342,
										"nodeType": "StructuredDocumentation",
										"src": "384:81:15",
										"text": " @dev The `value` string doesn't fit in the specified `length`."
									},
									"errorSelector": "e22e27eb",
									"id": 2348,
									"name": "StringsInsufficientHexLength",
									"nameLocation": "476:28:15",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2347,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2344,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "513:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 2348,
												"src": "505:13:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2343,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "505:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2346,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "528:6:15",
												"nodeType": "VariableDeclaration",
												"scope": 2348,
												"src": "520:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2345,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "520:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "504:31:15"
									},
									"src": "470:66:15"
								},
								{
									"body": {
										"id": 2395,
										"nodeType": "Block",
										"src": "708:627:15",
										"statements": [
											{
												"id": 2394,
												"nodeType": "UncheckedBlock",
												"src": "718:611:15",
												"statements": [
													{
														"assignments": [
															2357
														],
														"declarations": [
															{
																"constant": false,
																"id": 2357,
																"mutability": "mutable",
																"name": "length",
																"nameLocation": "750:6:15",
																"nodeType": "VariableDeclaration",
																"scope": 2394,
																"src": "742:14:15",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2356,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "742:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2364,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2363,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 2360,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2351,
																		"src": "770:5:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 2358,
																		"name": "Math",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4059,
																		"src": "759:4:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Math_$4059_$",
																			"typeString": "type(library Math)"
																		}
																	},
																	"id": 2359,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "764:5:15",
																	"memberName": "log10",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3879,
																	"src": "759:10:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) pure returns (uint256)"
																	}
																},
																"id": 2361,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "759:17:15",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 2362,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "779:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "759:21:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "742:38:15"
													},
													{
														"assignments": [
															2366
														],
														"declarations": [
															{
																"constant": false,
																"id": 2366,
																"mutability": "mutable",
																"name": "buffer",
																"nameLocation": "808:6:15",
																"nodeType": "VariableDeclaration",
																"scope": 2394,
																"src": "794:20:15",
																"stateVariable": false,
																"storageLocation": "memory",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string"
																},
																"typeName": {
																	"id": 2365,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "794:6:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2371,
														"initialValue": {
															"arguments": [
																{
																	"id": 2369,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2357,
																	"src": "828:6:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2368,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "817:10:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																},
																"typeName": {
																	"id": 2367,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "821:6:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																}
															},
															"id": 2370,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "817:18:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "794:41:15"
													},
													{
														"assignments": [
															2373
														],
														"declarations": [
															{
																"constant": false,
																"id": 2373,
																"mutability": "mutable",
																"name": "ptr",
																"nameLocation": "857:3:15",
																"nodeType": "VariableDeclaration",
																"scope": 2394,
																"src": "849:11:15",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2372,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "849:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2374,
														"nodeType": "VariableDeclarationStatement",
														"src": "849:11:15"
													},
													{
														"AST": {
															"nativeSrc": "930:67:15",
															"nodeType": "YulBlock",
															"src": "930:67:15",
															"statements": [
																{
																	"nativeSrc": "948:35:15",
																	"nodeType": "YulAssignment",
																	"src": "948:35:15",
																	"value": {
																		"arguments": [
																			{
																				"name": "buffer",
																				"nativeSrc": "959:6:15",
																				"nodeType": "YulIdentifier",
																				"src": "959:6:15"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "971:2:15",
																						"nodeType": "YulLiteral",
																						"src": "971:2:15",
																						"type": "",
																						"value": "32"
																					},
																					{
																						"name": "length",
																						"nativeSrc": "975:6:15",
																						"nodeType": "YulIdentifier",
																						"src": "975:6:15"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "967:3:15",
																					"nodeType": "YulIdentifier",
																					"src": "967:3:15"
																				},
																				"nativeSrc": "967:15:15",
																				"nodeType": "YulFunctionCall",
																				"src": "967:15:15"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "955:3:15",
																			"nodeType": "YulIdentifier",
																			"src": "955:3:15"
																		},
																		"nativeSrc": "955:28:15",
																		"nodeType": "YulFunctionCall",
																		"src": "955:28:15"
																	},
																	"variableNames": [
																		{
																			"name": "ptr",
																			"nativeSrc": "948:3:15",
																			"nodeType": "YulIdentifier",
																			"src": "948:3:15"
																		}
																	]
																}
															]
														},
														"documentation": "@solidity memory-safe-assembly",
														"evmVersion": "shanghai",
														"externalReferences": [
															{
																"declaration": 2366,
																"isOffset": false,
																"isSlot": false,
																"src": "959:6:15",
																"valueSize": 1
															},
															{
																"declaration": 2357,
																"isOffset": false,
																"isSlot": false,
																"src": "975:6:15",
																"valueSize": 1
															},
															{
																"declaration": 2373,
																"isOffset": false,
																"isSlot": false,
																"src": "948:3:15",
																"valueSize": 1
															}
														],
														"id": 2375,
														"nodeType": "InlineAssembly",
														"src": "921:76:15"
													},
													{
														"body": {
															"id": 2390,
															"nodeType": "Block",
															"src": "1023:269:15",
															"statements": [
																{
																	"expression": {
																		"id": 2378,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "--",
																		"prefix": false,
																		"src": "1041:5:15",
																		"subExpression": {
																			"id": 2377,
																			"name": "ptr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2373,
																			"src": "1041:3:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2379,
																	"nodeType": "ExpressionStatement",
																	"src": "1041:5:15"
																},
																{
																	"AST": {
																		"nativeSrc": "1124:86:15",
																		"nodeType": "YulBlock",
																		"src": "1124:86:15",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "ptr",
																							"nativeSrc": "1154:3:15",
																							"nodeType": "YulIdentifier",
																							"src": "1154:3:15"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value",
																											"nativeSrc": "1168:5:15",
																											"nodeType": "YulIdentifier",
																											"src": "1168:5:15"
																										},
																										{
																											"kind": "number",
																											"nativeSrc": "1175:2:15",
																											"nodeType": "YulLiteral",
																											"src": "1175:2:15",
																											"type": "",
																											"value": "10"
																										}
																									],
																									"functionName": {
																										"name": "mod",
																										"nativeSrc": "1164:3:15",
																										"nodeType": "YulIdentifier",
																										"src": "1164:3:15"
																									},
																									"nativeSrc": "1164:14:15",
																									"nodeType": "YulFunctionCall",
																									"src": "1164:14:15"
																								},
																								{
																									"name": "HEX_DIGITS",
																									"nativeSrc": "1180:10:15",
																									"nodeType": "YulIdentifier",
																									"src": "1180:10:15"
																								}
																							],
																							"functionName": {
																								"name": "byte",
																								"nativeSrc": "1159:4:15",
																								"nodeType": "YulIdentifier",
																								"src": "1159:4:15"
																							},
																							"nativeSrc": "1159:32:15",
																							"nodeType": "YulFunctionCall",
																							"src": "1159:32:15"
																						}
																					],
																					"functionName": {
																						"name": "mstore8",
																						"nativeSrc": "1146:7:15",
																						"nodeType": "YulIdentifier",
																						"src": "1146:7:15"
																					},
																					"nativeSrc": "1146:46:15",
																					"nodeType": "YulFunctionCall",
																					"src": "1146:46:15"
																				},
																				"nativeSrc": "1146:46:15",
																				"nodeType": "YulExpressionStatement",
																				"src": "1146:46:15"
																			}
																		]
																	},
																	"documentation": "@solidity memory-safe-assembly",
																	"evmVersion": "shanghai",
																	"externalReferences": [
																		{
																			"declaration": 2338,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "1180:10:15",
																			"valueSize": 1
																		},
																		{
																			"declaration": 2373,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "1154:3:15",
																			"valueSize": 1
																		},
																		{
																			"declaration": 2351,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "1168:5:15",
																			"valueSize": 1
																		}
																	],
																	"id": 2380,
																	"nodeType": "InlineAssembly",
																	"src": "1115:95:15"
																},
																{
																	"expression": {
																		"id": 2383,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2381,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2351,
																			"src": "1227:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"hexValue": "3130",
																			"id": 2382,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1236:2:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10_by_1",
																				"typeString": "int_const 10"
																			},
																			"value": "10"
																		},
																		"src": "1227:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2384,
																	"nodeType": "ExpressionStatement",
																	"src": "1227:11:15"
																},
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2387,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2385,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2351,
																			"src": "1260:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 2386,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1269:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1260:10:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 2389,
																	"nodeType": "IfStatement",
																	"src": "1256:21:15",
																	"trueBody": {
																		"id": 2388,
																		"nodeType": "Break",
																		"src": "1272:5:15"
																	}
																}
															]
														},
														"condition": {
															"hexValue": "74727565",
															"id": 2376,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1017:4:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														"id": 2391,
														"nodeType": "WhileStatement",
														"src": "1010:282:15"
													},
													{
														"expression": {
															"id": 2392,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2366,
															"src": "1312:6:15",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 2355,
														"id": 2393,
														"nodeType": "Return",
														"src": "1305:13:15"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2349,
										"nodeType": "StructuredDocumentation",
										"src": "542:90:15",
										"text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
									},
									"id": 2396,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "646:8:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2352,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2351,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "663:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 2396,
												"src": "655:13:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2350,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "655:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "654:15:15"
									},
									"returnParameters": {
										"id": 2355,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2354,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2396,
												"src": "693:13:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2353,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "693:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:15:15"
									},
									"scope": 2583,
									"src": "637:698:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2421,
										"nodeType": "Block",
										"src": "1511:92:15",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 2409,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2407,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2399,
																	"src": "1542:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 2408,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1550:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "1542:9:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseExpression": {
																"hexValue": "",
																"id": 2411,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1560:2:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																},
																"value": ""
															},
															"id": 2412,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "Conditional",
															"src": "1542:20:15",
															"trueExpression": {
																"hexValue": "2d",
																"id": 2410,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1554:3:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561",
																	"typeString": "literal_string \"-\""
																},
																"value": "-"
															},
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 2416,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2399,
																			"src": "1588:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		],
																		"expression": {
																			"id": 2414,
																			"name": "SignedMath",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4164,
																			"src": "1573:10:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_SignedMath_$4164_$",
																				"typeString": "type(library SignedMath)"
																			}
																		},
																		"id": 2415,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1584:3:15",
																		"memberName": "abs",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 4163,
																		"src": "1573:14:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_uint256_$",
																			"typeString": "function (int256) pure returns (uint256)"
																		}
																	},
																	"id": 2417,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1573:21:15",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2413,
																"name": "toString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2396,
																"src": "1564:8:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																}
															},
															"id": 2418,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1564:31:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"expression": {
															"id": 2405,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1528:6:15",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																"typeString": "type(string storage pointer)"
															},
															"typeName": {
																"id": 2404,
																"name": "string",
																"nodeType": "ElementaryTypeName",
																"src": "1528:6:15",
																"typeDescriptions": {}
															}
														},
														"id": 2406,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1535:6:15",
														"memberName": "concat",
														"nodeType": "MemberAccess",
														"src": "1528:13:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$",
															"typeString": "function () pure returns (string memory)"
														}
													},
													"id": 2419,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1528:68:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 2403,
												"id": 2420,
												"nodeType": "Return",
												"src": "1521:75:15"
											}
										]
									},
									"documentation": {
										"id": 2397,
										"nodeType": "StructuredDocumentation",
										"src": "1341:89:15",
										"text": " @dev Converts a `int256` to its ASCII `string` decimal representation."
									},
									"id": 2422,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toStringSigned",
									"nameLocation": "1444:14:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2400,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2399,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1466:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 2422,
												"src": "1459:12:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2398,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1459:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1458:14:15"
									},
									"returnParameters": {
										"id": 2403,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2402,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2422,
												"src": "1496:13:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2401,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1496:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1495:15:15"
									},
									"scope": 2583,
									"src": "1435:168:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2441,
										"nodeType": "Block",
										"src": "1782:100:15",
										"statements": [
											{
												"id": 2440,
												"nodeType": "UncheckedBlock",
												"src": "1792:84:15",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 2431,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2425,
																	"src": "1835:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2437,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"id": 2434,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2425,
																				"src": "1854:5:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 2432,
																				"name": "Math",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4059,
																				"src": "1842:4:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_Math_$4059_$",
																					"typeString": "type(library Math)"
																				}
																			},
																			"id": 2433,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "1847:6:15",
																			"memberName": "log256",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 4001,
																			"src": "1842:11:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256) pure returns (uint256)"
																			}
																		},
																		"id": 2435,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1842:18:15",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 2436,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1863:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "1842:22:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2430,
																"name": "toHexString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2442,
																	2525,
																	2545
																],
																"referencedDeclaration": 2525,
																"src": "1823:11:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256,uint256) pure returns (string memory)"
																}
															},
															"id": 2438,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1823:42:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 2429,
														"id": 2439,
														"nodeType": "Return",
														"src": "1816:49:15"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2423,
										"nodeType": "StructuredDocumentation",
										"src": "1609:94:15",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
									},
									"id": 2442,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1717:11:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2426,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2425,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1737:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 2442,
												"src": "1729:13:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2424,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1729:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1728:15:15"
									},
									"returnParameters": {
										"id": 2429,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2428,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2442,
												"src": "1767:13:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2427,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1767:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1766:15:15"
									},
									"scope": 2583,
									"src": "1708:174:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2524,
										"nodeType": "Block",
										"src": "2095:435:15",
										"statements": [
											{
												"assignments": [
													2453
												],
												"declarations": [
													{
														"constant": false,
														"id": 2453,
														"mutability": "mutable",
														"name": "localValue",
														"nameLocation": "2113:10:15",
														"nodeType": "VariableDeclaration",
														"scope": 2524,
														"src": "2105:18:15",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2452,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2105:7:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2455,
												"initialValue": {
													"id": 2454,
													"name": "value",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2445,
													"src": "2126:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2105:26:15"
											},
											{
												"assignments": [
													2457
												],
												"declarations": [
													{
														"constant": false,
														"id": 2457,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "2154:6:15",
														"nodeType": "VariableDeclaration",
														"scope": 2524,
														"src": "2141:19:15",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2456,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "2141:5:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2466,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2464,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2462,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2460,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2173:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2461,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2447,
																	"src": "2177:6:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2173:10:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "32",
																"id": 2463,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2186:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "2173:14:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2459,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "2163:9:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 2458,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "2167:5:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 2465,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2163:25:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2141:47:15"
											},
											{
												"expression": {
													"id": 2471,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 2467,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2457,
															"src": "2198:6:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 2469,
														"indexExpression": {
															"hexValue": "30",
															"id": 2468,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2205:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2198:9:15",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 2470,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2210:3:15",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
															"typeString": "literal_string \"0\""
														},
														"value": "0"
													},
													"src": "2198:15:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 2472,
												"nodeType": "ExpressionStatement",
												"src": "2198:15:15"
											},
											{
												"expression": {
													"id": 2477,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 2473,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2457,
															"src": "2223:6:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 2475,
														"indexExpression": {
															"hexValue": "31",
															"id": 2474,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2230:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2223:9:15",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "78",
														"id": 2476,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2235:3:15",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
															"typeString": "literal_string \"x\""
														},
														"value": "x"
													},
													"src": "2223:15:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 2478,
												"nodeType": "ExpressionStatement",
												"src": "2223:15:15"
											},
											{
												"body": {
													"id": 2507,
													"nodeType": "Block",
													"src": "2293:95:15",
													"statements": [
														{
															"expression": {
																"id": 2501,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 2493,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2457,
																		"src": "2307:6:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 2495,
																	"indexExpression": {
																		"id": 2494,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2480,
																		"src": "2314:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "2307:9:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 2496,
																		"name": "HEX_DIGITS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2338,
																		"src": "2319:10:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes16",
																			"typeString": "bytes16"
																		}
																	},
																	"id": 2500,
																	"indexExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2499,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2497,
																			"name": "localValue",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2453,
																			"src": "2330:10:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307866",
																			"id": 2498,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2343:3:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_15_by_1",
																				"typeString": "int_const 15"
																			},
																			"value": "0xf"
																		},
																		"src": "2330:16:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2319:28:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "2307:40:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 2502,
															"nodeType": "ExpressionStatement",
															"src": "2307:40:15"
														},
														{
															"expression": {
																"id": 2505,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2503,
																	"name": "localValue",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2453,
																	"src": "2361:10:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 2504,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2376:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "2361:16:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2506,
															"nodeType": "ExpressionStatement",
															"src": "2361:16:15"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2489,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2487,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2480,
														"src": "2281:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 2488,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2285:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "2281:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2508,
												"initializationExpression": {
													"assignments": [
														2480
													],
													"declarations": [
														{
															"constant": false,
															"id": 2480,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "2261:1:15",
															"nodeType": "VariableDeclaration",
															"scope": 2508,
															"src": "2253:9:15",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 2479,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2253:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 2486,
													"initialValue": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2485,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2483,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 2481,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2265:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2482,
																"name": "length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2447,
																"src": "2269:6:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2265:10:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 2484,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2278:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "2265:14:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "2253:26:15"
												},
												"isSimpleCounterLoop": false,
												"loopExpression": {
													"expression": {
														"id": 2491,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": true,
														"src": "2288:3:15",
														"subExpression": {
															"id": 2490,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2480,
															"src": "2290:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2492,
													"nodeType": "ExpressionStatement",
													"src": "2288:3:15"
												},
												"nodeType": "ForStatement",
												"src": "2248:140:15"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2511,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2509,
														"name": "localValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2453,
														"src": "2401:10:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2510,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2415:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2401:15:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2518,
												"nodeType": "IfStatement",
												"src": "2397:96:15",
												"trueBody": {
													"id": 2517,
													"nodeType": "Block",
													"src": "2418:75:15",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 2513,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2445,
																		"src": "2468:5:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 2514,
																		"name": "length",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2447,
																		"src": "2475:6:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 2512,
																	"name": "StringsInsufficientHexLength",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2348,
																	"src": "2439:28:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$",
																		"typeString": "function (uint256,uint256) pure"
																	}
																},
																"id": 2515,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2439:43:15",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2516,
															"nodeType": "RevertStatement",
															"src": "2432:50:15"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2521,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2457,
															"src": "2516:6:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2520,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "2509:6:15",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 2519,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2509:6:15",
															"typeDescriptions": {}
														}
													},
													"id": 2522,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2509:14:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 2451,
												"id": 2523,
												"nodeType": "Return",
												"src": "2502:21:15"
											}
										]
									},
									"documentation": {
										"id": 2443,
										"nodeType": "StructuredDocumentation",
										"src": "1888:112:15",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
									},
									"id": 2525,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "2014:11:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2448,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2445,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2034:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 2525,
												"src": "2026:13:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2444,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2026:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2447,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "2049:6:15",
												"nodeType": "VariableDeclaration",
												"scope": 2525,
												"src": "2041:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2446,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2041:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2025:31:15"
									},
									"returnParameters": {
										"id": 2451,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2450,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2525,
												"src": "2080:13:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2449,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2080:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2079:15:15"
									},
									"scope": 2583,
									"src": "2005:525:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2544,
										"nodeType": "Block",
										"src": "2762:75:15",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 2538,
																			"name": "addr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2528,
																			"src": "2807:4:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 2537,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2799:7:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint160_$",
																			"typeString": "type(uint160)"
																		},
																		"typeName": {
																			"id": 2536,
																			"name": "uint160",
																			"nodeType": "ElementaryTypeName",
																			"src": "2799:7:15",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2539,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2799:13:15",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																],
																"id": 2535,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2791:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 2534,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2791:7:15",
																	"typeDescriptions": {}
																}
															},
															"id": 2540,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2791:22:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2541,
															"name": "ADDRESS_LENGTH",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2341,
															"src": "2815:14:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 2533,
														"name": "toHexString",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2442,
															2525,
															2545
														],
														"referencedDeclaration": 2525,
														"src": "2779:11:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256,uint256) pure returns (string memory)"
														}
													},
													"id": 2542,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2779:51:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 2532,
												"id": 2543,
												"nodeType": "Return",
												"src": "2772:58:15"
											}
										]
									},
									"documentation": {
										"id": 2526,
										"nodeType": "StructuredDocumentation",
										"src": "2536:148:15",
										"text": " @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n representation."
									},
									"id": 2545,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "2698:11:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2529,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2528,
												"mutability": "mutable",
												"name": "addr",
												"nameLocation": "2718:4:15",
												"nodeType": "VariableDeclaration",
												"scope": 2545,
												"src": "2710:12:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2527,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2710:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2709:14:15"
									},
									"returnParameters": {
										"id": 2532,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2531,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2545,
												"src": "2747:13:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2530,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2747:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2746:15:15"
									},
									"scope": 2583,
									"src": "2689:148:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2581,
										"nodeType": "Block",
										"src": "2992:104:15",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2579,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2565,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 2557,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2548,
																		"src": "3015:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 2556,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3009:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 2555,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3009:5:15",
																		"typeDescriptions": {}
																	}
																},
																"id": 2558,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3009:8:15",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 2559,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3018:6:15",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "3009:15:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 2562,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2550,
																		"src": "3034:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 2561,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3028:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 2560,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3028:5:15",
																		"typeDescriptions": {}
																	}
																},
																"id": 2563,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3028:8:15",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 2564,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3037:6:15",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "3028:15:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3009:34:15",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"id": 2578,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 2569,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2548,
																			"src": "3063:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		],
																		"id": 2568,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3057:5:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 2567,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "3057:5:15",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2570,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3057:8:15",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 2566,
																"name": "keccak256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967288,
																"src": "3047:9:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																	"typeString": "function (bytes memory) pure returns (bytes32)"
																}
															},
															"id": 2571,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3047:19:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 2575,
																			"name": "b",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2550,
																			"src": "3086:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		],
																		"id": 2574,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3080:5:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 2573,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "3080:5:15",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2576,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3080:8:15",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 2572,
																"name": "keccak256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967288,
																"src": "3070:9:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																	"typeString": "function (bytes memory) pure returns (bytes32)"
																}
															},
															"id": 2577,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3070:19:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"src": "3047:42:15",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "3009:80:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2554,
												"id": 2580,
												"nodeType": "Return",
												"src": "3002:87:15"
											}
										]
									},
									"documentation": {
										"id": 2546,
										"nodeType": "StructuredDocumentation",
										"src": "2843:66:15",
										"text": " @dev Returns true if the two strings are equal."
									},
									"id": 2582,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "equal",
									"nameLocation": "2923:5:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2551,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2548,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2943:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2582,
												"src": "2929:15:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2547,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2929:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2550,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2960:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2582,
												"src": "2946:15:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2549,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2946:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2928:34:15"
									},
									"returnParameters": {
										"id": 2554,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2553,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2582,
												"src": "2986:4:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2552,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2986:4:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2985:6:15"
									},
									"scope": 2583,
									"src": "2914:182:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2584,
							"src": "251:2847:15",
							"usedErrors": [
								2348
							],
							"usedEvents": []
						}
					],
					"src": "101:2998:15"
				},
				"id": 15
			},
			"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
					"exportedSymbols": {
						"ECDSA": [
							2931
						]
					},
					"id": 2932,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2585,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "112:24:16"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ECDSA",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2586,
								"nodeType": "StructuredDocumentation",
								"src": "138:205:16",
								"text": " @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."
							},
							"fullyImplemented": true,
							"id": 2931,
							"linearizedBaseContracts": [
								2931
							],
							"name": "ECDSA",
							"nameLocation": "352:5:16",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "ECDSA.RecoverError",
									"id": 2591,
									"members": [
										{
											"id": 2587,
											"name": "NoError",
											"nameLocation": "392:7:16",
											"nodeType": "EnumValue",
											"src": "392:7:16"
										},
										{
											"id": 2588,
											"name": "InvalidSignature",
											"nameLocation": "409:16:16",
											"nodeType": "EnumValue",
											"src": "409:16:16"
										},
										{
											"id": 2589,
											"name": "InvalidSignatureLength",
											"nameLocation": "435:22:16",
											"nodeType": "EnumValue",
											"src": "435:22:16"
										},
										{
											"id": 2590,
											"name": "InvalidSignatureS",
											"nameLocation": "467:17:16",
											"nodeType": "EnumValue",
											"src": "467:17:16"
										}
									],
									"name": "RecoverError",
									"nameLocation": "369:12:16",
									"nodeType": "EnumDefinition",
									"src": "364:126:16"
								},
								{
									"documentation": {
										"id": 2592,
										"nodeType": "StructuredDocumentation",
										"src": "496:63:16",
										"text": " @dev The signature derives the `address(0)`."
									},
									"errorSelector": "f645eedf",
									"id": 2594,
									"name": "ECDSAInvalidSignature",
									"nameLocation": "570:21:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2593,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "591:2:16"
									},
									"src": "564:30:16"
								},
								{
									"documentation": {
										"id": 2595,
										"nodeType": "StructuredDocumentation",
										"src": "600:60:16",
										"text": " @dev The signature has an invalid length."
									},
									"errorSelector": "fce698f7",
									"id": 2599,
									"name": "ECDSAInvalidSignatureLength",
									"nameLocation": "671:27:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2598,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2597,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "707:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2599,
												"src": "699:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2596,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "699:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "698:16:16"
									},
									"src": "665:50:16"
								},
								{
									"documentation": {
										"id": 2600,
										"nodeType": "StructuredDocumentation",
										"src": "721:85:16",
										"text": " @dev The signature has an S value that is in the upper half order."
									},
									"errorSelector": "d78bce0c",
									"id": 2604,
									"name": "ECDSAInvalidSignatureS",
									"nameLocation": "817:22:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2603,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2602,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "848:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2604,
												"src": "840:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2601,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "840:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "839:11:16"
									},
									"src": "811:40:16"
								},
								{
									"body": {
										"id": 2656,
										"nodeType": "Block",
										"src": "2242:653:16",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2622,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 2619,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2609,
															"src": "2256:9:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 2620,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2266:6:16",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "2256:16:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "3635",
														"id": 2621,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2276:2:16",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_65_by_1",
															"typeString": "int_const 65"
														},
														"value": "65"
													},
													"src": "2256:22:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2654,
													"nodeType": "Block",
													"src": "2781:108:16",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 2643,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2811:1:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 2642,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2803:7:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 2641,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2803:7:16",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2644,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2803:10:16",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 2645,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2591,
																			"src": "2815:12:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$2591_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 2646,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "2828:22:16",
																		"memberName": "InvalidSignatureLength",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2589,
																		"src": "2815:35:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$2591",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 2649,
																					"name": "signature",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2609,
																					"src": "2860:9:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 2650,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "2870:6:16",
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "2860:16:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 2648,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2852:7:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_bytes32_$",
																				"typeString": "type(bytes32)"
																			},
																			"typeName": {
																				"id": 2647,
																				"name": "bytes32",
																				"nodeType": "ElementaryTypeName",
																				"src": "2852:7:16",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2651,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2852:25:16",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"id": 2652,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2802:76:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$2591_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 2618,
															"id": 2653,
															"nodeType": "Return",
															"src": "2795:83:16"
														}
													]
												},
												"id": 2655,
												"nodeType": "IfStatement",
												"src": "2252:637:16",
												"trueBody": {
													"id": 2640,
													"nodeType": "Block",
													"src": "2280:495:16",
													"statements": [
														{
															"assignments": [
																2624
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2624,
																	"mutability": "mutable",
																	"name": "r",
																	"nameLocation": "2302:1:16",
																	"nodeType": "VariableDeclaration",
																	"scope": 2640,
																	"src": "2294:9:16",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 2623,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "2294:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2625,
															"nodeType": "VariableDeclarationStatement",
															"src": "2294:9:16"
														},
														{
															"assignments": [
																2627
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2627,
																	"mutability": "mutable",
																	"name": "s",
																	"nameLocation": "2325:1:16",
																	"nodeType": "VariableDeclaration",
																	"scope": 2640,
																	"src": "2317:9:16",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 2626,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "2317:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2628,
															"nodeType": "VariableDeclarationStatement",
															"src": "2317:9:16"
														},
														{
															"assignments": [
																2630
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2630,
																	"mutability": "mutable",
																	"name": "v",
																	"nameLocation": "2346:1:16",
																	"nodeType": "VariableDeclaration",
																	"scope": 2640,
																	"src": "2340:7:16",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	"typeName": {
																		"id": 2629,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "2340:5:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2631,
															"nodeType": "VariableDeclarationStatement",
															"src": "2340:7:16"
														},
														{
															"AST": {
																"nativeSrc": "2548:171:16",
																"nodeType": "YulBlock",
																"src": "2548:171:16",
																"statements": [
																	{
																		"nativeSrc": "2566:32:16",
																		"nodeType": "YulAssignment",
																		"src": "2566:32:16",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nativeSrc": "2581:9:16",
																							"nodeType": "YulIdentifier",
																							"src": "2581:9:16"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "2592:4:16",
																							"nodeType": "YulLiteral",
																							"src": "2592:4:16",
																							"type": "",
																							"value": "0x20"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "2577:3:16",
																						"nodeType": "YulIdentifier",
																						"src": "2577:3:16"
																					},
																					"nativeSrc": "2577:20:16",
																					"nodeType": "YulFunctionCall",
																					"src": "2577:20:16"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "2571:5:16",
																				"nodeType": "YulIdentifier",
																				"src": "2571:5:16"
																			},
																			"nativeSrc": "2571:27:16",
																			"nodeType": "YulFunctionCall",
																			"src": "2571:27:16"
																		},
																		"variableNames": [
																			{
																				"name": "r",
																				"nativeSrc": "2566:1:16",
																				"nodeType": "YulIdentifier",
																				"src": "2566:1:16"
																			}
																		]
																	},
																	{
																		"nativeSrc": "2615:32:16",
																		"nodeType": "YulAssignment",
																		"src": "2615:32:16",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nativeSrc": "2630:9:16",
																							"nodeType": "YulIdentifier",
																							"src": "2630:9:16"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "2641:4:16",
																							"nodeType": "YulLiteral",
																							"src": "2641:4:16",
																							"type": "",
																							"value": "0x40"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "2626:3:16",
																						"nodeType": "YulIdentifier",
																						"src": "2626:3:16"
																					},
																					"nativeSrc": "2626:20:16",
																					"nodeType": "YulFunctionCall",
																					"src": "2626:20:16"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "2620:5:16",
																				"nodeType": "YulIdentifier",
																				"src": "2620:5:16"
																			},
																			"nativeSrc": "2620:27:16",
																			"nodeType": "YulFunctionCall",
																			"src": "2620:27:16"
																		},
																		"variableNames": [
																			{
																				"name": "s",
																				"nativeSrc": "2615:1:16",
																				"nodeType": "YulIdentifier",
																				"src": "2615:1:16"
																			}
																		]
																	},
																	{
																		"nativeSrc": "2664:41:16",
																		"nodeType": "YulAssignment",
																		"src": "2664:41:16",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2674:1:16",
																					"nodeType": "YulLiteral",
																					"src": "2674:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "signature",
																									"nativeSrc": "2687:9:16",
																									"nodeType": "YulIdentifier",
																									"src": "2687:9:16"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "2698:4:16",
																									"nodeType": "YulLiteral",
																									"src": "2698:4:16",
																									"type": "",
																									"value": "0x60"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "2683:3:16",
																								"nodeType": "YulIdentifier",
																								"src": "2683:3:16"
																							},
																							"nativeSrc": "2683:20:16",
																							"nodeType": "YulFunctionCall",
																							"src": "2683:20:16"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nativeSrc": "2677:5:16",
																						"nodeType": "YulIdentifier",
																						"src": "2677:5:16"
																					},
																					"nativeSrc": "2677:27:16",
																					"nodeType": "YulFunctionCall",
																					"src": "2677:27:16"
																				}
																			],
																			"functionName": {
																				"name": "byte",
																				"nativeSrc": "2669:4:16",
																				"nodeType": "YulIdentifier",
																				"src": "2669:4:16"
																			},
																			"nativeSrc": "2669:36:16",
																			"nodeType": "YulFunctionCall",
																			"src": "2669:36:16"
																		},
																		"variableNames": [
																			{
																				"name": "v",
																				"nativeSrc": "2664:1:16",
																				"nodeType": "YulIdentifier",
																				"src": "2664:1:16"
																			}
																		]
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "shanghai",
															"externalReferences": [
																{
																	"declaration": 2624,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2566:1:16",
																	"valueSize": 1
																},
																{
																	"declaration": 2627,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2615:1:16",
																	"valueSize": 1
																},
																{
																	"declaration": 2609,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2581:9:16",
																	"valueSize": 1
																},
																{
																	"declaration": 2609,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2630:9:16",
																	"valueSize": 1
																},
																{
																	"declaration": 2609,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2687:9:16",
																	"valueSize": 1
																},
																{
																	"declaration": 2630,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2664:1:16",
																	"valueSize": 1
																}
															],
															"id": 2632,
															"nodeType": "InlineAssembly",
															"src": "2539:180:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2634,
																		"name": "hash",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2607,
																		"src": "2750:4:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 2635,
																		"name": "v",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2630,
																		"src": "2756:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	{
																		"id": 2636,
																		"name": "r",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2624,
																		"src": "2759:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 2637,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2627,
																		"src": "2762:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 2633,
																	"name": "tryRecover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		2657,
																		2737,
																		2845
																	],
																	"referencedDeclaration": 2845,
																	"src": "2739:10:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2591_$_t_bytes32_$",
																		"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
																	}
																},
																"id": 2638,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2739:25:16",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$2591_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 2618,
															"id": 2639,
															"nodeType": "Return",
															"src": "2732:32:16"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2605,
										"nodeType": "StructuredDocumentation",
										"src": "857:1267:16",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n return address(0) without also returning an error description. Errors are documented using an enum (error type)\n and a bytes32 providing additional information about the error.\n If no error is returned, then the address can be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]"
									},
									"id": 2657,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "2138:10:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2610,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2607,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "2157:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 2657,
												"src": "2149:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2606,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2149:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2609,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "2176:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 2657,
												"src": "2163:22:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2608,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2163:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2148:38:16"
									},
									"returnParameters": {
										"id": 2618,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2612,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2657,
												"src": "2210:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2611,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2210:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2615,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2657,
												"src": "2219:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$2591",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 2614,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2613,
														"name": "RecoverError",
														"nameLocations": [
															"2219:12:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2591,
														"src": "2219:12:16"
													},
													"referencedDeclaration": 2591,
													"src": "2219:12:16",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$2591",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2617,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2657,
												"src": "2233:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2616,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2233:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2209:32:16"
									},
									"scope": 2931,
									"src": "2129:766:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2686,
										"nodeType": "Block",
										"src": "3789:168:16",
										"statements": [
											{
												"assignments": [
													2668,
													2671,
													2673
												],
												"declarations": [
													{
														"constant": false,
														"id": 2668,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "3808:9:16",
														"nodeType": "VariableDeclaration",
														"scope": 2686,
														"src": "3800:17:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 2667,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3800:7:16",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2671,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "3832:5:16",
														"nodeType": "VariableDeclaration",
														"scope": 2686,
														"src": "3819:18:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$2591",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 2670,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 2669,
																"name": "RecoverError",
																"nameLocations": [
																	"3819:12:16"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 2591,
																"src": "3819:12:16"
															},
															"referencedDeclaration": 2591,
															"src": "3819:12:16",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$2591",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2673,
														"mutability": "mutable",
														"name": "errorArg",
														"nameLocation": "3847:8:16",
														"nodeType": "VariableDeclaration",
														"scope": 2686,
														"src": "3839:16:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 2672,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "3839:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2678,
												"initialValue": {
													"arguments": [
														{
															"id": 2675,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2660,
															"src": "3870:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2676,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2662,
															"src": "3876:9:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2674,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2657,
															2737,
															2845
														],
														"referencedDeclaration": 2657,
														"src": "3859:10:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$2591_$_t_bytes32_$",
															"typeString": "function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError,bytes32)"
														}
													},
													"id": 2677,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3859:27:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$2591_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3799:87:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2680,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2671,
															"src": "3908:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$2591",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"id": 2681,
															"name": "errorArg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2673,
															"src": "3915:8:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$2591",
																"typeString": "enum ECDSA.RecoverError"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2679,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2930,
														"src": "3896:11:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$2591_$_t_bytes32_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError,bytes32) pure"
														}
													},
													"id": 2682,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3896:28:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2683,
												"nodeType": "ExpressionStatement",
												"src": "3896:28:16"
											},
											{
												"expression": {
													"id": 2684,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2668,
													"src": "3941:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 2666,
												"id": 2685,
												"nodeType": "Return",
												"src": "3934:16:16"
											}
										]
									},
									"documentation": {
										"id": 2658,
										"nodeType": "StructuredDocumentation",
										"src": "2901:796:16",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it."
									},
									"id": 2687,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "3711:7:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2663,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2660,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "3727:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 2687,
												"src": "3719:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2659,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3719:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2662,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "3746:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 2687,
												"src": "3733:22:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2661,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3733:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3718:38:16"
									},
									"returnParameters": {
										"id": 2666,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2665,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2687,
												"src": "3780:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2664,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3780:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3779:9:16"
									},
									"scope": 2931,
									"src": "3702:255:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2736,
										"nodeType": "Block",
										"src": "4285:342:16",
										"statements": [
											{
												"id": 2735,
												"nodeType": "UncheckedBlock",
												"src": "4295:326:16",
												"statements": [
													{
														"assignments": [
															2705
														],
														"declarations": [
															{
																"constant": false,
																"id": 2705,
																"mutability": "mutable",
																"name": "s",
																"nameLocation": "4327:1:16",
																"nodeType": "VariableDeclaration",
																"scope": 2735,
																"src": "4319:9:16",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 2704,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "4319:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2712,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															"id": 2711,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2706,
																"name": "vs",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2694,
																"src": "4331:2:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
																		"id": 2709,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4344:66:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
																			"typeString": "int_const 5789...(69 digits omitted)...9967"
																		},
																		"value": "0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
																			"typeString": "int_const 5789...(69 digits omitted)...9967"
																		}
																	],
																	"id": 2708,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "4336:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes32_$",
																		"typeString": "type(bytes32)"
																	},
																	"typeName": {
																		"id": 2707,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "4336:7:16",
																		"typeDescriptions": {}
																	}
																},
																"id": 2710,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4336:75:16",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"src": "4331:80:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4319:92:16"
													},
													{
														"assignments": [
															2714
														],
														"declarations": [
															{
																"constant": false,
																"id": 2714,
																"mutability": "mutable",
																"name": "v",
																"nameLocation": "4528:1:16",
																"nodeType": "VariableDeclaration",
																"scope": 2735,
																"src": "4522:7:16",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																"typeName": {
																	"id": 2713,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "4522:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2727,
														"initialValue": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2725,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2722,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"arguments": [
																						{
																							"id": 2719,
																							"name": "vs",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2694,
																							"src": "4547:2:16",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bytes32",
																								"typeString": "bytes32"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_bytes32",
																								"typeString": "bytes32"
																							}
																						],
																						"id": 2718,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "4539:7:16",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_uint256_$",
																							"typeString": "type(uint256)"
																						},
																						"typeName": {
																							"id": 2717,
																							"name": "uint256",
																							"nodeType": "ElementaryTypeName",
																							"src": "4539:7:16",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 2720,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "4539:11:16",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": ">>",
																				"rightExpression": {
																					"hexValue": "323535",
																					"id": 2721,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "4554:3:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_255_by_1",
																						"typeString": "int_const 255"
																					},
																					"value": "255"
																				},
																				"src": "4539:18:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 2723,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "4538:20:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "3237",
																		"id": 2724,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4561:2:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_27_by_1",
																			"typeString": "int_const 27"
																		},
																		"value": "27"
																	},
																	"src": "4538:25:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2716,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4532:5:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint8_$",
																	"typeString": "type(uint8)"
																},
																"typeName": {
																	"id": 2715,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "4532:5:16",
																	"typeDescriptions": {}
																}
															},
															"id": 2726,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4532:32:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4522:42:16"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 2729,
																	"name": "hash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2690,
																	"src": "4596:4:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 2730,
																	"name": "v",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2714,
																	"src": "4602:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																{
																	"id": 2731,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2692,
																	"src": "4605:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 2732,
																	"name": "s",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2705,
																	"src": "4608:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"id": 2728,
																"name": "tryRecover",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2657,
																	2737,
																	2845
																],
																"referencedDeclaration": 2845,
																"src": "4585:10:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2591_$_t_bytes32_$",
																	"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"id": 2733,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4585:25:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$2591_$_t_bytes32_$",
																"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
															}
														},
														"functionReturnParameters": 2703,
														"id": 2734,
														"nodeType": "Return",
														"src": "4578:32:16"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2688,
										"nodeType": "StructuredDocumentation",
										"src": "3963:205:16",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]"
									},
									"id": 2737,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "4182:10:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2695,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2690,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "4201:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 2737,
												"src": "4193:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2689,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4193:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2692,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4215:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2737,
												"src": "4207:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2691,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4207:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2694,
												"mutability": "mutable",
												"name": "vs",
												"nameLocation": "4226:2:16",
												"nodeType": "VariableDeclaration",
												"scope": 2737,
												"src": "4218:10:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2693,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4218:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4192:37:16"
									},
									"returnParameters": {
										"id": 2703,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2697,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2737,
												"src": "4253:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2696,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4253:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2700,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2737,
												"src": "4262:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$2591",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 2699,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2698,
														"name": "RecoverError",
														"nameLocations": [
															"4262:12:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2591,
														"src": "4262:12:16"
													},
													"referencedDeclaration": 2591,
													"src": "4262:12:16",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$2591",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2702,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2737,
												"src": "4276:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2701,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4276:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4252:32:16"
									},
									"scope": 2931,
									"src": "4173:454:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2769,
										"nodeType": "Block",
										"src": "4840:164:16",
										"statements": [
											{
												"assignments": [
													2750,
													2753,
													2755
												],
												"declarations": [
													{
														"constant": false,
														"id": 2750,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "4859:9:16",
														"nodeType": "VariableDeclaration",
														"scope": 2769,
														"src": "4851:17:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 2749,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4851:7:16",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2753,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "4883:5:16",
														"nodeType": "VariableDeclaration",
														"scope": 2769,
														"src": "4870:18:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$2591",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 2752,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 2751,
																"name": "RecoverError",
																"nameLocations": [
																	"4870:12:16"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 2591,
																"src": "4870:12:16"
															},
															"referencedDeclaration": 2591,
															"src": "4870:12:16",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$2591",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2755,
														"mutability": "mutable",
														"name": "errorArg",
														"nameLocation": "4898:8:16",
														"nodeType": "VariableDeclaration",
														"scope": 2769,
														"src": "4890:16:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 2754,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "4890:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2761,
												"initialValue": {
													"arguments": [
														{
															"id": 2757,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2740,
															"src": "4921:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2758,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2742,
															"src": "4927:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2759,
															"name": "vs",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2744,
															"src": "4930:2:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2756,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2657,
															2737,
															2845
														],
														"referencedDeclaration": 2737,
														"src": "4910:10:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2591_$_t_bytes32_$",
															"typeString": "function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
														}
													},
													"id": 2760,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4910:23:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$2591_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4850:83:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2763,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2753,
															"src": "4955:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$2591",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"id": 2764,
															"name": "errorArg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2755,
															"src": "4962:8:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$2591",
																"typeString": "enum ECDSA.RecoverError"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2762,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2930,
														"src": "4943:11:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$2591_$_t_bytes32_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError,bytes32) pure"
														}
													},
													"id": 2765,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4943:28:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2766,
												"nodeType": "ExpressionStatement",
												"src": "4943:28:16"
											},
											{
												"expression": {
													"id": 2767,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2750,
													"src": "4988:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 2748,
												"id": 2768,
												"nodeType": "Return",
												"src": "4981:16:16"
											}
										]
									},
									"documentation": {
										"id": 2738,
										"nodeType": "StructuredDocumentation",
										"src": "4633:116:16",
										"text": " @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately."
									},
									"id": 2770,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "4763:7:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2745,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2740,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "4779:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 2770,
												"src": "4771:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2739,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4771:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2742,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4793:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2770,
												"src": "4785:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2741,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4785:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2744,
												"mutability": "mutable",
												"name": "vs",
												"nameLocation": "4804:2:16",
												"nodeType": "VariableDeclaration",
												"scope": 2770,
												"src": "4796:10:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2743,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4796:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4770:37:16"
									},
									"returnParameters": {
										"id": 2748,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2747,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2770,
												"src": "4831:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2746,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4831:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4830:9:16"
									},
									"scope": 2931,
									"src": "4754:250:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2844,
										"nodeType": "Block",
										"src": "5298:1372:16",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2794,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 2791,
																"name": "s",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2779,
																"src": "6194:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 2790,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6186:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 2789,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "6186:7:16",
																"typeDescriptions": {}
															}
														},
														"id": 2792,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6186:10:16",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130",
														"id": 2793,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6199:66:16",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1",
															"typeString": "int_const 5789...(69 digits omitted)...7168"
														},
														"value": "0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
													},
													"src": "6186:79:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2805,
												"nodeType": "IfStatement",
												"src": "6182:164:16",
												"trueBody": {
													"id": 2804,
													"nodeType": "Block",
													"src": "6267:79:16",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 2797,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6297:1:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 2796,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6289:7:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 2795,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6289:7:16",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2798,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6289:10:16",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 2799,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2591,
																			"src": "6301:12:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$2591_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 2800,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "6314:17:16",
																		"memberName": "InvalidSignatureS",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2590,
																		"src": "6301:30:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$2591",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	{
																		"id": 2801,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2779,
																		"src": "6333:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"id": 2802,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6288:47:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$2591_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 2788,
															"id": 2803,
															"nodeType": "Return",
															"src": "6281:54:16"
														}
													]
												}
											},
											{
												"assignments": [
													2807
												],
												"declarations": [
													{
														"constant": false,
														"id": 2807,
														"mutability": "mutable",
														"name": "signer",
														"nameLocation": "6448:6:16",
														"nodeType": "VariableDeclaration",
														"scope": 2844,
														"src": "6440:14:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 2806,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6440:7:16",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2814,
												"initialValue": {
													"arguments": [
														{
															"id": 2809,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2773,
															"src": "6467:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2810,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2775,
															"src": "6473:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 2811,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2777,
															"src": "6476:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2812,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2779,
															"src": "6479:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2808,
														"name": "ecrecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967290,
														"src": "6457:9:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 2813,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6457:24:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6440:41:16"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 2820,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2815,
														"name": "signer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2807,
														"src": "6495:6:16",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 2818,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6513:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 2817,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6505:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2816,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6505:7:16",
																"typeDescriptions": {}
															}
														},
														"id": 2819,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6505:10:16",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6495:20:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2834,
												"nodeType": "IfStatement",
												"src": "6491:113:16",
												"trueBody": {
													"id": 2833,
													"nodeType": "Block",
													"src": "6517:87:16",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 2823,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6547:1:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 2822,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6539:7:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 2821,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6539:7:16",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2824,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6539:10:16",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 2825,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2591,
																			"src": "6551:12:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$2591_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 2826,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "6564:16:16",
																		"memberName": "InvalidSignature",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2588,
																		"src": "6551:29:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$2591",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 2829,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6590:1:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 2828,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6582:7:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_bytes32_$",
																				"typeString": "type(bytes32)"
																			},
																			"typeName": {
																				"id": 2827,
																				"name": "bytes32",
																				"nodeType": "ElementaryTypeName",
																				"src": "6582:7:16",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2830,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6582:10:16",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"id": 2831,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6538:55:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$2591_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 2788,
															"id": 2832,
															"nodeType": "Return",
															"src": "6531:62:16"
														}
													]
												}
											},
											{
												"expression": {
													"components": [
														{
															"id": 2835,
															"name": "signer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2807,
															"src": "6622:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 2836,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2591,
																"src": "6630:12:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$2591_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 2837,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "6643:7:16",
															"memberName": "NoError",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2587,
															"src": "6630:20:16",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$2591",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2840,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6660:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2839,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6652:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 2838,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "6652:7:16",
																	"typeDescriptions": {}
																}
															},
															"id": 2841,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6652:10:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"id": 2842,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "6621:42:16",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$2591_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"functionReturnParameters": 2788,
												"id": 2843,
												"nodeType": "Return",
												"src": "6614:49:16"
											}
										]
									},
									"documentation": {
										"id": 2771,
										"nodeType": "StructuredDocumentation",
										"src": "5010:125:16",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately."
									},
									"id": 2845,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "5149:10:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2780,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2773,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "5177:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 2845,
												"src": "5169:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2772,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5169:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2775,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "5197:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2845,
												"src": "5191:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2774,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5191:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2777,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "5216:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2845,
												"src": "5208:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2776,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5208:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2779,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "5235:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2845,
												"src": "5227:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2778,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5227:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5159:83:16"
									},
									"returnParameters": {
										"id": 2788,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2782,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2845,
												"src": "5266:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2781,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5266:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2785,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2845,
												"src": "5275:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$2591",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 2784,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2783,
														"name": "RecoverError",
														"nameLocations": [
															"5275:12:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2591,
														"src": "5275:12:16"
													},
													"referencedDeclaration": 2591,
													"src": "5275:12:16",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$2591",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2787,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2845,
												"src": "5289:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2786,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5289:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5265:32:16"
									},
									"scope": 2931,
									"src": "5140:1530:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2880,
										"nodeType": "Block",
										"src": "6897:166:16",
										"statements": [
											{
												"assignments": [
													2860,
													2863,
													2865
												],
												"declarations": [
													{
														"constant": false,
														"id": 2860,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "6916:9:16",
														"nodeType": "VariableDeclaration",
														"scope": 2880,
														"src": "6908:17:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 2859,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6908:7:16",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2863,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "6940:5:16",
														"nodeType": "VariableDeclaration",
														"scope": 2880,
														"src": "6927:18:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$2591",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 2862,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 2861,
																"name": "RecoverError",
																"nameLocations": [
																	"6927:12:16"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 2591,
																"src": "6927:12:16"
															},
															"referencedDeclaration": 2591,
															"src": "6927:12:16",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$2591",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2865,
														"mutability": "mutable",
														"name": "errorArg",
														"nameLocation": "6955:8:16",
														"nodeType": "VariableDeclaration",
														"scope": 2880,
														"src": "6947:16:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 2864,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "6947:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2872,
												"initialValue": {
													"arguments": [
														{
															"id": 2867,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2848,
															"src": "6978:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2868,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2850,
															"src": "6984:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 2869,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2852,
															"src": "6987:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2870,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2854,
															"src": "6990:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2866,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2657,
															2737,
															2845
														],
														"referencedDeclaration": 2845,
														"src": "6967:10:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2591_$_t_bytes32_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
														}
													},
													"id": 2871,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6967:25:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$2591_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6907:85:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2874,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2863,
															"src": "7014:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$2591",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"id": 2875,
															"name": "errorArg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2865,
															"src": "7021:8:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$2591",
																"typeString": "enum ECDSA.RecoverError"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2873,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2930,
														"src": "7002:11:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$2591_$_t_bytes32_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError,bytes32) pure"
														}
													},
													"id": 2876,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7002:28:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2877,
												"nodeType": "ExpressionStatement",
												"src": "7002:28:16"
											},
											{
												"expression": {
													"id": 2878,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2860,
													"src": "7047:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 2858,
												"id": 2879,
												"nodeType": "Return",
												"src": "7040:16:16"
											}
										]
									},
									"documentation": {
										"id": 2846,
										"nodeType": "StructuredDocumentation",
										"src": "6676:122:16",
										"text": " @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."
									},
									"id": 2881,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "6812:7:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2855,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2848,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "6828:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 2881,
												"src": "6820:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2847,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6820:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2850,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "6840:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2881,
												"src": "6834:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2849,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "6834:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2852,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "6851:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2881,
												"src": "6843:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2851,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6843:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2854,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "6862:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2881,
												"src": "6854:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2853,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6854:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6819:45:16"
									},
									"returnParameters": {
										"id": 2858,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2857,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2881,
												"src": "6888:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2856,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6888:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6887:9:16"
									},
									"scope": 2931,
									"src": "6803:260:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2929,
										"nodeType": "Block",
										"src": "7268:460:16",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_enum$_RecoverError_$2591",
														"typeString": "enum ECDSA.RecoverError"
													},
													"id": 2893,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2890,
														"name": "error",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2885,
														"src": "7282:5:16",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$2591",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"id": 2891,
															"name": "RecoverError",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2591,
															"src": "7291:12:16",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_enum$_RecoverError_$2591_$",
																"typeString": "type(enum ECDSA.RecoverError)"
															}
														},
														"id": 2892,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "7304:7:16",
														"memberName": "NoError",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2587,
														"src": "7291:20:16",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$2591",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"src": "7282:29:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_enum$_RecoverError_$2591",
															"typeString": "enum ECDSA.RecoverError"
														},
														"id": 2899,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2896,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2885,
															"src": "7378:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$2591",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"id": 2897,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2591,
																"src": "7387:12:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$2591_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 2898,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "7400:16:16",
															"memberName": "InvalidSignature",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2588,
															"src": "7387:29:16",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$2591",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"src": "7378:38:16",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_enum$_RecoverError_$2591",
																"typeString": "enum ECDSA.RecoverError"
															},
															"id": 2907,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2904,
																"name": "error",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2885,
																"src": "7483:5:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$2591",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 2905,
																	"name": "RecoverError",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2591,
																	"src": "7492:12:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_RecoverError_$2591_$",
																		"typeString": "type(enum ECDSA.RecoverError)"
																	}
																},
																"id": 2906,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "7505:22:16",
																"memberName": "InvalidSignatureLength",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2589,
																"src": "7492:35:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$2591",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"src": "7483:44:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseBody": {
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_enum$_RecoverError_$2591",
																	"typeString": "enum ECDSA.RecoverError"
																},
																"id": 2919,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2916,
																	"name": "error",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2885,
																	"src": "7617:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$2591",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"expression": {
																		"id": 2917,
																		"name": "RecoverError",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2591,
																		"src": "7626:12:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_enum$_RecoverError_$2591_$",
																			"typeString": "type(enum ECDSA.RecoverError)"
																		}
																	},
																	"id": 2918,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "7639:17:16",
																	"memberName": "InvalidSignatureS",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2590,
																	"src": "7626:30:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$2591",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"src": "7617:39:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2925,
															"nodeType": "IfStatement",
															"src": "7613:109:16",
															"trueBody": {
																"id": 2924,
																"nodeType": "Block",
																"src": "7658:64:16",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 2921,
																					"name": "errorArg",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2887,
																					"src": "7702:8:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				],
																				"id": 2920,
																				"name": "ECDSAInvalidSignatureS",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2604,
																				"src": "7679:22:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_bytes32_$returns$__$",
																					"typeString": "function (bytes32) pure"
																				}
																			},
																			"id": 2922,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7679:32:16",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 2923,
																		"nodeType": "RevertStatement",
																		"src": "7672:39:16"
																	}
																]
															}
														},
														"id": 2926,
														"nodeType": "IfStatement",
														"src": "7479:243:16",
														"trueBody": {
															"id": 2915,
															"nodeType": "Block",
															"src": "7529:78:16",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"id": 2911,
																						"name": "errorArg",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2887,
																						"src": "7586:8:16",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					],
																					"id": 2910,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "7578:7:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 2909,
																						"name": "uint256",
																						"nodeType": "ElementaryTypeName",
																						"src": "7578:7:16",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 2912,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "7578:17:16",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 2908,
																			"name": "ECDSAInvalidSignatureLength",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2599,
																			"src": "7550:27:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$_t_uint256_$returns$__$",
																				"typeString": "function (uint256) pure"
																			}
																		},
																		"id": 2913,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7550:46:16",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 2914,
																	"nodeType": "RevertStatement",
																	"src": "7543:53:16"
																}
															]
														}
													},
													"id": 2927,
													"nodeType": "IfStatement",
													"src": "7374:348:16",
													"trueBody": {
														"id": 2903,
														"nodeType": "Block",
														"src": "7418:55:16",
														"statements": [
															{
																"errorCall": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 2900,
																		"name": "ECDSAInvalidSignature",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2594,
																		"src": "7439:21:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 2901,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7439:23:16",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 2902,
																"nodeType": "RevertStatement",
																"src": "7432:30:16"
															}
														]
													}
												},
												"id": 2928,
												"nodeType": "IfStatement",
												"src": "7278:444:16",
												"trueBody": {
													"id": 2895,
													"nodeType": "Block",
													"src": "7313:55:16",
													"statements": [
														{
															"functionReturnParameters": 2889,
															"id": 2894,
															"nodeType": "Return",
															"src": "7327:7:16"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2882,
										"nodeType": "StructuredDocumentation",
										"src": "7069:122:16",
										"text": " @dev Optionally reverts with the corresponding custom error according to the `error` argument provided."
									},
									"id": 2930,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_throwError",
									"nameLocation": "7205:11:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2888,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2885,
												"mutability": "mutable",
												"name": "error",
												"nameLocation": "7230:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 2930,
												"src": "7217:18:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$2591",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 2884,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2883,
														"name": "RecoverError",
														"nameLocations": [
															"7217:12:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2591,
														"src": "7217:12:16"
													},
													"referencedDeclaration": 2591,
													"src": "7217:12:16",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$2591",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2887,
												"mutability": "mutable",
												"name": "errorArg",
												"nameLocation": "7245:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 2930,
												"src": "7237:16:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2886,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7237:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7216:38:16"
									},
									"returnParameters": {
										"id": 2889,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7268:0:16"
									},
									"scope": 2931,
									"src": "7196:532:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 2932,
							"src": "344:7386:16",
							"usedErrors": [
								2594,
								2599,
								2604
							],
							"usedEvents": []
						}
					],
					"src": "112:7619:16"
				},
				"id": 16
			},
			"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
					"exportedSymbols": {
						"MessageHashUtils": [
							3005
						],
						"Strings": [
							2583
						]
					},
					"id": 3006,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2933,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "123:24:17"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
							"file": "../Strings.sol",
							"id": 2935,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3006,
							"sourceUnit": 2584,
							"src": "149:39:17",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2934,
										"name": "Strings",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2583,
										"src": "157:7:17",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "MessageHashUtils",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2936,
								"nodeType": "StructuredDocumentation",
								"src": "190:330:17",
								"text": " @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n The library provides methods for generating a hash of a message that conforms to the\n https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n specifications."
							},
							"fullyImplemented": true,
							"id": 3005,
							"linearizedBaseContracts": [
								3005
							],
							"name": "MessageHashUtils",
							"nameLocation": "529:16:17",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2945,
										"nodeType": "Block",
										"src": "1314:368:17",
										"statements": [
											{
												"AST": {
													"nativeSrc": "1376:300:17",
													"nodeType": "YulBlock",
													"src": "1376:300:17",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1397:4:17",
																		"nodeType": "YulLiteral",
																		"src": "1397:4:17",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"hexValue": "19457468657265756d205369676e6564204d6573736167653a0a3332",
																		"kind": "string",
																		"nativeSrc": "1403:34:17",
																		"nodeType": "YulLiteral",
																		"src": "1403:34:17",
																		"type": "",
																		"value": "\u0019Ethereum Signed Message:\n32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1390:6:17",
																	"nodeType": "YulIdentifier",
																	"src": "1390:6:17"
																},
																"nativeSrc": "1390:48:17",
																"nodeType": "YulFunctionCall",
																"src": "1390:48:17"
															},
															"nativeSrc": "1390:48:17",
															"nodeType": "YulExpressionStatement",
															"src": "1390:48:17"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1499:4:17",
																		"nodeType": "YulLiteral",
																		"src": "1499:4:17",
																		"type": "",
																		"value": "0x1c"
																	},
																	{
																		"name": "messageHash",
																		"nativeSrc": "1505:11:17",
																		"nodeType": "YulIdentifier",
																		"src": "1505:11:17"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1492:6:17",
																	"nodeType": "YulIdentifier",
																	"src": "1492:6:17"
																},
																"nativeSrc": "1492:25:17",
																"nodeType": "YulFunctionCall",
																"src": "1492:25:17"
															},
															"nativeSrc": "1492:25:17",
															"nodeType": "YulExpressionStatement",
															"src": "1492:25:17"
														},
														{
															"nativeSrc": "1571:31:17",
															"nodeType": "YulAssignment",
															"src": "1571:31:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1591:4:17",
																		"nodeType": "YulLiteral",
																		"src": "1591:4:17",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1597:4:17",
																		"nodeType": "YulLiteral",
																		"src": "1597:4:17",
																		"type": "",
																		"value": "0x3c"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nativeSrc": "1581:9:17",
																	"nodeType": "YulIdentifier",
																	"src": "1581:9:17"
																},
																"nativeSrc": "1581:21:17",
																"nodeType": "YulFunctionCall",
																"src": "1581:21:17"
															},
															"variableNames": [
																{
																	"name": "digest",
																	"nativeSrc": "1571:6:17",
																	"nodeType": "YulIdentifier",
																	"src": "1571:6:17"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 2942,
														"isOffset": false,
														"isSlot": false,
														"src": "1571:6:17",
														"valueSize": 1
													},
													{
														"declaration": 2939,
														"isOffset": false,
														"isSlot": false,
														"src": "1505:11:17",
														"valueSize": 1
													}
												],
												"id": 2944,
												"nodeType": "InlineAssembly",
												"src": "1367:309:17"
											}
										]
									},
									"documentation": {
										"id": 2937,
										"nodeType": "StructuredDocumentation",
										"src": "552:665:17",
										"text": " @dev Returns the keccak256 digest of an EIP-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing a bytes32 `messageHash` with\n `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n keccak256, although any bytes32 value can be safely used because the final digest will\n be re-hashed.\n See {ECDSA-recover}."
									},
									"id": 2946,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toEthSignedMessageHash",
									"nameLocation": "1231:22:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2940,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2939,
												"mutability": "mutable",
												"name": "messageHash",
												"nameLocation": "1262:11:17",
												"nodeType": "VariableDeclaration",
												"scope": 2946,
												"src": "1254:19:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2938,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1254:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1253:21:17"
									},
									"returnParameters": {
										"id": 2943,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2942,
												"mutability": "mutable",
												"name": "digest",
												"nameLocation": "1306:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 2946,
												"src": "1298:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2941,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1298:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1297:16:17"
									},
									"scope": 3005,
									"src": "1222:460:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2971,
										"nodeType": "Block",
										"src": "2234:143:17",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "19457468657265756d205369676e6564204d6573736167653a0a",
																	"id": 2958,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2286:32:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""
																	},
																	"value": "\u0019Ethereum Signed Message:\n"
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"expression": {
																						"id": 2963,
																						"name": "message",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2949,
																						"src": "2343:7:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					},
																					"id": 2964,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "2351:6:17",
																					"memberName": "length",
																					"nodeType": "MemberAccess",
																					"src": "2343:14:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"id": 2961,
																					"name": "Strings",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2583,
																					"src": "2326:7:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_Strings_$2583_$",
																						"typeString": "type(library Strings)"
																					}
																				},
																				"id": 2962,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "2334:8:17",
																				"memberName": "toString",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2396,
																				"src": "2326:16:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																					"typeString": "function (uint256) pure returns (string memory)"
																				}
																			},
																			"id": 2965,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2326:32:17",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		],
																		"id": 2960,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2320:5:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 2959,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "2320:5:17",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2966,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2320:39:17",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																{
																	"id": 2967,
																	"name": "message",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2949,
																	"src": "2361:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 2956,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2273:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 2955,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "2273:5:17",
																		"typeDescriptions": {}
																	}
																},
																"id": 2957,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2279:6:17",
																"memberName": "concat",
																"nodeType": "MemberAccess",
																"src": "2273:12:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2968,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2273:96:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2954,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2263:9:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2969,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2263:107:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2953,
												"id": 2970,
												"nodeType": "Return",
												"src": "2244:126:17"
											}
										]
									},
									"documentation": {
										"id": 2947,
										"nodeType": "StructuredDocumentation",
										"src": "1688:455:17",
										"text": " @dev Returns the keccak256 digest of an EIP-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing an arbitrary `message` with\n `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n See {ECDSA-recover}."
									},
									"id": 2972,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toEthSignedMessageHash",
									"nameLocation": "2157:22:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2950,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2949,
												"mutability": "mutable",
												"name": "message",
												"nameLocation": "2193:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 2972,
												"src": "2180:20:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2948,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2180:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2179:22:17"
									},
									"returnParameters": {
										"id": 2953,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2952,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2972,
												"src": "2225:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2951,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2225:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2224:9:17"
									},
									"scope": 3005,
									"src": "2148:229:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2991,
										"nodeType": "Block",
										"src": "2831:80:17",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "1900",
																	"id": 2985,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "hexString",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2875:10:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a",
																		"typeString": "literal_string hex\"1900\""
																	},
																	"value": "\u0019\u0000"
																},
																{
																	"id": 2986,
																	"name": "validator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2975,
																	"src": "2887:9:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2987,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2977,
																	"src": "2898:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a",
																		"typeString": "literal_string hex\"1900\""
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 2983,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2858:3:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2984,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2862:12:17",
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "2858:16:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2988,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2858:45:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2982,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2848:9:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2989,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2848:56:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2981,
												"id": 2990,
												"nodeType": "Return",
												"src": "2841:63:17"
											}
										]
									},
									"documentation": {
										"id": 2973,
										"nodeType": "StructuredDocumentation",
										"src": "2383:332:17",
										"text": " @dev Returns the keccak256 digest of an EIP-191 signed data with version\n `0x00` (data with intended validator).\n The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n `validator` address. Then hashing the result.\n See {ECDSA-recover}."
									},
									"id": 2992,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toDataWithIntendedValidatorHash",
									"nameLocation": "2729:31:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2978,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2975,
												"mutability": "mutable",
												"name": "validator",
												"nameLocation": "2769:9:17",
												"nodeType": "VariableDeclaration",
												"scope": 2992,
												"src": "2761:17:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2974,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2761:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2977,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "2793:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 2992,
												"src": "2780:17:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2976,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2780:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2760:38:17"
									},
									"returnParameters": {
										"id": 2981,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2980,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2992,
												"src": "2822:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2979,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2822:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2821:9:17"
									},
									"scope": 3005,
									"src": "2720:191:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3003,
										"nodeType": "Block",
										"src": "3462:292:17",
										"statements": [
											{
												"AST": {
													"nativeSrc": "3524:224:17",
													"nodeType": "YulBlock",
													"src": "3524:224:17",
													"statements": [
														{
															"nativeSrc": "3538:22:17",
															"nodeType": "YulVariableDeclaration",
															"src": "3538:22:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "3555:4:17",
																		"nodeType": "YulLiteral",
																		"src": "3555:4:17",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "3549:5:17",
																	"nodeType": "YulIdentifier",
																	"src": "3549:5:17"
																},
																"nativeSrc": "3549:11:17",
																"nodeType": "YulFunctionCall",
																"src": "3549:11:17"
															},
															"variables": [
																{
																	"name": "ptr",
																	"nativeSrc": "3542:3:17",
																	"nodeType": "YulTypedName",
																	"src": "3542:3:17",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nativeSrc": "3580:3:17",
																		"nodeType": "YulIdentifier",
																		"src": "3580:3:17"
																	},
																	{
																		"hexValue": "1901",
																		"kind": "string",
																		"nativeSrc": "3585:10:17",
																		"nodeType": "YulLiteral",
																		"src": "3585:10:17",
																		"type": "",
																		"value": "\u0019\u0001"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3573:6:17",
																	"nodeType": "YulIdentifier",
																	"src": "3573:6:17"
																},
																"nativeSrc": "3573:23:17",
																"nodeType": "YulFunctionCall",
																"src": "3573:23:17"
															},
															"nativeSrc": "3573:23:17",
															"nodeType": "YulExpressionStatement",
															"src": "3573:23:17"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nativeSrc": "3620:3:17",
																				"nodeType": "YulIdentifier",
																				"src": "3620:3:17"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3625:4:17",
																				"nodeType": "YulLiteral",
																				"src": "3625:4:17",
																				"type": "",
																				"value": "0x02"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3616:3:17",
																			"nodeType": "YulIdentifier",
																			"src": "3616:3:17"
																		},
																		"nativeSrc": "3616:14:17",
																		"nodeType": "YulFunctionCall",
																		"src": "3616:14:17"
																	},
																	{
																		"name": "domainSeparator",
																		"nativeSrc": "3632:15:17",
																		"nodeType": "YulIdentifier",
																		"src": "3632:15:17"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3609:6:17",
																	"nodeType": "YulIdentifier",
																	"src": "3609:6:17"
																},
																"nativeSrc": "3609:39:17",
																"nodeType": "YulFunctionCall",
																"src": "3609:39:17"
															},
															"nativeSrc": "3609:39:17",
															"nodeType": "YulExpressionStatement",
															"src": "3609:39:17"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nativeSrc": "3672:3:17",
																				"nodeType": "YulIdentifier",
																				"src": "3672:3:17"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3677:4:17",
																				"nodeType": "YulLiteral",
																				"src": "3677:4:17",
																				"type": "",
																				"value": "0x22"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3668:3:17",
																			"nodeType": "YulIdentifier",
																			"src": "3668:3:17"
																		},
																		"nativeSrc": "3668:14:17",
																		"nodeType": "YulFunctionCall",
																		"src": "3668:14:17"
																	},
																	{
																		"name": "structHash",
																		"nativeSrc": "3684:10:17",
																		"nodeType": "YulIdentifier",
																		"src": "3684:10:17"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3661:6:17",
																	"nodeType": "YulIdentifier",
																	"src": "3661:6:17"
																},
																"nativeSrc": "3661:34:17",
																"nodeType": "YulFunctionCall",
																"src": "3661:34:17"
															},
															"nativeSrc": "3661:34:17",
															"nodeType": "YulExpressionStatement",
															"src": "3661:34:17"
														},
														{
															"nativeSrc": "3708:30:17",
															"nodeType": "YulAssignment",
															"src": "3708:30:17",
															"value": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nativeSrc": "3728:3:17",
																		"nodeType": "YulIdentifier",
																		"src": "3728:3:17"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3733:4:17",
																		"nodeType": "YulLiteral",
																		"src": "3733:4:17",
																		"type": "",
																		"value": "0x42"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nativeSrc": "3718:9:17",
																	"nodeType": "YulIdentifier",
																	"src": "3718:9:17"
																},
																"nativeSrc": "3718:20:17",
																"nodeType": "YulFunctionCall",
																"src": "3718:20:17"
															},
															"variableNames": [
																{
																	"name": "digest",
																	"nativeSrc": "3708:6:17",
																	"nodeType": "YulIdentifier",
																	"src": "3708:6:17"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 3000,
														"isOffset": false,
														"isSlot": false,
														"src": "3708:6:17",
														"valueSize": 1
													},
													{
														"declaration": 2995,
														"isOffset": false,
														"isSlot": false,
														"src": "3632:15:17",
														"valueSize": 1
													},
													{
														"declaration": 2997,
														"isOffset": false,
														"isSlot": false,
														"src": "3684:10:17",
														"valueSize": 1
													}
												],
												"id": 3002,
												"nodeType": "InlineAssembly",
												"src": "3515:233:17"
											}
										]
									},
									"documentation": {
										"id": 2993,
										"nodeType": "StructuredDocumentation",
										"src": "2917:431:17",
										"text": " @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n See {ECDSA-recover}."
									},
									"id": 3004,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toTypedDataHash",
									"nameLocation": "3362:15:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2998,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2995,
												"mutability": "mutable",
												"name": "domainSeparator",
												"nameLocation": "3386:15:17",
												"nodeType": "VariableDeclaration",
												"scope": 3004,
												"src": "3378:23:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2994,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3378:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2997,
												"mutability": "mutable",
												"name": "structHash",
												"nameLocation": "3411:10:17",
												"nodeType": "VariableDeclaration",
												"scope": 3004,
												"src": "3403:18:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2996,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3403:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3377:45:17"
									},
									"returnParameters": {
										"id": 3001,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3000,
												"mutability": "mutable",
												"name": "digest",
												"nameLocation": "3454:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 3004,
												"src": "3446:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2999,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3446:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3445:16:17"
									},
									"scope": 3005,
									"src": "3353:401:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3006,
							"src": "521:3235:17",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "123:3634:17"
				},
				"id": 17
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/Math.sol",
					"exportedSymbols": {
						"Math": [
							4059
						]
					},
					"id": 4060,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3007,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "103:24:18"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Math",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 3008,
								"nodeType": "StructuredDocumentation",
								"src": "129:73:18",
								"text": " @dev Standard math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 4059,
							"linearizedBaseContracts": [
								4059
							],
							"name": "Math",
							"nameLocation": "211:4:18",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 3009,
										"nodeType": "StructuredDocumentation",
										"src": "222:50:18",
										"text": " @dev Muldiv operation overflow."
									},
									"errorSelector": "227bc153",
									"id": 3011,
									"name": "MathOverflowedMulDiv",
									"nameLocation": "283:20:18",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3010,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "303:2:18"
									},
									"src": "277:29:18"
								},
								{
									"canonicalName": "Math.Rounding",
									"id": 3016,
									"members": [
										{
											"id": 3012,
											"name": "Floor",
											"nameLocation": "336:5:18",
											"nodeType": "EnumValue",
											"src": "336:5:18"
										},
										{
											"id": 3013,
											"name": "Ceil",
											"nameLocation": "379:4:18",
											"nodeType": "EnumValue",
											"src": "379:4:18"
										},
										{
											"id": 3014,
											"name": "Trunc",
											"nameLocation": "421:5:18",
											"nodeType": "EnumValue",
											"src": "421:5:18"
										},
										{
											"id": 3015,
											"name": "Expand",
											"nameLocation": "451:6:18",
											"nodeType": "EnumValue",
											"src": "451:6:18"
										}
									],
									"name": "Rounding",
									"nameLocation": "317:8:18",
									"nodeType": "EnumDefinition",
									"src": "312:169:18"
								},
								{
									"body": {
										"id": 3047,
										"nodeType": "Block",
										"src": "661:140:18",
										"statements": [
											{
												"id": 3046,
												"nodeType": "UncheckedBlock",
												"src": "671:124:18",
												"statements": [
													{
														"assignments": [
															3029
														],
														"declarations": [
															{
																"constant": false,
																"id": 3029,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "703:1:18",
																"nodeType": "VariableDeclaration",
																"scope": 3046,
																"src": "695:9:18",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3028,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "695:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3033,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3032,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3030,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3019,
																"src": "707:1:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 3031,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3021,
																"src": "711:1:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "707:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "695:17:18"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3036,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3034,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3029,
																"src": "730:1:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 3035,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3019,
																"src": "734:1:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "730:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3041,
														"nodeType": "IfStatement",
														"src": "726:28:18",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 3037,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "745:5:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 3038,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "752:1:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 3039,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "744:10:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 3027,
															"id": 3040,
															"nodeType": "Return",
															"src": "737:17:18"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 3042,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "776:4:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 3043,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3029,
																	"src": "782:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 3044,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "775:9:18",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 3027,
														"id": 3045,
														"nodeType": "Return",
														"src": "768:16:18"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3017,
										"nodeType": "StructuredDocumentation",
										"src": "487:93:18",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag."
									},
									"id": 3048,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nameLocation": "594:6:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3022,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3019,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "609:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3048,
												"src": "601:9:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3018,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "601:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3021,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "620:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3048,
												"src": "612:9:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3020,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "612:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "600:22:18"
									},
									"returnParameters": {
										"id": 3027,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3024,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3048,
												"src": "646:4:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3023,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "646:4:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3026,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3048,
												"src": "652:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3025,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "652:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "645:15:18"
									},
									"scope": 4059,
									"src": "585:216:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3075,
										"nodeType": "Block",
										"src": "984:113:18",
										"statements": [
											{
												"id": 3074,
												"nodeType": "UncheckedBlock",
												"src": "994:97:18",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3062,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3060,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3053,
																"src": "1022:1:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 3061,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3051,
																"src": "1026:1:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1022:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3067,
														"nodeType": "IfStatement",
														"src": "1018:28:18",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 3063,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1037:5:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 3064,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1044:1:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 3065,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1036:10:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 3059,
															"id": 3066,
															"nodeType": "Return",
															"src": "1029:17:18"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 3068,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1068:4:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3071,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3069,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3051,
																		"src": "1074:1:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 3070,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3053,
																		"src": "1078:1:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1074:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 3072,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1067:13:18",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 3059,
														"id": 3073,
														"nodeType": "Return",
														"src": "1060:20:18"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3049,
										"nodeType": "StructuredDocumentation",
										"src": "807:96:18",
										"text": " @dev Returns the subtraction of two unsigned integers, with an overflow flag."
									},
									"id": 3076,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nameLocation": "917:6:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3054,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3051,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "932:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3076,
												"src": "924:9:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3050,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "924:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3053,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "943:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3076,
												"src": "935:9:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3052,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "935:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "923:22:18"
									},
									"returnParameters": {
										"id": 3059,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3056,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3076,
												"src": "969:4:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3055,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "969:4:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3058,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3076,
												"src": "975:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3057,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "975:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "968:15:18"
									},
									"scope": 4059,
									"src": "908:189:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3117,
										"nodeType": "Block",
										"src": "1283:417:18",
										"statements": [
											{
												"id": 3116,
												"nodeType": "UncheckedBlock",
												"src": "1293:401:18",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3090,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3088,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3079,
																"src": "1551:1:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 3089,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1556:1:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1551:6:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3095,
														"nodeType": "IfStatement",
														"src": "1547:28:18",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "74727565",
																		"id": 3091,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1567:4:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	},
																	{
																		"hexValue": "30",
																		"id": 3092,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1573:1:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 3093,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1566:9:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 3087,
															"id": 3094,
															"nodeType": "Return",
															"src": "1559:16:18"
														}
													},
													{
														"assignments": [
															3097
														],
														"declarations": [
															{
																"constant": false,
																"id": 3097,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "1597:1:18",
																"nodeType": "VariableDeclaration",
																"scope": 3116,
																"src": "1589:9:18",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3096,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1589:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3101,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3100,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3098,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3079,
																"src": "1601:1:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 3099,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3081,
																"src": "1605:1:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1601:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1589:17:18"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3106,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3104,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3102,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3097,
																	"src": "1624:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 3103,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3079,
																	"src": "1628:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1624:5:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 3105,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3081,
																"src": "1633:1:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1624:10:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3111,
														"nodeType": "IfStatement",
														"src": "1620:33:18",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 3107,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1644:5:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 3108,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1651:1:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 3109,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1643:10:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 3087,
															"id": 3110,
															"nodeType": "Return",
															"src": "1636:17:18"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 3112,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1675:4:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 3113,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3097,
																	"src": "1681:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 3114,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1674:9:18",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 3087,
														"id": 3115,
														"nodeType": "Return",
														"src": "1667:16:18"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3077,
										"nodeType": "StructuredDocumentation",
										"src": "1103:99:18",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag."
									},
									"id": 3118,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nameLocation": "1216:6:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3082,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3079,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1231:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3118,
												"src": "1223:9:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3078,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3081,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1242:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3118,
												"src": "1234:9:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3080,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1234:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1222:22:18"
									},
									"returnParameters": {
										"id": 3087,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3084,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3118,
												"src": "1268:4:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3083,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1268:4:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3086,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3118,
												"src": "1274:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3085,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1274:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1267:15:18"
									},
									"scope": 4059,
									"src": "1207:493:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3145,
										"nodeType": "Block",
										"src": "1887:114:18",
										"statements": [
											{
												"id": 3144,
												"nodeType": "UncheckedBlock",
												"src": "1897:98:18",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3132,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3130,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3123,
																"src": "1925:1:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 3131,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1930:1:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1925:6:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3137,
														"nodeType": "IfStatement",
														"src": "1921:29:18",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 3133,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1941:5:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 3134,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1948:1:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 3135,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1940:10:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 3129,
															"id": 3136,
															"nodeType": "Return",
															"src": "1933:17:18"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 3138,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1972:4:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3141,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3139,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3121,
																		"src": "1978:1:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 3140,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3123,
																		"src": "1982:1:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1978:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 3142,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1971:13:18",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 3129,
														"id": 3143,
														"nodeType": "Return",
														"src": "1964:20:18"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3119,
										"nodeType": "StructuredDocumentation",
										"src": "1706:100:18",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag."
									},
									"id": 3146,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nameLocation": "1820:6:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3124,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3121,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1835:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3146,
												"src": "1827:9:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3120,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1827:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3123,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1846:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3146,
												"src": "1838:9:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3122,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1838:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1826:22:18"
									},
									"returnParameters": {
										"id": 3129,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3126,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3146,
												"src": "1872:4:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3125,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1872:4:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3128,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3146,
												"src": "1878:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3127,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1878:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1871:15:18"
									},
									"scope": 4059,
									"src": "1811:190:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3173,
										"nodeType": "Block",
										"src": "2198:114:18",
										"statements": [
											{
												"id": 3172,
												"nodeType": "UncheckedBlock",
												"src": "2208:98:18",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3160,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3158,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3151,
																"src": "2236:1:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 3159,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2241:1:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2236:6:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3165,
														"nodeType": "IfStatement",
														"src": "2232:29:18",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 3161,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2252:5:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 3162,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2259:1:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 3163,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2251:10:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 3157,
															"id": 3164,
															"nodeType": "Return",
															"src": "2244:17:18"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 3166,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2283:4:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3169,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3167,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3149,
																		"src": "2289:1:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 3168,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3151,
																		"src": "2293:1:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2289:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 3170,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2282:13:18",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 3157,
														"id": 3171,
														"nodeType": "Return",
														"src": "2275:20:18"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3147,
										"nodeType": "StructuredDocumentation",
										"src": "2007:110:18",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag."
									},
									"id": 3174,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nameLocation": "2131:6:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3152,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3149,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2146:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3174,
												"src": "2138:9:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3148,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2138:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3151,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2157:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3174,
												"src": "2149:9:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3150,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2149:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2137:22:18"
									},
									"returnParameters": {
										"id": 3157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3154,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3174,
												"src": "2183:4:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3153,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2183:4:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3156,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3174,
												"src": "2189:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3155,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2189:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2182:15:18"
									},
									"scope": 4059,
									"src": "2122:190:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3191,
										"nodeType": "Block",
										"src": "2449:37:18",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 3186,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3184,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3177,
															"src": "2466:1:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 3185,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3179,
															"src": "2470:1:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2466:5:18",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 3188,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3179,
														"src": "2478:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 3189,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "2466:13:18",
													"trueExpression": {
														"id": 3187,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3177,
														"src": "2474:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3183,
												"id": 3190,
												"nodeType": "Return",
												"src": "2459:20:18"
											}
										]
									},
									"documentation": {
										"id": 3175,
										"nodeType": "StructuredDocumentation",
										"src": "2318:59:18",
										"text": " @dev Returns the largest of two numbers."
									},
									"id": 3192,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "2391:3:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3180,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3177,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2403:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3192,
												"src": "2395:9:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3176,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2395:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3179,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2414:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3192,
												"src": "2406:9:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3178,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2406:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2394:22:18"
									},
									"returnParameters": {
										"id": 3183,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3182,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3192,
												"src": "2440:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3181,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2440:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2439:9:18"
									},
									"scope": 4059,
									"src": "2382:104:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3209,
										"nodeType": "Block",
										"src": "2624:37:18",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 3204,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3202,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3195,
															"src": "2641:1:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 3203,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3197,
															"src": "2645:1:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2641:5:18",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 3206,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3197,
														"src": "2653:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 3207,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "2641:13:18",
													"trueExpression": {
														"id": 3205,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3195,
														"src": "2649:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3201,
												"id": 3208,
												"nodeType": "Return",
												"src": "2634:20:18"
											}
										]
									},
									"documentation": {
										"id": 3193,
										"nodeType": "StructuredDocumentation",
										"src": "2492:60:18",
										"text": " @dev Returns the smallest of two numbers."
									},
									"id": 3210,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "2566:3:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3198,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3195,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2578:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3210,
												"src": "2570:9:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3194,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2570:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3197,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2589:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3210,
												"src": "2581:9:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3196,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2581:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2569:22:18"
									},
									"returnParameters": {
										"id": 3201,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3200,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3210,
												"src": "2615:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3199,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2615:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2614:9:18"
									},
									"scope": 4059,
									"src": "2557:104:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3232,
										"nodeType": "Block",
										"src": "2845:82:18",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3230,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3222,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3220,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3213,
																	"src": "2900:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 3221,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3215,
																	"src": "2904:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2900:5:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 3223,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2899:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 3229,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3226,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3224,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3213,
																		"src": "2910:1:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "^",
																	"rightExpression": {
																		"id": 3225,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3215,
																		"src": "2914:1:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2910:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 3227,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2909:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"hexValue": "32",
															"id": 3228,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2919:1:18",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "2909:11:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2899:21:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3219,
												"id": 3231,
												"nodeType": "Return",
												"src": "2892:28:18"
											}
										]
									},
									"documentation": {
										"id": 3211,
										"nodeType": "StructuredDocumentation",
										"src": "2667:102:18",
										"text": " @dev Returns the average of two numbers. The result is rounded towards\n zero."
									},
									"id": 3233,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "2783:7:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3216,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3213,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2799:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3233,
												"src": "2791:9:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3212,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2791:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3215,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2810:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3233,
												"src": "2802:9:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3214,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2802:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2790:22:18"
									},
									"returnParameters": {
										"id": 3219,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3218,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3233,
												"src": "2836:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3217,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2836:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2835:9:18"
									},
									"scope": 4059,
									"src": "2774:153:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3266,
										"nodeType": "Block",
										"src": "3219:260:18",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3245,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3243,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3238,
														"src": "3233:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 3244,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3238:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3233:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3251,
												"nodeType": "IfStatement",
												"src": "3229:127:18",
												"trueBody": {
													"id": 3250,
													"nodeType": "Block",
													"src": "3241:115:18",
													"statements": [
														{
															"expression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3248,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3246,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3236,
																	"src": "3340:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 3247,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3238,
																	"src": "3344:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3340:5:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 3242,
															"id": 3249,
															"nodeType": "Return",
															"src": "3333:12:18"
														}
													]
												}
											},
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 3254,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3252,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3236,
															"src": "3444:1:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 3253,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3449:1:18",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "3444:6:18",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 3263,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3261,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 3258,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 3256,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3236,
																			"src": "3458:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 3257,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3462:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "3458:5:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 3259,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3457:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 3260,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3238,
																"src": "3467:1:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3457:11:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 3262,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3471:1:18",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "3457:15:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 3264,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "3444:28:18",
													"trueExpression": {
														"hexValue": "30",
														"id": 3255,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3453:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3242,
												"id": 3265,
												"nodeType": "Return",
												"src": "3437:35:18"
											}
										]
									},
									"documentation": {
										"id": 3234,
										"nodeType": "StructuredDocumentation",
										"src": "2933:210:18",
										"text": " @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."
									},
									"id": 3267,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ceilDiv",
									"nameLocation": "3157:7:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3239,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3236,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3173:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3267,
												"src": "3165:9:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3235,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3165:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3238,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3184:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3267,
												"src": "3176:9:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3237,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3176:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3164:22:18"
									},
									"returnParameters": {
										"id": 3242,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3241,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3267,
												"src": "3210:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3240,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3210:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3209:9:18"
									},
									"scope": 4059,
									"src": "3148:331:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3392,
										"nodeType": "Block",
										"src": "3901:4018:18",
										"statements": [
											{
												"id": 3391,
												"nodeType": "UncheckedBlock",
												"src": "3911:4002:18",
												"statements": [
													{
														"assignments": [
															3280
														],
														"declarations": [
															{
																"constant": false,
																"id": 3280,
																"mutability": "mutable",
																"name": "prod0",
																"nameLocation": "4240:5:18",
																"nodeType": "VariableDeclaration",
																"scope": 3391,
																"src": "4232:13:18",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3279,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4232:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3284,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3283,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3281,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3270,
																"src": "4248:1:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 3282,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3272,
																"src": "4252:1:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4248:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4232:21:18"
													},
													{
														"assignments": [
															3286
														],
														"declarations": [
															{
																"constant": false,
																"id": 3286,
																"mutability": "mutable",
																"name": "prod1",
																"nameLocation": "4320:5:18",
																"nodeType": "VariableDeclaration",
																"scope": 3391,
																"src": "4312:13:18",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3285,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4312:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3287,
														"nodeType": "VariableDeclarationStatement",
														"src": "4312:13:18"
													},
													{
														"AST": {
															"nativeSrc": "4392:122:18",
															"nodeType": "YulBlock",
															"src": "4392:122:18",
															"statements": [
																{
																	"nativeSrc": "4410:30:18",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4410:30:18",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nativeSrc": "4427:1:18",
																				"nodeType": "YulIdentifier",
																				"src": "4427:1:18"
																			},
																			{
																				"name": "y",
																				"nativeSrc": "4430:1:18",
																				"nodeType": "YulIdentifier",
																				"src": "4430:1:18"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "4437:1:18",
																						"nodeType": "YulLiteral",
																						"src": "4437:1:18",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "4433:3:18",
																					"nodeType": "YulIdentifier",
																					"src": "4433:3:18"
																				},
																				"nativeSrc": "4433:6:18",
																				"nodeType": "YulFunctionCall",
																				"src": "4433:6:18"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nativeSrc": "4420:6:18",
																			"nodeType": "YulIdentifier",
																			"src": "4420:6:18"
																		},
																		"nativeSrc": "4420:20:18",
																		"nodeType": "YulFunctionCall",
																		"src": "4420:20:18"
																	},
																	"variables": [
																		{
																			"name": "mm",
																			"nativeSrc": "4414:2:18",
																			"nodeType": "YulTypedName",
																			"src": "4414:2:18",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4457:43:18",
																	"nodeType": "YulAssignment",
																	"src": "4457:43:18",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nativeSrc": "4474:2:18",
																						"nodeType": "YulIdentifier",
																						"src": "4474:2:18"
																					},
																					{
																						"name": "prod0",
																						"nativeSrc": "4478:5:18",
																						"nodeType": "YulIdentifier",
																						"src": "4478:5:18"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "4470:3:18",
																					"nodeType": "YulIdentifier",
																					"src": "4470:3:18"
																				},
																				"nativeSrc": "4470:14:18",
																				"nodeType": "YulFunctionCall",
																				"src": "4470:14:18"
																			},
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nativeSrc": "4489:2:18",
																						"nodeType": "YulIdentifier",
																						"src": "4489:2:18"
																					},
																					{
																						"name": "prod0",
																						"nativeSrc": "4493:5:18",
																						"nodeType": "YulIdentifier",
																						"src": "4493:5:18"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "4486:2:18",
																					"nodeType": "YulIdentifier",
																					"src": "4486:2:18"
																				},
																				"nativeSrc": "4486:13:18",
																				"nodeType": "YulFunctionCall",
																				"src": "4486:13:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "4466:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "4466:3:18"
																		},
																		"nativeSrc": "4466:34:18",
																		"nodeType": "YulFunctionCall",
																		"src": "4466:34:18"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nativeSrc": "4457:5:18",
																			"nodeType": "YulIdentifier",
																			"src": "4457:5:18"
																		}
																	]
																}
															]
														},
														"evmVersion": "shanghai",
														"externalReferences": [
															{
																"declaration": 3280,
																"isOffset": false,
																"isSlot": false,
																"src": "4478:5:18",
																"valueSize": 1
															},
															{
																"declaration": 3280,
																"isOffset": false,
																"isSlot": false,
																"src": "4493:5:18",
																"valueSize": 1
															},
															{
																"declaration": 3286,
																"isOffset": false,
																"isSlot": false,
																"src": "4457:5:18",
																"valueSize": 1
															},
															{
																"declaration": 3270,
																"isOffset": false,
																"isSlot": false,
																"src": "4427:1:18",
																"valueSize": 1
															},
															{
																"declaration": 3272,
																"isOffset": false,
																"isSlot": false,
																"src": "4430:1:18",
																"valueSize": 1
															}
														],
														"id": 3288,
														"nodeType": "InlineAssembly",
														"src": "4383:131:18"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3291,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3289,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3286,
																"src": "4595:5:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 3290,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4604:1:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4595:10:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3297,
														"nodeType": "IfStatement",
														"src": "4591:368:18",
														"trueBody": {
															"id": 3296,
															"nodeType": "Block",
															"src": "4607:352:18",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 3294,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 3292,
																			"name": "prod0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3280,
																			"src": "4925:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"id": 3293,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3274,
																			"src": "4933:11:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4925:19:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 3278,
																	"id": 3295,
																	"nodeType": "Return",
																	"src": "4918:26:18"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3300,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3298,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3274,
																"src": "5065:11:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 3299,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3286,
																"src": "5080:5:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5065:20:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3305,
														"nodeType": "IfStatement",
														"src": "5061:88:18",
														"trueBody": {
															"id": 3304,
															"nodeType": "Block",
															"src": "5087:62:18",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 3301,
																			"name": "MathOverflowedMulDiv",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3011,
																			"src": "5112:20:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 3302,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5112:22:18",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 3303,
																	"nodeType": "RevertStatement",
																	"src": "5105:29:18"
																}
															]
														}
													},
													{
														"assignments": [
															3307
														],
														"declarations": [
															{
																"constant": false,
																"id": 3307,
																"mutability": "mutable",
																"name": "remainder",
																"nameLocation": "5412:9:18",
																"nodeType": "VariableDeclaration",
																"scope": 3391,
																"src": "5404:17:18",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3306,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "5404:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3308,
														"nodeType": "VariableDeclarationStatement",
														"src": "5404:17:18"
													},
													{
														"AST": {
															"nativeSrc": "5444:291:18",
															"nodeType": "YulBlock",
															"src": "5444:291:18",
															"statements": [
																{
																	"nativeSrc": "5513:38:18",
																	"nodeType": "YulAssignment",
																	"src": "5513:38:18",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nativeSrc": "5533:1:18",
																				"nodeType": "YulIdentifier",
																				"src": "5533:1:18"
																			},
																			{
																				"name": "y",
																				"nativeSrc": "5536:1:18",
																				"nodeType": "YulIdentifier",
																				"src": "5536:1:18"
																			},
																			{
																				"name": "denominator",
																				"nativeSrc": "5539:11:18",
																				"nodeType": "YulIdentifier",
																				"src": "5539:11:18"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nativeSrc": "5526:6:18",
																			"nodeType": "YulIdentifier",
																			"src": "5526:6:18"
																		},
																		"nativeSrc": "5526:25:18",
																		"nodeType": "YulFunctionCall",
																		"src": "5526:25:18"
																	},
																	"variableNames": [
																		{
																			"name": "remainder",
																			"nativeSrc": "5513:9:18",
																			"nodeType": "YulIdentifier",
																			"src": "5513:9:18"
																		}
																	]
																},
																{
																	"nativeSrc": "5633:41:18",
																	"nodeType": "YulAssignment",
																	"src": "5633:41:18",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod1",
																				"nativeSrc": "5646:5:18",
																				"nodeType": "YulIdentifier",
																				"src": "5646:5:18"
																			},
																			{
																				"arguments": [
																					{
																						"name": "remainder",
																						"nativeSrc": "5656:9:18",
																						"nodeType": "YulIdentifier",
																						"src": "5656:9:18"
																					},
																					{
																						"name": "prod0",
																						"nativeSrc": "5667:5:18",
																						"nodeType": "YulIdentifier",
																						"src": "5667:5:18"
																					}
																				],
																				"functionName": {
																					"name": "gt",
																					"nativeSrc": "5653:2:18",
																					"nodeType": "YulIdentifier",
																					"src": "5653:2:18"
																				},
																				"nativeSrc": "5653:20:18",
																				"nodeType": "YulFunctionCall",
																				"src": "5653:20:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5642:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "5642:3:18"
																		},
																		"nativeSrc": "5642:32:18",
																		"nodeType": "YulFunctionCall",
																		"src": "5642:32:18"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nativeSrc": "5633:5:18",
																			"nodeType": "YulIdentifier",
																			"src": "5633:5:18"
																		}
																	]
																},
																{
																	"nativeSrc": "5691:30:18",
																	"nodeType": "YulAssignment",
																	"src": "5691:30:18",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nativeSrc": "5704:5:18",
																				"nodeType": "YulIdentifier",
																				"src": "5704:5:18"
																			},
																			{
																				"name": "remainder",
																				"nativeSrc": "5711:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "5711:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5700:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "5700:3:18"
																		},
																		"nativeSrc": "5700:21:18",
																		"nodeType": "YulFunctionCall",
																		"src": "5700:21:18"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nativeSrc": "5691:5:18",
																			"nodeType": "YulIdentifier",
																			"src": "5691:5:18"
																		}
																	]
																}
															]
														},
														"evmVersion": "shanghai",
														"externalReferences": [
															{
																"declaration": 3274,
																"isOffset": false,
																"isSlot": false,
																"src": "5539:11:18",
																"valueSize": 1
															},
															{
																"declaration": 3280,
																"isOffset": false,
																"isSlot": false,
																"src": "5667:5:18",
																"valueSize": 1
															},
															{
																"declaration": 3280,
																"isOffset": false,
																"isSlot": false,
																"src": "5691:5:18",
																"valueSize": 1
															},
															{
																"declaration": 3280,
																"isOffset": false,
																"isSlot": false,
																"src": "5704:5:18",
																"valueSize": 1
															},
															{
																"declaration": 3286,
																"isOffset": false,
																"isSlot": false,
																"src": "5633:5:18",
																"valueSize": 1
															},
															{
																"declaration": 3286,
																"isOffset": false,
																"isSlot": false,
																"src": "5646:5:18",
																"valueSize": 1
															},
															{
																"declaration": 3307,
																"isOffset": false,
																"isSlot": false,
																"src": "5513:9:18",
																"valueSize": 1
															},
															{
																"declaration": 3307,
																"isOffset": false,
																"isSlot": false,
																"src": "5656:9:18",
																"valueSize": 1
															},
															{
																"declaration": 3307,
																"isOffset": false,
																"isSlot": false,
																"src": "5711:9:18",
																"valueSize": 1
															},
															{
																"declaration": 3270,
																"isOffset": false,
																"isSlot": false,
																"src": "5533:1:18",
																"valueSize": 1
															},
															{
																"declaration": 3272,
																"isOffset": false,
																"isSlot": false,
																"src": "5536:1:18",
																"valueSize": 1
															}
														],
														"id": 3309,
														"nodeType": "InlineAssembly",
														"src": "5435:300:18"
													},
													{
														"assignments": [
															3311
														],
														"declarations": [
															{
																"constant": false,
																"id": 3311,
																"mutability": "mutable",
																"name": "twos",
																"nameLocation": "5947:4:18",
																"nodeType": "VariableDeclaration",
																"scope": 3391,
																"src": "5939:12:18",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3310,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "5939:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3318,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3317,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3312,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3274,
																"src": "5954:11:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 3315,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "30",
																			"id": 3313,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5969:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 3314,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3274,
																			"src": "5973:11:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5969:15:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 3316,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5968:17:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5954:31:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "5939:46:18"
													},
													{
														"AST": {
															"nativeSrc": "6008:362:18",
															"nodeType": "YulBlock",
															"src": "6008:362:18",
															"statements": [
																{
																	"nativeSrc": "6073:37:18",
																	"nodeType": "YulAssignment",
																	"src": "6073:37:18",
																	"value": {
																		"arguments": [
																			{
																				"name": "denominator",
																				"nativeSrc": "6092:11:18",
																				"nodeType": "YulIdentifier",
																				"src": "6092:11:18"
																			},
																			{
																				"name": "twos",
																				"nativeSrc": "6105:4:18",
																				"nodeType": "YulIdentifier",
																				"src": "6105:4:18"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nativeSrc": "6088:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "6088:3:18"
																		},
																		"nativeSrc": "6088:22:18",
																		"nodeType": "YulFunctionCall",
																		"src": "6088:22:18"
																	},
																	"variableNames": [
																		{
																			"name": "denominator",
																			"nativeSrc": "6073:11:18",
																			"nodeType": "YulIdentifier",
																			"src": "6073:11:18"
																		}
																	]
																},
																{
																	"nativeSrc": "6177:25:18",
																	"nodeType": "YulAssignment",
																	"src": "6177:25:18",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nativeSrc": "6190:5:18",
																				"nodeType": "YulIdentifier",
																				"src": "6190:5:18"
																			},
																			{
																				"name": "twos",
																				"nativeSrc": "6197:4:18",
																				"nodeType": "YulIdentifier",
																				"src": "6197:4:18"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nativeSrc": "6186:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "6186:3:18"
																		},
																		"nativeSrc": "6186:16:18",
																		"nodeType": "YulFunctionCall",
																		"src": "6186:16:18"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nativeSrc": "6177:5:18",
																			"nodeType": "YulIdentifier",
																			"src": "6177:5:18"
																		}
																	]
																},
																{
																	"nativeSrc": "6317:39:18",
																	"nodeType": "YulAssignment",
																	"src": "6317:39:18",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "6337:1:18",
																								"nodeType": "YulLiteral",
																								"src": "6337:1:18",
																								"type": "",
																								"value": "0"
																							},
																							{
																								"name": "twos",
																								"nativeSrc": "6340:4:18",
																								"nodeType": "YulIdentifier",
																								"src": "6340:4:18"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "6333:3:18",
																							"nodeType": "YulIdentifier",
																							"src": "6333:3:18"
																						},
																						"nativeSrc": "6333:12:18",
																						"nodeType": "YulFunctionCall",
																						"src": "6333:12:18"
																					},
																					{
																						"name": "twos",
																						"nativeSrc": "6347:4:18",
																						"nodeType": "YulIdentifier",
																						"src": "6347:4:18"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nativeSrc": "6329:3:18",
																					"nodeType": "YulIdentifier",
																					"src": "6329:3:18"
																				},
																				"nativeSrc": "6329:23:18",
																				"nodeType": "YulFunctionCall",
																				"src": "6329:23:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6354:1:18",
																				"nodeType": "YulLiteral",
																				"src": "6354:1:18",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6325:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "6325:3:18"
																		},
																		"nativeSrc": "6325:31:18",
																		"nodeType": "YulFunctionCall",
																		"src": "6325:31:18"
																	},
																	"variableNames": [
																		{
																			"name": "twos",
																			"nativeSrc": "6317:4:18",
																			"nodeType": "YulIdentifier",
																			"src": "6317:4:18"
																		}
																	]
																}
															]
														},
														"evmVersion": "shanghai",
														"externalReferences": [
															{
																"declaration": 3274,
																"isOffset": false,
																"isSlot": false,
																"src": "6073:11:18",
																"valueSize": 1
															},
															{
																"declaration": 3274,
																"isOffset": false,
																"isSlot": false,
																"src": "6092:11:18",
																"valueSize": 1
															},
															{
																"declaration": 3280,
																"isOffset": false,
																"isSlot": false,
																"src": "6177:5:18",
																"valueSize": 1
															},
															{
																"declaration": 3280,
																"isOffset": false,
																"isSlot": false,
																"src": "6190:5:18",
																"valueSize": 1
															},
															{
																"declaration": 3311,
																"isOffset": false,
																"isSlot": false,
																"src": "6105:4:18",
																"valueSize": 1
															},
															{
																"declaration": 3311,
																"isOffset": false,
																"isSlot": false,
																"src": "6197:4:18",
																"valueSize": 1
															},
															{
																"declaration": 3311,
																"isOffset": false,
																"isSlot": false,
																"src": "6317:4:18",
																"valueSize": 1
															},
															{
																"declaration": 3311,
																"isOffset": false,
																"isSlot": false,
																"src": "6340:4:18",
																"valueSize": 1
															},
															{
																"declaration": 3311,
																"isOffset": false,
																"isSlot": false,
																"src": "6347:4:18",
																"valueSize": 1
															}
														],
														"id": 3319,
														"nodeType": "InlineAssembly",
														"src": "5999:371:18"
													},
													{
														"expression": {
															"id": 3324,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3320,
																"name": "prod0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3280,
																"src": "6436:5:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "|=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3323,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3321,
																	"name": "prod1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3286,
																	"src": "6445:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 3322,
																	"name": "twos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3311,
																	"src": "6453:4:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6445:12:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6436:21:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3325,
														"nodeType": "ExpressionStatement",
														"src": "6436:21:18"
													},
													{
														"assignments": [
															3327
														],
														"declarations": [
															{
																"constant": false,
																"id": 3327,
																"mutability": "mutable",
																"name": "inverse",
																"nameLocation": "6783:7:18",
																"nodeType": "VariableDeclaration",
																"scope": 3391,
																"src": "6775:15:18",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3326,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "6775:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3334,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3333,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 3330,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "33",
																			"id": 3328,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "6794:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3_by_1",
																				"typeString": "int_const 3"
																			},
																			"value": "3"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 3329,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3274,
																			"src": "6798:11:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6794:15:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 3331,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6793:17:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "^",
															"rightExpression": {
																"hexValue": "32",
																"id": 3332,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6813:1:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "6793:21:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "6775:39:18"
													},
													{
														"expression": {
															"id": 3341,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3335,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3327,
																"src": "7031:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3340,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 3336,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7042:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3339,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3337,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3274,
																		"src": "7046:11:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 3338,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3327,
																		"src": "7060:7:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7046:21:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7042:25:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7031:36:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3342,
														"nodeType": "ExpressionStatement",
														"src": "7031:36:18"
													},
													{
														"expression": {
															"id": 3349,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3343,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3327,
																"src": "7100:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3348,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 3344,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7111:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3347,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3345,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3274,
																		"src": "7115:11:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 3346,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3327,
																		"src": "7129:7:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7115:21:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7111:25:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7100:36:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3350,
														"nodeType": "ExpressionStatement",
														"src": "7100:36:18"
													},
													{
														"expression": {
															"id": 3357,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3351,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3327,
																"src": "7170:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3356,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 3352,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7181:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3355,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3353,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3274,
																		"src": "7185:11:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 3354,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3327,
																		"src": "7199:7:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7185:21:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7181:25:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7170:36:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3358,
														"nodeType": "ExpressionStatement",
														"src": "7170:36:18"
													},
													{
														"expression": {
															"id": 3365,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3359,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3327,
																"src": "7240:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3364,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 3360,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7251:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3363,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3361,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3274,
																		"src": "7255:11:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 3362,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3327,
																		"src": "7269:7:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7255:21:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7251:25:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7240:36:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3366,
														"nodeType": "ExpressionStatement",
														"src": "7240:36:18"
													},
													{
														"expression": {
															"id": 3373,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3367,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3327,
																"src": "7310:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3372,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 3368,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7321:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3371,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3369,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3274,
																		"src": "7325:11:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 3370,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3327,
																		"src": "7339:7:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7325:21:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7321:25:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7310:36:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3374,
														"nodeType": "ExpressionStatement",
														"src": "7310:36:18"
													},
													{
														"expression": {
															"id": 3381,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3375,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3327,
																"src": "7381:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3380,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 3376,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7392:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3379,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3377,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3274,
																		"src": "7396:11:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 3378,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3327,
																		"src": "7410:7:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7396:21:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7392:25:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7381:36:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3382,
														"nodeType": "ExpressionStatement",
														"src": "7381:36:18"
													},
													{
														"expression": {
															"id": 3387,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3383,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3277,
																"src": "7851:6:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3386,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3384,
																	"name": "prod0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3280,
																	"src": "7860:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 3385,
																	"name": "inverse",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3327,
																	"src": "7868:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7860:15:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7851:24:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3388,
														"nodeType": "ExpressionStatement",
														"src": "7851:24:18"
													},
													{
														"expression": {
															"id": 3389,
															"name": "result",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3277,
															"src": "7896:6:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3278,
														"id": 3390,
														"nodeType": "Return",
														"src": "7889:13:18"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3268,
										"nodeType": "StructuredDocumentation",
										"src": "3485:313:18",
										"text": " @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."
									},
									"id": 3393,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "3812:6:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3275,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3270,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "3827:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3393,
												"src": "3819:9:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3269,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3819:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3272,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "3838:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3393,
												"src": "3830:9:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3271,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3830:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3274,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "3849:11:18",
												"nodeType": "VariableDeclaration",
												"scope": 3393,
												"src": "3841:19:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3273,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3841:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3818:43:18"
									},
									"returnParameters": {
										"id": 3278,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3277,
												"mutability": "mutable",
												"name": "result",
												"nameLocation": "3893:6:18",
												"nodeType": "VariableDeclaration",
												"scope": 3393,
												"src": "3885:14:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3276,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3885:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3884:16:18"
									},
									"scope": 4059,
									"src": "3803:4116:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3435,
										"nodeType": "Block",
										"src": "8161:192:18",
										"statements": [
											{
												"assignments": [
													3409
												],
												"declarations": [
													{
														"constant": false,
														"id": 3409,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "8179:6:18",
														"nodeType": "VariableDeclaration",
														"scope": 3435,
														"src": "8171:14:18",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3408,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8171:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3415,
												"initialValue": {
													"arguments": [
														{
															"id": 3411,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3396,
															"src": "8195:1:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 3412,
															"name": "y",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3398,
															"src": "8198:1:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 3413,
															"name": "denominator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3400,
															"src": "8201:11:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3410,
														"name": "mulDiv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															3393,
															3436
														],
														"referencedDeclaration": 3393,
														"src": "8188:6:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 3414,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8188:25:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8171:42:18"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 3426,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 3417,
																"name": "rounding",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3403,
																"src": "8244:8:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_Rounding_$3016",
																	"typeString": "enum Math.Rounding"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_enum$_Rounding_$3016",
																	"typeString": "enum Math.Rounding"
																}
															],
															"id": 3416,
															"name": "unsignedRoundsUp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4058,
															"src": "8227:16:18",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$3016_$returns$_t_bool_$",
																"typeString": "function (enum Math.Rounding) pure returns (bool)"
															}
														},
														"id": 3418,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8227:26:18",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 3425,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 3420,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3396,
																	"src": "8264:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 3421,
																	"name": "y",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3398,
																	"src": "8267:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 3422,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3400,
																	"src": "8270:11:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3419,
																"name": "mulmod",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967280,
																"src": "8257:6:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 3423,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8257:25:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 3424,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8285:1:18",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "8257:29:18",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "8227:59:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3432,
												"nodeType": "IfStatement",
												"src": "8223:101:18",
												"trueBody": {
													"id": 3431,
													"nodeType": "Block",
													"src": "8288:36:18",
													"statements": [
														{
															"expression": {
																"id": 3429,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 3427,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3409,
																	"src": "8302:6:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 3428,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8312:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "8302:11:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3430,
															"nodeType": "ExpressionStatement",
															"src": "8302:11:18"
														}
													]
												}
											},
											{
												"expression": {
													"id": 3433,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3409,
													"src": "8340:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3407,
												"id": 3434,
												"nodeType": "Return",
												"src": "8333:13:18"
											}
										]
									},
									"documentation": {
										"id": 3394,
										"nodeType": "StructuredDocumentation",
										"src": "7925:121:18",
										"text": " @notice Calculates x * y / denominator with full precision, following the selected rounding direction."
									},
									"id": 3436,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "8060:6:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3404,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3396,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "8075:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3436,
												"src": "8067:9:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3395,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8067:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3398,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "8086:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3436,
												"src": "8078:9:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3397,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8078:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3400,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "8097:11:18",
												"nodeType": "VariableDeclaration",
												"scope": 3436,
												"src": "8089:19:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3399,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8089:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3403,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "8119:8:18",
												"nodeType": "VariableDeclaration",
												"scope": 3436,
												"src": "8110:17:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$3016",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3402,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3401,
														"name": "Rounding",
														"nameLocations": [
															"8110:8:18"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3016,
														"src": "8110:8:18"
													},
													"referencedDeclaration": 3016,
													"src": "8110:8:18",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$3016",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8066:62:18"
									},
									"returnParameters": {
										"id": 3407,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3406,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3436,
												"src": "8152:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3405,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8152:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8151:9:18"
									},
									"scope": 4059,
									"src": "8051:302:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3547,
										"nodeType": "Block",
										"src": "8644:1585:18",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3446,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3444,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3439,
														"src": "8658:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 3445,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8663:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8658:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3450,
												"nodeType": "IfStatement",
												"src": "8654:45:18",
												"trueBody": {
													"id": 3449,
													"nodeType": "Block",
													"src": "8666:33:18",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 3447,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8687:1:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 3443,
															"id": 3448,
															"nodeType": "Return",
															"src": "8680:8:18"
														}
													]
												}
											},
											{
												"assignments": [
													3452
												],
												"declarations": [
													{
														"constant": false,
														"id": 3452,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "9386:6:18",
														"nodeType": "VariableDeclaration",
														"scope": 3547,
														"src": "9378:14:18",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3451,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9378:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3461,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3460,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "31",
														"id": 3453,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9395:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3458,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 3455,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3439,
																			"src": "9406:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 3454,
																		"name": "log2",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			3715,
																			3750
																		],
																		"referencedDeclaration": 3715,
																		"src": "9401:4:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) pure returns (uint256)"
																		}
																	},
																	"id": 3456,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "9401:7:18",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3457,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9412:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9401:12:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 3459,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "9400:14:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9395:19:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9378:36:18"
											},
											{
												"id": 3546,
												"nodeType": "UncheckedBlock",
												"src": "9815:408:18",
												"statements": [
													{
														"expression": {
															"id": 3471,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3462,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3452,
																"src": "9839:6:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3470,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3467,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3463,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3452,
																				"src": "9849:6:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3466,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3464,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3439,
																					"src": "9858:1:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3465,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3452,
																					"src": "9862:6:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9858:10:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9849:19:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3468,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9848:21:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3469,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9873:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9848:26:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9839:35:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3472,
														"nodeType": "ExpressionStatement",
														"src": "9839:35:18"
													},
													{
														"expression": {
															"id": 3482,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3473,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3452,
																"src": "9888:6:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3481,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3478,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3474,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3452,
																				"src": "9898:6:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3477,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3475,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3439,
																					"src": "9907:1:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3476,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3452,
																					"src": "9911:6:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9907:10:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9898:19:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3479,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9897:21:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3480,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9922:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9897:26:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9888:35:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3483,
														"nodeType": "ExpressionStatement",
														"src": "9888:35:18"
													},
													{
														"expression": {
															"id": 3493,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3484,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3452,
																"src": "9937:6:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3492,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3489,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3485,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3452,
																				"src": "9947:6:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3488,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3486,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3439,
																					"src": "9956:1:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3487,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3452,
																					"src": "9960:6:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9956:10:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9947:19:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3490,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9946:21:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3491,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9971:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9946:26:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9937:35:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3494,
														"nodeType": "ExpressionStatement",
														"src": "9937:35:18"
													},
													{
														"expression": {
															"id": 3504,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3495,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3452,
																"src": "9986:6:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3503,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3500,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3496,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3452,
																				"src": "9996:6:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3499,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3497,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3439,
																					"src": "10005:1:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3498,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3452,
																					"src": "10009:6:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10005:10:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9996:19:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3501,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9995:21:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3502,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10020:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9995:26:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9986:35:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3505,
														"nodeType": "ExpressionStatement",
														"src": "9986:35:18"
													},
													{
														"expression": {
															"id": 3515,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3506,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3452,
																"src": "10035:6:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3514,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3511,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3507,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3452,
																				"src": "10045:6:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3510,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3508,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3439,
																					"src": "10054:1:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3509,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3452,
																					"src": "10058:6:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10054:10:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10045:19:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3512,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10044:21:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3513,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10069:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10044:26:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10035:35:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3516,
														"nodeType": "ExpressionStatement",
														"src": "10035:35:18"
													},
													{
														"expression": {
															"id": 3526,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3517,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3452,
																"src": "10084:6:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3525,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3522,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3518,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3452,
																				"src": "10094:6:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3521,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3519,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3439,
																					"src": "10103:1:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3520,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3452,
																					"src": "10107:6:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10103:10:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10094:19:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3523,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10093:21:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3524,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10118:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10093:26:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10084:35:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3527,
														"nodeType": "ExpressionStatement",
														"src": "10084:35:18"
													},
													{
														"expression": {
															"id": 3537,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3528,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3452,
																"src": "10133:6:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3536,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3533,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3529,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3452,
																				"src": "10143:6:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3532,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3530,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3439,
																					"src": "10152:1:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3531,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3452,
																					"src": "10156:6:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10152:10:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10143:19:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3534,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10142:21:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3535,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10167:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10142:26:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10133:35:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3538,
														"nodeType": "ExpressionStatement",
														"src": "10133:35:18"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 3540,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3452,
																	"src": "10193:6:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3543,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3541,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3439,
																		"src": "10201:1:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 3542,
																		"name": "result",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3452,
																		"src": "10205:6:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "10201:10:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3539,
																"name": "min",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3210,
																"src": "10189:3:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 3544,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10189:23:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3443,
														"id": 3545,
														"nodeType": "Return",
														"src": "10182:30:18"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3437,
										"nodeType": "StructuredDocumentation",
										"src": "8359:223:18",
										"text": " @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."
									},
									"id": 3548,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "8596:4:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3440,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3439,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "8609:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3548,
												"src": "8601:9:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3438,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8601:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8600:11:18"
									},
									"returnParameters": {
										"id": 3443,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3442,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3548,
												"src": "8635:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3441,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8635:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8634:9:18"
									},
									"scope": 4059,
									"src": "8587:1642:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3582,
										"nodeType": "Block",
										"src": "10405:164:18",
										"statements": [
											{
												"id": 3581,
												"nodeType": "UncheckedBlock",
												"src": "10415:148:18",
												"statements": [
													{
														"assignments": [
															3560
														],
														"declarations": [
															{
																"constant": false,
																"id": 3560,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "10447:6:18",
																"nodeType": "VariableDeclaration",
																"scope": 3581,
																"src": "10439:14:18",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3559,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "10439:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3564,
														"initialValue": {
															"arguments": [
																{
																	"id": 3562,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3551,
																	"src": "10461:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3561,
																"name": "sqrt",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3548,
																	3583
																],
																"referencedDeclaration": 3548,
																"src": "10456:4:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3563,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10456:7:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "10439:24:18"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3579,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3565,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3560,
																"src": "10484:6:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3574,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3567,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3554,
																						"src": "10511:8:18",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$3016",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$3016",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3566,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4058,
																					"src": "10494:16:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$3016_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3568,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "10494:26:18",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3573,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3571,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 3569,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3560,
																						"src": "10524:6:18",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 3570,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3560,
																						"src": "10533:6:18",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "10524:15:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3572,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3551,
																					"src": "10542:1:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10524:19:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "10494:49:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3576,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10550:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3577,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "10494:57:18",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3575,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10546:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3578,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "10493:59:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "10484:68:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3558,
														"id": 3580,
														"nodeType": "Return",
														"src": "10477:75:18"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3549,
										"nodeType": "StructuredDocumentation",
										"src": "10235:89:18",
										"text": " @notice Calculates sqrt(a), following the selected rounding direction."
									},
									"id": 3583,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "10338:4:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3555,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3551,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "10351:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3583,
												"src": "10343:9:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3550,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10343:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3554,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "10363:8:18",
												"nodeType": "VariableDeclaration",
												"scope": 3583,
												"src": "10354:17:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$3016",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3553,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3552,
														"name": "Rounding",
														"nameLocations": [
															"10354:8:18"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3016,
														"src": "10354:8:18"
													},
													"referencedDeclaration": 3016,
													"src": "10354:8:18",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$3016",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10342:30:18"
									},
									"returnParameters": {
										"id": 3558,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3557,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3583,
												"src": "10396:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3556,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10396:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10395:9:18"
									},
									"scope": 4059,
									"src": "10329:240:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3714,
										"nodeType": "Block",
										"src": "10760:922:18",
										"statements": [
											{
												"assignments": [
													3592
												],
												"declarations": [
													{
														"constant": false,
														"id": 3592,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "10778:6:18",
														"nodeType": "VariableDeclaration",
														"scope": 3714,
														"src": "10770:14:18",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3591,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10770:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3594,
												"initialValue": {
													"hexValue": "30",
													"id": 3593,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "10787:1:18",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10770:18:18"
											},
											{
												"id": 3711,
												"nodeType": "UncheckedBlock",
												"src": "10798:855:18",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3599,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3597,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3595,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3586,
																	"src": "10826:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 3596,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10835:3:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "10826:12:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3598,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10841:1:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "10826:16:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3609,
														"nodeType": "IfStatement",
														"src": "10822:99:18",
														"trueBody": {
															"id": 3608,
															"nodeType": "Block",
															"src": "10844:77:18",
															"statements": [
																{
																	"expression": {
																		"id": 3602,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3600,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3586,
																			"src": "10862:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 3601,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10872:3:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "10862:13:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3603,
																	"nodeType": "ExpressionStatement",
																	"src": "10862:13:18"
																},
																{
																	"expression": {
																		"id": 3606,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3604,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3592,
																			"src": "10893:6:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 3605,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10903:3:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "10893:13:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3607,
																	"nodeType": "ExpressionStatement",
																	"src": "10893:13:18"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3614,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3612,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3610,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3586,
																	"src": "10938:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3611,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10947:2:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "10938:11:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3613,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10952:1:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "10938:15:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3624,
														"nodeType": "IfStatement",
														"src": "10934:96:18",
														"trueBody": {
															"id": 3623,
															"nodeType": "Block",
															"src": "10955:75:18",
															"statements": [
																{
																	"expression": {
																		"id": 3617,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3615,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3586,
																			"src": "10973:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3616,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10983:2:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "10973:12:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3618,
																	"nodeType": "ExpressionStatement",
																	"src": "10973:12:18"
																},
																{
																	"expression": {
																		"id": 3621,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3619,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3592,
																			"src": "11003:6:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3620,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11013:2:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "11003:12:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3622,
																	"nodeType": "ExpressionStatement",
																	"src": "11003:12:18"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3629,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3627,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3625,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3586,
																	"src": "11047:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3626,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11056:2:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "11047:11:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3628,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11061:1:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11047:15:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3639,
														"nodeType": "IfStatement",
														"src": "11043:96:18",
														"trueBody": {
															"id": 3638,
															"nodeType": "Block",
															"src": "11064:75:18",
															"statements": [
																{
																	"expression": {
																		"id": 3632,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3630,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3586,
																			"src": "11082:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3631,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11092:2:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "11082:12:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3633,
																	"nodeType": "ExpressionStatement",
																	"src": "11082:12:18"
																},
																{
																	"expression": {
																		"id": 3636,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3634,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3592,
																			"src": "11112:6:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3635,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11122:2:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "11112:12:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3637,
																	"nodeType": "ExpressionStatement",
																	"src": "11112:12:18"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3644,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3642,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3640,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3586,
																	"src": "11156:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3641,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11165:2:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "11156:11:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3643,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11170:1:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11156:15:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3654,
														"nodeType": "IfStatement",
														"src": "11152:96:18",
														"trueBody": {
															"id": 3653,
															"nodeType": "Block",
															"src": "11173:75:18",
															"statements": [
																{
																	"expression": {
																		"id": 3647,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3645,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3586,
																			"src": "11191:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3646,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11201:2:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11191:12:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3648,
																	"nodeType": "ExpressionStatement",
																	"src": "11191:12:18"
																},
																{
																	"expression": {
																		"id": 3651,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3649,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3592,
																			"src": "11221:6:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3650,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11231:2:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11221:12:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3652,
																	"nodeType": "ExpressionStatement",
																	"src": "11221:12:18"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3659,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3657,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3655,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3586,
																	"src": "11265:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3656,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11274:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "11265:10:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3658,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11278:1:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11265:14:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3669,
														"nodeType": "IfStatement",
														"src": "11261:93:18",
														"trueBody": {
															"id": 3668,
															"nodeType": "Block",
															"src": "11281:73:18",
															"statements": [
																{
																	"expression": {
																		"id": 3662,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3660,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3586,
																			"src": "11299:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3661,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11309:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "11299:11:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3663,
																	"nodeType": "ExpressionStatement",
																	"src": "11299:11:18"
																},
																{
																	"expression": {
																		"id": 3666,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3664,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3592,
																			"src": "11328:6:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3665,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11338:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "11328:11:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3667,
																	"nodeType": "ExpressionStatement",
																	"src": "11328:11:18"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3674,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3672,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3670,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3586,
																	"src": "11371:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 3671,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11380:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "11371:10:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3673,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11384:1:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11371:14:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3684,
														"nodeType": "IfStatement",
														"src": "11367:93:18",
														"trueBody": {
															"id": 3683,
															"nodeType": "Block",
															"src": "11387:73:18",
															"statements": [
																{
																	"expression": {
																		"id": 3677,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3675,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3586,
																			"src": "11405:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3676,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11415:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "11405:11:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3678,
																	"nodeType": "ExpressionStatement",
																	"src": "11405:11:18"
																},
																{
																	"expression": {
																		"id": 3681,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3679,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3592,
																			"src": "11434:6:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3680,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11444:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "11434:11:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3682,
																	"nodeType": "ExpressionStatement",
																	"src": "11434:11:18"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3689,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3687,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3685,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3586,
																	"src": "11477:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 3686,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11486:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "11477:10:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3688,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11490:1:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11477:14:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3699,
														"nodeType": "IfStatement",
														"src": "11473:93:18",
														"trueBody": {
															"id": 3698,
															"nodeType": "Block",
															"src": "11493:73:18",
															"statements": [
																{
																	"expression": {
																		"id": 3692,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3690,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3586,
																			"src": "11511:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3691,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11521:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "11511:11:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3693,
																	"nodeType": "ExpressionStatement",
																	"src": "11511:11:18"
																},
																{
																	"expression": {
																		"id": 3696,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3694,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3592,
																			"src": "11540:6:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3695,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11550:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "11540:11:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3697,
																	"nodeType": "ExpressionStatement",
																	"src": "11540:11:18"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3704,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3702,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3700,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3586,
																	"src": "11583:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3701,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11592:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "11583:10:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3703,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11596:1:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11583:14:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3710,
														"nodeType": "IfStatement",
														"src": "11579:64:18",
														"trueBody": {
															"id": 3709,
															"nodeType": "Block",
															"src": "11599:44:18",
															"statements": [
																{
																	"expression": {
																		"id": 3707,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3705,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3592,
																			"src": "11617:6:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3706,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11627:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "11617:11:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3708,
																	"nodeType": "ExpressionStatement",
																	"src": "11617:11:18"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3712,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3592,
													"src": "11669:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3590,
												"id": 3713,
												"nodeType": "Return",
												"src": "11662:13:18"
											}
										]
									},
									"documentation": {
										"id": 3584,
										"nodeType": "StructuredDocumentation",
										"src": "10575:119:18",
										"text": " @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."
									},
									"id": 3715,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "10708:4:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3587,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3586,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10721:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 3715,
												"src": "10713:13:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3585,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10713:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10712:15:18"
									},
									"returnParameters": {
										"id": 3590,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3589,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3715,
												"src": "10751:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3588,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10751:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10750:9:18"
									},
									"scope": 4059,
									"src": "10699:983:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3749,
										"nodeType": "Block",
										"src": "11915:168:18",
										"statements": [
											{
												"id": 3748,
												"nodeType": "UncheckedBlock",
												"src": "11925:152:18",
												"statements": [
													{
														"assignments": [
															3727
														],
														"declarations": [
															{
																"constant": false,
																"id": 3727,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "11957:6:18",
																"nodeType": "VariableDeclaration",
																"scope": 3748,
																"src": "11949:14:18",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3726,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "11949:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3731,
														"initialValue": {
															"arguments": [
																{
																	"id": 3729,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3718,
																	"src": "11971:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3728,
																"name": "log2",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3715,
																	3750
																],
																"referencedDeclaration": 3715,
																"src": "11966:4:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3730,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11966:11:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "11949:28:18"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3746,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3732,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3727,
																"src": "11998:6:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3741,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3734,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3721,
																						"src": "12025:8:18",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$3016",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$3016",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3733,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4058,
																					"src": "12008:16:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$3016_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3735,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "12008:26:18",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3740,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3738,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 3736,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "12038:1:18",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"id": 3737,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3727,
																						"src": "12043:6:18",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "12038:11:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3739,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3718,
																					"src": "12052:5:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "12038:19:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "12008:49:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3743,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12064:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3744,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "12008:57:18",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3742,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12060:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3745,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "12007:59:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "11998:68:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3725,
														"id": 3747,
														"nodeType": "Return",
														"src": "11991:75:18"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3716,
										"nodeType": "StructuredDocumentation",
										"src": "11688:142:18",
										"text": " @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3750,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "11844:4:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3722,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3718,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11857:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 3750,
												"src": "11849:13:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3717,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11849:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3721,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "11873:8:18",
												"nodeType": "VariableDeclaration",
												"scope": 3750,
												"src": "11864:17:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$3016",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3720,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3719,
														"name": "Rounding",
														"nameLocations": [
															"11864:8:18"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3016,
														"src": "11864:8:18"
													},
													"referencedDeclaration": 3016,
													"src": "11864:8:18",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$3016",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11848:34:18"
									},
									"returnParameters": {
										"id": 3725,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3724,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3750,
												"src": "11906:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3723,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11906:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11905:9:18"
									},
									"scope": 4059,
									"src": "11835:248:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3878,
										"nodeType": "Block",
										"src": "12276:854:18",
										"statements": [
											{
												"assignments": [
													3759
												],
												"declarations": [
													{
														"constant": false,
														"id": 3759,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "12294:6:18",
														"nodeType": "VariableDeclaration",
														"scope": 3878,
														"src": "12286:14:18",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3758,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12286:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3761,
												"initialValue": {
													"hexValue": "30",
													"id": 3760,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "12303:1:18",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12286:18:18"
											},
											{
												"id": 3875,
												"nodeType": "UncheckedBlock",
												"src": "12314:787:18",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3766,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3762,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3753,
																"src": "12342:5:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																},
																"id": 3765,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3763,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12351:2:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3764,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12357:2:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "12351:8:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																}
															},
															"src": "12342:17:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3778,
														"nodeType": "IfStatement",
														"src": "12338:103:18",
														"trueBody": {
															"id": 3777,
															"nodeType": "Block",
															"src": "12361:80:18",
															"statements": [
																{
																	"expression": {
																		"id": 3771,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3767,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3753,
																			"src": "12379:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			},
																			"id": 3770,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3768,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12388:2:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3634",
																				"id": 3769,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12394:2:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_64_by_1",
																					"typeString": "int_const 64"
																				},
																				"value": "64"
																			},
																			"src": "12388:8:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			}
																		},
																		"src": "12379:17:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3772,
																	"nodeType": "ExpressionStatement",
																	"src": "12379:17:18"
																},
																{
																	"expression": {
																		"id": 3775,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3773,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3759,
																			"src": "12414:6:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3774,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12424:2:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "12414:12:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3776,
																	"nodeType": "ExpressionStatement",
																	"src": "12414:12:18"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3783,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3779,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3753,
																"src": "12458:5:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																},
																"id": 3782,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3780,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12467:2:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3781,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12473:2:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "12467:8:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																}
															},
															"src": "12458:17:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3795,
														"nodeType": "IfStatement",
														"src": "12454:103:18",
														"trueBody": {
															"id": 3794,
															"nodeType": "Block",
															"src": "12477:80:18",
															"statements": [
																{
																	"expression": {
																		"id": 3788,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3784,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3753,
																			"src": "12495:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			},
																			"id": 3787,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3785,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12504:2:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 3786,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12510:2:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "12504:8:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			}
																		},
																		"src": "12495:17:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3789,
																	"nodeType": "ExpressionStatement",
																	"src": "12495:17:18"
																},
																{
																	"expression": {
																		"id": 3792,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3790,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3759,
																			"src": "12530:6:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3791,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12540:2:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "12530:12:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3793,
																	"nodeType": "ExpressionStatement",
																	"src": "12530:12:18"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3800,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3796,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3753,
																"src": "12574:5:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																},
																"id": 3799,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3797,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12583:2:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3798,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12589:2:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "12583:8:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																}
															},
															"src": "12574:17:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3812,
														"nodeType": "IfStatement",
														"src": "12570:103:18",
														"trueBody": {
															"id": 3811,
															"nodeType": "Block",
															"src": "12593:80:18",
															"statements": [
																{
																	"expression": {
																		"id": 3805,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3801,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3753,
																			"src": "12611:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			},
																			"id": 3804,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3802,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12620:2:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3136",
																				"id": 3803,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12626:2:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_16_by_1",
																					"typeString": "int_const 16"
																				},
																				"value": "16"
																			},
																			"src": "12620:8:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			}
																		},
																		"src": "12611:17:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3806,
																	"nodeType": "ExpressionStatement",
																	"src": "12611:17:18"
																},
																{
																	"expression": {
																		"id": 3809,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3807,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3759,
																			"src": "12646:6:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3808,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12656:2:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "12646:12:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3810,
																	"nodeType": "ExpressionStatement",
																	"src": "12646:12:18"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3817,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3813,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3753,
																"src": "12690:5:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																},
																"id": 3816,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3814,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12699:2:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3815,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12705:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "12699:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																}
															},
															"src": "12690:16:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3829,
														"nodeType": "IfStatement",
														"src": "12686:100:18",
														"trueBody": {
															"id": 3828,
															"nodeType": "Block",
															"src": "12708:78:18",
															"statements": [
																{
																	"expression": {
																		"id": 3822,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3818,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3753,
																			"src": "12726:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			},
																			"id": 3821,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3819,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12735:2:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "38",
																				"id": 3820,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12741:1:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_8_by_1",
																					"typeString": "int_const 8"
																				},
																				"value": "8"
																			},
																			"src": "12735:7:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			}
																		},
																		"src": "12726:16:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3823,
																	"nodeType": "ExpressionStatement",
																	"src": "12726:16:18"
																},
																{
																	"expression": {
																		"id": 3826,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3824,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3759,
																			"src": "12760:6:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3825,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12770:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "12760:11:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3827,
																	"nodeType": "ExpressionStatement",
																	"src": "12760:11:18"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3834,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3830,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3753,
																"src": "12803:5:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																},
																"id": 3833,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3831,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12812:2:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 3832,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12818:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "12812:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																}
															},
															"src": "12803:16:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3846,
														"nodeType": "IfStatement",
														"src": "12799:100:18",
														"trueBody": {
															"id": 3845,
															"nodeType": "Block",
															"src": "12821:78:18",
															"statements": [
																{
																	"expression": {
																		"id": 3839,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3835,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3753,
																			"src": "12839:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			},
																			"id": 3838,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3836,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12848:2:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "34",
																				"id": 3837,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12854:1:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_4_by_1",
																					"typeString": "int_const 4"
																				},
																				"value": "4"
																			},
																			"src": "12848:7:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			}
																		},
																		"src": "12839:16:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3840,
																	"nodeType": "ExpressionStatement",
																	"src": "12839:16:18"
																},
																{
																	"expression": {
																		"id": 3843,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3841,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3759,
																			"src": "12873:6:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3842,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12883:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "12873:11:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3844,
																	"nodeType": "ExpressionStatement",
																	"src": "12873:11:18"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3851,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3847,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3753,
																"src": "12916:5:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"id": 3850,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3848,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12925:2:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 3849,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12931:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "12925:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																}
															},
															"src": "12916:16:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3863,
														"nodeType": "IfStatement",
														"src": "12912:100:18",
														"trueBody": {
															"id": 3862,
															"nodeType": "Block",
															"src": "12934:78:18",
															"statements": [
																{
																	"expression": {
																		"id": 3856,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3852,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3753,
																			"src": "12952:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			},
																			"id": 3855,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3853,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12961:2:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "32",
																				"id": 3854,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12967:1:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_2_by_1",
																					"typeString": "int_const 2"
																				},
																				"value": "2"
																			},
																			"src": "12961:7:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			}
																		},
																		"src": "12952:16:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3857,
																	"nodeType": "ExpressionStatement",
																	"src": "12952:16:18"
																},
																{
																	"expression": {
																		"id": 3860,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3858,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3759,
																			"src": "12986:6:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3859,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12996:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "12986:11:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3861,
																	"nodeType": "ExpressionStatement",
																	"src": "12986:11:18"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3868,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3864,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3753,
																"src": "13029:5:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"id": 3867,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3865,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13038:2:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3866,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13044:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "13038:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																}
															},
															"src": "13029:16:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3874,
														"nodeType": "IfStatement",
														"src": "13025:66:18",
														"trueBody": {
															"id": 3873,
															"nodeType": "Block",
															"src": "13047:44:18",
															"statements": [
																{
																	"expression": {
																		"id": 3871,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3869,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3759,
																			"src": "13065:6:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3870,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13075:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "13065:11:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3872,
																	"nodeType": "ExpressionStatement",
																	"src": "13065:11:18"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3876,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3759,
													"src": "13117:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3757,
												"id": 3877,
												"nodeType": "Return",
												"src": "13110:13:18"
											}
										]
									},
									"documentation": {
										"id": 3751,
										"nodeType": "StructuredDocumentation",
										"src": "12089:120:18",
										"text": " @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."
									},
									"id": 3879,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "12223:5:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3754,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3753,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "12237:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 3879,
												"src": "12229:13:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3752,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12229:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12228:15:18"
									},
									"returnParameters": {
										"id": 3757,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3756,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3879,
												"src": "12267:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3755,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12267:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12266:9:18"
									},
									"scope": 4059,
									"src": "12214:916:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3913,
										"nodeType": "Block",
										"src": "13365:170:18",
										"statements": [
											{
												"id": 3912,
												"nodeType": "UncheckedBlock",
												"src": "13375:154:18",
												"statements": [
													{
														"assignments": [
															3891
														],
														"declarations": [
															{
																"constant": false,
																"id": 3891,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "13407:6:18",
																"nodeType": "VariableDeclaration",
																"scope": 3912,
																"src": "13399:14:18",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3890,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "13399:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3895,
														"initialValue": {
															"arguments": [
																{
																	"id": 3893,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3882,
																	"src": "13422:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3892,
																"name": "log10",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3879,
																	3914
																],
																"referencedDeclaration": 3879,
																"src": "13416:5:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3894,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "13416:12:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "13399:29:18"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3910,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3896,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3891,
																"src": "13449:6:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3905,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3898,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3885,
																						"src": "13476:8:18",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$3016",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$3016",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3897,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4058,
																					"src": "13459:16:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$3016_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3899,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "13459:26:18",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3904,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3902,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3130",
																						"id": 3900,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "13489:2:18",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_10_by_1",
																							"typeString": "int_const 10"
																						},
																						"value": "10"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "**",
																					"rightExpression": {
																						"id": 3901,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3891,
																						"src": "13495:6:18",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "13489:12:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3903,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3882,
																					"src": "13504:5:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "13489:20:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "13459:50:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3907,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13516:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3908,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "13459:58:18",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3906,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13512:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3909,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "13458:60:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "13449:69:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3889,
														"id": 3911,
														"nodeType": "Return",
														"src": "13442:76:18"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3880,
										"nodeType": "StructuredDocumentation",
										"src": "13136:143:18",
										"text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3914,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "13293:5:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3886,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3882,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "13307:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 3914,
												"src": "13299:13:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3881,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13299:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3885,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "13323:8:18",
												"nodeType": "VariableDeclaration",
												"scope": 3914,
												"src": "13314:17:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$3016",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3884,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3883,
														"name": "Rounding",
														"nameLocations": [
															"13314:8:18"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3016,
														"src": "13314:8:18"
													},
													"referencedDeclaration": 3016,
													"src": "13314:8:18",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$3016",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13298:34:18"
									},
									"returnParameters": {
										"id": 3889,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3888,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3914,
												"src": "13356:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3887,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13356:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13355:9:18"
									},
									"scope": 4059,
									"src": "13284:251:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 4000,
										"nodeType": "Block",
										"src": "13855:600:18",
										"statements": [
											{
												"assignments": [
													3923
												],
												"declarations": [
													{
														"constant": false,
														"id": 3923,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "13873:6:18",
														"nodeType": "VariableDeclaration",
														"scope": 4000,
														"src": "13865:14:18",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3922,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "13865:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3925,
												"initialValue": {
													"hexValue": "30",
													"id": 3924,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "13882:1:18",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13865:18:18"
											},
											{
												"id": 3997,
												"nodeType": "UncheckedBlock",
												"src": "13893:533:18",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3930,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3928,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3926,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3917,
																	"src": "13921:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 3927,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13930:3:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "13921:12:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3929,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13936:1:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "13921:16:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3940,
														"nodeType": "IfStatement",
														"src": "13917:98:18",
														"trueBody": {
															"id": 3939,
															"nodeType": "Block",
															"src": "13939:76:18",
															"statements": [
																{
																	"expression": {
																		"id": 3933,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3931,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3917,
																			"src": "13957:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 3932,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13967:3:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "13957:13:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3934,
																	"nodeType": "ExpressionStatement",
																	"src": "13957:13:18"
																},
																{
																	"expression": {
																		"id": 3937,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3935,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3923,
																			"src": "13988:6:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3936,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13998:2:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "13988:12:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3938,
																	"nodeType": "ExpressionStatement",
																	"src": "13988:12:18"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3945,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3943,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3941,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3917,
																	"src": "14032:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3942,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14041:2:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "14032:11:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3944,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14046:1:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14032:15:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3955,
														"nodeType": "IfStatement",
														"src": "14028:95:18",
														"trueBody": {
															"id": 3954,
															"nodeType": "Block",
															"src": "14049:74:18",
															"statements": [
																{
																	"expression": {
																		"id": 3948,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3946,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3917,
																			"src": "14067:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3947,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14077:2:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "14067:12:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3949,
																	"nodeType": "ExpressionStatement",
																	"src": "14067:12:18"
																},
																{
																	"expression": {
																		"id": 3952,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3950,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3923,
																			"src": "14097:6:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3951,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14107:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "14097:11:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3953,
																	"nodeType": "ExpressionStatement",
																	"src": "14097:11:18"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3960,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3958,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3956,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3917,
																	"src": "14140:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3957,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14149:2:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "14140:11:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3959,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14154:1:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14140:15:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3970,
														"nodeType": "IfStatement",
														"src": "14136:95:18",
														"trueBody": {
															"id": 3969,
															"nodeType": "Block",
															"src": "14157:74:18",
															"statements": [
																{
																	"expression": {
																		"id": 3963,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3961,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3917,
																			"src": "14175:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3962,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14185:2:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "14175:12:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3964,
																	"nodeType": "ExpressionStatement",
																	"src": "14175:12:18"
																},
																{
																	"expression": {
																		"id": 3967,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3965,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3923,
																			"src": "14205:6:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3966,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14215:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "14205:11:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3968,
																	"nodeType": "ExpressionStatement",
																	"src": "14205:11:18"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3975,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3973,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3971,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3917,
																	"src": "14248:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3972,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14257:2:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "14248:11:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3974,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14262:1:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14248:15:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3985,
														"nodeType": "IfStatement",
														"src": "14244:95:18",
														"trueBody": {
															"id": 3984,
															"nodeType": "Block",
															"src": "14265:74:18",
															"statements": [
																{
																	"expression": {
																		"id": 3978,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3976,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3917,
																			"src": "14283:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3977,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14293:2:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "14283:12:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3979,
																	"nodeType": "ExpressionStatement",
																	"src": "14283:12:18"
																},
																{
																	"expression": {
																		"id": 3982,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3980,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3923,
																			"src": "14313:6:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3981,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14323:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "14313:11:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3983,
																	"nodeType": "ExpressionStatement",
																	"src": "14313:11:18"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3990,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3988,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3986,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3917,
																	"src": "14356:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3987,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14365:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "14356:10:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3989,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14369:1:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14356:14:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3996,
														"nodeType": "IfStatement",
														"src": "14352:64:18",
														"trueBody": {
															"id": 3995,
															"nodeType": "Block",
															"src": "14372:44:18",
															"statements": [
																{
																	"expression": {
																		"id": 3993,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3991,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3923,
																			"src": "14390:6:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3992,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14400:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "14390:11:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3994,
																	"nodeType": "ExpressionStatement",
																	"src": "14390:11:18"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3998,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3923,
													"src": "14442:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3921,
												"id": 3999,
												"nodeType": "Return",
												"src": "14435:13:18"
											}
										]
									},
									"documentation": {
										"id": 3915,
										"nodeType": "StructuredDocumentation",
										"src": "13541:246:18",
										"text": " @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."
									},
									"id": 4001,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "13801:6:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3918,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3917,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "13816:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 4001,
												"src": "13808:13:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3916,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13808:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13807:15:18"
									},
									"returnParameters": {
										"id": 3921,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3920,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 4001,
												"src": "13846:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3919,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13846:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13845:9:18"
									},
									"scope": 4059,
									"src": "13792:663:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 4038,
										"nodeType": "Block",
										"src": "14692:177:18",
										"statements": [
											{
												"id": 4037,
												"nodeType": "UncheckedBlock",
												"src": "14702:161:18",
												"statements": [
													{
														"assignments": [
															4013
														],
														"declarations": [
															{
																"constant": false,
																"id": 4013,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "14734:6:18",
																"nodeType": "VariableDeclaration",
																"scope": 4037,
																"src": "14726:14:18",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 4012,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "14726:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 4017,
														"initialValue": {
															"arguments": [
																{
																	"id": 4015,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4004,
																	"src": "14750:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 4014,
																"name": "log256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4001,
																	4039
																],
																"referencedDeclaration": 4001,
																"src": "14743:6:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 4016,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "14743:13:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "14726:30:18"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4035,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 4018,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4013,
																"src": "14777:6:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 4030,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 4020,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4007,
																						"src": "14804:8:18",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$3016",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$3016",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 4019,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4058,
																					"src": "14787:16:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$3016_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 4021,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "14787:26:18",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 4029,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 4027,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 4022,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "14817:1:18",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 4025,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 4023,
																									"name": "result",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 4013,
																									"src": "14823:6:18",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "<<",
																								"rightExpression": {
																									"hexValue": "33",
																									"id": 4024,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "14833:1:18",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_3_by_1",
																										"typeString": "int_const 3"
																									},
																									"value": "3"
																								},
																								"src": "14823:11:18",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 4026,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "14822:13:18",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "14817:18:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 4028,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4004,
																					"src": "14838:5:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "14817:26:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "14787:56:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 4032,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14850:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 4033,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "14787:64:18",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 4031,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14846:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 4034,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "14786:66:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "14777:75:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 4011,
														"id": 4036,
														"nodeType": "Return",
														"src": "14770:82:18"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 4002,
										"nodeType": "StructuredDocumentation",
										"src": "14461:144:18",
										"text": " @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 4039,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "14619:6:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4008,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4004,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "14634:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 4039,
												"src": "14626:13:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4003,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14626:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4007,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "14650:8:18",
												"nodeType": "VariableDeclaration",
												"scope": 4039,
												"src": "14641:17:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$3016",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 4006,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 4005,
														"name": "Rounding",
														"nameLocations": [
															"14641:8:18"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3016,
														"src": "14641:8:18"
													},
													"referencedDeclaration": 3016,
													"src": "14641:8:18",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$3016",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14625:34:18"
									},
									"returnParameters": {
										"id": 4011,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4010,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 4039,
												"src": "14683:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4009,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14683:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14682:9:18"
									},
									"scope": 4059,
									"src": "14610:259:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 4057,
										"nodeType": "Block",
										"src": "15067:48:18",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 4055,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"id": 4053,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 4050,
																	"name": "rounding",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4043,
																	"src": "15090:8:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_Rounding_$3016",
																		"typeString": "enum Math.Rounding"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_enum$_Rounding_$3016",
																		"typeString": "enum Math.Rounding"
																	}
																],
																"id": 4049,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "15084:5:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint8_$",
																	"typeString": "type(uint8)"
																},
																"typeName": {
																	"id": 4048,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "15084:5:18",
																	"typeDescriptions": {}
																}
															},
															"id": 4051,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "15084:15:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "%",
														"rightExpression": {
															"hexValue": "32",
															"id": 4052,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "15102:1:18",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "15084:19:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "31",
														"id": 4054,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "15107:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "15084:24:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 4047,
												"id": 4056,
												"nodeType": "Return",
												"src": "15077:31:18"
											}
										]
									},
									"documentation": {
										"id": 4040,
										"nodeType": "StructuredDocumentation",
										"src": "14875:113:18",
										"text": " @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."
									},
									"id": 4058,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "unsignedRoundsUp",
									"nameLocation": "15002:16:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4044,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4043,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "15028:8:18",
												"nodeType": "VariableDeclaration",
												"scope": 4058,
												"src": "15019:17:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$3016",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 4042,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 4041,
														"name": "Rounding",
														"nameLocations": [
															"15019:8:18"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3016,
														"src": "15019:8:18"
													},
													"referencedDeclaration": 3016,
													"src": "15019:8:18",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$3016",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15018:19:18"
									},
									"returnParameters": {
										"id": 4047,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4046,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 4058,
												"src": "15061:4:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 4045,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "15061:4:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15060:6:18"
									},
									"scope": 4059,
									"src": "14993:122:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 4060,
							"src": "203:14914:18",
							"usedErrors": [
								3011
							],
							"usedEvents": []
						}
					],
					"src": "103:15015:18"
				},
				"id": 18
			},
			"@openzeppelin/contracts/utils/math/SignedMath.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/SignedMath.sol",
					"exportedSymbols": {
						"SignedMath": [
							4164
						]
					},
					"id": 4165,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 4061,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "109:24:19"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SignedMath",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 4062,
								"nodeType": "StructuredDocumentation",
								"src": "135:80:19",
								"text": " @dev Standard signed math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 4164,
							"linearizedBaseContracts": [
								4164
							],
							"name": "SignedMath",
							"nameLocation": "224:10:19",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 4079,
										"nodeType": "Block",
										"src": "376:37:19",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 4074,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4072,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4065,
															"src": "393:1:19",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 4073,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4067,
															"src": "397:1:19",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"src": "393:5:19",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 4076,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4067,
														"src": "405:1:19",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 4077,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "393:13:19",
													"trueExpression": {
														"id": 4075,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4065,
														"src": "401:1:19",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 4071,
												"id": 4078,
												"nodeType": "Return",
												"src": "386:20:19"
											}
										]
									},
									"documentation": {
										"id": 4063,
										"nodeType": "StructuredDocumentation",
										"src": "241:66:19",
										"text": " @dev Returns the largest of two signed numbers."
									},
									"id": 4080,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "321:3:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4068,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4065,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "332:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 4080,
												"src": "325:8:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 4064,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "325:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4067,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "342:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 4080,
												"src": "335:8:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 4066,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "335:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "324:20:19"
									},
									"returnParameters": {
										"id": 4071,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4070,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 4080,
												"src": "368:6:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 4069,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "368:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "367:8:19"
									},
									"scope": 4164,
									"src": "312:101:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 4097,
										"nodeType": "Block",
										"src": "555:37:19",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 4092,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4090,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4083,
															"src": "572:1:19",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 4091,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4085,
															"src": "576:1:19",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"src": "572:5:19",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 4094,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4085,
														"src": "584:1:19",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 4095,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "572:13:19",
													"trueExpression": {
														"id": 4093,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4083,
														"src": "580:1:19",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 4089,
												"id": 4096,
												"nodeType": "Return",
												"src": "565:20:19"
											}
										]
									},
									"documentation": {
										"id": 4081,
										"nodeType": "StructuredDocumentation",
										"src": "419:67:19",
										"text": " @dev Returns the smallest of two signed numbers."
									},
									"id": 4098,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "500:3:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4086,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4083,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "511:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 4098,
												"src": "504:8:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 4082,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "504:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4085,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "521:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 4098,
												"src": "514:8:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 4084,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "514:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "503:20:19"
									},
									"returnParameters": {
										"id": 4089,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4088,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 4098,
												"src": "547:6:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 4087,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "547:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "546:8:19"
									},
									"scope": 4164,
									"src": "491:101:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 4141,
										"nodeType": "Block",
										"src": "797:162:19",
										"statements": [
											{
												"assignments": [
													4109
												],
												"declarations": [
													{
														"constant": false,
														"id": 4109,
														"mutability": "mutable",
														"name": "x",
														"nameLocation": "866:1:19",
														"nodeType": "VariableDeclaration",
														"scope": 4141,
														"src": "859:8:19",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 4108,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "859:6:19",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4122,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 4121,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 4112,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 4110,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4101,
																	"src": "871:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 4111,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4103,
																	"src": "875:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "871:5:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 4113,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "870:7:19",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 4119,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			},
																			"id": 4116,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 4114,
																				"name": "a",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4101,
																				"src": "882:1:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "^",
																			"rightExpression": {
																				"id": 4115,
																				"name": "b",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4103,
																				"src": "886:1:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "882:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 4117,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "881:7:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 4118,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "892:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "881:12:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 4120,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "880:14:19",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "870:24:19",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "859:35:19"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 4139,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 4123,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4109,
														"src": "911:1:19",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 4137,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 4131,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 4128,
																						"name": "x",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4109,
																						"src": "931:1:19",
																						"typeDescriptions": {
																							"typeIdentifier": "t_int256",
																							"typeString": "int256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_int256",
																							"typeString": "int256"
																						}
																					],
																					"id": 4127,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "923:7:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 4126,
																						"name": "uint256",
																						"nodeType": "ElementaryTypeName",
																						"src": "923:7:19",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 4129,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "923:10:19",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">>",
																			"rightExpression": {
																				"hexValue": "323535",
																				"id": 4130,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "937:3:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_255_by_1",
																					"typeString": "int_const 255"
																				},
																				"value": "255"
																			},
																			"src": "923:17:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 4125,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "916:6:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 4124,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "916:6:19",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 4132,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "916:25:19",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			},
																			"id": 4135,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 4133,
																				"name": "a",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4101,
																				"src": "945:1:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "^",
																			"rightExpression": {
																				"id": 4134,
																				"name": "b",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4103,
																				"src": "949:1:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "945:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 4136,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "944:7:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "916:35:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 4138,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "915:37:19",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "911:41:19",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 4107,
												"id": 4140,
												"nodeType": "Return",
												"src": "904:48:19"
											}
										]
									},
									"documentation": {
										"id": 4099,
										"nodeType": "StructuredDocumentation",
										"src": "598:126:19",
										"text": " @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."
									},
									"id": 4142,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "738:7:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4104,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4101,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "753:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 4142,
												"src": "746:8:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 4100,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "746:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4103,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "763:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 4142,
												"src": "756:8:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 4102,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "756:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "745:20:19"
									},
									"returnParameters": {
										"id": 4107,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4106,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 4142,
												"src": "789:6:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 4105,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "789:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "788:8:19"
									},
									"scope": 4164,
									"src": "729:230:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 4162,
										"nodeType": "Block",
										"src": "1103:158:19",
										"statements": [
											{
												"id": 4161,
												"nodeType": "UncheckedBlock",
												"src": "1113:142:19",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 4154,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4152,
																			"name": "n",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4145,
																			"src": "1228:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 4153,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1233:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1228:6:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseExpression": {
																		"id": 4157,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "-",
																		"prefix": true,
																		"src": "1241:2:19",
																		"subExpression": {
																			"id": 4156,
																			"name": "n",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4145,
																			"src": "1242:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"id": 4158,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "Conditional",
																	"src": "1228:15:19",
																	"trueExpression": {
																		"id": 4155,
																		"name": "n",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4145,
																		"src": "1237:1:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																],
																"id": 4151,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1220:7:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 4150,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1220:7:19",
																	"typeDescriptions": {}
																}
															},
															"id": 4159,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1220:24:19",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 4149,
														"id": 4160,
														"nodeType": "Return",
														"src": "1213:31:19"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 4143,
										"nodeType": "StructuredDocumentation",
										"src": "965:78:19",
										"text": " @dev Returns the absolute unsigned value of a signed value."
									},
									"id": 4163,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "abs",
									"nameLocation": "1057:3:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4145,
												"mutability": "mutable",
												"name": "n",
												"nameLocation": "1068:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 4163,
												"src": "1061:8:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 4144,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1061:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1060:10:19"
									},
									"returnParameters": {
										"id": 4149,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4148,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 4163,
												"src": "1094:7:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4147,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1094:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1093:9:19"
									},
									"scope": 4164,
									"src": "1048:213:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 4165,
							"src": "216:1047:19",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "109:1155:19"
				},
				"id": 19
			},
			"contracts/MyToken.sol": {
				"ast": {
					"absolutePath": "contracts/MyToken.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							1395
						],
						"ECDSA": [
							2931
						],
						"EIP712Upgradeable": [
							2026
						],
						"ERC20BurnableUpgradeable": [
							1127
						],
						"ERC20PausableUpgradeable": [
							1180
						],
						"ERC20PermitUpgradeable": [
							1349
						],
						"ERC20Upgradeable": [
							1065
						],
						"IERC20": [
							2266
						],
						"IERC20Errors": [
							2093
						],
						"IERC20Metadata": [
							2292
						],
						"IERC20Permit": [
							2328
						],
						"Initializable": [
							448
						],
						"MyToken": [
							4274
						],
						"NoncesUpgradeable": [
							1506
						],
						"OwnableUpgradeable": [
							194
						],
						"PausableUpgradeable": [
							1682
						]
					},
					"id": 4275,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 4166,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:20"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
							"id": 4167,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 4275,
							"sourceUnit": 1066,
							"src": "58:78:20",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol",
							"id": 4168,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 4275,
							"sourceUnit": 1128,
							"src": "137:97:20",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol",
							"id": 4169,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 4275,
							"sourceUnit": 1181,
							"src": "235:97:20",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
							"id": 4170,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 4275,
							"sourceUnit": 195,
							"src": "333:75:20",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol",
							"id": 4171,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 4275,
							"sourceUnit": 1350,
							"src": "409:95:20",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"id": 4172,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 4275,
							"sourceUnit": 449,
							"src": "505:75:20",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 4173,
										"name": "Initializable",
										"nameLocations": [
											"602:13:20"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 448,
										"src": "602:13:20"
									},
									"id": 4174,
									"nodeType": "InheritanceSpecifier",
									"src": "602:13:20"
								},
								{
									"baseName": {
										"id": 4175,
										"name": "ERC20Upgradeable",
										"nameLocations": [
											"617:16:20"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1065,
										"src": "617:16:20"
									},
									"id": 4176,
									"nodeType": "InheritanceSpecifier",
									"src": "617:16:20"
								},
								{
									"baseName": {
										"id": 4177,
										"name": "ERC20BurnableUpgradeable",
										"nameLocations": [
											"635:24:20"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1127,
										"src": "635:24:20"
									},
									"id": 4178,
									"nodeType": "InheritanceSpecifier",
									"src": "635:24:20"
								},
								{
									"baseName": {
										"id": 4179,
										"name": "ERC20PausableUpgradeable",
										"nameLocations": [
											"661:24:20"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1180,
										"src": "661:24:20"
									},
									"id": 4180,
									"nodeType": "InheritanceSpecifier",
									"src": "661:24:20"
								},
								{
									"baseName": {
										"id": 4181,
										"name": "OwnableUpgradeable",
										"nameLocations": [
											"687:18:20"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 194,
										"src": "687:18:20"
									},
									"id": 4182,
									"nodeType": "InheritanceSpecifier",
									"src": "687:18:20"
								},
								{
									"baseName": {
										"id": 4183,
										"name": "ERC20PermitUpgradeable",
										"nameLocations": [
											"707:22:20"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1349,
										"src": "707:22:20"
									},
									"id": 4184,
									"nodeType": "InheritanceSpecifier",
									"src": "707:22:20"
								}
							],
							"canonicalName": "MyToken",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 4274,
							"linearizedBaseContracts": [
								4274,
								1349,
								1506,
								2026,
								2051,
								2328,
								194,
								1180,
								1682,
								1127,
								1065,
								2093,
								2292,
								2266,
								1395,
								448
							],
							"name": "MyToken",
							"nameLocation": "591:7:20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 4191,
										"nodeType": "Block",
										"src": "803:39:20",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 4188,
														"name": "_disableInitializers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 416,
														"src": "813:20:20",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 4189,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "813:22:20",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 4190,
												"nodeType": "ExpressionStatement",
												"src": "813:22:20"
											}
										]
									},
									"documentation": {
										"id": 4185,
										"nodeType": "StructuredDocumentation",
										"src": "736:48:20",
										"text": "@custom:oz-upgrades-unsafe-allow constructor"
									},
									"id": 4192,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4186,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "800:2:20"
									},
									"returnParameters": {
										"id": 4187,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "803:0:20"
									},
									"scope": 4274,
									"src": "789:53:20",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 4218,
										"nodeType": "Block",
										"src": "909:198:20",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"hexValue": "3432544f4b454e495a4552",
															"id": 4200,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "932:13:20",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f94f5c5bb27a59ea195ea05f5fd088b06ebeda08a4d5755a225c84120e0857ae",
																"typeString": "literal_string \"42TOKENIZER\""
															},
															"value": "42TOKENIZER"
														},
														{
															"hexValue": "3432544f4b",
															"id": 4201,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "947:7:20",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7aa8959479744147ad4ba10f54df484269417a33897edc8c2d7fd0076cda2354",
																"typeString": "literal_string \"42TOK\""
															},
															"value": "42TOK"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_f94f5c5bb27a59ea195ea05f5fd088b06ebeda08a4d5755a225c84120e0857ae",
																"typeString": "literal_string \"42TOKENIZER\""
															},
															{
																"typeIdentifier": "t_stringliteral_7aa8959479744147ad4ba10f54df484269417a33897edc8c2d7fd0076cda2354",
																"typeString": "literal_string \"42TOK\""
															}
														],
														"id": 4199,
														"name": "__ERC20_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 516,
														"src": "919:12:20",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory,string memory)"
														}
													},
													"id": 4202,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "919:36:20",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 4203,
												"nodeType": "ExpressionStatement",
												"src": "919:36:20"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 4204,
														"name": "__ERC20Burnable_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1086,
														"src": "965:20:20",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 4205,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "965:22:20",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 4206,
												"nodeType": "ExpressionStatement",
												"src": "965:22:20"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 4207,
														"name": "__ERC20Pausable_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1151,
														"src": "997:20:20",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 4208,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "997:22:20",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 4209,
												"nodeType": "ExpressionStatement",
												"src": "997:22:20"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 4211,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4194,
															"src": "1044:12:20",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 4210,
														"name": "__Ownable_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 54,
														"src": "1029:14:20",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 4212,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1029:28:20",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 4213,
												"nodeType": "ExpressionStatement",
												"src": "1029:28:20"
											},
											{
												"expression": {
													"arguments": [
														{
															"hexValue": "3432544f4b454e495a4552",
															"id": 4215,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1086:13:20",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f94f5c5bb27a59ea195ea05f5fd088b06ebeda08a4d5755a225c84120e0857ae",
																"typeString": "literal_string \"42TOKENIZER\""
															},
															"value": "42TOKENIZER"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_f94f5c5bb27a59ea195ea05f5fd088b06ebeda08a4d5755a225c84120e0857ae",
																"typeString": "literal_string \"42TOKENIZER\""
															}
														],
														"id": 4214,
														"name": "__ERC20Permit_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1236,
														"src": "1067:18:20",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory)"
														}
													},
													"id": 4216,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1067:33:20",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 4217,
												"nodeType": "ExpressionStatement",
												"src": "1067:33:20"
											}
										]
									},
									"functionSelector": "c4d66de8",
									"id": 4219,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 4197,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 4196,
												"name": "initializer",
												"nameLocations": [
													"890:11:20"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 302,
												"src": "890:11:20"
											},
											"nodeType": "ModifierInvocation",
											"src": "890:11:20"
										}
									],
									"name": "initialize",
									"nameLocation": "857:10:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4195,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4194,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "876:12:20",
												"nodeType": "VariableDeclaration",
												"scope": 4219,
												"src": "868:20:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4193,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "868:7:20",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "867:22:20"
									},
									"returnParameters": {
										"id": 4198,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "909:0:20"
									},
									"scope": 4274,
									"src": "848:259:20",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 4227,
										"nodeType": "Block",
										"src": "1147:25:20",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 4224,
														"name": "_pause",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1657,
														"src": "1157:6:20",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 4225,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1157:8:20",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 4226,
												"nodeType": "ExpressionStatement",
												"src": "1157:8:20"
											}
										]
									},
									"functionSelector": "8456cb59",
									"id": 4228,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 4222,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 4221,
												"name": "onlyOwner",
												"nameLocations": [
													"1137:9:20"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 89,
												"src": "1137:9:20"
											},
											"nodeType": "ModifierInvocation",
											"src": "1137:9:20"
										}
									],
									"name": "pause",
									"nameLocation": "1122:5:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4220,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1127:2:20"
									},
									"returnParameters": {
										"id": 4223,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1147:0:20"
									},
									"scope": 4274,
									"src": "1113:59:20",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 4236,
										"nodeType": "Block",
										"src": "1214:27:20",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 4233,
														"name": "_unpause",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1681,
														"src": "1224:8:20",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 4234,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1224:10:20",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 4235,
												"nodeType": "ExpressionStatement",
												"src": "1224:10:20"
											}
										]
									},
									"functionSelector": "3f4ba83a",
									"id": 4237,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 4231,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 4230,
												"name": "onlyOwner",
												"nameLocations": [
													"1204:9:20"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 89,
												"src": "1204:9:20"
											},
											"nodeType": "ModifierInvocation",
											"src": "1204:9:20"
										}
									],
									"name": "unpause",
									"nameLocation": "1187:7:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4229,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1194:2:20"
									},
									"returnParameters": {
										"id": 4232,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1214:0:20"
									},
									"scope": 4274,
									"src": "1178:63:20",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 4251,
										"nodeType": "Block",
										"src": "1306:34:20",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 4247,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4239,
															"src": "1322:2:20",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 4248,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4241,
															"src": "1326:6:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 4246,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 897,
														"src": "1316:5:20",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 4249,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1316:17:20",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 4250,
												"nodeType": "ExpressionStatement",
												"src": "1316:17:20"
											}
										]
									},
									"functionSelector": "40c10f19",
									"id": 4252,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 4244,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 4243,
												"name": "onlyOwner",
												"nameLocations": [
													"1296:9:20"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 89,
												"src": "1296:9:20"
											},
											"nodeType": "ModifierInvocation",
											"src": "1296:9:20"
										}
									],
									"name": "mint",
									"nameLocation": "1256:4:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4242,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4239,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1269:2:20",
												"nodeType": "VariableDeclaration",
												"scope": 4252,
												"src": "1261:10:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4238,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1261:7:20",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4241,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1281:6:20",
												"nodeType": "VariableDeclaration",
												"scope": 4252,
												"src": "1273:14:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4240,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1273:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1260:28:20"
									},
									"returnParameters": {
										"id": 4245,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1306:0:20"
									},
									"scope": 4274,
									"src": "1247:93:20",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										864,
										1179
									],
									"body": {
										"id": 4272,
										"nodeType": "Block",
										"src": "1554:47:20",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 4267,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4254,
															"src": "1578:4:20",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 4268,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4256,
															"src": "1584:2:20",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 4269,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4258,
															"src": "1588:5:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 4264,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "1564:5:20",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_MyToken_$4274_$",
																"typeString": "type(contract super MyToken)"
															}
														},
														"id": 4266,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1570:7:20",
														"memberName": "_update",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1179,
														"src": "1564:13:20",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 4270,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1564:30:20",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 4271,
												"nodeType": "ExpressionStatement",
												"src": "1564:30:20"
											}
										]
									},
									"id": 4273,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_update",
									"nameLocation": "1423:7:20",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 4262,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 4260,
												"name": "ERC20Upgradeable",
												"nameLocations": [
													"1506:16:20"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1065,
												"src": "1506:16:20"
											},
											{
												"id": 4261,
												"name": "ERC20PausableUpgradeable",
												"nameLocations": [
													"1524:24:20"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1180,
												"src": "1524:24:20"
											}
										],
										"src": "1497:52:20"
									},
									"parameters": {
										"id": 4259,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4254,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1439:4:20",
												"nodeType": "VariableDeclaration",
												"scope": 4273,
												"src": "1431:12:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4253,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1431:7:20",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4256,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1453:2:20",
												"nodeType": "VariableDeclaration",
												"scope": 4273,
												"src": "1445:10:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4255,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1445:7:20",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4258,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1465:5:20",
												"nodeType": "VariableDeclaration",
												"scope": 4273,
												"src": "1457:13:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4257,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1457:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1430:41:20"
									},
									"returnParameters": {
										"id": 4263,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1554:0:20"
									},
									"scope": 4274,
									"src": "1414:187:20",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 4275,
							"src": "582:1021:20",
							"usedErrors": [
								30,
								35,
								211,
								214,
								1215,
								1222,
								1409,
								1545,
								1548,
								2063,
								2068,
								2073,
								2082,
								2087,
								2092,
								2594,
								2599,
								2604
							],
							"usedEvents": [
								41,
								219,
								1537,
								1542,
								2031,
								2200,
								2209
							]
						}
					],
					"src": "32:1572:20"
				},
				"id": 20
			}
		}
	}
}